{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to Lily's Notebook!","text":""},{"location":"#about-me","title":"About me","text":""},{"location":"#my-github","title":"My GitHub","text":""},{"location":"#my-gmail-and-my-zju-email","title":"My Gmail   and My ZJU Email","text":""},{"location":"#_1","title":"Welcome to Lily's Notebook!","text":""},{"location":"invisible/","title":"Invisible","text":"<p>\\(\\hspace{1cm}\\) \u4eca\u5929\u65e9\u4e0a\u8d77\u6765\uff0c\u5929\u7a7a\u7070\u9eef\u9eef\u7684\uff0c\u5f53\u7136\uff0c\u65f6\u65f6\u662f\u8fd9\u6837\uff0c\u4e5f\u6b63\u662f\u8fd9\u6837\uff0c\u624d\u65f6\u65f6\u662f\u5371\u9669\u7684\u3002</p> <p>\\(\\hspace{1cm}\\) \u6211\u68b3\u4e86\u4e00\u4e2a\u9a6c\u5c3e\u8fab\u3002</p> <p>\\(\\hspace{1cm}\\) \u6253\u5f00\u7535\u89c6\uff0c\u55e1\u55e1\u7684\u58f0\u97f3\u50cf\u662f\u4e00\u4e0b\u4ece\u8fdc\u65b9\u62bd\u5438\u8fdb\u6765\uff0c\u6a21\u7cca\u51fa\u4e00\u7247\u6e05\u6f88\u3002\u201c\u6839\u636e\u8fd1\u4e9b\u5e74\u6765\u79d1\u5b66\u5bb6\u7814\u7a76\u7edf\u8ba1\uff0c\u5168\u7403\u660e\u7ea4\u5269\u4f59\u91cf\u5927\u7ea6\u4e3a0.03\u6839/\u5e73\u65b9\u5343\u7c73\uff0c\u5168\u7403\u5404\u56fd\u5fd7\u613f\u8005\u4e5f\u90fd\u5728\u4e3a\u626b\u9664\u660e\u7ea4\u5949\u732e\u7740\u9c9c\u8840\u548c\u6c57\u6c34\uff0c\u636e\u4f30\u8ba1\uff0c\u4ee5\u76ee\u524d\u8fdb\u7a0b\u5168\u7403\u57fa\u672c\u4e0a\u53ef\u4ee5\u5728X\u5e74\u57fa\u672c\u5f7b\u5e95\u6e05\u9664\u660e\u7ea4\u3002\u7136\u800c\u4e13\u5bb6\u4ecd\u7136\u5efa\u8bae\u5e7f\u5927\u7fa4\u4f17\u5728\u6b63\u5e38\u751f\u6d3b\u4e4b\u4f59\u505a\u597d\u660e\u7ea4\u65e5\u5e38\u9632\u62a4\u3002\u4e0b\u9762\u64ad\u653e\u51e0\u4e2a\u660e\u7ea4\u9632\u62a4\u65e5\u5e38\u8d34\u58eb\uff1a1.\u65e5\u5e38\u5e94\u8be5\u4fdd\u6301\u653e\u677e\u5fc3\u6001\uff0c\u4e0d\u8981\u8fc7\u4e8e\u7126\u8651\u660e\u7ea4\u95ee\u9898\u2026\u2026\u201d</p> <p>\\(\\hspace{1cm}\\) \u8001\u751f\u5e38\u8c08\uff0c\u6211\u6362\u4e86\u53f0\u3002</p> <p>\\(\\hspace{1cm}\\) \u201c\u636e\u672c\u53f0\u8bb0\u8005\u62a5\u9053\uff0c\u672c\u5e02\u4e8e\u6628\u65e5\u53d1\u751f\u4e00\u8d77\u2018\u62a2\u53d1\u6848\u2019 \uff0c\u53d7\u5bb3\u4ebaX\u5148\u751f\u88ab\u952f\u65ad\u8fd120cm\u5934\u53d1\uff0c\u5e02\u503c\u4f30\u8ba1\u572820000\u5143\u5de6\u53f3\uff0c\u73b0\u6b63\u7d27\u6025\u8c03\u67e5\u6d89\u5acc\u4eba\u5458\uff0c\u8bf7\u5e7f\u5927\u5e02\u6c11\u6ce8\u610f\u597d\u81ea\u8eab\u5b89\u5168\u4fdd\u62a4\u2026\u2026\u201d</p> <p>\\(\\hspace{1cm}\\) \u6211\u4e0d\u7531\u5f97\u6478\u4e86\u6478\u81ea\u5df1\u7684\u5934\u53d1\uff1a\u6211\u5f88\u559c\u6b22\u6211\u7684\u5934\u53d1\uff0c\u9ed1\u9ed1\u7684\uff0c\u4eae\u4eae\u7684\uff0c\u67d4\u987a\u7684\uff0c\u5e02\u4ef7\u5e94\u8be5\u5f88\u9ad8\uff0c\u6240\u4ee5\u6211\u4e00\u76f4\u6ca1\u6709\u5f88\u52aa\u529b\u5de5\u4f5c\uff0c\u5b9e\u5728\u4e0d\u884c\u4e86\uff0c\u6211\u5c31\u53bb\u628a\u5934\u53d1\u5356\u4e86\uff0c\u6211\u4e5f\u4e0d\u6015\u6b7b\uff0c\u4f46\u6211\u70ed\u7231\u751f\u6d3b\u3002</p> <p>\\(\\hspace{1cm}\\) \u81f3\u4e8e\u4e3a\u4ec0\u4e48\u73b0\u5728\u5934\u53d1\uff0c\u6216\u8005\u8bf4\u9ad8\u8d28\u91cf\u5047\u53d1\uff0c\u7adf\u7136\u4ef7\u683c\u5982\u6b64\u9ad8\u6602\uff0c\u662f\u4ece\u660e\u7ea4\u7684\u53d1\u73b0\u5f00\u59cb\u7684\u3002\u5927\u6982\u5728\u5341\u51e0\u5e74\u524d\uff0c\u5728Stephen\u5c0f\u9547\uff0c\u9065\u8fdc\u7684\u5317\u6b27\uff0c\u5728\u90a3\u7247\u5b81\u9759\uff0c\u6f2b\u957f\u4e0e\u5bd2\u51b7\u4e4b\u95f4\uff0c\u7a81\u7136\u6709\u4e86\u70ed\u8840\u6cb8\u817e\uff1a\u4e00\u4e2a\u4e0b\u5348\uff0c\u9633\u5149\u80fd\u6620\u51fa\u7a7a\u4e2d\u7684\u9648\u7c92\uff1b\u8857\u4e0a\uff0c\u884c\u4eba\u4e09\u4e24\uff1b\u7a81\u7136\u5c31\u6709\u4e86\u4e00\u9053\u8840\u5149\u3002\u5f53\u65f6\u8def\u4eba\u5927\u6982\u90fd\u60ca\u5446\u4e86\uff0c\u51bb\u5728\u90a3\u7247\u5bd2\u51b7\u7684\u8840\u8272\u91cc\u3002\u662f\u4e00\u4e2a\u884c\u4eba\uff0c\u4e00\u4e2a\u8001\u7237\u7237\uff0c\u5a46\u5a11\u7740\u80cc\uff0c\u6162\u6162\u5730\u8d70\u7740\uff0c\u7136\u540e\u7a81\u7136\u62e6\u8170\u65ad\u4e86\uff0c\u5012\u4e0b\uff0c\u5929\u8fb9\u4e00\u7247\u7ea2\u3002\u5728\u4e00\u6bb5\u53ef\u6016\u7684\u9759\u6b62\u548c\u6c89\u9ed8\u4e4b\u540e\uff0c\u6709\u4eba\u4e0a\u524d\u67e5\u770b\uff0c\u53c8\u5012\u4e0b\u4e86\u3002</p> <p>\\(\\hspace{1cm}\\) \u5bc2\u9759\u4e4b\u58f0\u3002</p> <p>\\(\\hspace{1cm}\\) \u540e\u6765\u7684\u540e\u6765\uff0c\u7ec8\u4e8e\u6709\u4eba\u53d1\u73b0\uff0c\u5728\u90a3\u5929\u707f\u70c2\u7684\u9633\u5149\u4e0b\uff0c\u90a3\u91cc\u98d8\u7740\u4e00\u6bb5\u5c0f\u5c0f\u7684\u7ea4\u7ef4\u72b6\u7684\u7ec6\u4e1d\uff0c\u5f88\u7ec6\uff0c\u80fd\u53d1\u73b0\u53ea\u662f\u56e0\u4e3a\u5728\u9633\u5149\u4e0b\u90a3\u7ec6\u4e1d\u6709\u4e9b\u5fae\u7684\u95ea\u70c1\u53d1\u5149,\u6240\u4ee5\uff0c\u5c31\u53eb\u505a\u660e\u7ea4\uff0c\u591a\u7f8e\u4e3d\u7684\u540d\u5b57\uff0c\u7ea4\u7ec6\u800c\u8106\u5f31\u3002</p> <p>\\(\\hspace{1cm}\\) \u6ca1\u6709\u4eba\u77e5\u9053\u660e\u7ea4\u662f\u54ea\u91cc\u6765\u7684\uff0c\u6709\u4eba\u8bf4\u662f\u4e00\u6b21\u9ad8\u7ea7\u6b66\u5668\u7684\u6ee5\u7528\uff0c\u67d0\u79cd\u5316\u5b66\u7269\u8d28\uff1b\u4e5f\u6709\u4eba\u8bf4\u662f\u67d0\u4e2a\u6050\u6016\u7ec4\u7ec7\u5455\u5c3d\u5fc3\u8840\u5728\u5168\u7403\u5e03\u7f6e\u4e0b\u51e0\u5904\u4ee5\u5f15\u8d77\u6050\u614c\u3002\u4e0d\u7ba1\u600e\u4e48\u6837\uff0c\u6050\u614c\u662f\u6709\u7684\uff1a\u636e\u76ee\u524d\u6240\u77e5\uff0c\u660e\u7ea4\u5206\u5e03\u4e0d\u5e7f\uff0c\u4f46\u6740\u4f24\u529b\u6781\u5927\u3002\u53d1\u73b0\u660e\u7ea4\u540e\uff0c\u4e5f\u53ea\u80fd\u5efa\u7acb\u7981\u884c\u533a\uff0c\u800c\u505a\u4e0d\u5230\u5f7b\u5e95\u7684\u201c\u6e05\u695a\u201d\u2014\u2014\u4e0d\u8fc7\u7528\u4ec0\u4e48\u60f3\u8981\u6e05\u695a\u660e\u7ea4\uff0c\u660e\u7ea4\u603b\u80fd\u5207\u65ad\uff0c\u4eba\u6216\u8005\u91d1\u5c5e\u3002</p> <p>\\(\\hspace{1cm}\\) \u636e\u8bf4\u88ab\u660e\u7ea4\u5207\u65ad\u7684\u4e00\u77ac\u95f4\u5e76\u6ca1\u6709\u4ec0\u4e48\u5177\u4f53\u611f\u53d7\uff0c\u5176\u5b9e\u8fd9\u662f\u4e00\u79cd\u63a8\u65ad\uff0c\u56e0\u4e3a\u5f88\u591a\u884c\u8fdb\u5f88\u6162\u7684\u4eba\uff0c\u5c31\u50cf\u7b2c\u4e00\u4f8b\u53d7\u5bb3\u8005\u8001\u7237\u7237\uff0c\u90fd\u6b7b\u4e8e\u8eaf\u4f53\u7684\u5b8c\u5168\u5206\u9694\u3002</p> <p>\\(\\hspace{1cm}\\) \u603b\u4e4b\uff0c\u5728\u90a3\u4e4b\u540e\uff0c\u4eba\u4eec\u90fd\u6709\u4e9b\u4e0d\u6562\u51fa\u95e8\u4e86\uff0c\u5728\u8857\u4e0a\u8d70\u4e5f\u5f88\u6162\u3002</p> <p>\\(\\hspace{1cm}\\) \u51e0\u5e74\u524d\u6709\u4e00\u4e2a\u5e78\u8fd0\u7684\u5973\u5b69\u5b50\u9047\u5230\u660e\u7ea4\u5374\u6beb\u53d1\u672a\u635f\u2014\u2014\u786e\u5207\u7684\u8bf4\uff0c\u53ea\u635f\u6beb\u53d1\uff1a\u5973\u5b69\u8d70\u8def\u65f6\u5f88\u7231\u7529\u5934\u53d1\uff0c\u53d1\u95f4\u5411\u5de6\u6643\u65f6\u4e00\u4e0b\u88ab\u5207\u65ad\u4e86\u4e00\u622a\uff0c\u98d8\u98d8\u6d12\u6d12\u3002\u540e\u6765\uff0c\u7537\u5b50\u4e5f\u5f00\u59cb\u84c4\u957f\u53d1\uff0c\u4f20\u8bf4\u4e2d\u6f02\u6d6e\u5ea6\u8303\u56f4\u5f88\u5e7f\u7684\u9ad8\u8d28\u91cf\u5047\u53d1\u4e5f\u5f00\u59cb\u5728\u5e02\u573a\u4e0a\u5d1b\u8d77\u4e86\u3002</p> <p>\\(\\hspace{1cm}\\) \u6211\u4e5f\u559c\u6b22\u8d70\u8def\u7684\u65f6\u5019\u9ad8\u9ad8\u5730\u7529\u5934\u53d1\uff0c\u6211\u89c9\u5f97\u771f\u5f88\u7f8e\uff0c\u5973\u5b69\u5b50\u7684\u9752\u6625\u7684\u7f8e\uff0c\u4e0d\u8fc7\uff0c\u4e5f\u8bb8\u662f\u56e0\u4e3a\u6211\u5728\u5fc3\u91cc\u7684\u4e00\u89d2\u6697\u81ea\u745f\u7f29\u5427\u3002</p> <p>\\(\\hspace{1cm}\\) \u601d\u7eea\u53c8\u548c\u7535\u89c6\u7684\u58f0\u97f3\u76f8\u9047\u4e86\u3002</p> <p>\\(\\hspace{1cm}\\) \u201c\u4e0b\u9762\u672c\u53f0\u4e3a\u60a8\u5e26\u6765\u5fd7\u613f\u6e05\u626b\u660e\u7ea4\u73b0\u573a\uff0c\u8ba9\u6211\u4eec\u4e3a\u5728\u573a\u7684\u6bcf\u4e00\u4f4d\u82f1\u96c4\u9f13\u638c\u559d\u5f69\uff01\u201d\u955c\u5934\u8f6c\u6362\uff0c\u4eba\u7fa4\u7199\u6518\uff0c\u6211\u770b\u89c1\u4e86\u5e74\u8f7b\u7684\u7537\u5973\uff0c\u4e2d\u5e74\u7684\u76b1\u7eb9\uff0c\u82b1\u767d\u7684\u5934\u53d1\uff0c\u4e73\u7259\uff0c\u9152\u7a9d\uff0c\u8033\u6d1e\u2026\u2026\u6240\u6709\u7684\u4e00\u5207\u90fd\u5728\u70ed\u70c8\u7684\u6c14\u6c1b\u4e2d\u6a21\u7cca\u6b86\u5c3d\uff0c\u8fd8\u6709\u9065\u9065\u7684\u70ed\u8840\u97f3\u4e50\u5728\u7a7a\u6c14\u4e2d\u6643\u8361\u3002</p> <p>\\(\\hspace{1cm}\\) \u5927\u6982\u662f\u5ba3\u5e03\u4e86\u5f00\u59cb\uff0c\u4eba\u7fa4\u52a8\u8d77\u6765\u4e86\uff0c\u8dd1\u8d77\u6765\u4e86\uff0c\u5374\u4e00\u76f4\u662f\u62e5\u6324\u7684\u53c8\u6a21\u7cca\u8d77\u6765\u4e86\u3002\u6211\u77e5\u9053\u4ed6\u4eec\u4e3a\u4ec0\u4e48\u5954\u8dd1\uff0c\u56e0\u4e3a\u636e\u8bf4\u5feb\u901f\u901a\u8fc7\u660e\u7ea4\u800c\u6b7b\u4ea1\u6ca1\u6709\u4efb\u4f55\u75db\u82e6\u3002\u6211\u4e5f\u77e5\u9053\u4ed6\u4eec\u4e3a\u4ec0\u4e48\u62e5\u6324\uff0c\u56e0\u4e3a\u53ea\u6709\u62e5\u5728\u4e00\u8d77\uff0c\u624d\u80fd\u4fdd\u8bc1\u7ecf\u8fc7\u7684\u6bcf\u4e00\u5904\u5730\u65b9\u90fd\u6ca1\u6709\u660e\u7ea4\u9003\u8fc7\u3002</p> <p>\\(\\hspace{1cm}\\) \u6211\u5374\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u662f\u4eba\u3002\u4e3a\u4ec0\u4e48\u4e0d\u662f\u8f66\u6216\u8005\u673a\u5668\u6216\u8005\u6280\u672f\u2026\u2026\u4e5f\u6709\u5f88\u591a\u8bf4\u6cd5\uff0c\u6709\u4eba\u8bf4\u660e\u7ea4\u5206\u5e03\u5b9e\u5728\u7a00\u5c11\u4e0d\u5fc5\u4e3a\u6b64\u6295\u5165\u592a\u591a\u7cbe\u529b\uff0c\u786e\u5b9e\uff0c\u6bcf\u5e74\u636e\u62a5\u9053\u5927\u6982\u53ea\u67092-3\u4f8b\u53d7\u5bb3\u8005\u3002\u4e5f\u6709\u4eba\u8bf4\u8fd9\u6837\u7684\u6d3b\u52a8\u4ece\u6765\u6ca1\u6709\u8fc7\u727a\u7272\uff0c\u8fd8\u53ef\u4ee5\u57f9\u517b\u7fa4\u4f17\u7684\u56e2\u7ed3\u5408\u4f5c\u80fd\u529b\uff0c\u8fd8\u6709\u4eba\u8bf4\u8fd9\u662f\u4e2a\u9634\u8c0b\u8bba\u3002</p> <p>\\(\\hspace{1cm}\\) \u8fd8\u662f\u4e0d\u7ba1\u600e\u6837\uff0c\u603b\u6709\u5730\u65b9\u5728\u62db\u52df\u5fd7\u613f\u8005\uff0c\u4e5f\u603b\u6709\u8fd9\u6837\u7684\u5e74\u8f7b\u7f8e\u4e3d\uff0c\u70ed\u8840\u6f8e\u6e43\u7684\u5fd7\u613f\u8005\u81ea\u544a\u594b\u52c7\u3002</p> <p>\\(\\hspace{1cm}\\) \u4e00\u9635\u6c89\u90c1\u7ffb\u6d8c\uff0c\u6211\u5173\u4e0a\u4e86\u7535\u89c6\u3002</p> <p>\\(\\hspace{1cm}\\) \u6211\u6700\u6700\u4eb2\u7231\u7684\u8bfb\u8005\uff0c\u6211\u591a\u4e48\u96be\u5e0c\u671b\u548c\u4f60\u4eec\u4e00\u6837\u628a\u8fd9\u5f53\u6210\u4e00\u4e2a\u8981\u7231\u62a4\u5934\u53d1\u7684\u5c0f\u6545\u4e8b\uff0c\u53ef\u662f\u6211\u4e0d\u884c\uff0c\u6211\u9762\u5bf9\u7684\u4e0d\u662f\u865a\u7a7a\uff0c\u662f\u771f\u5b9e\u3002</p> <p>\\(\\hspace{1cm}\\) \u6574\u7406\u4e86\u4e0b\u5934\u53d1\uff0c\u6211\u51fa\u4e86\u5bb6\u95e8\uff0c\u62ac\u5934\uff0c\u53ea\u770b\u89c1\u90a3\u6c89\u6c89\u7684\u5929\u5728\u884c\u8272\u5306\u5306\u4e2d\u9759\u9ed8\u4e0d\u8a00\u3002</p>"},{"location":"%E5%A4%A7%E4%BE%A0/","title":"\u5927\u4fa0","text":"<p>\\(\\hspace{1cm}\\)\u5f88\u5c0f\u7684\u65f6\u5019\uff0c\u6211\u5c31\u77e5\u9053\uff0c\u6211\u4ee5\u540e\u8981\u505a\u4e00\u4ee3\u5927\u4fa0\uff0c\u884c\u8d70\u7eff\u6797\uff0c\u6d6a\u8361\u6c5f\u6e56\uff0c\u4e00\u8eab\u5251\u6c14\uff0c\u4e00\u8def\u6f47\u6d12\u3002</p> <p>\\(\\hspace{1cm}\\)\u6c5f\u6e56\u4e0a\u7684\u4e8b\u60c5\u6211\u4eec\u5927\u591a\u90fd\u6709\u8033\u95fb\uff1a\u8981\u6709\u6b66\u529f\uff0c\u8981\u6709\u809d\u80c6\uff0c\u8981\u4e00\u8eab\u6e05\u98ce\u6717\u6717\uff0c\u6063\u610f\u5e73\u751f\uff0c\u4e0e\u4e16\u5043\u4ef0\u3002</p> <p>\\(\\hspace{1cm}\\)\u4e8e\u662f\u6211\u4e0d\u65ad\u5730\u52aa\u529b\u7740\uff1a\u8d70\u5c71\u8d70\u6c34\uff0c\u95ef\u8361\u5929\u5730\uff0c\u56db\u5904\u8bbf\u5e08\uff0c\u56db\u5904\u5b66\u827a\u3002\u6768\u8fc7\u5927\u4fa0\u90a3\u6bb5\u4e0e\u6df1\u5c71\u4e3a\u4f34\u7684\u5c81\u6708\uff0c\u6211\u4e5f\u66fe\u76f8\u4f3c\u4eb2\u5386\u3002\u6211\u4ee5\u4e3a\u6211\u5c1d\u5c3d\u4e86\u6210\u957f\u4e3a\u4e00\u4ee3\u5927\u4fa0\u8fc7\u7a0b\u4e2d\u5e94\u6709\u7684\uff0c\u6240\u6709\u7684\u54c0\u621a\u4e0e\u5e78\u798f\uff0c\u6211\u4e3a\u6211\u7684\u4e00\u5207\u52aa\u529b\u800c\u611f\u5230\u5feb\u4e50\u4e0e\u6210\u5c31\u3002</p> <p>\\(\\hspace{1cm}\\)\u6bcf\u6b21\u6e38\u5386\u56de\u5bb6\u65f6\uff0c\u5988\u5988\u5e38\u7528\u7565\u5e26\u5fe7\u4f24\u7684\u773c\u795e\u770b\u7740\u6211\uff0c\u6211\u77e5\u9053\uff0c\u5979\u662f\u592a\u62c5\u5fc3\u6211\uff0c\u5bb3\u6015\u6c5f\u6e56\u4e0a\u7684\u9ed1\u6697\u4f1a\u5c06\u6211\u541e\u6ca1\uff0c\u4e0d\u5269\u9aa8\u5934\uff1b\u6211\u4e5f\u77e5\u9053\uff0c\u5979\u4ecd\u662f\u65e5\u65e5\u591c\u591c\u76fc\u671b\u6211\u6210\u529f\uff0c\u5e26\u7740\u8346\u68d8\u7684\u5fc3\u548c\u96be\u8a00\u7684\u60c6\u6005\u3002\u603b\u5f97\u6765\u8bf4\uff0c\u5988\u5988\u662f\u5f88\u652f\u6301\u6211\u7684\uff0c\u5c31\u50cf\u7ae5\u5e74\u7684\u7761\u524d\u6545\u4e8b\u2014\u2014\u90a3\u4e9b\u6ee1\u662f\u4fa0\u8005\u98ce\u8303\u7684\u5feb\u610f\u6c5f\u6e56\u3002</p> <p>\\(\\hspace{1cm}\\)\u90a3\u5929\uff0c\u6211\u6210\u5e74\u4e86\uff0c\u88f9\u4e86\u4e00\u4e2a\u5c0f\u5305\u88b1\uff1a\u4e00\u4e2a\u5988\u5988\u7ee3\u7684\u8377\u5305\uff0c\u51e0\u4e24\u94f6\u94b1\uff0c\u968f\u8eab\u8863\u7269\u3002\u7136\u540e\u6211\u5c31\u4e0a\u8def\u4e86\u2014\u2014\u6211\u51b3\u5b9a\u8981\u5f00\u542f\u81ea\u5df1\u7684\u4eba\u751f\uff1a\u5927\u4fa0\u7684\u4eba\u751f\u3002</p> <p>\\(\\hspace{1cm}\\)\u7b2c\u4e00\u5929\uff0c\u6211\u6551\u4e86\u4e00\u4e2a\u843d\u96be\u7684\u5973\u5b50\u3002\u5979\u8877\u5fc3\u5730\u611f\u8c22\u6211\uff0c\u7136\u540e\u53c8\u5e26\u7740\u5fe7\u4f24\u5730\uff0c\u621a\u621a\u5730\u770b\u7740\u6211\uff0c\u55eb\u5685\u7740\uff1a\u53ef\u662f\u4f60\u5e2e\u4e0d\u4e86\u6211\u2014\u2014\u90a3\u5fe7\u4f24\u548c\u5988\u5988\u7684\u5fe7\u4f24\u6709\u4e9b\u76f8\u4f3c\u3002\u6211\u628a\u968f\u8eab\u7684\u94f6\u4e24\u90fd\u585e\u7ed9\u4e86\u5979\uff0c\u5979\u6ca1\u6709\u6536\uff0c\u8885\u5a1c\u7740\u8d70\u4e86\u3002</p> <p>\\(\\hspace{1cm}\\)\u4e00\u4e9b\u8ff7\u832b\uff0c\u4e00\u4e9b\u611f\u52a8\uff0c\u548c\u4e00\u4e9b\u5fe7\u6101\u3002</p> <p>\\(\\hspace{1cm}\\)\u6211\u6ca1\u6709\u6e38\u79fb\u3002\u6211\u8fd8\u662f\u884c\u8d70\u7740\uff0c\u53c8\u89c1\u4e86\u4e00\u4e9b\u4e8b\uff0c\u6551\u4e86\u4e00\u4e9b\u4eba\uff0c\u8fd8\u662f\u8d70\u8fc7\u5c71\u5c71\u6c34\u6c34\u3002\u4ed6\u4eec\u90fd\u53d8\u6210\u4e86\u6211\u3002</p> <p>\\(\\hspace{1cm}\\)\u90a3\u5929\u6211\u4e8c\u5341\u4e94\u5c81\uff0c\u6211\u7ec8\u4e8e\u6765\u5230\u4e86\u6211\u4ece\u5c0f\u68a6\u91cc\u7684\u6bbf\u5802\uff1a\u4fa0\u4e4b\u95e8\u3002\u6211\u77e5\u9053\u6211\u4e0d\u662f\u540d\u95e8\u6b63\u6d3e\uff0c\u4f46\u6211\u60f3\uff0c\u7ecf\u5386\u4e86\u8fd9\u8bb8\u591a\uff0c\u6211\u4e00\u5b9a\u4f1a\u88ab\u8ba4\u53ef\u2014\u2014\u6b66\u529f\u4e5f\u597d\uff0c\u809d\u80c6\u4e5f\u7f62\uff0c\u4e0d\u81f3\u4e8e\u540d\u5782\u9752\u53f2\uff0c\u81f3\u5c11\u8db3\u591f\u6177\u6168\u3002</p> <p>\\(\\hspace{1cm}\\)\u6211\u8fdb\u4e86\u95e8\uff0c\u81ea\u62a5\u5bb6\u95e8\uff0c\u5b88\u95e8\u4eba\u5f15\u6211\u5411\u524d\uff0c\u5230\u4e86\u4e00\u5f20\u53e4\u6734\u7684\u684c\u5b50\uff0c\u684c\u524d\u5750\u7740\u4e00\u4f4d\u5782\u5782\u8001\u8005\u3002\u6211\u8840\u8109\u55b7\u6d8c\u2014\u2014\u50cf\u662f\u68a6\u91cc\u3002</p> <p>\\(\\hspace{1cm}\\)\u201c\u8981\u6210\u4e3a\u5927\u4fa0\uff1f\u201d</p> <p>\\(\\hspace{1cm}\\)\u201c\u662f\u7684\uff0c\u662f\u7684\u3002\u201d</p> <p>\\(\\hspace{1cm}\\)\u201c\u591a\u5927\uff1f\u201d</p> <p>\\(\\hspace{1cm}\\)\u201c\u4e8c\u5341\u4e94\u4e86\u3002\u201d</p> <p>\\(\\hspace{1cm}\\)\u6cdb\u9ec4\u7684\u7eb8\u9875\uff0c\u76d6\u4e86\u4e2a\u9c9c\u7ea2\u7684\u5370\u7ae0\uff0c\u5199\u7740\u4e9b\u4ec0\u4e48\u4fa0\u4e4b\u5927\u8005\uff0c\u63a8\u5411\u6211\u3002</p> <p>\\(\\hspace{1cm}\\)\u201c\u8d44\u683c\u8bc1\uff0c\u5927\u4fa0\u3002\u201d</p> <p>\\(\\hspace{1cm}\\)\u4e8e\u662f\uff0c\u6211\u591a\u4e86\u4e00\u7eb8\u8584\u8584\u7684\u4e66\u9875\uff0c\u8d70\u51fa\u4e86\u5c71\u95e8\u3002</p> <p>\\(\\hspace{1cm}\\)\u6211\u7a81\u7136\u60f3\u8d77\u5f88\u591a\u5e74\u524d\uff0c\u5728\u5988\u5988\u8fd8\u5728\u4e3a\u6211\u8bb2\u7761\u524d\u6545\u4e8b\u7684\u65f6\u5019\uff1a\u6211\u5e74\u7eaa\u5c0f\uff0c\u603b\u662f\u542c\u5230\u4e00\u534a\u5c31\u660f\u660f\u5165\u7761\uff0c\u4f46\u5988\u5988\u603b\u4f1a\u8bb2\u5b8c\u5979\u7684\u6545\u4e8b\u3002</p> <p>\\(\\hspace{1cm}\\)\u6211\u60f3\u8d77\u591a\u5e74\u524d\u7684\u90a3\u4e2a\u591c\u665a\uff0c\u661f\u661f\u5929\u771f\u5730\u5728\u591c\u7a7a\u6d82\u9e26\uff0c\u5988\u5988\u770b\u7740\u6211\u7761\u773c\u60fa\u5fea\uff0c\u8f7b\u58f0\u5730\u8bb2\u7740\u6545\u4e8b\u7684\u7ed3\u5c3e\uff1a\u4ed6\u6700\u7ec8\u6ca1\u80fd\u6210\u4e3a\u5927\u4fa0\uff0c\u4f46\u4ed6\u52c7\u6562\uff0c\u575a\u5b9a\uff0c\u5766\u8361\u800c\u6f84\u6f88\uff0c\u4ed6\u770b\u8fc7\u5c71\u7684\u9ad8\u5927\uff0c\u770b\u8fc7\u6d77\u7684\u8fbd\u9614\uff0c\u4eba\u4eec\u8bf4\u4ed6\u4e00\u4e8b\u65e0\u6210\uff0c\u53ea\u662f\u6d6a\u8361\u6c5f\u6e56\uff0c\u4ed6\u4e0d\u540e\u6094\u3002</p>"},{"location":"ADS/D%26C/lec/","title":"Divide and Conquer","text":"<p>"},{"location":"ADS/D%26C/lec/#divide-and-conquer","title":"Divide and Conquer","text":"<p>Main Idea</p> <ul> <li>Divide the problem into a number of sub-problems</li> <li>Conquer the sub-problems by solving them recursively</li> <li>Combine the solutions to the sub-problems into the solution for the original problem</li> </ul> <p>General recurrence:   \\(T(N) = aT(N/b) + f(N)\\)</p> <p></p> <p></p>"},{"location":"ADS/D%26C/lec/#example","title":"Example","text":""},{"location":"ADS/D%26C/lec/#maximum-subsequence-sum-problem","title":"Maximum Subsequence Sum Problem","text":"<ul> <li>\\(O(nlogn)\\)</li> </ul> <pre><code>static int MaxSubSum(const int A[],int left,int right){\n            int MaxLeftSum, MaxRightSum;\n            int MaxLeftBorderSum, MaxRightBorderSum; \n        int LeftBorderSum, RightBorderSum;\n        int Center, i;\n        if( left == right ){\n            if(A[left]&gt;0){return A[left];}\n            else{return 0;}\n        }\n        Center = ( Left +Right ) / 2;\n        MaxLeftSum = MaxSubSum( A, Left, Center ) \n        MaxRightSum = MaxSubSum( A, Center + 1, Right );\n        MaxLeftBorderSum = 0; LeftBorderSum = 0;\n        for(i=Center+1;i&gt;=left;i--){\n            LeftBorderSum += A[i];\n            if(leftBorderSum&gt;MaxleftBorderSum){\n                MaxleftBorderSum = LeftBorderSum;\n            }\n        }\n        MaxRightBorderSum = 0; \n        RightBorderSum = 0;\n        for(i=Center;i&lt;=Right;i++){\n            RightBorderSum += A[i];\n            if(RightBorderSum &gt; MaxRightBorderSum){\n                MaxRightBOrderSum = RightBorderSum\n            }\n    }\n    return Max(MaxLeftSum,MaxRightSum,MaxLeftBorderSum+MaxRightBorderSum);\n}\nint MaxsubsequenceSum( const int A[],intN) {\n    return MaxSubSum( A, 0, N - 1 );}\n</code></pre>"},{"location":"ADS/D%26C/lec/#tree-traversal","title":"Tree Traversal","text":"<p>Given a postorder traversal of a binary tree, and an inorder traversal of the same tree, we can reconstruct the tree. </p> <ul> <li>Example :  <pre><code>Postorder : DEBFCA\nInorder   : DBEACF\n</code></pre> <pre><code>void BuildTree(int postL, int postR, int inL, int inR){\n    if(postL&gt;postR){return;}\n    int root = postorder[postR];\n    int k;\n    for(k=inL;k&lt;=inR;k++){\n        if(inorder[k]==root){break;}\n    }\n    int numLeft = k-inL;\n    BuildTree(postL,postL+numLeft-1,inL,k-1);\n    BuildTree(postL+numLeft,postR-1,k+1,inR);\n}\n</code></pre></li> </ul>"},{"location":"ADS/D%26C/lec/#closest-points-problem","title":"Closest Points Problem","text":"<p>We are given an array of n points in the plane, and the problem is to find out the closest pair of points in the array. This problem arises in a number of applications. For example, in air-traffic control, you may want to monitor planes that come too close together, since this may indicate a possible collision. </p> <p>The Brute force solution is \\(O(n^2)\\) , compute the distance between each pair and return the smallest. We can calculate the smallest distance in \\(O(nlogn)\\) time using Divide and Conquer strategy.</p>"},{"location":"ADS/D%26C/lec/#on-logn2-approach","title":"\\(O(n  (logn)^2)\\)\u200b approach","text":"<p>Input: An array of n points <code>P[ ]</code></p> <p>Output: The smallest distance between two points in the given array.</p> <p>As a pre-processing step, the input array is sorted according to x coordinates.</p> <p>1) Find the middle point in the sorted array, we can take <code>P[n/2]</code> as middle point. </p> <p>2) Divide the given array in two halves. The first subarray contains points from <code>P[0]</code> to <code>P[n/2]</code>. The second subarray contains points from <code>P[n/2+1]</code> to <code>P[n-1]</code>.</p> <p>3) Recursively find the smallest distances in both subarrays. Let the distances be \\(d_l\\) and \\(d_r\\). Find the minimum of \\(d_l\\) and \\(d_r\\). Let the minimum be \\(d\\)\u200b\u200b.</p> <p>4) From the above 3 steps, we have an upper bound \\(d\\) of minimum distance. Now we need to consider the pairs such that one point in pair is from the left half and the other is from the right half. Consider the vertical line passing through <code>P[n/2]</code> and find all points whose x coordinate is closer than \\(d\\)\u200b to the middle vertical line. Build an array <code>strip[ ]</code> of all such points. </p> <p></p> <p>5) Sort the array <code>strip[ ]</code> according to \\(y\\) coordinates. </p> <ul> <li>This step is \\(O(nlogn)\\). </li> <li>It can be optimized to \\(O(n)\\)\u200b\u200b by recursively sorting and merging. </li> </ul> <p>6) Find the smallest distance in <code>strip[ ]</code>. This is tricky. From the first look, it seems to be a \\(O(n^2)\\) step, but it is actually \\(O(n)\\)\u200b\u200b. It can be proved geometrically that for every point in the strip, we only need to check at most 7 points after it (note that strip is sorted according to Y coordinate). See this for more analysis.</p> <p>7) Finally return the minimum of d and distance calculated in the above step (step 6)</p> <pre><code>// A divide and conquer program in C/C++ to find the smallest distance from a\n// given set of points.\n\n#include &lt;stdio.h&gt;\n#include &lt;float.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;math.h&gt;\n\n// A structure to represent a Point in 2D plane\nstruct Point{\n    int x, y;\n};\n\n// Needed to sort array of points according to X coordinate\nint compareX(const void* a, const void* b){\n    Point *p1 = (Point *)a, *p2 = (Point *)b;\n    return (p1-&gt;x - p2-&gt;x);\n}\n// Needed to sort array of points according to Y coordinate\nint compareY(const void* a, const void* b){\n    Point *p1 = (Point *)a, *p2 = (Point *)b;\n    return (p1-&gt;y - p2-&gt;y);\n}\n\n// A utility function to find the distance between two points\nfloat dist(Point p1, Point p2){\n    return sqrt( (p1.x - p2.x)*(p1.x - p2.x) +\n                (p1.y - p2.y)*(p1.y - p2.y)\n            );\n}\n// A Brute Force method to return the smallest distance between two points\n// in P[] of size n\nfloat bruteForce(Point P[], int n){\n    float min = FLT_MAX;\n    for (int i = 0; i &lt; n; ++i)\n        for (int j = i+1; j &lt; n; ++j)\n            if (dist(P[i], P[j]) &lt; min)\n                min = dist(P[i], P[j]);\n    return min;\n}\n\n// A utility function to find a minimum of two float values\nfloat min(float x, float y)\n{\n    return (x &lt; y)? x : y;\n}\n\n// A utility function to find the distance between the closest points of\n// strip of a given size. All points in strip[] are sorted according to\n// y coordinate. They all have an upper bound on minimum distance as d.\n// Note that this method seems to be a O(n^2) method, but it's a O(n)\n// method as the inner loop runs at most 6 times\nfloat stripClosest(Point strip[], int size, float d)\n{\n    float min = d; // Initialize the minimum distance as d\n\n    qsort(strip, size, sizeof(Point), compareY); \n\n    // Pick all points one by one and try the next points till the difference\n    // between y coordinates is smaller than d.\n    // This is a proven fact that this loop runs at most 6 times\n    for (int i = 0; i &lt; size; ++i)\n        for (int j = i+1; j &lt; size &amp;&amp; (strip[j].y - strip[i].y) &lt; min; ++j)\n            if (dist(strip[i],strip[j]) &lt; min)\n                min = dist(strip[i], strip[j]);\n\n    return min;\n}\n\n// A recursive function to find the smallest distance. The array P contains\n// all points sorted according to x coordinate\nfloat closestUtil(Point P[], int n)\n{\n    // If there are 2 or 3 points, then use brute force\n    if (n &lt;= 3)\n        return bruteForce(P, n);\n    // Find the middle point\n    int mid = n/2;\n    Point midPoint = P[mid];\n    // Consider the vertical line passing through the middle point\n    // calculate the smallest distance dl on left of middle point and\n    // dr on right side\n    float dl = closestUtil(P, mid);\n    float dr = closestUtil(P + mid, n-mid);\n    // Find the smaller of two distances\n    float d = min(dl, dr);\n    // Build an array strip[] that contains points close (closer than d)\n    // to the line passing through the middle point\n    Point strip[n];\n    int j = 0;\n    for (int i = 0; i &lt; n; i++)\n        if (abs(P[i].x - midPoint.x) &lt; d)\n            strip[j] = P[i], j++;\n\n    // Find the closest points in strip. Return the minimum of d and closest\n    // distance is strip[]\n    return min(d, stripClosest(strip, j, d) );\n}\n\n// The main function that finds the smallest distance\n// This method mainly uses closestUtil()\nfloat closest(Point P[], int n)\n{\n    qsort(P, n, sizeof(Point), compareX);\n\n    // Use recursive function closestUtil() to find the smallest distance\n    return closestUtil(P, n);\n}\n\n// Driver program to test above functions\nint main(){\n    Point P[] = { {2, 3}, {12, 30}, {40, 50}, {5, 1}, {12, 10}, {3, 4}};\n    int n = sizeof(P) / sizeof(P[0]);\n    printf(\"The smallest distance is %f \", closest(P, n));\n    return 0;\n}\n</code></pre>"},{"location":"ADS/D%26C/lec/#onlogn-approach","title":"\\(O(nlogn)\\)\u200b approach","text":""},{"location":"ADS/D%26C/lec/#solving-recurrences","title":"Solving Recurrences","text":""},{"location":"ADS/D%26C/lec/#substitution-method-guess-and-prove-by-induction","title":"Substitution method : Guess and prove by induction","text":"<p>Makeing a good guess</p> <p></p> <p></p>"},{"location":"ADS/D%26C/lec/#recursion-tree-method","title":"Recursion-tree method","text":"<ul> <li>Guess a bound for the substitution method  </li> </ul>"},{"location":"ADS/D%26C/lec/#master-method","title":"Master method","text":"<ul> <li>\\(N^{\\log_ba}\\) is \"number of leaves\" in the recursion tree. </li> </ul>"},{"location":"ADS/D%26C/lec/#proof","title":"Proof","text":"<p>Case 1 If \\(f(N) = O(N^{\\log_ba-\\epsilon})\\) for some \\(\\epsilon &gt; 0\\), then \\(T(N) = \\Theta(N^{\\log_ba})\\)</p> <p>Proof:(Refer to Slides)</p> \\[\\begin{align*}\\sum_{i=0}^{\\log_bN-1}a^if(N/b^i) &amp;= O(N^{log_b{a-\\epsilon} }\\frac{b^{\\epsilon log_bN}-1}{b^\\epsilon-1})\\\\&amp;=O(N^{\\log_ba-\\epsilon}N^{\\epsilon})\\\\&amp;=O(N^{\\log_ba})\\end{align*}\\] <p>Therefore : \\(T(N) = \\Theta(N^{\\log_ba})+O(N^{\\log_ba}) =\\Theta(N^{\\log_ba})\\)</p> <p>Case 2 If \\(f(N) = \\Theta(N^{\\log_ba})\\), then \\(T(N) = \\Theta(N^{\\log_ba}\\log N)\\)</p> <p>Proof </p> \\[\\begin{align*}\\sum_{i=0}^{\\log_bN-1}a^if(N/b^i) &amp;= \\sum_{i=0}^{\\log_bN-1}a^i\\Theta((\\frac{N}{b^i})^{\\log_ba})\\\\&amp;=\\Theta(N^{\\log_ba}\\sum_{i=0}^{\\log_bN-1}(\\frac{a}{b^{log_ba} })^i)\\\\&amp;=\\Theta(N^{\\log_ba}\\sum_{i=0}^{\\log_bN-1}(1)\\\\&amp;=\\Theta(N^{\\log_ba}\\log N)\\end{align*}\\] <p>Therefore : \\(T(N) = \\Theta(N^{\\log_ba}\\log N) + O(N^{\\log_ba}) = \\Theta(N^{\\log_ba}\\log N)\\) Case 3 If \\(f(N) = \\Omega(N^{\\log_ba+\\epsilon})\\) for some \\(\\epsilon &gt; 0\\), if \\(af(N/b) \\leq kf(N)\\) for some \\(k&lt;1\\) and sufficiently large \\(N\\), then \\(T(N) = \\Theta(f(N))\\)</p> <p>Proof</p> \\[\\begin{align*}\\sum_{i=0}^{\\log_bN-1}a^if(N/b^i) &amp;= \\Omega(N^{\\log_ba+\\epsilon}\\frac{b^{\\epsilon log_bN}-1}{b^\\epsilon-1})\\\\&amp;=\\Omega(N^{\\log_ba+\\epsilon}N^{\\epsilon})\\\\&amp;=\\Omega(N^{\\log_ba+\\epsilon})\\end{align*}\\] <p>Therefore : \\(T(N) = \\Theta(f(N))\\) </p>"},{"location":"ADS/Heap/lec/","title":"Heap","text":"<p> <ul> <li>We can build heap by \\(T_a=O(n)/n=O(1)\\) , Therefore , we try to delete/insert the heap with time complexity less. say \\(T_a=O(1)\\)\u200b</li> <li>HW 4: https://blog.csdn.net/ZJU_fish1996/article/details/50992928</li> </ul>"},{"location":"ADS/Heap/lec/#leftist-heaps","title":"Leftist Heaps","text":""},{"location":"ADS/Heap/lec/#definition","title":"Definition","text":""},{"location":"ADS/Heap/lec/#def1","title":"Def.1","text":"<p>The null path length, \\(Npl(X)\\), of any node \\(X\\) is the length of the shortest path from \\(X\\) to a node without two children.  Define \\(Npl(NULL) = \u20131\\).</p>"},{"location":"ADS/Heap/lec/#def2","title":"Def.2","text":"<p>The leftist heap property is that for every node \\(X\\)\u200b in the heap, the null path length of the left child is at least as large as that of the right child.</p>"},{"location":"ADS/Heap/lec/#theorem1","title":"Theorem.1","text":"<p>A leftist tree with \\(r\\) nodes on the right path must have at least \\(2^r \u2013 1\\)\u200b nodes.</p> <ul> <li>For right subtree</li> </ul> <p>For the tree,left path actually all equals to its roots' NPL</p> <ol> <li> <p>\\(r=1\\) clearly holds</p> </li> <li> <p>If \\(NLP(X)=r\\le k\\) holds then if \\(NLP(X)=r=k+1:\\)\u200b </p> <p>Its right subtree must have \\(NLP(X)=k\\)</p> <p>\\(\\because when\\ NLP(X)= k \\ right \\ path \\ has \\ at\\ least\\  2^k-1\\ nodes\\)\u200b</p> <p>So all the right part at least \\(2^k-1\\)</p> </li> </ol> <ul> <li>For left subtree</li> </ul> <ol> <li> <p>\\(r=1\\) clearly holds</p> </li> <li> <p>If \\(NLP(X)\\le k\\) holds then if \\(NLP(X)=k+1:\\) </p> <p>Its left subtree's right path must be \\(\\ge k\\)\u200b</p> <p>So at least right path is k, so at least \\(2^k-1\\) for the left part</p> </li> </ol> <ul> <li> <p>Thus \\(2^k-1+2^k-1+1=2^{k+1}-1\\)\u200b</p> </li> <li> <p>Induction concludes.</p> </li> </ul>"},{"location":"ADS/Heap/lec/#operations","title":"Operations","text":""},{"location":"ADS/Heap/lec/#merge","title":"Merge","text":"<ul> <li>Recursive Version.</li> </ul> <pre><code>PriorityQueue  Merge ( PriorityQueue H1, PriorityQueue H2 ){ \n    if ( H1 == NULL )   return H2;  \n    if ( H2 == NULL )   return H1;  \n    if ( H1-&gt;Element &lt; H2-&gt;Element ){return Merge1( H1, H2 );} \n    else {return Merge1( H2, H1 );}\n}\nstatic PriorityQueue\nMerge1(PriorityQueue H1,PriorityQueue H2){\n  if(H1-&gt;Left == NULL){H1-&gt;Left = H2;}\n  else{\n    H1-&gt;Right = Merge(H1-&gt;Right,H2);\n    if(H1-&gt;Left-&gt;Npl&lt;H1-&gt;Right-&gt;Npl){\n        swapChildren(H1);\n    }\n    H1-&gt;Npl = H1-&gt;Right-&gt;Npl+1;\n  }\n  return H1;\n}\n</code></pre> <ul> <li> <p>\\(T_p=O(logN)\\)\u200b</p> </li> <li> <p>Iterative Version</p> </li> </ul> <p></p> <ul> <li> <p>For SORTING \\(loglogN\\) \u2192 \\(logN * loglogN\\)</p> </li> <li> <p>Only have to maintain two pointers.</p> </li> </ul>"},{"location":"ADS/Heap/lec/#skew-heaps","title":"Skew Heaps","text":"<p>Any \\(M\\) consecutive operations take at most \\(O(M log N)\\) time.</p> <ul> <li>Merge:</li> </ul> <p>Always swap the left and right children except that the largest of all the nodes on the right paths does not have its children swapped.  \\(No Npl.\\)</p> <p></p> <p>Skew heaps have the advantage that no extra space is required to maintain path lengths and no tests are required to determine when to swap children.</p> <p>It is an open problem to determine precisely the expected right path length of both leftist and skew heaps.</p>"},{"location":"ADS/Heap/lec/#amortized-analysis-for-skew-heaps","title":"Amortized Analysis for Skew Heaps","text":"<p>\\(D_i =\\)  the root of the resulting tree.</p> <p>\\(\\Phi(D_i)=\\)\u200b\u200b\u200b  number of heavy nodes.</p> <p>\\(\\Phi(D_i) =\\)number of  right nodes?</p> <p>No! Think of only operation where num of right nodes will decrease: will not happen because  the largest of all the nodes on the right paths does not have its children swapped</p> <p>So this \\(\\Phi(D_i)\\) will always be increasing.</p>"},{"location":"ADS/Heap/lec/#def","title":"Def:","text":"<p>A node \\(p\\) is heavy if the number of descendants of \\(p\\)\u2019s right subtree is at least half of the number of descendants of \\(p\\), and light otherwise.  </p> <p>Note that the number of descendants of a node includes the node itself.</p> <p></p> <ol> <li> <p>\\(T_{worst}=\\)all right nodes \\(=l_1+h_1+l_2+h_2\\)</p> </li> <li> <p>All heavy points at the right path will ALWAYS turn into light points.</p> </li> <li> <p>Original light points at most can ALL turn into heavy nodes.</p> </li> </ol> <p>Remember: also need to insert into left subtrees.</p> <ol> <li> <p>h is heavy nodes on the left paths,will note change,cause its descandents will never exchange! .</p> </li> <li> <p>Therefore Credits = \\(l_1+l_2-h_1-h_2\\)\u200b\u200b\u200b.</p> </li> <li> <p>\\(T_{amotized}= T_{worst}+credits \\le2(l_1+l_2)\\)\u200b</p> </li> <li> <p>\\(l_{right}=O(logN)\\)\u200b\u200b ? -- Actually if we want \\(l_{right}\\) to be large ,best almost balanced.</p> </li> </ol> <p>\u5047\u5982root\u7684\u5de6subtree \u5f88\u591a\uff0c\u628a\u591a\u51fa\u6765\u7684\u7ed9\u53f3\u8fb9\u6765\u589e\u52a0\u53f3\u94fe\u957f\uff0c\u8fd9\u6837\u5de6\u53f3node\u4e00\u6837\uff0c\u4e14\u53f3node\u7684heavy nodes\u81f3\u5c11\u4e0d\u4f1a\u5c11.</p>"},{"location":"ADS/Heap/lec/#amortized-analysis","title":"Amortized Analysis","text":"<ul> <li>Introduction to Algorithms</li> </ul>"},{"location":"ADS/Heap/lec/#binomial-queue","title":"Binomial Queue","text":"<ul> <li>\\(B_k\\) structure + heap order + one binomial tree for each height</li> </ul> <p>\\(\\therefore\\) A priority queue of any size can be uniquely represented by a collection of binomial trees.</p> <p>Example : \\(13=2^0+2^2+2^3=1101_2\\)</p>"},{"location":"ADS/Heap/lec/#operations_1","title":"Operations","text":""},{"location":"ADS/Heap/lec/#findmin","title":"FindMin","text":"<p>The minimum key is in one of the roots.</p> <p>There are at most \\(\u300clogN\\)  roots, hence \\(T_p = O( logN)\\)\u200b\u200b.</p> <p>\u4e8c\u8fdb\u5236\u5206\u89e3\uff0c\u6240\u4ee5\\(logN\\)</p> <ul> <li>We can remember the minimum and update whenever it is changed.  </li> </ul> <p>Then this operation will take \\(O(1)\\)\u200b.</p>"},{"location":"ADS/Heap/lec/#merge_1","title":"Merge","text":"<ul> <li> <p>To combine two trees \\(O(1)\\)</p> </li> <li> <p>At most \\(O(logN)\\) times</p> </li> </ul> <p>! Must keep the trees in the binomial queue sorted by height.</p>"},{"location":"ADS/Heap/lec/#insert","title":"Insert","text":""},{"location":"ADS/Heap/lec/#deletemin","title":"DeleteMin","text":""},{"location":"ADS/Heap/lec/#implementation","title":"Implementation","text":"<pre><code>typedef struct BinNode *Position;\ntypedef struct Collection *BinQueue;\ntypedef struct BinNode *BinTree;  /* missing from p.176 */\n\nstruct BinNode \n{ \n    ElementType     Element;\n    Position        LeftChild;\n    Position        NextSibling;\n} ;\n\nstruct Collection \n{ \n    int         CurrentSize;  /* total number of nodes */\n    BinTree TheTrees[ MaxTrees ];\n} ;\n</code></pre> <pre><code>BinTree CombineTrees( BinTree T1, BinTree T2 )\n{  /* merge equal-sized T1 and T2 */\n    if ( T1-&gt;Element &gt; T2-&gt;Element )\n        /* attach the larger one to the smaller one */\n        return CombineTrees( T2, T1 );\n    /* insert T2 to the front of the children list of T1 */\n    T2-&gt;NextSibling = T1-&gt;LeftChild;\n    T1-&gt;LeftChild = T2;\n    return T1;\n}\n</code></pre> <p>\\(T_p = O( 1 )\\)\u200b</p> <pre><code>BinQueue  Merge( BinQueue H1, BinQueue H2 )\n{   BinTree T1, T2, Carry = NULL;   \n    int i, j;\n    if ( H1-&gt;CurrentSize + H2-&gt; CurrentSize &gt; Capacity )  ErrorMessage();\n    H1-&gt;CurrentSize += H2-&gt; CurrentSize;\n    for ( i=0, j=1; j&lt;= H1-&gt;CurrentSize; i++, j*=2 ) {\n        T1 = H1-&gt;TheTrees[i]; T2 = H2-&gt;TheTrees[i]; /*current trees */\n        switch( 4*!!Carry + 2*!!T2 + !!T1 ) { \n        case 0: /* 000 */ /* Carry T1 T2 */\n        case 1: /* 001 */  break;   \n        case 2: /* 010 */  H1-&gt;TheTrees[i] = T2; H2-&gt;TheTrees[i] = NULL; break;\n        case 4: /* 100 */  H1-&gt;TheTrees[i] = Carry; Carry = NULL; break;\n        case 3: /* 011 */  Carry = CombineTrees( T1, T2 );\n                      H1-&gt;TheTrees[i] = H2-&gt;TheTrees[i] = NULL; break;\n        case 5: /* 101 */  Carry = CombineTrees( T1, Carry );\n                      H1-&gt;TheTrees[i] = NULL; break;\n        case 6: /* 110 */  Carry = CombineTrees( T2, Carry );\n                      H2-&gt;TheTrees[i] = NULL; break;\n        case 7: /* 111 */  H1-&gt;TheTrees[i] = Carry; \n                      Carry = CombineTrees( T1, T2 ); \n                      H2-&gt;TheTrees[i] = NULL; break;\n        } /* end switch */\n    } /* end for-loop */\n    return H1;\n}\n</code></pre> <pre><code>BinQueue  Merge( BinQueue H1, BinQueue H2 )\n{   BinTree T1, T2, Carry = NULL;   \n    int i, j;\n    if ( H1-&gt;CurrentSize + H2-&gt; CurrentSize &gt; Capacity )  ErrorMessage();\n    H1-&gt;CurrentSize += H2-&gt; CurrentSize;\n    for ( i=0, j=1; j&lt;= H1-&gt;CurrentSize; i++, j*=2 ) {\n      T1 = H1-&gt;TheTrees[i]; T2 = H2-&gt;TheTrees[i]; /*current trees */\n      switch( 4*!!Carry + 2*!!T2 + !!T1 ) { \n        case 0: /* 000 */\n        case 1: /* 001 */  break;   \n        case 2: /* 010 */  H1-&gt;TheTrees[i] = T2; H2-&gt;TheTrees[i] = NULL; break;\n        case 4: /* 100 */  H1-&gt;TheTrees[i] = Carry; Carry = NULL; break;\n        case 3: /* 011 */  Carry = CombineTrees( T1, T2 );\n                        H1-&gt;TheTrees[i] = H2-&gt;TheTrees[i] = NULL; break;\n        case 5: /* 101 */  Carry = CombineTrees( T1, Carry );\n                        H1-&gt;TheTrees[i] = NULL; break;\n        case 6: /* 110 */  Carry = CombineTrees( T2, Carry );\n                        H2-&gt;TheTrees[i] = NULL; break;\n        case 7: /* 111 */  H1-&gt;TheTrees[i] = Carry; \n                        Carry = CombineTrees( T1, T2 ); \n                        H2-&gt;TheTrees[i] = NULL; break;\n        } /* end switch */\n    } /* end for-loop */\n    return H1;\n}\n</code></pre> <ul> <li>\u4e0d\u679a\u4e3e\uff1f</li> </ul> <p>\u54e8\u5175</p> <pre><code>BinQueue  Merge( BinQueue H1, BinQueue H2 ){\n\n}\n</code></pre> <ul> <li>DeleteMin</li> </ul> <pre><code>ElementType  DeleteMin( BinQueue H ){\n  BinQueue DeletedQueue; \n    Position DeletedTree, OldRoot;\n    ElementType MinItem = Infinity;  /* the minimum item to be returned */  \n    int i, j, MinTree; /* MinTree is the index of the tree with the minimum item */\n    if ( IsEmpty( H ) )  {  PrintErrorMessage();  return \u2013Infinity; }\n    for ( i = 0; i &lt; MaxTrees; i++) {  /* Step 1: find the minimum item */\n        if( H-&gt;TheTrees[i] &amp;&amp; H-&gt;TheTrees[i]-&gt;Element &lt; MinItem ){ \n                MinItem = H-&gt;TheTrees[i]-&gt;Element;  MinTree = i;    \n      } /* end if */\n    } /* end for-i-loop */\n\n    DeletedTree = H-&gt;TheTrees[MinTree];  \n    H-&gt;TheTrees[MinTree] = NULL;   /* Step 2: remove the MinTree from H =&gt; H\u2019 */ \n    OldRoot = DeletedTree;   /* Step 3.1: remove the root */ \n    DeletedTree = DeletedTree-&gt;LeftChild;   free(OldRoot);\n    DeletedQueue = Initialize();   /* Step 3.2: create H\u201d */ \n    DeletedQueue-&gt;CurrentSize = (1&lt;&lt;MinTree ) \u2013 1;  /* 2MinTree \u2013 1 */\n    for ( j = MinTree \u2013 1; j &gt;= 0; j \u2013 \u2013 ) {  \n        DeletedQueue-&gt;TheTrees[j] = DeletedTree;\n        DeletedTree = DeletedTree-&gt;NextSibling;\n        DeletedQueue-&gt;TheTrees[j]-&gt;NextSibling = NULL;\n    } /* end for-j-loop */\n\n    H-&gt;CurrentSize  \u2013 = DeletedQueue-&gt;CurrentSize + 1;\n    H = Merge( H, DeletedQueue ); /* Step 4: merge H\u2019 and H\u201d */ \n    return MinItem;\n}\n</code></pre> <ul> <li>A binomial queue of \\(N\\) elements can be built by \\(N\\) successive insertions in \\(O(N)\\)\u200b time.</li> </ul> <p></p> <ul> <li>\\(1/2\\) no merge</li> <li>\\(1/4\\) one merge</li> <li>\\(1/8\\) two merges..</li> <li>\\(1/16\\) three merges...</li> </ul> <p></p>"},{"location":"ADS/Heap/lec/#appendix-amotized-analysis","title":"\\(Appendix: Amotized\\ Analysis\\)\u200b\u200b","text":"<ul> <li>Reference: https://walkccc.me/CLRS/Chap17/17.2/</li> <li>Introduction To Algorithms.</li> </ul>"},{"location":"ADS/Heap/lec/#aggregate-analysis","title":"Aggregate Analysis","text":"<p>In aggregate analysis, we show that for all n, a sequence of n operations takes worst-case time \\(T(n)\\) in total. In the worst case, the average cost, or amortized cost, per operation is therefore \\(T(n)/n\\). Note that this amortized cost applies to each operation, even when there are several types of operations in the sequence.</p> <p>Stack operations</p> <ul> <li>\\(MULTIPOP(S,k)\\)\u200b</li> </ul> <p>Let us analyze a sequence of n \\(PUSH, POP\\), and \\(MULTIPOP\\)\u200b operations on an initially empty stack</p> <ul> <li>The worst-case cost of a MULTIPOP operation in the sequence is \\(O(n)\\)\u200b, since the stack size is at most n.</li> </ul> <p>The worst-case time of any stack operation is therefore \\(O(n)\\), and hence a sequence of n operations costs \\(O(n^2)\\)</p> <ul> <li>Any sequence of n \\(PUSH, POP\\), and \\(MULTIPOP\\) operations on an initially empty stack can cost at most \\(O(n)\\)</li> </ul> <p>We can pop each object from the stack at most once for each time we have pushed it onto the stack. </p> <p>Therefore, the number of times that \\(POP\\) can be called on a nonempty stack, including calls within \\(MULTIPOP\\), is at most the number of PUSH operations, which is at most n. </p> <p>For any value of n, any sequence of n \\(PUSH, POP\\), and \\(MULTIPOP\\) operations takes a total of \\(O(n)\\) time. The average cost of an operation is \\(O(n)/n = O(1)\\)\u200b</p> <ul> <li>We emphasize again that although we have just shown that the average cost, and hence the running time, of a stack operation is \\(O(1)\\), we did not use probabilistic reasoning. </li> </ul> <p>We actually showed a worst-case bound of \\(O(n)\\) on a sequence of \\(n\\) operations. Dividing this total cost by \\(n\\)\u200b yielded the average cost per operation, or the amortized cost.</p> <p>Incrementing a binary counter</p> <p>Consider the problem of implementing a k-bit binary counter that counts upward from 0. </p> <p>We use an array \\(A[0..k-1]\\) of bits, where \\(A.length=k\\), as the counter. </p> <p>A binary number x that is stored in the counter has its lowest-order bit in \\(A[0]\\) and its highest-order bit in \\(A[k-1]\\)so that \\(x = \\sum_{i=0}^{k-1}A[i]\u00b72^i\\) Initially, \\(x=0\\) and thus \\(A[i]=0\\) for \\(i=0,1,... k-1\\)</p> <p>To add \\(1\\)(modulo \\(2^k\\)\u200b) to the value in the counter, we use the following procedure.</p> <p></p> <ul> <li>As with the stack example, a cursory analysis yields a bound that is correct but not tight. A single execution of INCREMENT takes time \\(\\Theta(k)\\) in the worst case, in which array A contains all 1s. </li> </ul> <p>Thus, a sequence of n INCREMENT operations on an initially zero counter takes time \\(O(nk)\\) in the worst case.</p> <ul> <li>As Figure below shows, \\(A[0]\\) does flip each time INCREMENT is called. The next bit up, \\(A[1]\\) flips only every other time: a sequence of n INCREMENT operations on an initially zero counter causes \\(A[1]\\) to flip \\(n/2\u300d\\)times.</li> </ul> <p>Similarly, bit \\(A[2]\\) flibs only every fourth time or \\(n/4\u300d\\) times in a sequence.</p> <p>\\(\\sum_{i=0}^{k-1}\\frac{n}{2^i}\u300d&lt;n\\sum_{i=0}^{\\infty}\\frac{1}{2^i}=2n\\)</p> <ul> <li>The worst-case time for a sequence of n INCREMENT operations on an initially zero counter is therefore \\(O(n)\\). The average cost of each operation, and therefore the amortized cost per operation, is \\(O(n)/n=O(1)\\)\u200b</li> </ul> <p></p>"},{"location":"ADS/Heap/lec/#exercises","title":"Exercises","text":"<p>1. If the set of stack operations included a MULTIPUSH operation, which pushes \\(k\\) items onto the stack, would the \\(O(1)\\)\u200b bound on the amortized cost of stack operations continue to hold?</p> <ul> <li>No. The time complexity of such a series of operations depends on the number of pushes (pops vice versa) could be made. </li> </ul> <p>Since one MULTIPUSH needs \\(\\Theta(k)\\) time, performing n MULTIPUSH operations, each with k elements, would take\\(\u0398(kn)\\) time, leading to amortized cost of \\(\\Theta(k)\\)\u200b.</p> <p>Show that if a DECREMENT operation were included in the k-bit counter example, n operations could cost as much as \\(\\Theta(nk)\\)\u200b time.</p> <ul> <li>The logarithmic bit flipping predicate does not hold, and indeed a sequence of events could consist of the incrementation of all \\(1s\\) and decrementation of all \\(0s\\) , yielding \\(\u0398(nk)\\).</li> </ul> <p>2. Suppose we perform a sequence of \\(n\\) operations on a data structure in which the i th operation costs i if i is an exact power of 2, and 1 otherwise. </p> <p>Use aggregate analysis to determine the amortized cost per operation.   </p>"},{"location":"ADS/Heap/lec/#the-accounting-method","title":"The accounting method","text":"<p>In the accounting method of amortized analysis, we assign differing charges to different operations, with some operations charged more or less than they actually cost. We call the amount we charge an operation its amortized cost.  When an operation\u2019s amortized cost exceeds its actual cost, we assign the difference to specific objects in the data structure as credit. </p> <ul> <li> <p>Credit can help pay for later operations whose amortized cost is less than their actual cost. </p> </li> <li> <p>If we want to show that in the worst case the average cost per operation is small by analyzing with amortized costs, we must ensure that the total amortized cost of a sequence of operations provides an upper bound on the total actual cost of the sequence.</p> </li> <li> <p>this relationship must hold for all sequences of operations.   Which means \\(\\sum \\hat{c}_i\\ge\\sum c_i\\) for all sequences of n operations. </p> </li> <li>The total credit stored in the data structure is the difference between the total amortized cost and the total actual cost, or \\(\\sum \\hat{c}_i-\\sum c_i\\) which must be non negative ay all times Stack operations Incrementing a binary counter </li> </ul>"},{"location":"ADS/Heap/lec/#the-potential-method","title":"The potential method","text":"<p>Instead of representing prepaid work as credit stored with specific objects in the data structure, the potential method of amortized analysis represents the prepaid work as \u201cpotential energy,\u201d or just \u201cpotential,\u201d which can be released to pay for future operations. We associate the potential with the data structure as a whole rather than with specific objects within the data structure.</p> <ul> <li> <p>We will perform n operations, starting with an initial data structure \\(D_0\\)</p> </li> <li> <p>For each \\(i=1,2,...n\\), we let \\(c_i\\) be the actual cost of the ith operation and \\(D_i\\) be the data structure that results after applying the ith operation to data structure \\(D_{i-1}\\).</p> </li> <li> <p>A potential function \\(\\Phi\\) maps each data structure \\(D_i\\) to a real number \\(\\Phi(D_i)\\), which is the potential associated with data structure \\(D_i\\) . </p> </li> <li> <p>The amortized cost \\(\\hat{c}_i\\) of the ith operation with respect to potential function \\(\\Phi\\) is defined by \\(\\hat{c}_i=c_i+\\Phi(D_i)-\\Phi(D_{i-1})\\)</p> </li> <li> <p>the total amortized cost of the n operations is \\(\\sum\\hat{c}_i=\\sum c_i+\\Phi(D_n)-\\Phi(D_0)\\)</p> </li> <li> <p>Define a potential function so that \\(\\Phi(D_i)\\ge \\Phi(D_0)\\) for all i!</p> </li> </ul> <p>Stack operations * See Previous Part.</p> <p>Incrementing a binary counter we define the potential of the counter after the ith INCREMENT operation to be \\(b_i\\) , the number of 1s in the counter after the i th operation.  * If the counter starts at zero, then \\(\\Phi(D_0)=0\\) Since \\(\\Phi(D_i)\\ge 0\\) for all i , the total amortized cost of a sequence of n INCREMENT operations is an upper bound on the total actual cost, and so the worst-case cost of n INCREMENT operations is \\(O(n)\\).</p> <ul> <li>The potential method gives us an easy way to analyze the counter even when it does not start at zero.  The counter starts with \\(b_0\\) 1s, and after n INCREMENT operations it has \\(b_n\\) 1s, where \\(0&lt;b_0, b_n &lt;k\\). (Recall that k is the number of bits in the counter.)  </li> </ul>"},{"location":"ADS/NP/lec/","title":"NP-Completeness","text":"<p>"},{"location":"ADS/NP/lec/#np-completeness","title":"NP - Completeness","text":""},{"location":"ADS/NP/lec/#turing-machind","title":"Turing Machind","text":"<ul> <li>A Turing machine is a mathematical model of computation that defines an abstract machine, which manipulates symbols on a strip of tape according to a table of rules. Despite the model's simplicity, given any computer algorithm, a Turing machine capable of simulating that algorithm's logic can be constructed.</li> <li>A Deterministic Turing Machine executes one instruction at each point in time.  Then depending on the instruction, it goes to the next unique instruction.</li> <li>A Nondeterministic Turing Machine is free to choose its next step from a finite set.  And if one of these steps leads to a solution, it will always choose the correct one.</li> </ul>"},{"location":"ADS/NP/lec/#np-npc","title":"NP NPC","text":""},{"location":"ADS/NP/lec/#np","title":"NP","text":"<p>NP: Nondeterministic polynomial-time * The problem is NP if we can prove any solution is true in polynomial time.</p> <p>Example Hamilton cycle problem: Find a single cycle that contains every vertex \u2013 does this simple circuit include all the vertices?</p> <p>Note: Not all decidable problems are in NP.  For example, consider the problem of determining whether a graph does not have a Hamiltonian cycle.</p> <ul> <li>At present, this cannot be tested in polynomial time.  This is because we would have to check every possible cycle in the graph.</li> </ul>"},{"location":"ADS/NP/lec/#p","title":"P","text":"<p>There is a polynomial time algorithm that can solve the problem. \\(P \\subseteq NP\\)</p> <ul> <li>Whether it is a true subset?</li> </ul>"},{"location":"ADS/NP/lec/#npc","title":"NPC","text":"<p>The most difficult problems in NP.</p> <ul> <li>If we can solve one of these problems in polynomial time, we can solve all problems in NP in polynomial time!</li> </ul> <p></p> <ul> <li>\u5982\u679cA\u80fd\u88ab\u89c4\u7ea6\u5230B\uff0c\u90a3\u4e48A\u662f\u66f4\u7b80\u5355\u7684\u95ee\u9898\uff08\u56e0\u4e3a\u53ef\u80fd\u5b58\u5728\u66f4\u7b80\u5355\u7684\u89e3\u6cd5\uff09</li> <li>\u8fd9\u91cc\u8bf4\u7684\u7b80\u5355\u53ea\u63a2\u8ba8\u662f\u5426\u662f\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u53ef\u89e3\uff0c\u800c\u4e0d\u662f\u8bf4\u89e3\u6cd5\u7684\u590d\u6742\u5ea6</li> </ul> <p>EXAMPLE Suppose that we already know that the Hamiltonian cycle problem is <code>NP-complete</code>.  Prove that the traveling salesman problem is NP-complete as well. * Hamiltonian cycle problem: Given a graph \\(G=(V, E)\\), is there a simple cycle that visits all vertices? * Traveling salesman problem: Given a complete graph \\(G=(V, E)\\), with edge costs, and an integer K, is there a simple cycle that visits all vertices and has total cost \\(\\le K\\)? </p> <ul> <li>\\(|V|=5\\)</li> </ul>"},{"location":"ADS/NP/lec/#npc_1","title":"NPC","text":"<ul> <li>\u4efb\u610f\u4e00\u4e2aNP\u95ee\u9898\u90fd\u53ef\u4ee5\u5f52\u7ea6\u5230NPC\u95ee\u9898</li> <li>\u8bc1\u660e\u4e00\u4e2a\u95ee\u9898\u662fNPC\u95ee\u9898\uff0c\u53ea\u8981\u8bc1\u660e\u4e00\u4e2a\u5df2\u77e5\u7684\u7684NPC\u95ee\u9898\u53ef\u4ee5\u5f52\u7ea6\u5230\u8fd9\u4e2a\u95ee\u9898\u5373\u53ef</li> <li>\u90a3\u4e48\u6211\u4eec\u9700\u8981\u77e5\u9053\u7b2c\u4e00\u4e2aNPC\u95ee\u9898</li> </ul> <p>The first problem that was proven to be NP-complete was the Satisfiability problem (Circuit-SAT):  Input a boolean expression and ask if it has an assignment to the variables that gives the expression a value of 1. Cook showed in 1971 that all the problems in NP could be polynomially transformed to Satisfiability.  He proved it by solving this problem on a nondeterministic Turing machine in polynomial time.</p>"},{"location":"ADS/NP/lec/#co-np","title":"co-NP","text":""},{"location":"ADS/NP/lec/#abstract-problem","title":"Abstract Problem","text":"<p>An abstract problem \\(Q\\) is a binary relation on a set \\(I\\) of problem instances and a set \\(S\\) of problem solutions.</p> <p></p>"},{"location":"ADS/NP/lec/#formal-language-theory-for-decision-problem","title":"Formal-language Theory \u2014 for decision problem","text":"<ul> <li><code>x\u662f\u89e3\u7684\u5b9e\u4f8b</code></li> <li>A verification algorithm is a two-argument algorithm A, where one argument is an ordinary input string <code>x</code> and the other is a binary string  <code>y</code> called a certificate. </li> <li>A two-argument algorithm A verifies an input string <code>x</code> if there exists a certificate <code>y</code> such that <code>A(x, y) = 1</code>. </li> <li>The language verified by a verification algorithm A is  <code>L = { x \u2208 {0, 1}*</code>: there exists <code>y \u2208 {0, 1}*</code> such that <code>A(x, y) = 1}</code>. </li> </ul>"},{"location":"ADS/NP/lec/#lin-np-to-barl-in-np","title":"\\(L\\in NP ?\\to \\bar{L} \\in NP\\)","text":"<ul> <li>complexity class co-NP = the set of languages L such that \\(\\bar{L}\\in NP\\)</li> <li> <p>co-NP : \u8be5\u95ee\u9898\u548c\u5b83\u7684\u8865\u90fd\u5c5e\u4e8eNP  </p> </li> <li> <p>Some probles can only reach requirement2 but satisfy 1 -- NP-Hard</p> </li> </ul> <p> </p> <p>0-1 backpack problem</p> <p>https://zhuanlan.zhihu.com/p/93857890</p> <ul> <li>Not Polynomial Time</li> </ul> <p></p>"},{"location":"ADS/Tree/lec/","title":"Trees","text":"<p>"},{"location":"ADS/Tree/lec/#avl-tree","title":"AVL Tree","text":"<ul> <li> <p>An empty binary tree is height balanced.</p> </li> <li> <p>If T is nonempty binary tree with \\(T_L\\) and \\(T_R\\) as its left and right subtrees,then \\(T\\) is height balanced iff</p> </li> </ul> <p>(1)\\(T_L\\) and \\(T_R\\) are height balanced</p> <p>(2)\\(|h_L-h_R|\\le 1\\) where \\(h_l\\) and \\(h_R\\) are the heights of \\(T_L\\) and \\(T_R\\)\u200b\u200b</p> <ul> <li>Balance Factor \\(BF(node)\\) = \\(h_L\\)-\\(h_r\\)</li> </ul> <p>In an <code>AVL Tree</code>  ,  \\(BF(node)\\) = \\(-1,0,or\\ 1\\)</p> <ul> <li>The height of an empty tree is defined to be \\(\u20131\\)</li> </ul>"},{"location":"ADS/Tree/lec/#tree-rotation","title":"Tree Rotation","text":"<ul> <li>Changes Sturcture without intefering    </li> <li>Time complexity: \\(O(1)\\)</li> </ul>"},{"location":"ADS/Tree/lec/#rotation-for-avl-tree","title":"Rotation for AVL Tree","text":"<ul> <li> <p>RR Rotation</p> </li> <li> <p>LL Rotation</p> </li> <li> <p>RL Rotation</p> </li> <li> <p>LR Rotation</p> </li> </ul> <p>Details refer to slides.</p> <p></p> <p>\u52d8\u8bef \uff1a \\(n_h \\approx \\frac{1}{\\sqrt{5}}(\\frac{1+\\sqrt{5}}{2})^{h+3} - 1\\)\u200b </p>"},{"location":"ADS/Tree/lec/#splay-trees","title":"Splay Trees","text":"<p>Target :  Any \\(M\\) consecutive tree operations starting from an empty tree take at most \\(O(M log N)\\) time. * For any nonroot node \\(X\\) , denote its parent by \\(P\\) and grandparent by \\(G\\)</p> <p></p> <ul> <li>\u5176\u5b9e\u4e0d\u662f  Single rotation\uff0c\u4e5f\u662f\u8981\u4e24\u6b21\\((Zig-Zig)\\) : \u5148\u8f6c \\(P\\)\u518d\u8f6c\\(X\\)</li> <li>\\(Zig-Zag\\)  only rotate \\(X\\)</li> </ul> <p></p>"},{"location":"ADS/Tree/lec/#amortized-analysis","title":"Amortized Analysis","text":"<ul> <li>Amotized bound :  Probability is not involved !</li> </ul> <p>worst case bound &gt; amortized bound &gt; average case bound</p>"},{"location":"ADS/Tree/lec/#aggregate-analysis","title":"Aggregate analysis","text":"<p>Show that for all n, a sequence of n operations takes worst-case time \\(T(n)\\) in total.  </p> <p>In the worst case, the average cost, or amortized cost, per operation is therefore \\(T(n)/n\\).</p>"},{"location":"ADS/Tree/lec/#accounting-method","title":"Accounting method","text":"<p>When an operation\u2019s amortized cost  \\(\\hat{c}_i\\) exceeds its actual cost \\(c_i\\) , we assign the difference to specific objects in the data structure as credit. Credit can help pay for later operations whose amortized cost is less than their actual cost.</p> <p></p>"},{"location":"ADS/Tree/lec/#potential-method","title":"Potential Method","text":"<ul> <li>Refer to Book Potential Function</li> </ul>"},{"location":"ADS/Tree/lec/#red-black-tree","title":"Red-Black Tree","text":"<ul> <li>Technique : Create \\(\"\u54e8\u5175\" \\ \\ \\ \"\u865a\u62df\u8282\u70b9\"\\)</li> </ul>"},{"location":"ADS/Tree/lec/#def","title":"Def:","text":"<ul> <li>Every node is either red or black.</li> <li>The root is black.</li> <li>Every leaf (\\(NIL..\u54e8\u5175\\)) is black.</li> <li>If a node is red both its children are black.</li> <li>For each node,all simple paths from the node the descandent leaves(\u54e8\u5175) contain the same number of black nodes.</li> </ul> <p>Black-Height</p> <p>The number of black nodes from the node to its descandent leaves (without counting NIL &amp; itself) </p>"},{"location":"ADS/Tree/lec/#lemma","title":"Lemma","text":"<p>A red-black tree with N internal nodes has height at most  \\(2ln(N +1)\\)\u200b.</p> <p></p>"},{"location":"ADS/Tree/lec/#operations","title":"Operations","text":""},{"location":"ADS/Tree/lec/#insert","title":"Insert","text":"<p>Sketch : Insert &amp; Colour red ; Pass Error to Root</p> <ul> <li>Then Pass Error to the Root and turn it to black.</li> </ul> <p></p> <ul> <li>For case 2 -- Ensure that the right child of 7 is not red !!</li> </ul> <p>Refer to \u7b97\u6cd5\u5bfc\u8bba !</p> <ul> <li> <p>Loop ends when z.p is black</p> </li> <li> <p>Color the root black after the loop</p> </li> </ul> <p></p> <p></p> <p></p> <p></p>"},{"location":"ADS/Tree/lec/#delete","title":"Delete","text":"<ul> <li> <p>Case 3 : To have a red far nephew.</p> </li> <li> <p>Case 4 : (1) change colour of ? and w (2) far nephew change black (3) make brother new root</p> </li> </ul> <p>Beacuse property 5 holds so descants of w have no black node</p> <p></p> <p></p> <p></p> <ul> <li>See AVL Deletion</li> </ul>"},{"location":"ADS/Tree/lec/#b-tree","title":"B+ Tree","text":""},{"location":"ADS/Tree/lec/#definition","title":"\u3010Definition\u3011","text":"<p>A B+ tree of order M is a tree with the following structural properties:</p> <ul> <li>The root is either a leaf or has between 2 and M children.</li> <li>All nonleaf nodes (except the root) have between \\(\u300cM/2\\)(\u4e0a\u53d6\u6574) and \\(M\\) children.</li> <li>All leaves are at the same depth.</li> <li>Assume each nonroot leaf also has between \\(\u300cM/2\\)\uff08\u4e0a\u53d6\u6574\uff09 and M children.</li> </ul> <p>Root can have less children like when constructing.</p> <pre><code>Btree  Insert ( ElementType X,  Btree T ) \n{ \n    Search from root to leaf for X and find the proper leaf node;\n    Insert X;\n    while ( this node has M+1 keys ) {\n            split it into 2 nodes with \u300c(M+1)/2 and \u300c(M+1)/2 keys, respectively;\n            if (this node is the root)\n                create a new root with two children;\n            check its parent;\n    // Every iteration O(M)\n    }\n} \n</code></pre> <p>\\(Depth = O(log_{M/2}N)\\)\u200b</p> <p>\\(T_{insert} = O(M* Depth)=O(logN*M/logM)\\)\u200b </p> <p>\\(Y_{find} = O(logN)\\)\u200b</p> <p></p>"},{"location":"ADS/approx/lec/","title":"Approximation","text":"<p>"},{"location":"ADS/approx/lec/#approximation","title":"Approximation","text":"<ul> <li>Find near-optimal solutions in polynomial time</li> </ul>"},{"location":"ADS/approx/lec/#approximation-ratio","title":"Approximation Ratio","text":"<p> If an algorithm achieves an approximation ratio of \\(\\rho(n)\\), we call it a\\(\\rho(n)\\)-approximation algorithm. </p> <p>Approximate Bin Packing Given N items of sizes  \\(S_1 , S_2 , \u2026, S_N\\) , such that \\(0 &lt; S_i \\le 1\\) for all \\(1 \\le i \\le N\\) . Pack these items in the fewest number of bins, each of which has unit capacity. Example : N = 7; \\(S_i\\) = 0.2, 0.5, 0.4, 0.7, 0.1, 0.3, 0.8</p> <p></p> <p><pre><code>void NextFit ( )\n{   read item1;\n    while ( read item2 ) {\n        if ( item2 can be packed in the same bin as item1 )\n    place item2 in the bin;\n        else\n    create a new bin for item2;\n        item1 = item2;\n    } /* end-while */\n}\n</code></pre>  * Therefore the NextFit algorithm is a 2-approximation algorithm for the bin packing problem.[approximation ratio = 2] <pre><code>void FirstFit ( )\n{   while ( read item ) {\n        scan for the first bin that is large enough for item;\n        if ( found )\n    place item in that bin;\n        else\n    create a new bin for item;\n    } /* end-while */\n}\n</code></pre> * Time complexity of  FirstFit is \\(O(nlogn)\\) * But the approximation ratio of FirstFit is 2. </p> <p></p> <p>On-line Algorithms Place an item before processing the next one, and can NOT change decision.</p> <p>Off-line Algorithms View the entire item list before producing an answer. </p>"},{"location":"ADS/approx/lec/#the-knapsack-problem-fractional-version","title":"The Knapsack Problem \u2014 fractional version","text":"<p>A knapsack with a capacity  \\(M\\)  is to be packed.  Given \\(N\\) items.  Each item  \\(i\\)  has a weight  \\(w_i\\)  and a profit  \\(p_i\\) .  If  \\(x_i\\) is the percentage of the item \\(i\\)  being packed,  then the packed profit will be  \\(p_ix_i\\) . * An optimal packing is a feasible one with maximum profit.  That is, we are supposed to find the values of \\(x_i\\)  such that \\(\\sum\\limits_{i=1}^n p_ix_i\\) obtains its maximum under the constrains: $\\sum\\limits_{i=1}^{n}w_ix_i \\le M $ and \\(x\\in [0,1] \\ for\\ 1\\le i \\le n\\)</p> <p></p>"},{"location":"ADS/approx/lec/#the-knapsack-problem-0-1-version","title":"The Knapsack Problem \u2014 0-1 version","text":"<ul> <li> <p>NPC and NP-hard </p> </li> <li> <p>\\(p_{opt}\\) is the optimal solution for the frac version</p> </li> <li>For the 0-1 problem, difference lies in the last object(may not be put into the package),and this last item has cost \\(\\le p_{max}\\)</li> <li>Therefore \\(p_{opt}\\le p_{greedy}+p_{max}\\)</li> </ul>"},{"location":"ADS/approx/lec/#solve-in-dynamic-programming","title":"Solve in Dynamic Programming","text":"<ul> <li>Another Solution(just search)</li> </ul>"},{"location":"ADS/approx/lec/#the-k-center-problem","title":"The K-center Problem","text":"<p>Refer to Slides.</p> <p></p>"},{"location":"ADS/back/lec/","title":"backtracking","text":"<p>"},{"location":"ADS/back/lec/#backtracking","title":"Backtracking","text":"<p>The basic idea is that suppose we have a partial solution \\(( x_1, ... , x_i )\\) where each \\(x_k \\in S_k\\) for  \\(1 \\le k \\le i &lt; n\\).   First we add  \\(x_{i+1} \\in S_{i+1}\\) and check if \\(( x_1, ... , x_i, x_{i+1} )\\) satisfies the constrains.  If the answer is \\(\u201cyes\u201d\\) we continue to add the next \\(x\\), else we delete \\(x_i\\) and backtrack to the previous partial solution \\(( x_1, ... , x_{i-1} )\\)\u200b.</p>"},{"location":"ADS/back/lec/#example","title":"Example","text":""},{"location":"ADS/back/lec/#eight-queens","title":"Eight Queens","text":""},{"location":"ADS/back/lec/#the-turnpike-reconstruction-problem","title":"The Turnpike Reconstruction Problem","text":"<p>Given \\(N\\) points on the x-axis with coordinates \\(x_1 &lt;  x_2 &lt; \u2026&lt; x_N\\) .  Assume that \\(x_1 = 0\\).  There are \\(N ( N \u2013 1 ) / 2\\) distances between every pair of points.</p> <p>Given \\(N ( N \u2013 1 ) / 2\\) distances.  Reconstruct a point set from the distances.</p> <p>Example</p> <p></p> <p>Complexity : \\(2^n\\)</p> <pre><code>bool Reconstruct ( DistType X[ ], DistSet D, int N, int left, int right )\n{ /* X[1]...X[left-1] and X[right+1]...X[N] are solved */\n    bool Found = false;\n    if ( Is_Empty( D ) )\n        return true; /* solved */\n    D_max = Find_Max( D );\n    /* option 1\uff1aX[right] = D_max */\n    /* check if |D_max-X[i]|\uf0ceD is true for all X[i]\u2019s that have been solved */\n    OK = Check( D_max, N, left, right ); /* pruning */\n    if ( OK ) { /* add X[right] and update D */\n        X[right] = D_max;\n        for ( i=1; i&lt;left; i++ )  Delete( |X[right]-X[i]|, D);\n        for ( i=right+1; i&lt;=N; i++ )  Delete( |X[right]-X[i]|, D);\n        Found = Reconstruct ( X, D, N, left, right-1 );\n        if ( !Found ) { /* if does not work, undo */\n            for ( i=1; i&lt;left; i++ )  Insert( |X[right]-X[i]|, D);\n            for ( i=right+1; i&lt;=N; i++ )  Insert( |X[right]-X[i]|, D);\n        }\n    }\n    /* finish checking option 1 */\n  if ( !Found ) { /* if option 1 does not work */\n        /* option 2: X[left] = X[N]-D_max */\n        OK = Check( X[N]-D_max, N, left, right );\n        if ( OK ) {\n            X[left] = X[N] \u2013 D_max;\n            for ( i=1; i&lt;left; i++ )  Delete( |X[left]-X[i]|, D);\n            for ( i=right+1; i&lt;=N; i++ )  Delete( |X[left]-X[i]|, D);\n            Found = Reconstruct (X, D, N, left+1, right );\n            if ( !Found ) {\n                for ( i=1; i&lt;left; i++ ) Insert( |X[left]-X[i]|, D);\n                for ( i=right+1; i&lt;=N; i++ ) Insert( |X[left]-X[i]|,D);\n            }\n        }\n        /* finish checking option 2 */\n    } /* finish checking all the options */\n\n    return Found;\n}\n</code></pre> <ul> <li>A Template</li> </ul> <pre><code>bool Backtracking ( int i )\n{   Found = false;\n    if ( i &gt; N )\n        return true; /* solved with (x1, \u2026, xN) */\n    for ( each xi in Si ) { \n        /* check if satisfies the restriction R */\n        OK = Check((x1, \u2026, xi) , R ); /* pruning */\n        if ( OK ) {\n            Count xi in;\n            Found = Backtracking( i+1 );\n            if ( !Found )\n                Undo( i ); /* recover to (x1, \u2026, xi-1) */\n        }\n        if ( Found ) break; \n    }\n    return Found;\n}\n</code></pre> <p>\u6ce8\uff1a\u56de\u6eaf\u7684\u6548\u7387\u8ddfS\u7684\u89c4\u6a21\u3001\u7ea6\u675f\u51fd\u6570\u7684\u590d\u6742\u6027\u3001\u6ee1\u8db3\u7ea6\u675f\u6761\u4ef6\u7684\u7ed3\u70b9\u6570\u76f8\u5173\u3002\u7ea6\u675f\u51fd\u6570\u51b3\u5b9a\u4e86\u526a\u679d\u7684\u6548\u7387\uff0c\u4f46\u662f\u5982\u679c\u51fd\u6570\u672c\u8eab\u592a\u590d\u6742\u4e5f\u672a\u5fc5\u5408\u7b97\u3002\u6ee1\u8db3\u7ea6\u675f\u6761\u4ef6\u7684\u7ed3\u70b9\u6570\u6700\u96be\u4f30\u8ba1\uff0c\u4f7f\u5f97\u590d\u6742\u5ea6\u5206\u6790\u5f88\u96be\u5b8c\u6210\u3002</p>"},{"location":"ADS/back/lec/#different-construction-methods","title":"Different Construction Methods","text":"<p>In practice , we use the first tree more.</p>"},{"location":"ADS/back/lec/#stick-problem","title":"Stick Problem","text":"<p>George had a number of small sticks of the same length,whcih he cut into random sections. He wanted to know if he could reconstruct the original sticks from the sections.Given the lengths of the sections,help him to find the minimum possible length of the original sticks.</p> <p>Example Sample Input <pre><code>9\n5 2 1 5 2 1 5 2 1\n</code></pre> Sample Output <pre><code>6\n</code></pre> Idea: 1.Enumerate the length of the original sticks. 2.Check by enumerate a permutation by backtracking.</p> <p>Everytime devcide a stick section should belong to which original stick.</p> <ul> <li>prunning</li> <li>Current remaining longest stick section can be put nowhere.<ul> <li>Further improvement : sort the sections in descending order.Because longer sections have less choices.</li> </ul> </li> <li>Already forms N-1 sticks, just sum the remaining sections to get the last stick.</li> </ul>"},{"location":"ADS/back/lec/#games-how-did-alphago-win","title":"Games \u2013 how did AlphaGo win","text":"<p>Example:Tic-tac-toe</p> <ul> <li>More: Refer to Monte Carlo Tree Search</li> <li>https://aistudio.baidu.com/projectdetail/3773997?channelType=0&amp;channel=0</li> </ul> <p></p>"},{"location":"ADS/dy/lec/","title":"Dynamic Programming","text":"<p>"},{"location":"ADS/dy/lec/#dynamic-programming","title":"Dynamic Programming","text":""},{"location":"ADS/dy/lec/#example","title":"Example:","text":""},{"location":"ADS/dy/lec/#1-fibonacci-numbers","title":"1. Fibonacci numbers","text":"<pre><code>int fib(int n) {\n    if (n &lt;= 1) return n;\n    return fib(n-1) + fib(n-2);\n}\n</code></pre> <ul> <li>Time complexity: \\(O(2^n)\\)</li> </ul> <p>If we use dynamic programming, we can reduce the time complexity to \\(O(n)\\). <pre><code>int fib(int n) {\n    int f[n+1];\n    f[0] = 0;\n    f[1] = 1;\n    for (int i = 2; i &lt;= n; i++) {\n        f[i] = f[i-1] + f[i-2];\n    }\n    return f[n];\n}\n</code></pre></p>"},{"location":"ADS/dy/lec/#2-ordering-matrix-multiplications","title":"2. Ordering Matrix Multiplications","text":"<ul> <li>Suppose we are to multiply 4 matrice \\(M_1, M_2, M_3, M_4\\).   \\(M_{1[10\\times20]}, M_{2[20\\times 50]}, M_{3[50\\times 1]}, M_{4[1\\times100]}\\)</li> </ul> <p> *  In which order can we compute the product of n matrices with minimal computing time?</p> <p></p> <ul> <li>Satisfy the optimal substructure property</li> <li>Time complexity:    (1) Go through l : \\(O(n)\\)   (2) Computer m[i][l] : \\(O(1)\\)   (3) Compute m[i+1][j] : \\(O(1)\\)   (4) \\(r_{i-1} \\times r_l \\times r_j\\) : \\(O(1)\\)</li> </ul> <p>Total time complexity: \\(O(n^3)\\) -- compute all m[i][j]</p> <pre><code>void OptMatrix( const long r[ ], int N, TwoDimArray M ) \n{   int  i, j, k, L; \n    long  ThisM; \n    for( i = 1; i &lt;= N; i++ )   M[ i ][ i ] = 0; \n    for( k = 1; k &lt; N; k++ ) /* k = j - i */ \n        for( i = 1; i &lt;= N - k; i++ ) { /* For each position */ \n    j = i + k;    M[ i ][ j ] = Infinity; \n    for( L = i; L &lt; j; L++ ) { \n        ThisM = M[ i ][ L ] + M[ L + 1 ][ j ] \n            + r[ i - 1 ] * r[ L ] * r[ j ]; \n        if ( ThisM &lt; M[ i ][ j ] )  /* Update min */ \n        M[ i ][ j ] = ThisM; \n    }  /* end for-L */\n        }  /* end for-Left */\n}\n</code></pre> <ul> <li>More suitable way : Find a order that is increasing. <p>\\(F[N][i] = min_{k}(F[k-i][i]+F[N-k-i][k+1]+r_{k-i-1} \\times r_i \\times r_{N-i})\\) ?</p> </li> </ul>"},{"location":"ADS/dy/lec/#3-optimal-binary-search-trees","title":"3. Optimal Binary Search Trees","text":"<p>Given  N  words  \\(w_1, w_2, \\cdots, w_N\\)  and their search probabilities  \\(p_1, p_2, \\cdots, p_N\\) .  We want to arrange these words in a binary search tree in a way that minimize the expected total access time : \\(\\sum_{i=1}^{N} (d_i+1) \\times p_i\\) , where  \\(d_i\\)  is the depth of the node containing  \\(w_i\\)  in the binary search tree.</p> <p></p> <ul> <li>Note: ordered by Alphabetical order!</li> </ul> <p></p>"},{"location":"ADS/dy/lec/#4-all-pairs-shortest-paths","title":"4. All Pairs Shortest Paths","text":"<ul> <li>Given a graph  \\(G = (V, E)\\)  with edge weights  \\(w(u, v)\\)  for  \\((u, v) \\in E\\) , we want to compute the shortest path between every pair of vertices in  \\(V\\) .</li> </ul> <p>Method 1: Use single source shortest path algorithm  \\(N\\)  times.</p> <p>Method 2: Floyd-Warshall Algorithm Define  \\(D^k[i][j]\\)= \\(min\\{ length\\ of\\ path\\ i \\to {l \\le k }\\to j\\}\\) and \\(D^{-1}[ i ] [ j ] = Cost [ i ] [ j ]\\). </p> <p>Then the length of the shortest path from i to j  is \\(D^{N-1}[ i ] [ j ]\\).</p> <p></p> <pre><code>/* A[ ] contains the adjacency matrix with A[ i ][ i ] = 0 */ \n/* D[ ] contains the values of the shortest path */ \n/* N is the number of vertices */ \n/* A negative cycle exists iff D[ i ][ i ] &lt; 0 */ \nvoid AllPairs( TwoDimArray A, TwoDimArray D, int N ) \n{   int  i, j, k; \n    for ( i = 0; i &lt; N; i++ )  /* Initialize D */ \n         for( j = 0; j &lt; N; j++ )\n     D[ i ][ j ] = A[ i ][ j ]; \n    for( k = 0; k &lt; N; k++ )  /* add one vertex k into the path */\n         for( i = 0; i &lt; N; i++ ) \n     for( j = 0; j &lt; N; j++ ) \n        if( D[ i ][ k ] + D[ k ][ j ] &lt; D[ i ][ j ] ) \n        /* Update shortest path */ \n         D[ i ][ j ] = D[ i ][ k ] + D[ k ][ j ]; \n}\n</code></pre> <p>\\(T(N) = O(N^3)\\), but faster in a dense graph.</p> <p>How to design a DP method? 1. Characterize the structure of an optimal solution. 2. Recursively define the value of an optimal solution. 3. Compute the value of an optimal solution in some order. 4. Reconstruct an optimal solution from computed information.</p>"},{"location":"ADS/dy/lec/#5-product-assembly","title":"5. Product Assembly","text":"<ul> <li>Two assembly lines for the same car</li> <li>Different technology (time) for each stage</li> <li>One can change lines between stages</li> <li>Minimize the total assembly time    </li> </ul>"},{"location":"ADS/greedy/lec/","title":"Greedy Algorithm","text":"<p>"},{"location":"ADS/greedy/lec/#greedy-algorithm","title":"Greedy Algorithm","text":""},{"location":"ADS/greedy/lec/#activities-arrangements","title":"Activities Arrangements","text":"<p>Given a set of activities \\(S = \\{ a_1, a_2, \u2026, a_n \\}\\) that wish to use a resource (e.g. a classroom). </p> <p>Each \\(a_i\\) takes place during a time interval \\([s_i, f_i)\\).Activities ai and aj are compatible if \\(s_i \\ge f_j\\) or \\(s_j \\ge f_i\\)\u200b\u200b (i.e. their time intervals do not overlap).</p>"},{"location":"ADS/greedy/lec/#dynamic-programming","title":"Dynamic Programming","text":"<ul> <li>A DP Solution</li> </ul> <p><code>c[i][k] :  i is start activity j is end activity and i j not included.</code></p> <pre><code>//\u8bb0\u5fc6\u4fdd\u5b58\u641c\u7d22\u7ed3\u679c\nif S[i][j] == NULL : return 0;\nfor k\n  if (c[i][k]==-1) c[i][k] = dfs(i,k)\n</code></pre> <ul> <li>Better Solution</li> </ul> <p></p>"},{"location":"ADS/greedy/lec/#greedy-algorithm_1","title":"Greedy Algorithm","text":"<ol> <li> <p>Cast the optimization problem as one in which we make a choice and are left with one subproblem to solve.</p> </li> <li> <p>Prove that there is always an optimal solution to the original problem that makes the greedy choice, so that the greedy choice is always safe.</p> </li> </ol> <p>First choice can always be included !</p> <ol> <li>Demonstrate optimal substructure by showing that, having made the greedy choice, what remains is a subproblem with the property that if we combine an optimal solution to the subproblem with the greedy choice we have made, we arrive at an optimal solution to the original problem. </li> </ol> <p>Greedy algorithm works only if the local optimum is equal to the global optimum. </p> <p></p> <p></p>"},{"location":"ADS/greedy/lec/#change","title":"Change","text":""},{"location":"ADS/greedy/lec/#huffman-codes","title":"Huffman Codes","text":"<p>The trick is:No code is a prefix of another!! </p> <ul> <li>All characters are at leaves!</li> <li>Full Tree !</li> </ul> <p>Or it will cause ambiguity when decoding!</p>"},{"location":"ADS/greedy/lec/#huffmans-algorithm","title":"Huffman's algorithm","text":"<pre><code>void Huffman ( PriorityQueue  heap[ ],  int  C )\n{   consider the C characters as C single node binary trees,\n     and initialize them into a min heap;\n     for ( i = 1; i &lt; C; i++ ) { \n        create a new node;\n        /* be greedy here */\n        delete root from min heap and attach it to left_child of node;\n        delete root from min heap and attach it to right_child of node;\n        weight of node = sum of weights of its children;\n        /* weight of a tree = sum of the frequencies of its leaves */\n        insert node into min heap;\n   }\n}\n/*T = O(ClogC)*/\n</code></pre> <ul> <li>\\(T^{*'} = T^*-freq(x)-freq(y)\\\\(T^{*'} = cost + d*freq(x+y)),T^* = cost + (d+1)*(freq(x)+freq(y))\\)\u200b</li> </ul>"},{"location":"ADS/local/local/","title":"Local Search","text":""},{"location":"ADS/rand/lec/","title":"Randomized Algorithm","text":"<p>"},{"location":"ADS/rand/lec/#randomized-algorithms","title":"Randomized Algorithms","text":""},{"location":"ADS/rand/lec/#example-the-hiring-problem","title":"[Example] The Hiring Problem","text":"<ul> <li>Hire an office assistant from headhunter </li> <li>Interview a different applicant per day for N days</li> <li>Interviewing \\(Cost = C_i\\)  &lt;&lt;  \\(Hiring Cost = C_h\\)</li> <li>Analyze interview &amp; hiring cost instead of running time</li> </ul> <p>Assume M people are hired.Total Cost: \\(C = O(NC_i + MC_h)\\)</p>"},{"location":"ADS/rand/lec/#naive-solution","title":"Na\u00efve Solution","text":"<p><pre><code>int Hiring ( EventType C[ ], int N )\n{   /* candidate 0 is a least-qualified dummy candidate */\n    int Best = 0;\n    int BestQ = the quality of candidate 0;\n    for ( i=1; i&lt;=N; i++ ) {\n        Qi = interview( i ); /* Ci */\n        if ( Qi &gt; BestQ ) {\n            BestQ = Qi;\n            Best = i;\n            hire( i );  /* Ch */\n        }\n    }\n    return Best;\n}\n</code></pre> Worst Case: \\(O(N)\\) interviews, \\(O(N)\\) hires, \\(O(N)\\) comparisons</p> <p>Assume candidates are randomly ordered. * X = number of hires. E[X] = \\(\\sum\\limits_{i=1}^{N} i\u00b7Pr[X=i]\\) * $ X_i = \\begin{array}{ll} 1 if i is hired \\ 0 otherwise \\end{array}$ * \\(Pr[X_i = 1] = \\frac{1}{i}\\) * E[X] = Expected number of hires = \\(E[\\sum\\limits_{i=1}^{N} X_i] = \\sum\\limits_{i=1}^{N} E[X_i] = \\sum\\limits_{i=1}^{N} \\frac{1}{i} = O(\\log N) +O(1)\\) * \\(O(C_h \\log N + NC_i)\\)</p>"},{"location":"ADS/rand/lec/#randomized-solution","title":"Randomized Solution","text":"<pre><code>int RandomizedHiring ( EventType C[ ], int N )\n{   /* candidate 0 is a least-qualified dummy candidate */\n    int Best = 0;\n    int BestQ = the quality of candidate 0;\n\n    randomly permute the list of candidates;\n\n    for ( i=1; i&lt;=N; i++ ) {\n        Qi = interview( i ); /* Ci */\n        if ( Qi &gt; BestQ ) {\n            BestQ = Qi;\n            Best = i;\n            hire( i );  /* Ch */\n        }\n    }\n}\n</code></pre>"},{"location":"ADS/rand/lec/#radomized-permutation-algorithm","title":"Radomized Permutation Algorithm","text":"<ul> <li>Target : Permute array A[ ] <p>Assign each element A[ i ] a random priority P[ i ],and sort <pre><code>void PermuteBySorting ( ElemType A[ ], int N )\n{\n    for ( i=1; i&lt;=N; i++ )\n        A[i].P = 1 + rand()%(N3); \n        /* makes it more likely that all priorities are unique */\n    Sort A, using P as the sort keys;\n}\n</code></pre></p> </li> <li>What's the possibility of no two priorities being the same?  \\(\\frac{A_{N^3}^N }{(N^3)^N}\\)</li> </ul>"},{"location":"ADS/rand/lec/#online-hiring-algorithm","title":"online Hiring Algorithm","text":"<pre><code>int OnlineHiring ( EventType C[ ], int N, int k )\n{\n    int Best = N;\n    int BestQ = - infinity ;\n    for ( i=1; i&lt;=k; i++ ) {\n        Qi = interview( i );\n        if ( Qi &gt; BestQ )   BestQ = Qi;\n    }\n    for ( i=k+1; i&lt;=N; i++ ) {\n        Qi = interview( i );\n        if ( Qi &gt; BestQ ) {\n            Best = i;\n            break;\n        }\n    }\n    return Best;\n}\n</code></pre>"},{"location":"ADS/rand/lec/#example-quicksort","title":"[Example] Quicksort","text":"<ul> <li>Central splitter := the pivot that divides the set so that each side contains at least \\(n/4\\)</li> <li>Modified Quicksort := always select a central splitter before recursions</li> </ul>"},{"location":"AI/net/","title":"Neural Networks and Deep Learning","text":""},{"location":"AI/net/#convolutional-neural-networkcnn","title":"Convolutional Neural Network(CNN)","text":"<p>https://leovan.me/cn/2018/08/cnn/</p>"},{"location":"AI/net/#recurrent-neural-network-rnn","title":"Recurrent Neural Network \uff08RNN\uff09","text":"<p>\\(O_t=g(V\\cdot S_t)\\)</p> <p>\\(S_t=\\Phi(U\\cdot X_t+W\\cdot S_{t-1})\\) \\(\\Phi\\)\uff08\u6fc0\u6d3b\u51fd\u6570\uff09</p> <p></p>"},{"location":"AI/net/#back-propagation","title":"Back propagation","text":""},{"location":"AI/net/#intro","title":"Intro","text":"<p>\\(Cost=H(W_{11},W_{12},\u2026\u2026,W_{mn})\\)</p> <p>\\(\\triangledown H=\\frac{\\partial H}{\\partial W_{11}}e_{11}+\\frac{\\partial H}{\\partial W_{12}}e_{12}+\u2026\u2026+\\frac{\\partial H}{\\partial W_{mn}}e_{mn}\\)</p> <p>https://zhuanlan.zhihu.com/p/115571464</p> <p>https://towardsdatascience.com/understanding-backpropagation-algorithm-7bb3aa2f95fd</p> <p>\u53cd\u5411\u4f20\u64ad\uff08Backpropagation\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u8bad\u7ec3\u795e\u7ecf\u7f51\u7edc\u7684\u4f18\u5316\u7b97\u6cd5\uff0c\u901a\u8fc7\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u5173\u4e8e\u7f51\u7edc\u53c2\u6570\u7684\u68af\u5ea6\uff0c\u5e76\u5229\u7528\u8fd9\u4e9b\u68af\u5ea6\u6765\u66f4\u65b0\u53c2\u6570\uff0c\u4ee5\u6700\u5c0f\u5316\u635f\u5931\u51fd\u6570\u3002</p> <ol> <li>\u524d\u5411\u4f20\u64ad\uff08Forward Propagation\uff09\uff1a \u5c06\u8f93\u5165\u6570\u636e\u901a\u8fc7\u795e\u7ecf\u7f51\u7edc\u8fdb\u884c\u6b63\u5411\u4f20\u64ad\uff0c\u8ba1\u7b97\u6bcf\u4e00\u5c42\u7684\u8f93\u51fa\u3002</li> <li>\u8ba1\u7b97\u635f\u5931\uff08Compute Loss\uff09\uff1a \u4f7f\u7528\u7f51\u7edc\u7684\u8f93\u51fa\u548c\u771f\u5b9e\u6807\u7b7e\u8ba1\u7b97\u635f\u5931\u51fd\u6570\uff0c\u8861\u91cf\u7f51\u7edc\u7684\u6027\u80fd\u597d\u574f\u3002</li> <li>\u53cd\u5411\u4f20\u64ad\u68af\u5ea6\uff08Backward Pass\uff09\uff1a \u4ece\u8f93\u51fa\u5c42\u5f00\u59cb\uff0c\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u5173\u4e8e\u6bcf\u4e2a\u53c2\u6570\u7684\u68af\u5ea6\u3002\u8fd9\u662f\u901a\u8fc7\u4f7f\u7528\u94fe\u5f0f\u6cd5\u5219\u6765\u8ba1\u7b97\u7684\uff0c\u5c06\u68af\u5ea6\u4ece\u8f93\u51fa\u5c42\u5411\u8f93\u5165\u5c42\u4f20\u64ad\u3002</li> <li>\u53c2\u6570\u66f4\u65b0\uff08Update Parameters\uff09\uff1a \u4f7f\u7528\u68af\u5ea6\u4e0b\u964d\u6216\u5176\u4ed6\u4f18\u5316\u7b97\u6cd5\uff0c\u901a\u8fc7\u5c06\u68af\u5ea6\u4e58\u4ee5\u4e00\u4e2a\u5b66\u4e60\u7387\uff0c\u6765\u66f4\u65b0\u7f51\u7edc\u53c2\u6570\u3002\u5b66\u4e60\u7387\u63a7\u5236\u4e86\u6bcf\u6b21\u53c2\u6570\u66f4\u65b0\u7684\u6b65\u957f\uff0c\u4ee5\u907f\u514d\u8df3\u8fc7\u6700\u4f18\u89e3\u3002</li> <li>\u91cd\u590d\u8fed\u4ee3\uff08Repeat\uff09\uff1a \u91cd\u590d\u4ee5\u4e0a\u6b65\u9aa4\uff0c\u76f4\u5230\u635f\u5931\u51fd\u6570\u6536\u655b\u5230\u6ee1\u610f\u7684\u7a0b\u5ea6\u6216\u8fbe\u5230\u9884\u5b9a\u7684\u8bad\u7ec3\u6b21\u6570\u3002</li> </ol>"},{"location":"AI/net/#_1","title":"\u68af\u5ea6\u7684\u8ba1\u7b97","text":"<p>\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u5bf9\u7f51\u7edc\u8f93\u51fa\u7684\u68af\u5ea6\uff08\u5373\u635f\u5931\u51fd\u6570\u5173\u4e8e\u8f93\u51fa\u7684\u5bfc\u6570\uff09\u3002</p> <ul> <li>\u4f7f\u7528\u94fe\u5f0f\u6cd5\u5219\uff0c\u5c06\u68af\u5ea6\u4ece\u8f93\u51fa\u5c42\u4f20\u64ad\u5230\u8f93\u5165\u5c42\uff0c\u8ba1\u7b97\u6bcf\u4e00\u5c42\u7684\u68af\u5ea6\u3002</li> <li>\u6839\u636e\u68af\u5ea6\u548c\u9009\u62e9\u7684\u4f18\u5316\u7b97\u6cd5\uff0c\u66f4\u65b0\u6bcf\u4e2a\u53c2\u6570\u3002</li> </ul> <p>\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u901a\u8fc7\u53cd\u5411\u4f20\u64ad\u548c\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5\u7684\u7ed3\u5408\u6765\u5b9e\u73b0\u7684\uff0c\u4ee5\u6700\u5c0f\u5316\u635f\u5931\u51fd\u6570\u5e76\u4f18\u5316\u795e\u7ecf\u7f51\u7edc\u7684\u53c2\u6570\u3002</p>"},{"location":"AI/net/#_2","title":"\u53c2\u6570\u66f4\u65b0","text":"<p>\\(\u03b8_{new}=\u03b8_{old}\u2212\u03b1\u2207L(\u03b8_{old})\\)</p> <p>\u5176\u4e2d\uff1a</p> <ul> <li>\\(\u03b8_{old}\\) \u662f\u5f53\u524d\u7684\u53c2\u6570\u503c\u3002</li> <li>\\(\u2207L(\u03b8_{old}\\)\u662f\u635f\u5931\u51fd\u6570\u76f8\u5bf9\u4e8e\u53c2\u6570\u7684\u68af\u5ea6\u3002</li> <li>\\(\u03b1\\) \u662f\u5b66\u4e60\u7387\uff0c\u662f\u4e00\u4e2a\u5c0f\u6b63\u6570\u3002</li> </ul> <p>\u8fd9\u4e2a\u66f4\u65b0\u89c4\u5219\u7684\u76f4\u89c2\u89e3\u91ca\u662f\uff0c\u6211\u4eec\u6cbf\u7740\u635f\u5931\u51fd\u6570\u4e0b\u964d\u6700\u5feb\u7684\u65b9\u5411\u66f4\u65b0\u53c2\u6570\u3002\u68af\u5ea6\u544a\u8bc9\u6211\u4eec\u635f\u5931\u51fd\u6570\u5728\u5f53\u524d\u70b9\u4e0a\u5347\u6700\u5feb\u7684\u65b9\u5411\uff0c\u6211\u4eec\u6cbf\u7740\u68af\u5ea6\u7684\u53cd\u65b9\u5411\u524d\u8fdb\uff0c\u4ee5\u964d\u4f4e\u635f\u5931\u3002</p> <p>\u5b66\u4e60\u7387\u7684\u9009\u62e9\u662f\u5173\u952e\u7684\u3002\u5982\u679c\u5b66\u4e60\u7387\u592a\u5c0f\uff0c\u6536\u655b\u901f\u5ea6\u4f1a\u5f88\u6162\uff0c\u800c\u5982\u679c\u5b66\u4e60\u7387\u592a\u5927\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u8df3\u8fc7\u635f\u5931\u51fd\u6570\u7684\u6700\u5c0f\u503c\u3002\u56e0\u6b64\uff0c\u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u5b66\u4e60\u7387\u5bf9\u4e8e\u8bad\u7ec3\u795e\u7ecf\u7f51\u7edc\u81f3\u5173\u91cd\u8981\u3002</p> <p>\u901a\u5e38\uff0c\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u5b66\u4e60\u7387\u53ef\u80fd\u4f1a\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u53d8\u5316\uff0c\u8fd9\u88ab\u79f0\u4e3a\u5b66\u4e60\u7387\u8c03\u5ea6\uff08learning rate scheduling\uff09\u3002\u4f8b\u5982\uff0c\u521d\u59cb\u65f6\u53ef\u4ee5\u4f7f\u7528\u8f83\u5927\u7684\u5b66\u4e60\u7387\u4ee5\u5feb\u901f\u6536\u655b\uff0c\u7136\u540e\u968f\u7740\u8bad\u7ec3\u7684\u8fdb\u884c\u9010\u6e10\u51cf\u5c0f\u5b66\u4e60\u7387\uff0c\u4ee5\u63d0\u9ad8\u6536\u655b\u7684\u7cbe\u5ea6\u3002</p> <p>\u603b\u7684\u6765\u8bf4\uff0c\u5b66\u4e60\u7387\u662f\u4e00\u4e2a\u5e73\u8861\u8bad\u7ec3\u901f\u5ea6\u548c\u6027\u80fd\u7684\u5173\u952e\u56e0\u7d20\u3002\u4e0d\u540c\u7684\u95ee\u9898\u53ef\u80fd\u9700\u8981\u4e0d\u540c\u7684\u5b66\u4e60\u7387\uff0c\u56e0\u6b64\u5b83\u901a\u5e38\u9700\u8981\u901a\u8fc7\u5b9e\u9a8c\u6765\u8c03\u6574\u3002</p>"},{"location":"AI/net/#back-propagation-in-cnn","title":"Back propagation in CNN","text":"<p>https://mmuratarat.github.io/2019-02-07/bptt-of-rnn</p>"},{"location":"AI/net/#long-short-term-memory","title":"Long Short-Term Memory","text":"<p>https://easyai.tech/ai-definition/rnn/</p> <p>https://blog.csdn.net/u012328159/article/details/87567358</p>"},{"location":"AI/net/#attention","title":"Attention","text":"<p>https://www.cnblogs.com/gczr/p/14693829.html</p> <p>https://zhuanlan.zhihu.com/p/379722366</p> <p></p>"},{"location":"AI/pca/","title":"\u6570\u636e\u7684\u5411\u91cf\u8868\u793a\u53ca\u964d\u7ef4\u95ee\u9898","text":"<p>\u6ce8\u660e\uff1a\u6765\u6e90</p> <ul> <li>\u57fa</li> </ul> <p>\u4e0b\u9762\u6211\u4eec\u7ee7\u7eed\u5728\u4e8c\u7ef4\u7a7a\u95f4\u5185\u8ba8\u8bba\u5411\u91cf\u3002\u4e0a\u6587\u8bf4\u8fc7\uff0c\u4e00\u4e2a\u4e8c\u7ef4\u5411\u91cf\u53ef\u4ee5\u5bf9\u5e94\u4e8c\u7ef4\u7b1b\u5361\u5c14\u76f4\u89d2\u5750\u6807\u7cfb\u4e2d\u4ece\u539f\u70b9\u51fa\u53d1\u7684\u4e00\u4e2a\u6709\u5411\u7ebf\u6bb5\u3002\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u5411\u91cf\uff1a</p> <p></p> <p>\u5728\u4ee3\u6570\u8868\u793a\u65b9\u9762\uff0c\u6211\u4eec\u7ecf\u5e38\u7528\u7ebf\u6bb5\u7ec8\u70b9\u7684\u70b9\u5750\u6807\u8868\u793a\u5411\u91cf\uff0c\u4f8b\u5982\u4e0a\u9762\u7684\u5411\u91cf\u53ef\u4ee5\u8868\u793a\u4e3a(3,2)\uff0c\u8fd9\u662f\u6211\u4eec\u518d\u719f\u6089\u4e0d\u8fc7\u7684\u5411\u91cf\u8868\u793a\u3002</p> <p>\u4e0d\u8fc7\u6211\u4eec\u5e38\u5e38\u5ffd\u7565\uff0c\u53ea\u6709\u4e00\u4e2a(3,2)\u672c\u8eab\u662f\u4e0d\u80fd\u591f\u7cbe\u786e\u8868\u793a\u4e00\u4e2a\u5411\u91cf\u7684\u3002\u6211\u4eec\u4ed4\u7ec6\u770b\u4e00\u4e0b\uff0c\u8fd9\u91cc\u76843\u5b9e\u9645\u8868\u793a\u7684\u662f\u5411\u91cf\u5728x\u8f74\u4e0a\u7684\u6295\u5f71\u503c\u662f3\uff0c\u5728y\u8f74\u4e0a\u7684\u6295\u5f71\u503c\u662f2\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5176\u5b9e\u9690\u5f0f\u5f15\u5165\u4e86\u4e00\u4e2a\u5b9a\u4e49\uff1a\u4ee5x\u8f74\u548cy\u8f74\u4e0a\u6b63\u65b9\u5411\u957f\u5ea6\u4e3a1\u7684\u5411\u91cf\u4e3a\u6807\u51c6\u3002\u90a3\u4e48\u4e00\u4e2a\u5411\u91cf(3,2)\u5b9e\u9645\u662f\u8bf4\u5728x\u8f74\u6295\u5f71\u4e3a3\u800cy\u8f74\u7684\u6295\u5f71\u4e3a2\u3002\u6ce8\u610f\u6295\u5f71\u662f\u4e00\u4e2a\u77e2\u91cf\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e3a\u8d1f\u3002</p> <p>\u66f4\u6b63\u5f0f\u7684\u8bf4\uff0c\u5411\u91cf(x,y)\u5b9e\u9645\u4e0a\u8868\u793a\u7ebf\u6027\u7ec4\u5408\uff1a</p> \\[x(1,0)^\\mathsf{T}+y(0,1)^\\mathsf{T}\\] <p>\u4e0d\u96be\u8bc1\u660e\u6240\u6709\u4e8c\u7ef4\u5411\u91cf\u90fd\u53ef\u4ee5\u8868\u793a\u4e3a\u8fd9\u6837\u7684\u7ebf\u6027\u7ec4\u5408\u3002\u6b64\u5904(1,0)\u548c(0,1)\u53eb\u505a\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u7684\u4e00\u7ec4\u57fa\u3002</p> <p></p> <p>\u6240\u4ee5\uff0c\u8981\u51c6\u786e\u63cf\u8ff0\u5411\u91cf\uff0c\u9996\u5148\u8981\u786e\u5b9a\u4e00\u7ec4\u57fa\uff0c\u7136\u540e\u7ed9\u51fa\u5728\u57fa\u6240\u5728\u7684\u5404\u4e2a\u76f4\u7ebf\u4e0a\u7684\u6295\u5f71\u503c\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002\u53ea\u4e0d\u8fc7\u6211\u4eec\u7ecf\u5e38\u7701\u7565\u7b2c\u4e00\u6b65\uff0c\u800c\u9ed8\u8ba4\u4ee5(1,0)\u548c(0,1)\u4e3a\u57fa\u3002</p> <p>\u6211\u4eec\u4e4b\u6240\u4ee5\u9ed8\u8ba4\u9009\u62e9(1,0)\u548c(0,1)\u4e3a\u57fa\uff0c\u5f53\u7136\u662f\u6bd4\u8f83\u65b9\u4fbf\uff0c\u56e0\u4e3a\u5b83\u4eec\u5206\u522b\u662fx\u548cy\u8f74\u6b63\u65b9\u5411\u4e0a\u7684\u5355\u4f4d\u5411\u91cf\uff0c\u56e0\u6b64\u5c31\u4f7f\u5f97\u4e8c\u7ef4\u5e73\u9762\u4e0a\u70b9\u5750\u6807\u548c\u5411\u91cf\u4e00\u4e00\u5bf9\u5e94\uff0c\u975e\u5e38\u65b9\u4fbf\u3002\u4f46\u5b9e\u9645\u4e0a\u4efb\u4f55\u4e24\u4e2a\u7ebf\u6027\u65e0\u5173\u7684\u4e8c\u7ef4\u5411\u91cf\u90fd\u53ef\u4ee5\u6210\u4e3a\u4e00\u7ec4\u57fa\uff0c\u6240\u8c13\u7ebf\u6027\u65e0\u5173\u5728\u4e8c\u7ef4\u5e73\u9762\u5185\u53ef\u4ee5\u76f4\u89c2\u8ba4\u4e3a\u662f\u4e24\u4e2a\u4e0d\u5728\u4e00\u6761\u76f4\u7ebf\u4e0a\u7684\u5411\u91cf\u3002</p> <p>\u4f8b\u5982\uff0c(1,1)\u548c(-1,1)\u4e5f\u53ef\u4ee5\u6210\u4e3a\u4e00\u7ec4\u57fa\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u5e0c\u671b\u57fa\u7684\u6a21\u662f1\uff0c\u56e0\u4e3a\u4ece\u5185\u79ef\u7684\u610f\u4e49\u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u57fa\u7684\u6a21\u662f1\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u65b9\u4fbf\u7684\u7528\u5411\u91cf\u70b9\u4e58\u57fa\u800c\u76f4\u63a5\u83b7\u5f97\u5176\u5728\u65b0\u57fa\u4e0a\u7684\u5750\u6807\u4e86\uff01\u5b9e\u9645\u4e0a\uff0c\u5bf9\u5e94\u4efb\u4f55\u4e00\u4e2a\u5411\u91cf\u6211\u4eec\u603b\u53ef\u4ee5\u627e\u5230\u5176\u540c\u65b9\u5411\u4e0a\u6a21\u4e3a1\u7684\u5411\u91cf\uff0c\u53ea\u8981\u8ba9\u4e24\u4e2a\u5206\u91cf\u5206\u522b\u9664\u4ee5\u6a21\u5c31\u597d\u4e86\u3002\u4f8b\u5982\uff0c\u4e0a\u9762\u7684\u57fa\u53ef\u4ee5\u53d8\u4e3a\\((\\frac{1}{\\sqrt{2}},\\frac{1}{\\sqrt{2}})\\)\u548c\\((-\\frac{1}{\\sqrt{2}},\\frac{1}{\\sqrt{2}})\\)\u3002</p> <p>\u73b0\u5728\uff0c\u6211\u4eec\u60f3\u83b7\u5f97(3,2)\u5728\u65b0\u57fa\u4e0a\u7684\u5750\u6807\uff0c\u5373\u5728\u4e24\u4e2a\u65b9\u5411\u4e0a\u7684\u6295\u5f71\u77e2\u91cf\u503c\uff0c\u90a3\u4e48\u6839\u636e\u5185\u79ef\u7684\u51e0\u4f55\u610f\u4e49\uff0c\u6211\u4eec\u53ea\u8981\u5206\u522b\u8ba1\u7b97(3,2)\u548c\u4e24\u4e2a\u57fa\u7684\u5185\u79ef\uff0c\u4e0d\u96be\u5f97\u5230\u65b0\u7684\u5750\u6807\u4e3a\\((\\frac{5}{\\sqrt{2}},-\\frac{1}{\\sqrt{2}})\\)\u3002\u4e0b\u56fe\u7ed9\u51fa\u4e86\u65b0\u7684\u57fa\u4ee5\u53ca(3,2)\u5728\u65b0\u57fa\u4e0a\u5750\u6807\u503c\u7684\u793a\u610f\u56fe\uff1a</p> <p></p> <p>\u53e6\u5916\u8fd9\u91cc\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5217\u4e3e\u7684\u4f8b\u5b50\u4e2d\u57fa\u662f\u6b63\u4ea4\u7684\uff08\u5373\u5185\u79ef\u4e3a0\uff0c\u6216\u76f4\u89c2\u8bf4\u76f8\u4e92\u5782\u76f4\uff09\uff0c\u4f46\u53ef\u4ee5\u6210\u4e3a\u4e00\u7ec4\u57fa\u7684\u552f\u4e00\u8981\u6c42\u5c31\u662f\u7ebf\u6027\u65e0\u5173\uff0c\u975e\u6b63\u4ea4\u7684\u57fa\u4e5f\u662f\u53ef\u4ee5\u7684\u3002\u4e0d\u8fc7\u56e0\u4e3a\u6b63\u4ea4\u57fa\u6709\u8f83\u597d\u7684\u6027\u8d28\uff0c\u6240\u4ee5\u4e00\u822c\u4f7f\u7528\u7684\u57fa\u90fd\u662f\u6b63\u4ea4\u7684\u3002</p> <ul> <li>\u57fa\u53d8\u6362\u7684\u77e9\u9635\u8868\u793a</li> </ul> <p>\u4e0b\u9762\u6211\u4eec\u627e\u4e00\u79cd\u7b80\u4fbf\u7684\u65b9\u5f0f\u6765\u8868\u793a\u57fa\u53d8\u6362\u3002\u8fd8\u662f\u62ff\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u60f3\u4e00\u4e0b\uff0c\u5c06(3,2)\u53d8\u6362\u4e3a\u65b0\u57fa\u4e0a\u7684\u5750\u6807\uff0c\u5c31\u662f\u7528(3,2)\u4e0e\u7b2c\u4e00\u4e2a\u57fa\u505a\u5185\u79ef\u8fd0\u7b97\uff0c\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u65b0\u7684\u5750\u6807\u5206\u91cf\uff0c\u7136\u540e\u7528(3,2)\u4e0e\u7b2c\u4e8c\u4e2a\u57fa\u505a\u5185\u79ef\u8fd0\u7b97\uff0c\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u65b0\u5750\u6807\u7684\u5206\u91cf\u3002\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u77e9\u9635\u76f8\u4e58\u7684\u5f62\u5f0f\u7b80\u6d01\u7684\u8868\u793a\u8fd9\u4e2a\u53d8\u6362\uff1a</p> \\[\\begin{pmatrix} 1/\\sqrt{2} &amp; 1/\\sqrt{2} \\\\ -1/\\sqrt{2} &amp; 1/\\sqrt{2} \\end{pmatrix} \\begin{pmatrix} 3 \\\\ 2 \\end{pmatrix} = \\begin{pmatrix} 5/\\sqrt{2} \\\\ -1/\\sqrt{2} \\end{pmatrix}\\] <p>\u592a\u6f02\u4eae\u4e86\uff01\u5176\u4e2d\u77e9\u9635\u7684\u4e24\u884c\u5206\u522b\u4e3a\u4e24\u4e2a\u57fa\uff0c\u4e58\u4ee5\u539f\u5411\u91cf\uff0c\u5176\u7ed3\u679c\u521a\u597d\u4e3a\u65b0\u57fa\u7684\u5750\u6807\u3002\u53ef\u4ee5\u7a0d\u5fae\u63a8\u5e7f\u4e00\u4e0b\uff0c\u5982\u679c\u6211\u4eec\u6709m\u4e2a\u4e8c\u7ef4\u5411\u91cf\uff0c\u53ea\u8981\u5c06\u4e8c\u7ef4\u5411\u91cf\u6309\u5217\u6392\u6210\u4e00\u4e2a\u4e24\u884cm\u5217\u77e9\u9635\uff0c\u7136\u540e\u7528\u201c\u57fa\u77e9\u9635\u201d\u4e58\u4ee5\u8fd9\u4e2a\u77e9\u9635\uff0c\u5c31\u5f97\u5230\u4e86\u6240\u6709\u8fd9\u4e9b\u5411\u91cf\u5728\u65b0\u57fa\u4e0b\u7684\u503c\u3002\u4f8b\u5982(1,1)\uff0c(2,2)\uff0c(3,3)\uff0c\u60f3\u53d8\u6362\u5230\u521a\u624d\u90a3\u7ec4\u57fa\u4e0a\uff0c\u5219\u53ef\u4ee5\u8fd9\u6837\u8868\u793a\uff1a</p> \\[\\begin{pmatrix} 1/\\sqrt{2} &amp; 1/\\sqrt{2} \\\\ -1/\\sqrt{2} &amp; 1/\\sqrt{2} \\end{pmatrix} \\begin{pmatrix} 1 &amp; 2 &amp; 3 \\\\ 1 &amp; 2 &amp; 3 \\end{pmatrix} = \\begin{pmatrix} 2/\\sqrt{2} &amp; 4/\\sqrt{2} &amp; 6/\\sqrt{2} \\\\ 0 &amp; 0 &amp; 0 \\end{pmatrix}\\] <p>\u4e8e\u662f\u4e00\u7ec4\u5411\u91cf\u7684\u57fa\u53d8\u6362\u88ab\u5e72\u51c0\u7684\u8868\u793a\u4e3a\u77e9\u9635\u7684\u76f8\u4e58\u3002</p> <p>\u4e00\u822c\u7684\uff0c\u5982\u679c\u6211\u4eec\u6709M\u4e2aN\u7ef4\u5411\u91cf\uff0c\u60f3\u5c06\u5176\u53d8\u6362\u4e3a\u7531R\u4e2aN\u7ef4\u5411\u91cf\u8868\u793a\u7684\u65b0\u7a7a\u95f4\u4e2d\uff0c\u90a3\u4e48\u9996\u5148\u5c06R\u4e2a\u57fa\u6309\u884c\u7ec4\u6210\u77e9\u9635A\uff0c\u7136\u540e\u5c06\u5411\u91cf\u6309\u5217\u7ec4\u6210\u77e9\u9635B\uff0c\u90a3\u4e48\u4e24\u77e9\u9635\u7684\u4e58\u79efAB\u5c31\u662f\u53d8\u6362\u7ed3\u679c\uff0c\u5176\u4e2dAB\u7684\u7b2cm\u5217\u4e3aA\u4e2d\u7b2cm\u5217\u53d8\u6362\u540e\u7684\u7ed3\u679c\u3002</p> <p>\u6570\u5b66\u8868\u793a\u4e3a\uff1a</p> \\[\\begin{pmatrix} p_1 \\\\ p_2 \\\\ \\vdots \\\\ p_R \\end{pmatrix} \\begin{pmatrix} a_1 &amp; a_2 &amp; \\cdots &amp; a_M \\end{pmatrix} = \\begin{pmatrix} p_1a_1 &amp; p_1a_2 &amp; \\cdots &amp; p_1a_M \\\\ p_2a_1 &amp; p_2a_2 &amp; \\cdots &amp; p_2a_M \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ p_Ra_1 &amp; p_Ra_2 &amp; \\cdots &amp; p_Ra_M \\end{pmatrix}\\] <p>\u5176\u4e2d\\(p_i\\)\u662f\u4e00\u4e2a\u884c\u5411\u91cf\uff0c\u8868\u793a\u7b2ci\u4e2a\u57fa\uff0c\\(a_j\\)\u662f\u4e00\u4e2a\u5217\u5411\u91cf\uff0c\u8868\u793a\u7b2cj\u4e2a\u539f\u59cb\u6570\u636e\u8bb0\u5f55\u3002</p> <p>\u7279\u522b\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91ccR\u53ef\u4ee5\u5c0f\u4e8eN\uff0c\u800cR\u51b3\u5b9a\u4e86\u53d8\u6362\u540e\u6570\u636e\u7684\u7ef4\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00N\u7ef4\u6570\u636e\u53d8\u6362\u5230\u66f4\u4f4e\u7ef4\u5ea6\u7684\u7a7a\u95f4\u4e2d\u53bb\uff0c\u53d8\u6362\u540e\u7684\u7ef4\u5ea6\u53d6\u51b3\u4e8e\u57fa\u7684\u6570\u91cf\u3002\u56e0\u6b64\u8fd9\u79cd\u77e9\u9635\u76f8\u4e58\u7684\u8868\u793a\u4e5f\u53ef\u4ee5\u8868\u793a\u964d\u7ef4\u53d8\u6362\u3002</p> <p>\u6700\u540e\uff0c\u4e0a\u8ff0\u5206\u6790\u540c\u65f6\u7ed9\u77e9\u9635\u76f8\u4e58\u627e\u5230\u4e86\u4e00\u79cd\u7269\u7406\u89e3\u91ca\uff1a\u4e24\u4e2a\u77e9\u9635\u76f8\u4e58\u7684\u610f\u4e49\u662f\u5c06\u53f3\u8fb9\u77e9\u9635\u4e2d\u7684\u6bcf\u4e00\u5217\u5217\u5411\u91cf\u53d8\u6362\u5230\u5de6\u8fb9\u77e9\u9635\u4e2d\u6bcf\u4e00\u884c\u884c\u5411\u91cf\u4e3a\u57fa\u6240\u8868\u793a\u7684\u7a7a\u95f4\u4e2d\u53bb\u3002\u66f4\u62bd\u8c61\u7684\u8bf4\uff0c\u4e00\u4e2a\u77e9\u9635\u53ef\u4ee5\u8868\u793a\u4e00\u79cd\u7ebf\u6027\u53d8\u6362\u3002\u5f88\u591a\u540c\u5b66\u5728\u5b66\u7ebf\u6027\u4ee3\u6570\u65f6\u5bf9\u77e9\u9635\u76f8\u4e58\u7684\u65b9\u6cd5\u611f\u5230\u5947\u602a\uff0c\u4f46\u662f\u5982\u679c\u660e\u767d\u4e86\u77e9\u9635\u76f8\u4e58\u7684\u7269\u7406\u610f\u4e49\uff0c\u5176\u5408\u7406\u6027\u5c31\u4e00\u76ee\u4e86\u7136\u4e86\u3002</p>"},{"location":"AI/pca/#_2","title":"\u534f\u65b9\u5dee\u77e9\u9635\u53ca\u4f18\u5316\u76ee\u6807","text":"<p>\u4e0a\u9762\u6211\u4eec\u8ba8\u8bba\u4e86\u9009\u62e9\u4e0d\u540c\u7684\u57fa\u53ef\u4ee5\u5bf9\u540c\u6837\u4e00\u7ec4\u6570\u636e\u7ed9\u51fa\u4e0d\u540c\u7684\u8868\u793a\uff0c\u800c\u4e14\u5982\u679c\u57fa\u7684\u6570\u91cf\u5c11\u4e8e\u5411\u91cf\u672c\u8eab\u7684\u7ef4\u6570\uff0c\u5219\u53ef\u4ee5\u8fbe\u5230\u964d\u7ef4\u7684\u6548\u679c\u3002\u4f46\u662f\u6211\u4eec\u8fd8\u6ca1\u6709\u56de\u7b54\u4e00\u4e2a\u6700\u6700\u5173\u952e\u7684\u95ee\u9898\uff1a\u5982\u4f55\u9009\u62e9\u57fa\u624d\u662f\u6700\u4f18\u7684\u3002\u6216\u8005\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u6709\u4e00\u7ec4N\u7ef4\u5411\u91cf\uff0c\u73b0\u5728\u8981\u5c06\u5176\u964d\u5230K\u7ef4\uff08K\u5c0f\u4e8eN\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u5982\u4f55\u9009\u62e9K\u4e2a\u57fa\u624d\u80fd\u6700\u5927\u7a0b\u5ea6\u4fdd\u7559\u539f\u6709\u7684\u4fe1\u606f\uff1f</p> <p>\u8981\u5b8c\u5168\u6570\u5b66\u5316\u8fd9\u4e2a\u95ee\u9898\u975e\u5e38\u7e41\u6742\uff0c\u8fd9\u91cc\u6211\u4eec\u7528\u4e00\u79cd\u975e\u5f62\u5f0f\u5316\u7684\u76f4\u89c2\u65b9\u6cd5\u6765\u770b\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>\u4e3a\u4e86\u907f\u514d\u8fc7\u4e8e\u62bd\u8c61\u7684\u8ba8\u8bba\uff0c\u6211\u4eec\u4ecd\u4ee5\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u5c55\u5f00\u3002\u5047\u8bbe\u6211\u4eec\u7684\u6570\u636e\u7531\u4e94\u6761\u8bb0\u5f55\u7ec4\u6210\uff0c\u5c06\u5b83\u4eec\u8868\u793a\u6210\u77e9\u9635\u5f62\u5f0f\uff1a</p> \\[\\begin{pmatrix} 1 &amp; 1 &amp; 2 &amp; 4 &amp; 2 \\\\ 1 &amp; 3 &amp; 3 &amp; 4 &amp; 4 \\end{pmatrix}\\] <p>\u5176\u4e2d\u6bcf\u4e00\u5217\u4e3a\u4e00\u6761\u6570\u636e\u8bb0\u5f55\uff0c\u800c\u4e00\u884c\u4e3a\u4e00\u4e2a\u5b57\u6bb5\u3002\u4e3a\u4e86\u540e\u7eed\u5904\u7406\u65b9\u4fbf\uff0c\u6211\u4eec\u9996\u5148\u5c06\u6bcf\u4e2a\u5b57\u6bb5\u5185\u6240\u6709\u503c\u90fd\u51cf\u53bb\u5b57\u6bb5\u5747\u503c\uff0c\u5176\u7ed3\u679c\u662f\u5c06\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u53d8\u4e3a\u5747\u503c\u4e3a0\uff08\u8fd9\u6837\u505a\u7684\u9053\u7406\u548c\u597d\u5904\u540e\u9762\u4f1a\u770b\u5230\uff09\u3002</p> <p>\u6211\u4eec\u770b\u4e0a\u9762\u7684\u6570\u636e\uff0c\u7b2c\u4e00\u4e2a\u5b57\u6bb5\u5747\u503c\u4e3a2\uff0c\u7b2c\u4e8c\u4e2a\u5b57\u6bb5\u5747\u503c\u4e3a3\uff0c\u6240\u4ee5\u53d8\u6362\u540e\uff1a</p> \\[\\begin{pmatrix} -1 &amp; -1 &amp; 0 &amp; 2 &amp; 0 \\\\ -2 &amp; 0 &amp; 0 &amp; 1 &amp; 1 \\end{pmatrix}\\] <p>\u6211\u4eec\u53ef\u4ee5\u770b\u4e0b\u4e94\u6761\u6570\u636e\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u5185\u7684\u6837\u5b50\uff1a</p> <p></p> <p>\u73b0\u5728\u95ee\u9898\u6765\u4e86\uff1a\u5982\u679c\u6211\u4eec\u5fc5\u987b\u4f7f\u7528\u4e00\u7ef4\u6765\u8868\u793a\u8fd9\u4e9b\u6570\u636e\uff0c\u53c8\u5e0c\u671b\u5c3d\u91cf\u4fdd\u7559\u539f\u59cb\u7684\u4fe1\u606f\uff0c\u4f60\u8981\u5982\u4f55\u9009\u62e9\uff1f</p> <p>\u901a\u8fc7\u4e0a\u4e00\u8282\u5bf9\u57fa\u53d8\u6362\u7684\u8ba8\u8bba\u6211\u4eec\u77e5\u9053\uff0c\u8fd9\u4e2a\u95ee\u9898\u5b9e\u9645\u4e0a\u662f\u8981\u5728\u4e8c\u7ef4\u5e73\u9762\u4e2d\u9009\u62e9\u4e00\u4e2a\u65b9\u5411\uff0c\u5c06\u6240\u6709\u6570\u636e\u90fd\u6295\u5f71\u5230\u8fd9\u4e2a\u65b9\u5411\u6240\u5728\u76f4\u7ebf\u4e0a\uff0c\u7528\u6295\u5f71\u503c\u8868\u793a\u539f\u59cb\u8bb0\u5f55\u3002\u8fd9\u662f\u4e00\u4e2a\u5b9e\u9645\u7684\u4e8c\u7ef4\u964d\u5230\u4e00\u7ef4\u7684\u95ee\u9898\u3002</p> <p>\u90a3\u4e48\u5982\u4f55\u9009\u62e9\u8fd9\u4e2a\u65b9\u5411\uff08\u6216\u8005\u8bf4\u57fa\uff09\u624d\u80fd\u5c3d\u91cf\u4fdd\u7559\u6700\u591a\u7684\u539f\u59cb\u4fe1\u606f\u5462\uff1f\u4e00\u79cd\u76f4\u89c2\u7684\u770b\u6cd5\u662f\uff1a\u5e0c\u671b\u6295\u5f71\u540e\u7684\u6295\u5f71\u503c\u5c3d\u53ef\u80fd\u5206\u6563\u3002</p> <p>\u4ee5\u4e0a\u56fe\u4e3a\u4f8b\uff0c\u53ef\u4ee5\u770b\u51fa\u5982\u679c\u5411x\u8f74\u6295\u5f71\uff0c\u90a3\u4e48\u6700\u5de6\u8fb9\u7684\u4e24\u4e2a\u70b9\u4f1a\u91cd\u53e0\u5728\u4e00\u8d77\uff0c\u4e2d\u95f4\u7684\u4e24\u4e2a\u70b9\u4e5f\u4f1a\u91cd\u53e0\u5728\u4e00\u8d77\uff0c\u4e8e\u662f\u672c\u8eab\u56db\u4e2a\u5404\u4e0d\u76f8\u540c\u7684\u4e8c\u7ef4\u70b9\u6295\u5f71\u540e\u53ea\u5269\u4e0b\u4e24\u4e2a\u4e0d\u540c\u7684\u503c\u4e86\uff0c\u8fd9\u662f\u4e00\u79cd\u4e25\u91cd\u7684\u4fe1\u606f\u4e22\u5931\uff0c\u540c\u7406\uff0c\u5982\u679c\u5411y\u8f74\u6295\u5f71\u6700\u4e0a\u9762\u7684\u4e24\u4e2a\u70b9\u548c\u5206\u5e03\u5728x\u8f74\u4e0a\u7684\u4e24\u4e2a\u70b9\u4e5f\u4f1a\u91cd\u53e0\u3002\u6240\u4ee5\u770b\u6765x\u548cy\u8f74\u90fd\u4e0d\u662f\u6700\u597d\u7684\u6295\u5f71\u9009\u62e9\u3002\u6211\u4eec\u76f4\u89c2\u76ee\u6d4b\uff0c\u5982\u679c\u5411\u901a\u8fc7\u7b2c\u4e00\u8c61\u9650\u548c\u7b2c\u4e09\u8c61\u9650\u7684\u659c\u7ebf\u6295\u5f71\uff0c\u5219\u4e94\u4e2a\u70b9\u5728\u6295\u5f71\u540e\u8fd8\u662f\u53ef\u4ee5\u533a\u5206\u7684\u3002</p> <p>\u4e0b\u9762\uff0c\u6211\u4eec\u7528\u6570\u5b66\u65b9\u6cd5\u8868\u8ff0\u8fd9\u4e2a\u95ee\u9898\u3002</p>"},{"location":"AI/pca/#_3","title":"\u65b9\u5dee","text":"<p>\u4e0a\u6587\u8bf4\u5230\uff0c\u6211\u4eec\u5e0c\u671b\u6295\u5f71\u540e\u6295\u5f71\u503c\u5c3d\u53ef\u80fd\u5206\u6563\uff0c\u800c\u8fd9\u79cd\u5206\u6563\u7a0b\u5ea6\uff0c\u53ef\u4ee5\u7528\u6570\u5b66\u4e0a\u7684\u65b9\u5dee\u6765\u8868\u8ff0\u3002\u6b64\u5904\uff0c\u4e00\u4e2a\u5b57\u6bb5\u7684\u65b9\u5dee\u53ef\u4ee5\u770b\u505a\u662f\u6bcf\u4e2a\u5143\u7d20\u4e0e\u5b57\u6bb5\u5747\u503c\u7684\u5dee\u7684\u5e73\u65b9\u548c\u7684\u5747\u503c\uff0c\u5373\uff1a</p> \\[Var(a)=\\frac{1}{m}\\sum_{i=1}^m{(a_i-\\mu)^2}\\] <p>\u7531\u4e8e\u4e0a\u9762\u6211\u4eec\u5df2\u7ecf\u5c06\u6bcf\u4e2a\u5b57\u6bb5\u7684\u5747\u503c\u90fd\u5316\u4e3a0\u4e86\uff0c\u56e0\u6b64\u65b9\u5dee\u53ef\u4ee5\u76f4\u63a5\u7528\u6bcf\u4e2a\u5143\u7d20\u7684\u5e73\u65b9\u548c\u9664\u4ee5\u5143\u7d20\u4e2a\u6570\u8868\u793a\uff1a</p> \\[Var(a)=\\frac{1}{m}\\sum_{i=1}^m{a_i^2}\\] <p>\u4e8e\u662f\u4e0a\u9762\u7684\u95ee\u9898\u88ab\u5f62\u5f0f\u5316\u8868\u8ff0\u4e3a\uff1a\u5bfb\u627e\u4e00\u4e2a\u4e00\u7ef4\u57fa\uff0c\u4f7f\u5f97\u6240\u6709\u6570\u636e\u53d8\u6362\u4e3a\u8fd9\u4e2a\u57fa\u4e0a\u7684\u5750\u6807\u8868\u793a\u540e\uff0c\u65b9\u5dee\u503c\u6700\u5927\u3002</p>"},{"location":"AI/pca/#_4","title":"\u534f\u65b9\u5dee","text":"<p>\u5bf9\u4e8e\u4e0a\u9762\u4e8c\u7ef4\u964d\u6210\u4e00\u7ef4\u7684\u95ee\u9898\u6765\u8bf4\uff0c\u627e\u5230\u90a3\u4e2a\u4f7f\u5f97\u65b9\u5dee\u6700\u5927\u7684\u65b9\u5411\u5c31\u53ef\u4ee5\u4e86\u3002\u4e0d\u8fc7\u5bf9\u4e8e\u66f4\u9ad8\u7ef4\uff0c\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u9700\u8981\u89e3\u51b3\u3002\u8003\u8651\u4e09\u7ef4\u964d\u5230\u4e8c\u7ef4\u95ee\u9898\u3002\u4e0e\u4e4b\u524d\u76f8\u540c\uff0c\u9996\u5148\u6211\u4eec\u5e0c\u671b\u627e\u5230\u4e00\u4e2a\u65b9\u5411\u4f7f\u5f97\u6295\u5f71\u540e\u65b9\u5dee\u6700\u5927\uff0c\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u7b2c\u4e00\u4e2a\u65b9\u5411\u7684\u9009\u62e9\uff0c\u7ee7\u800c\u6211\u4eec\u9009\u62e9\u7b2c\u4e8c\u4e2a\u6295\u5f71\u65b9\u5411\u3002</p> <p>\u5982\u679c\u6211\u4eec\u8fd8\u662f\u5355\u7eaf\u53ea\u9009\u62e9\u65b9\u5dee\u6700\u5927\u7684\u65b9\u5411\uff0c\u5f88\u660e\u663e\uff0c\u8fd9\u4e2a\u65b9\u5411\u4e0e\u7b2c\u4e00\u4e2a\u65b9\u5411\u5e94\u8be5\u662f\u201c\u51e0\u4e4e\u91cd\u5408\u5728\u4e00\u8d77\u201d\uff0c\u663e\u7136\u8fd9\u6837\u7684\u7ef4\u5ea6\u662f\u6ca1\u6709\u7528\u7684\uff0c\u56e0\u6b64\uff0c\u5e94\u8be5\u6709\u5176\u4ed6\u7ea6\u675f\u6761\u4ef6\u3002\u4ece\u76f4\u89c2\u4e0a\u8bf4\uff0c\u8ba9\u4e24\u4e2a\u5b57\u6bb5\u5c3d\u53ef\u80fd\u8868\u793a\u66f4\u591a\u7684\u539f\u59cb\u4fe1\u606f\uff0c\u6211\u4eec\u662f\u4e0d\u5e0c\u671b\u5b83\u4eec\u4e4b\u95f4\u5b58\u5728\uff08\u7ebf\u6027\uff09\u76f8\u5173\u6027\u7684\uff0c\u56e0\u4e3a\u76f8\u5173\u6027\u610f\u5473\u7740\u4e24\u4e2a\u5b57\u6bb5\u4e0d\u662f\u5b8c\u5168\u72ec\u7acb\uff0c\u5fc5\u7136\u5b58\u5728\u91cd\u590d\u8868\u793a\u7684\u4fe1\u606f\u3002</p> <p>\u6570\u5b66\u4e0a\u53ef\u4ee5\u7528\u4e24\u4e2a\u5b57\u6bb5\u7684\u534f\u65b9\u5dee\u8868\u793a\u5176\u76f8\u5173\u6027\uff0c\u7531\u4e8e\u5df2\u7ecf\u8ba9\u6bcf\u4e2a\u5b57\u6bb5\u5747\u503c\u4e3a0\uff0c\u5219\uff1a</p> \\[Cov(a,b)=\\frac{1}{m}\\sum_{i=1}^m{a_ib_i}\\] <p>\u53ef\u4ee5\u770b\u5230\uff0c\u5728\u5b57\u6bb5\u5747\u503c\u4e3a0\u7684\u60c5\u51b5\u4e0b\uff0c\u4e24\u4e2a\u5b57\u6bb5\u7684\u534f\u65b9\u5dee\u7b80\u6d01\u7684\u8868\u793a\u4e3a\u5176\u5185\u79ef\u9664\u4ee5\u5143\u7d20\u6570m\u3002</p> <p>\u5f53\u534f\u65b9\u5dee\u4e3a0\u65f6\uff0c\u8868\u793a\u4e24\u4e2a\u5b57\u6bb5\u5b8c\u5168\u72ec\u7acb\u3002\u4e3a\u4e86\u8ba9\u534f\u65b9\u5dee\u4e3a0\uff0c\u6211\u4eec\u9009\u62e9\u7b2c\u4e8c\u4e2a\u57fa\u65f6\u53ea\u80fd\u5728\u4e0e\u7b2c\u4e00\u4e2a\u57fa\u6b63\u4ea4\u7684\u65b9\u5411\u4e0a\u9009\u62e9\u3002\u56e0\u6b64\u6700\u7ec8\u9009\u62e9\u7684\u4e24\u4e2a\u65b9\u5411\u4e00\u5b9a\u662f\u6b63\u4ea4\u7684\u3002</p> <p>\u81f3\u6b64\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u964d\u7ef4\u95ee\u9898\u7684\u4f18\u5316\u76ee\u6807\uff1a\u5c06\u4e00\u7ec4N\u7ef4\u5411\u91cf\u964d\u4e3aK\u7ef4\uff08K\u5927\u4e8e0\uff0c\u5c0f\u4e8eN\uff09\uff0c\u5176\u76ee\u6807\u662f\u9009\u62e9K\u4e2a\u5355\u4f4d\uff08\u6a21\u4e3a1\uff09\u6b63\u4ea4\u57fa\uff0c\u4f7f\u5f97\u539f\u59cb\u6570\u636e\u53d8\u6362\u5230\u8fd9\u7ec4\u57fa\u4e0a\u540e\uff0c\u5404\u5b57\u6bb5\u4e24\u4e24\u95f4\u534f\u65b9\u5dee\u4e3a0\uff0c\u800c\u5b57\u6bb5\u7684\u65b9\u5dee\u5219\u5c3d\u53ef\u80fd\u5927\uff08\u5728\u6b63\u4ea4\u7684\u7ea6\u675f\u4e0b\uff0c\u53d6\u6700\u5927\u7684K\u4e2a\u65b9\u5dee\uff09\u3002</p>"},{"location":"AI/pca/#_5","title":"\u534f\u65b9\u5dee\u77e9\u9635","text":"<p>\u4e0a\u9762\u6211\u4eec\u5bfc\u51fa\u4e86\u4f18\u5316\u76ee\u6807\uff0c\u4f46\u662f\u8fd9\u4e2a\u76ee\u6807\u4f3c\u4e4e\u4e0d\u80fd\u76f4\u63a5\u4f5c\u4e3a\u64cd\u4f5c\u6307\u5357\uff08\u6216\u8005\u8bf4\u7b97\u6cd5\uff09\uff0c\u56e0\u4e3a\u5b83\u53ea\u8bf4\u8981\u4ec0\u4e48\uff0c\u4f46\u6839\u672c\u6ca1\u6709\u8bf4\u600e\u4e48\u505a\u3002\u6240\u4ee5\u6211\u4eec\u8981\u7ee7\u7eed\u5728\u6570\u5b66\u4e0a\u7814\u7a76\u8ba1\u7b97\u65b9\u6848\u3002</p> <p>\u6211\u4eec\u770b\u5230\uff0c\u6700\u7ec8\u8981\u8fbe\u5230\u7684\u76ee\u7684\u4e0e\u5b57\u6bb5\u5185\u65b9\u5dee\u53ca\u5b57\u6bb5\u95f4\u534f\u65b9\u5dee\u6709\u5bc6\u5207\u5173\u7cfb\u3002\u56e0\u6b64\u6211\u4eec\u5e0c\u671b\u80fd\u5c06\u4e24\u8005\u7edf\u4e00\u8868\u793a\uff0c\u4ed4\u7ec6\u89c2\u5bdf\u53d1\u73b0\uff0c\u4e24\u8005\u5747\u53ef\u4ee5\u8868\u793a\u4e3a\u5185\u79ef\u7684\u5f62\u5f0f\uff0c\u800c\u5185\u79ef\u53c8\u4e0e\u77e9\u9635\u76f8\u4e58\u5bc6\u5207\u76f8\u5173\u3002\u4e8e\u662f\u6211\u4eec\u6765\u4e86\u7075\u611f\uff1a</p> <p>\u5047\u8bbe\u6211\u4eec\u53ea\u6709a\u548cb\u4e24\u4e2a\u5b57\u6bb5\uff0c\u90a3\u4e48\u6211\u4eec\u5c06\u5b83\u4eec\u6309\u884c\u7ec4\u6210\u77e9\u9635X\uff1a</p> \\[X=\\begin{pmatrix} a_1 &amp; a_2 &amp; \\cdots &amp; a_m \\\\ b_1 &amp; b_2 &amp; \\cdots &amp; b_m \\end{pmatrix}\\] <p>\u7136\u540e\u6211\u4eec\u7528X\u4e58\u4ee5X\u7684\u8f6c\u7f6e\uff0c\u5e76\u4e58\u4e0a\u7cfb\u65701/m\uff1a</p> \\[\\frac{1}{m}XX^\\mathsf{T}=\\begin{pmatrix} \\frac{1}{m}\\sum_{i=1}^m{a_i^2} &amp; \\frac{1}{m}\\sum_{i=1}^m{a_ib_i} \\\\ \\frac{1}{m}\\sum_{i=1}^m{a_ib_i} &amp; \\frac{1}{m}\\sum_{i=1}^m{b_i^2} \\end{pmatrix}\\] <p>\u5947\u8ff9\u51fa\u73b0\u4e86\uff01\u8fd9\u4e2a\u77e9\u9635\u5bf9\u89d2\u7ebf\u4e0a\u7684\u4e24\u4e2a\u5143\u7d20\u5206\u522b\u662f\u4e24\u4e2a\u5b57\u6bb5\u7684\u65b9\u5dee\uff0c\u800c\u5176\u5b83\u5143\u7d20\u662fa\u548cb\u7684\u534f\u65b9\u5dee\u3002\u4e24\u8005\u88ab\u7edf\u4e00\u5230\u4e86\u4e00\u4e2a\u77e9\u9635\u7684\u3002</p> <p>\u6839\u636e\u77e9\u9635\u76f8\u4e58\u7684\u8fd0\u7b97\u6cd5\u5219\uff0c\u8fd9\u4e2a\u7ed3\u8bba\u5f88\u5bb9\u6613\u88ab\u63a8\u5e7f\u5230\u4e00\u822c\u60c5\u51b5\uff1a</p> <p>\u8bbe\u6211\u4eec\u6709m\u4e2an\u7ef4\u6570\u636e\u8bb0\u5f55\uff0c\u5c06\u5176\u6309\u5217\u6392\u6210n\u4e58m\u7684\u77e9\u9635X\uff0c\u8bbe\\(C=\\frac{1}{m}XX^\\mathsf{T}\\)\uff0c\u5219C\u662f\u4e00\u4e2a\u5bf9\u79f0\u77e9\u9635\uff0c\u5176\u5bf9\u89d2\u7ebf\u5206\u522b\u4e2a\u5404\u4e2a\u5b57\u6bb5\u7684\u65b9\u5dee\uff0c\u800c\u7b2ci\u884cj\u5217\u548cj\u884ci\u5217\u5143\u7d20\u76f8\u540c\uff0c\u8868\u793ai\u548cj\u4e24\u4e2a\u5b57\u6bb5\u7684\u534f\u65b9\u5dee\u3002</p>"},{"location":"AI/pca/#_6","title":"\u534f\u65b9\u5dee\u77e9\u9635\u5bf9\u89d2\u5316","text":"<p>\u6839\u636e\u4e0a\u8ff0\u63a8\u5bfc\uff0c\u6211\u4eec\u53d1\u73b0\u8981\u8fbe\u5230\u4f18\u5316\u76ee\u524d\uff0c\u7b49\u4ef7\u4e8e\u5c06\u534f\u65b9\u5dee\u77e9\u9635\u5bf9\u89d2\u5316\uff1a\u5373\u9664\u5bf9\u89d2\u7ebf\u5916\u7684\u5176\u5b83\u5143\u7d20\u5316\u4e3a0\uff0c\u5e76\u4e14\u5728\u5bf9\u89d2\u7ebf\u4e0a\u5c06\u5143\u7d20\u6309\u5927\u5c0f\u4ece\u4e0a\u5230\u4e0b\u6392\u5217\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u8fbe\u5230\u4e86\u4f18\u5316\u76ee\u7684\u3002\u8fd9\u6837\u8bf4\u53ef\u80fd\u8fd8\u4e0d\u662f\u5f88\u660e\u6670\uff0c\u6211\u4eec\u8fdb\u4e00\u6b65\u770b\u4e0b\u539f\u77e9\u9635\u4e0e\u57fa\u53d8\u6362\u540e\u77e9\u9635\u534f\u65b9\u5dee\u77e9\u9635\u7684\u5173\u7cfb\uff1a</p> <p>\u8bbe\u539f\u59cb\u6570\u636e\u77e9\u9635X\u5bf9\u5e94\u7684\u534f\u65b9\u5dee\u77e9\u9635\u4e3aC\uff0c\u800cP\u662f\u4e00\u7ec4\u57fa\u6309\u884c\u7ec4\u6210\u7684\u77e9\u9635\uff0c\u8bbeY=PX\uff0c\u5219Y\u4e3aX\u5bf9P\u505a\u57fa\u53d8\u6362\u540e\u7684\u6570\u636e\u3002\u8bbeY\u7684\u534f\u65b9\u5dee\u77e9\u9635\u4e3aD\uff0c\u6211\u4eec\u63a8\u5bfc\u4e00\u4e0bD\u4e0eC\u7684\u5173\u7cfb\uff1a</p> \\[\\begin{array}{l l l} D &amp; = &amp; \\frac{1}{m}YY^\\mathsf{T} \\\\ &amp; = &amp; \\frac{1}{m}(PX)(PX)^\\mathsf{T} \\\\ &amp; = &amp; \\frac{1}{m}PXX^\\mathsf{T}P^\\mathsf{T} \\\\ &amp; = &amp; P(\\frac{1}{m}XX^\\mathsf{T})P^\\mathsf{T} \\\\ &amp; = &amp; PCP^\\mathsf{T} \\end{array}\\] <p>\u73b0\u5728\u4e8b\u60c5\u5f88\u660e\u767d\u4e86\uff01\u6211\u4eec\u8981\u627e\u7684P\u4e0d\u662f\u522b\u7684\uff0c\u800c\u662f\u80fd\u8ba9\u539f\u59cb\u534f\u65b9\u5dee\u77e9\u9635\u5bf9\u89d2\u5316\u7684P\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4f18\u5316\u76ee\u6807\u53d8\u6210\u4e86\u5bfb\u627e\u4e00\u4e2a\u77e9\u9635P\uff0c\u6ee1\u8db3\\(PCP^\\mathsf{T}\\)\u662f\u4e00\u4e2a\u5bf9\u89d2\u77e9\u9635\uff0c\u5e76\u4e14\u5bf9\u89d2\u5143\u7d20\u6309\u4ece\u5927\u5230\u5c0f\u4f9d\u6b21\u6392\u5217\uff0c\u90a3\u4e48P\u7684\u524dK\u884c\u5c31\u662f\u8981\u5bfb\u627e\u7684\u57fa\uff0c\u7528P\u7684\u524dK\u884c\u7ec4\u6210\u7684\u77e9\u9635\u4e58\u4ee5X\u5c31\u4f7f\u5f97X\u4eceN\u7ef4\u964d\u5230\u4e86K\u7ef4\u5e76\u6ee1\u8db3\u4e0a\u8ff0\u4f18\u5316\u6761\u4ef6\u3002</p> <p>\u81f3\u6b64\uff0c\u6211\u4eec\u79bb\u201c\u53d1\u660e\u201dPCA\u8fd8\u6709\u4ec5\u4e00\u6b65\u4e4b\u9065\uff01</p> <p>\u73b0\u5728\u6240\u6709\u7126\u70b9\u90fd\u805a\u7126\u5728\u4e86\u534f\u65b9\u5dee\u77e9\u9635\u5bf9\u89d2\u5316\u95ee\u9898\u4e0a\uff0c\u6709\u65f6\uff0c\u6211\u4eec\u771f\u5e94\u8be5\u611f\u8c22\u6570\u5b66\u5bb6\u7684\u5148\u884c\uff0c\u56e0\u4e3a\u77e9\u9635\u5bf9\u89d2\u5316\u5728\u7ebf\u6027\u4ee3\u6570\u9886\u57df\u5df2\u7ecf\u5c5e\u4e8e\u88ab\u73a9\u70c2\u4e86\u7684\u4e1c\u897f\uff0c\u6240\u4ee5\u8fd9\u5728\u6570\u5b66\u4e0a\u6839\u672c\u4e0d\u662f\u95ee\u9898\u3002</p> <p>\u7531\u4e0a\u6587\u77e5\u9053\uff0c\u534f\u65b9\u5dee\u77e9\u9635C\u662f\u4e00\u4e2a\u662f\u5bf9\u79f0\u77e9\u9635\uff0c\u5728\u7ebf\u6027\u4ee3\u6570\u4e0a\uff0c\u5b9e\u5bf9\u79f0\u77e9\u9635\u6709\u4e00\u7cfb\u5217\u975e\u5e38\u597d\u7684\u6027\u8d28\uff1a</p> <p>1\uff09\u5b9e\u5bf9\u79f0\u77e9\u9635\u4e0d\u540c\u7279\u5f81\u503c\u5bf9\u5e94\u7684\u7279\u5f81\u5411\u91cf\u5fc5\u7136\u6b63\u4ea4\u3002</p> <p>2\uff09\u8bbe\u7279\u5f81\u5411\u91cf\\(\\lambda\\)\u91cd\u6570\u4e3ar\uff0c\u5219\u5fc5\u7136\u5b58\u5728r\u4e2a\u7ebf\u6027\u65e0\u5173\u7684\u7279\u5f81\u5411\u91cf\u5bf9\u5e94\u4e8e\\(\\lambda\\)\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06\u8fd9r\u4e2a\u7279\u5f81\u5411\u91cf\u5355\u4f4d\u6b63\u4ea4\u5316\u3002</p> <p>\u7531\u4e0a\u9762\u4e24\u6761\u53ef\u77e5\uff0c\u4e00\u4e2an\u884cn\u5217\u7684\u5b9e\u5bf9\u79f0\u77e9\u9635\u4e00\u5b9a\u53ef\u4ee5\u627e\u5230n\u4e2a\u5355\u4f4d\u6b63\u4ea4\u7279\u5f81\u5411\u91cf\uff0c\u8bbe\u8fd9n\u4e2a\u7279\u5f81\u5411\u91cf\u4e3a\\(e_1,e_2,\\cdots,e_n\\)\uff0c\u6211\u4eec\u5c06\u5176\u6309\u5217\u7ec4\u6210\u77e9\u9635\uff1a</p> \\[E=\\begin{pmatrix} e_1 &amp; e_2 &amp; \\cdots &amp; e_n \\end{pmatrix}\\] <p>\u5219\u5bf9\u534f\u65b9\u5dee\u77e9\u9635C\u6709\u5982\u4e0b\u7ed3\u8bba\uff1a</p> \\[E^\\mathsf{T}CE=\\Lambda=\\begin{pmatrix} \\lambda_1 &amp; &amp; &amp; \\\\ &amp; \\lambda_2 &amp; &amp; \\\\ &amp; &amp; \\ddots &amp; \\\\ &amp; &amp; &amp; \\lambda_n \\end{pmatrix}\\] <p>\u5176\u4e2d\\(\\Lambda\\)\u4e3a\u5bf9\u89d2\u77e9\u9635\uff0c\u5176\u5bf9\u89d2\u5143\u7d20\u4e3a\u5404\u7279\u5f81\u5411\u91cf\u5bf9\u5e94\u7684\u7279\u5f81\u503c\uff08\u53ef\u80fd\u6709\u91cd\u590d\uff09\u3002</p> <p>\u4ee5\u4e0a\u7ed3\u8bba\u4e0d\u518d\u7ed9\u51fa\u4e25\u683c\u7684\u6570\u5b66\u8bc1\u660e\uff0c\u5bf9\u8bc1\u660e\u611f\u5174\u8da3\u7684\u670b\u53cb\u53ef\u4ee5\u53c2\u8003\u7ebf\u6027\u4ee3\u6570\u4e66\u7c4d\u5173\u4e8e\u201c\u5b9e\u5bf9\u79f0\u77e9\u9635\u5bf9\u89d2\u5316\u201d\u7684\u5185\u5bb9\u3002</p> <p>\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86\u9700\u8981\u7684\u77e9\u9635P\uff1a</p> \\[P=E^\\mathsf{T}\\] <p>P\u662f\u534f\u65b9\u5dee\u77e9\u9635\u7684\u7279\u5f81\u5411\u91cf\u5355\u4f4d\u5316\u540e\u6309\u884c\u6392\u5217\u51fa\u7684\u77e9\u9635\uff0c\u5176\u4e2d\u6bcf\u4e00\u884c\u90fd\u662fC\u7684\u4e00\u4e2a\u7279\u5f81\u5411\u91cf\u3002\u5982\u679c\u8bbeP\u6309\u7167\\(\\Lambda\\)\u4e2d\u7279\u5f81\u503c\u7684\u4ece\u5927\u5230\u5c0f\uff0c\u5c06\u7279\u5f81\u5411\u91cf\u4ece\u4e0a\u5230\u4e0b\u6392\u5217\uff0c\u5219\u7528P\u7684\u524dK\u884c\u7ec4\u6210\u7684\u77e9\u9635\u4e58\u4ee5\u539f\u59cb\u6570\u636e\u77e9\u9635X\uff0c\u5c31\u5f97\u5230\u4e86\u6211\u4eec\u9700\u8981\u7684\u964d\u7ef4\u540e\u7684\u6570\u636e\u77e9\u9635Y\u3002</p> <p>\u81f3\u6b64\u6211\u4eec\u5b8c\u6210\u4e86\u6574\u4e2aPCA\u7684\u6570\u5b66\u539f\u7406\u8ba8\u8bba\u3002\u5728\u4e0b\u9762\u7684\u4e00\u8282\uff0c\u6211\u4eec\u5c06\u7ed9\u51faPCA\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002</p>"},{"location":"AI/pca/#pca","title":"PCA\u7b97\u6cd5","text":"<p>\u603b\u7ed3\u4e00\u4e0bPCA\u7684\u7b97\u6cd5\u6b65\u9aa4\uff1a</p> <p>\u8bbe\u6709m\u6761n\u7ef4\u6570\u636e\u3002</p> <p>1\uff09\u5c06\u539f\u59cb\u6570\u636e\u6309\u5217\u7ec4\u6210n\u884cm\u5217\u77e9\u9635X</p> <p>2\uff09\u5c06X\u7684\u6bcf\u4e00\u884c\uff08\u4ee3\u8868\u4e00\u4e2a\u5c5e\u6027\u5b57\u6bb5\uff09\u8fdb\u884c\u96f6\u5747\u503c\u5316\uff0c\u5373\u51cf\u53bb\u8fd9\u4e00\u884c\u7684\u5747\u503c</p> <p>3\uff09\u6c42\u51fa\u534f\u65b9\u5dee\u77e9\u9635\\(C=\\frac{1}{m}XX^\\mathsf{T}\\)</p> <p>4\uff09\u6c42\u51fa\u534f\u65b9\u5dee\u77e9\u9635\u7684\u7279\u5f81\u503c\u53ca\u5bf9\u5e94\u7684\u7279\u5f81\u5411\u91cf</p> <p>5\uff09\u5c06\u7279\u5f81\u5411\u91cf\u6309\u5bf9\u5e94\u7279\u5f81\u503c\u5927\u5c0f\u4ece\u4e0a\u5230\u4e0b\u6309\u884c\u6392\u5217\u6210\u77e9\u9635\uff0c\u53d6\u524dk\u884c\u7ec4\u6210\u77e9\u9635P</p> <p>6\uff09\\(Y=PX\\)\u5373\u4e3a\u964d\u7ef4\u5230k\u7ef4\u540e\u7684\u6570\u636e</p>"},{"location":"AI/pca/#_7","title":"\u5b9e\u4f8b","text":"<p>\u8fd9\u91cc\u4ee5\u4e0a\u6587\u63d0\u5230\u7684</p> \\[\\begin{pmatrix} -1 &amp; -1 &amp; 0 &amp; 2 &amp; 0 \\\\ -2 &amp; 0 &amp; 0 &amp; 1 &amp; 1 \\end{pmatrix}\\] <p>\u4e3a\u4f8b\uff0c\u6211\u4eec\u7528PCA\u65b9\u6cd5\u5c06\u8fd9\u7ec4\u4e8c\u7ef4\u6570\u636e\u5176\u964d\u5230\u4e00\u7ef4\u3002</p> <p>\u56e0\u4e3a\u8fd9\u4e2a\u77e9\u9635\u7684\u6bcf\u884c\u5df2\u7ecf\u662f\u96f6\u5747\u503c\uff0c\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u6c42\u534f\u65b9\u5dee\u77e9\u9635\uff1a</p> \\[C=\\frac{1}{5}\\begin{pmatrix} -1 &amp; -1 &amp; 0 &amp; 2 &amp; 0 \\\\ -2 &amp; 0 &amp; 0 &amp; 1 &amp; 1 \\end{pmatrix}\\begin{pmatrix} -1 &amp; -2 \\\\ -1 &amp; 0 \\\\ 0 &amp; 0 \\\\ 2 &amp; 1 \\\\ 0 &amp; 1 \\end{pmatrix}=\\begin{pmatrix} \\frac{6}{5} &amp; \\frac{4}{5} \\\\ \\frac{4}{5} &amp; \\frac{6}{5} \\end{pmatrix}\\] <p>\u7136\u540e\u6c42\u5176\u7279\u5f81\u503c\u548c\u7279\u5f81\u5411\u91cf\uff0c\u5177\u4f53\u6c42\u89e3\u65b9\u6cd5\u4e0d\u518d\u8be6\u8ff0\uff0c\u53ef\u4ee5\u53c2\u8003\u76f8\u5173\u8d44\u6599\u3002\u6c42\u89e3\u540e\u7279\u5f81\u503c\u4e3a\uff1a</p> \\[\\lambda_1=2,\\lambda_2=2/5\\] <p>\u5176\u5bf9\u5e94\u7684\u7279\u5f81\u5411\u91cf\u5206\u522b\u662f\uff1a</p> \\[c_1\\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix},c_2\\begin{pmatrix} -1 \\\\ 1 \\end{pmatrix}\\] <p>\u5176\u4e2d\u5bf9\u5e94\u7684\u7279\u5f81\u5411\u91cf\u5206\u522b\u662f\u4e00\u4e2a\u901a\u89e3\uff0c\\(c_1\\)\u548c\\(c_2\\)\u53ef\u53d6\u4efb\u610f\u5b9e\u6570\u3002\u90a3\u4e48\u6807\u51c6\u5316\u540e\u7684\u7279\u5f81\u5411\u91cf\u4e3a\uff1a</p> \\[\\begin{pmatrix} 1/\\sqrt{2} \\\\ 1/\\sqrt{2} \\end{pmatrix},\\begin{pmatrix} -1/\\sqrt{2} \\\\ 1/\\sqrt{2} \\end{pmatrix}\\] <p>\u56e0\u6b64\u6211\u4eec\u7684\u77e9\u9635P\u662f\uff1a</p> \\[P=\\begin{pmatrix} 1/\\sqrt{2} &amp; 1/\\sqrt{2} \\\\ -1/\\sqrt{2} &amp; 1/\\sqrt{2} \\end{pmatrix}\\] <p>\u53ef\u4ee5\u9a8c\u8bc1\u534f\u65b9\u5dee\u77e9\u9635C\u7684\u5bf9\u89d2\u5316\uff1a</p> \\[PCP^\\mathsf{T}=\\begin{pmatrix} 1/\\sqrt{2} &amp; 1/\\sqrt{2} \\\\ -1/\\sqrt{2} &amp; 1/\\sqrt{2} \\end{pmatrix}\\begin{pmatrix} 6/5 &amp; 4/5 \\\\ 4/5 &amp; 6/5 \\end{pmatrix}\\begin{pmatrix} 1/\\sqrt{2} &amp; -1/\\sqrt{2} \\\\ 1/\\sqrt{2} &amp; 1/\\sqrt{2} \\end{pmatrix}=\\begin{pmatrix} 2 &amp; 0 \\\\ 0 &amp; 2/5 \\end{pmatrix}\\] <p>\u6700\u540e\u6211\u4eec\u7528P\u7684\u7b2c\u4e00\u884c\u4e58\u4ee5\u6570\u636e\u77e9\u9635\uff0c\u5c31\u5f97\u5230\u4e86\u964d\u7ef4\u540e\u7684\u8868\u793a\uff1a</p> \\[Y=\\begin{pmatrix} 1/\\sqrt{2} &amp; 1/\\sqrt{2} \\end{pmatrix}\\begin{pmatrix} -1 &amp; -1 &amp; 0 &amp; 2 &amp; 0 \\\\ -2 &amp; 0 &amp; 0 &amp; 1 &amp; 1 \\end{pmatrix}=\\begin{pmatrix} -3/\\sqrt{2} &amp; -1/\\sqrt{2} &amp; 0 &amp; 3/\\sqrt{2} &amp; -1/\\sqrt{2} \\end{pmatrix}\\] <p>\u964d\u7ef4\u6295\u5f71\u7ed3\u679c\u5982\u4e0b\u56fe\uff1a</p> <p></p>"},{"location":"AI/pca/#_8","title":"\u8fdb\u4e00\u6b65\u8ba8\u8bba","text":"<p>\u6839\u636e\u4e0a\u9762\u5bf9PCA\u7684\u6570\u5b66\u539f\u7406\u7684\u89e3\u91ca\uff0c\u6211\u4eec\u53ef\u4ee5\u4e86\u89e3\u5230\u4e00\u4e9bPCA\u7684\u80fd\u529b\u548c\u9650\u5236\u3002PCA\u672c\u8d28\u4e0a\u662f\u5c06\u65b9\u5dee\u6700\u5927\u7684\u65b9\u5411\u4f5c\u4e3a\u4e3b\u8981\u7279\u5f81\uff0c\u5e76\u4e14\u5728\u5404\u4e2a\u6b63\u4ea4\u65b9\u5411\u4e0a\u5c06\u6570\u636e\u201c\u79bb\u76f8\u5173\u201d\uff0c\u4e5f\u5c31\u662f\u8ba9\u5b83\u4eec\u5728\u4e0d\u540c\u6b63\u4ea4\u65b9\u5411\u4e0a\u6ca1\u6709\u76f8\u5173\u6027\u3002</p> <p>\u56e0\u6b64\uff0cPCA\u4e5f\u5b58\u5728\u4e00\u4e9b\u9650\u5236\uff0c\u4f8b\u5982\u5b83\u53ef\u4ee5\u5f88\u597d\u7684\u89e3\u9664\u7ebf\u6027\u76f8\u5173\uff0c\u4f46\u662f\u5bf9\u4e8e\u9ad8\u9636\u76f8\u5173\u6027\u5c31\u6ca1\u6709\u529e\u6cd5\u4e86\uff0c\u5bf9\u4e8e\u5b58\u5728\u9ad8\u9636\u76f8\u5173\u6027\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u8003\u8651Kernel PCA\uff0c\u901a\u8fc7Kernel\u51fd\u6570\u5c06\u975e\u7ebf\u6027\u76f8\u5173\u8f6c\u4e3a\u7ebf\u6027\u76f8\u5173\uff0c\u5173\u4e8e\u8fd9\u70b9\u5c31\u4e0d\u5c55\u5f00\u8ba8\u8bba\u4e86\u3002\u53e6\u5916\uff0cPCA\u5047\u8bbe\u6570\u636e\u5404\u4e3b\u7279\u5f81\u662f\u5206\u5e03\u5728\u6b63\u4ea4\u65b9\u5411\u4e0a\uff0c\u5982\u679c\u5728\u975e\u6b63\u4ea4\u65b9\u5411\u4e0a\u5b58\u5728\u51e0\u4e2a\u65b9\u5dee\u8f83\u5927\u7684\u65b9\u5411\uff0cPCA\u7684\u6548\u679c\u5c31\u5927\u6253\u6298\u6263\u4e86\u3002</p> <p>\u6700\u540e\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0cPCA\u662f\u4e00\u79cd\u65e0\u53c2\u6570\u6280\u672f\uff0c\u4e5f\u5c31\u662f\u8bf4\u9762\u5bf9\u540c\u6837\u7684\u6570\u636e\uff0c\u5982\u679c\u4e0d\u8003\u8651\u6e05\u6d17\uff0c\u8c01\u6765\u505a\u7ed3\u679c\u90fd\u4e00\u6837\uff0c\u6ca1\u6709\u4e3b\u89c2\u53c2\u6570\u7684\u4ecb\u5165\uff0c\u6240\u4ee5PCA\u4fbf\u4e8e\u901a\u7528\u5b9e\u73b0\uff0c\u4f46\u662f\u672c\u8eab\u65e0\u6cd5\u4e2a\u6027\u5316\u7684\u4f18\u5316\u3002</p> <p>\u5e0c\u671b\u8fd9\u7bc7\u6587\u7ae0\u80fd\u5e2e\u52a9\u670b\u53cb\u4eec\u4e86\u89e3PCA\u7684\u6570\u5b66\u7406\u8bba\u57fa\u7840\u548c\u5b9e\u73b0\u539f\u7406\uff0c\u501f\u6b64\u4e86\u89e3PCA\u7684\u9002\u7528\u573a\u666f\u548c\u9650\u5236\uff0c\u4ece\u800c\u66f4\u597d\u7684\u4f7f\u7528\u8fd9\u4e2a\u7b97\u6cd5\u3002</p>"},{"location":"AI/pca/#dla","title":"DLA","text":"<p>\\(or \\Rightarrow max Tr(w^TS_bS_w^{-1}w) constrained to\\ \\ ww^T=1\\)</p> <p>\\(m1 \\ m2 \u90fd\u662f\u5e73\u5747\u503c\\) </p> <p>https://zhuanlan.zhihu.com/p/32658341 </p>"},{"location":"CG/lec1/lec1/","title":"Lecture 1 - 2D Graphics","text":"<p>"},{"location":"CG/lec1/lec1/#lecture-1-2d-graphics","title":"Lecture 1 - 2D Graphics","text":""},{"location":"CG/lec1/lec1/#rasterization","title":"Rasterization","text":""},{"location":"CG/lec1/lec1/#scan-conversion","title":"Scan Conversion","text":""},{"location":"CG/lec1/lec1/#scan-converting-a-line-segment","title":"Scan converting a line segment","text":"<ul> <li>Calculate Slop : \\(m = \\frac{y_2-y_1}{x_2-x_1}=\\frac{\\Delta y}{\\Delta x}\\)</li> <li>Digital Differential Analyzer (DDA) Algorithm</li> <li>We consider the line in the first octant. </li> <li>Other cases can be easily derived.</li> <li>\\(x_{i+1} = x_i + 1\\)</li> <li>\\(y_{i+1} = y_i + m\\)</li> <li>plot the point \\((x_{i+1}, \\text{round}(y_{i+1}))\\)</li> <li>The algorithm uses floating point operations, which are very cleverly avoided in an algorithm first proposed by J. Bresenhamof IBM</li> </ul> <p>Bresenham's Line Drawing Algorithm</p> <p></p> <ul> <li>Derivation</li> </ul> \\[ \\begin{aligned} &amp; dx = x_2 - x_1\\ dy = y_2 - y_1\\ m = \\frac{dy}{dx}\\\\ &amp; y = m(x_{i + 1}) + b \\ (1)\\\\ &amp; d_1 = y - y_i \\ (2)\\\\ &amp; d_2 = y_i +1 - y \\ (3)\\\\ \\end{aligned} \\] <ul> <li>if \\(d_1 - d_2 &lt; 0\\), then \\(y_{i+1} = y_i\\), else \\(y_{i+1} = y_i + 1\\).</li> <li>Substitute (1), (2) &amp; (3) into \\(d_1\u2212d_2\\)</li> <li>we get \\(d_1 - d_2 = 2y-2y_i-1 = 2\\frac{dy}{dx}x_i + 2\\frac{dy}{dx} - 2y_i - 1 + 2b\\)</li> <li>Multiply by \\(dx\\) on both sides, we get \\(P_i = dx(d_1 - d_2) = 2dyx_i + 2dy - 2y_idx + (2b - 1)dx\\)</li> <li>sign\\((d_1\u2212d_2)=sign(P_i)\\) : If \\(P_i &gt;0\\)\uff0cthen \\(y_{i+1}=y_i+1\\)\uff0celse \\(y_{i+1}=y_i\\). $$ \\begin{aligned} &amp; P_i = 2dyx_i + 2dy - 2y_idx + (2b - 1)dx\\ &amp; P_{i+1} = 2dyx_{i+1} + 2dy - 2y_{i+1}dx + (2b - 1)dx\\ &amp; P_{i+1} =P_i+2dy\u22122(y_{i+1}\u2212y_i) dx \\end{aligned} $$</li> </ul> <p>Algorithm </p> <pre><code>void Bresenham(int x1, int y1, int x2, int y2) {\n    int b = 0; //or a given value\n    int dx = x2 - x1;\n    int dy = y2 - y1;\n    int x = x1, y = y1;\n    int P0 = 2 * dy * x1 - 2 * dx * y1 + 2 * dy + (2 * b - 1) * dx;\n    for (int i = 0; i &lt; dx; i++) {\n        if (P0 &gt; 0) {\n            y++;\n            P0 += 2 * dy - 2 * dx;\n        } else {\n            P0 += 2 * dy;\n        }\n        x++;\n        plot(x, y);\n    }\n\n}\n</code></pre>"},{"location":"CG/lec1/lec1/#scan-converting-a-circle","title":"Scan converting a circle","text":"<ul> <li>A circle is defined by its center \\((x_c, y_c)\\) and radius \\(r\\).   \\((x-x_c)^2 + (y-y_c)^2 = r^2\\)</li> <li>\\(y = y_c + \\sqrt{r^2 - (x-x_c)^2}\\)</li> </ul> <ul> <li>However, the error accumulates quickly when we use the above formula.</li> </ul>"},{"location":"CG/lec1/lec1/#polygons","title":"Polygons","text":""},{"location":"CG/lec1/lec1/#polygon-filling","title":"Polygon Filling","text":""},{"location":"CG/lec1/lec1/#text-every-pixel-to-see-if-it-is-inside-the-polygon","title":"Text every pixel to see if it is inside the polygon.","text":"<p>Method 1: Even-Odd Test</p> <ul> <li>Draw a horizontal line from the point to the right.</li> <li>Count the number of intersections with the polygon.    1. If the number is odd, the point is inside the polygon.   2. If the number is even, the point is outside the polygon.   3. If the number is zero, the point is on the boundary of the polygon.</li> </ul> <p>Method II Scan Line Polygon Filling Algorithm</p> <ul> <li>Use intersections between region boundaries and scan lines to identify pixels that are inside the area.</li> <li>Advantages:    1. The algorithm is efficient    2.  Each pixel is visited only once    3.  Shading algorithms could be easily integrated to obtain shaded region</li> </ul>"},{"location":"CG/lec1/lec1/#steps","title":"Steps","text":"<ol> <li>Sort the edges of the polygon by their minimum y-coordinate.</li> <li>Initialize an empty edge table.</li> <li>For each scan line, do the following:<ol> <li>Add edges that intersect the scan line to the edge table.</li> <li>Sort the edge table by x-coordinate.</li> <li>Fill the polygon between pairs of edges in the edge table.</li> </ol> </li> </ol>"},{"location":"CG/lec1/lec1/#efficiency-in-scan-line-method","title":"Efficiency in Scan-line Method","text":""},{"location":"CG/lec1/lec1/#seed-fill-algorithm","title":"Seed Fill Algorithm","text":"<ul> <li>Assumes that at least one pixel inside the polygon is known</li> <li>The algorithm fills the polygon by starting from the known pixel and moving outwards.</li> </ul>"},{"location":"CG/lec1/lec1/#clipping","title":"Clipping","text":"<ul> <li>Removal of content that is not going to be displayed</li> <li>Usually done before scan converting primitives</li> </ul>"},{"location":"CMU%2015-445/Chap1/Chap1/","title":"Chap1","text":"<p>"},{"location":"CMU%2015-445/Chap1/Chap1/#relational","title":"Relational","text":""},{"location":"CMU%2015-445/Chap1/Chap1/#relational-model","title":"Relational Model","text":"<ul> <li> <p>Store database in simple data structures (relations).</p> </li> <li> <p>Physical storage left up to the DBMS implementation.</p> </li> <li> <p>Access data through high-level language, DBMS figures out best execution strategy.</p> </li> </ul>"},{"location":"CMU%2015-445/Chap1/Chap1/#concepts","title":"Concepts","text":"<p>A relation is an unordered set that contain the relationship of attributes that represent entities.</p> <p>A tuple is a set of attribute values (also known as its domain) in the relation.</p> <ul> <li>Values are (normally) atomic/scalar. --(a single integer/float... )</li> <li>The special value NULL is a member of every domain (if allowed). </li> </ul> <p>n-ary Relation :Table with n columns</p>"},{"location":"CMU%2015-445/Chap1/Chap1/#keys","title":"Keys","text":"<p>Primaray Keys</p> <p></p> <p>A relation's primary key uniquely identifies a single tuple</p> <ul> <li>Some DBMSs automatically create an internal primary key if a table does not define one.</li> </ul> <p>Foriegn Keys</p> <p></p> <p>A foreign key specifies that an attribute from one relation has to map to a tuple in another relation.</p>"},{"location":"CMU%2015-445/Chap1/Chap1/#data-manipulation-languages-dml","title":"Data Manipulation Languages (DML)","text":"<p>Methods to store and retrieve information from a database.</p> <p></p>"},{"location":"CMU%2015-445/Chap1/Chap1/#relational-algebra","title":"Relational Algebra","text":""},{"location":"CMU%2015-445/Chap1/Chap1/#fundamental-operations","title":"Fundamental Operations","text":"<ul> <li> <p>\\(\\sigma -- Select\\)\u200b\u200b  </p> </li> <li> <p>\\(\\pi -- Projection\\)\u200b</p> </li> <li> <p>\\(\\cup--Union\\)\u200b</p> </li> <li> <p>\\(\\cap -- Intersection\\)\u200b</p> </li> <li> <p>\\(- \\ --Difference\\)\u200b</p> </li> <li> <p>\\(\\times --Product\\)\u200b</p> </li> <li> <p>\\(\u22c8-- Join\\)\u200b</p> </li> </ul>"},{"location":"CMU%2015-445/Chap1/Chap1/#extra-operators","title":"Extra Operators","text":"<p>Example : Refer to ZJU course slides</p> <ul> <li>Rename (\u03c1)</li> <li>Assignment (R\u2190S)</li> <li>Duplicate Elimination (\u03b4)</li> <li>Aggregation (\u03b3)</li> <li>Sorting (\u03c4)</li> <li>Division (R\u00f7S)</li> </ul>"},{"location":"CMU%2015-445/Chap1/Chap1/#insights","title":"Insights","text":"<p>A better approach is to state the high-level answer that you want the DBMS to compute.</p> <ul> <li>Faced with different situation of data(say ,small amout vs large amout),if considered in a lower level,we have to implement different methods for different circumstances.</li> <li>We expect that ,even the situation changes, we do not have to change our queries.</li> </ul> <p></p> <p></p>"},{"location":"CMU%2015-445/Chap11/lec/","title":"Lec","text":"<p>"},{"location":"CMU%2015-445/Chap11/lec/#join-algorithms","title":"Join Algorithms","text":""},{"location":"CMU%2015-445/Chap11/lec/#nested-loop-join","title":"Nested Loop Join","text":""},{"location":"CMU%2015-445/Chap11/lec/#naive-nested-loop-join","title":"Naive Nested Loop Join","text":""},{"location":"CMU%2015-445/Chap11/lec/#block-nested-loop-join","title":"Block Nested Loop Join","text":""},{"location":"CMU%2015-445/Chap11/lec/#index-nested-loop-join","title":"Index Nested Loop Join","text":"<ul> <li>All Above refer to Slides.</li> </ul>"},{"location":"CMU%2015-445/Chap11/lec/#sort-merge-join","title":"Sort Merge Join","text":"<pre><code>sort R,S on join keys\ncursorR \u2190 Rsorted, cursorS \u2190 Ssorted\nwhile cursorR and cursorS:\n    if cursorR &gt; cursorS:\n        increment cursorS\n    if cursorR &lt; cursorS:\n        increment cursorR (and possibly backtrack cursors)\n    elif cursorR and cursorS match:\n    emit\n    increment cursorS\n</code></pre> <p>Sort cost(R):\\(2M\u2219 (1 + \u2308log_{B-1}\u2308M/ B\u2309\u2309)\\) Sort cost(S):\\(2N\u2219 (1 + \u2308log_{B-1}\u2308N/ B\u2309\u2309)\\) Merge cost:\\((M + N)\\) Total cost:\\(2M\u2219 (1 + \u2308log_{B-1}\u2308M/ B\u2309\u2309) + 2N\u2219 (1 + \u2308log_{B-1}\u2308N/ B\u2309\u2309) + (M + N)\\)</p> <p></p> <p>The worst case for the merging phase is when the join attribute of  all the tuples in both relations contains the same value</p> <p>Cost: (M \u2219 N) + (sort cost)</p> <p>WHEN IS SORT-MERGE JOIN USEFUL? * One or both tables are already sorted on join key. * Output must be sorted on join key. * The input relations may be sorted either by an explicit sort operator, or by scanning the relation using an index on the join key.</p>"},{"location":"CMU%2015-445/Chap11/lec/#hash-join","title":"Hash Join","text":""},{"location":"CMU%2015-445/Chap11/lec/#simple-hash-join","title":"Simple Hash Join","text":""},{"location":"CMU%2015-445/Chap11/lec/#optimizationprobe-filter","title":"Optimization:Probe Filter","text":"<ul> <li> <p>Create a probe filter. </p> </li> <li> <p>First look in Bloom filter then check hash(because bloom filter is in cache,so it's faster!)</p> </li> </ul>"},{"location":"CMU%2015-445/Chap11/lec/#gracepartitioned-hash-join","title":"GRACE\uff1aPARTITIONED HASH JOIN","text":"<p>Partition Phase: Hash both tables on the join attribute into partitions Probe Phase: Compares tuples in corresponding partitions for each table  </p>"},{"location":"CMU%2015-445/Chap11/lec/#partitioned-hash-join-edge-cases","title":"Partitioned HASH JOIN EDGE CASES","text":"<p>If a partition does not fit in memory,recursively partition it with a different hash function * Repeat as needed * Eventually hash join the corresponding (sub-)partitions</p> <p>If a single join key has so many matching records that they don\u2019t fit in memory, use a block nested loop join for that key  * Worst case: attribute are all the same then recursive hash is not useful.   * A relation does not need recursive partitioning if \\(M &gt; n_h + 1\\), or equivalently \\(M &gt; (b_s/M) + 1\\), which simplifies (approximately) to \\(M &gt; \\sqrt{b}_s\\).</p>"},{"location":"CMU%2015-445/Chap11/lec/#hybrid-hash-join","title":"Hybrid Hash Join","text":""},{"location":"CMU%2015-445/Chap2/Chap2/","title":"Chap2","text":"<p>"},{"location":"CMU%2015-445/Chap2/Chap2/#pre-knoledge","title":"Pre-Knoledge","text":"<p>Reference to https://runoob.com/sql/sql-update.html</p>"},{"location":"CMU%2015-445/Chap2/Chap2/#fundamentals","title":"Fundamentals","text":""},{"location":"CMU%2015-445/Chap2/Chap2/#create-table-construct","title":"Create Table Construct","text":"<pre><code>create table instructor(\n  ID char(5)\n  name varchar(20) not null,\n  dept_name varchar(20)\uff0c\n  salary numeric(8,2)default 0\uff0c\n  primary key(ID),\n  foreign key(dept_name)references department\n)\uff1b\n</code></pre> <ul> <li><code>foreign key</code>\u8fd9\u610f\u5473\u7740\"dept_name\"\u5217\u4e2d\u7684\u503c\u5fc5\u987b\u5b58\u5728\u4e8e\"department\"\u8868\u4e2d\u7684\u5173\u8054\u5217\u4e2d\uff0c\u5426\u5219\u63d2\u5165\u6216\u66f4\u65b0\u64cd\u4f5c\u5c06\u88ab\u62d2\u7edd.</li> </ul> <pre><code>foreign key (dept_name) references department) \n                on delete cascade  |set null |restrict|set default\n                on update cascade |set null |restrict |set default,\n</code></pre>"},{"location":"CMU%2015-445/Chap2/Chap2/#drop-and-alter-table-constructs","title":"Drop and Alter Table Constructs","text":"<ul> <li> <p><code>drop table student.</code> : Deletes the table and its contents.</p> </li> <li> <p><code>delete from student</code> : Deletes all contents of table, but retains table.</p> </li> <li> <p><code>alter table</code> : </p> </li> </ul> <p><code>alter table r add A D</code></p> <pre><code>alter table student add resume varchar(256);\n</code></pre> <p><code>alter table r drop A</code></p>"},{"location":"CMU%2015-445/Chap2/Chap2/#sql-select","title":"SQL SELECT","text":"<pre><code>SELECT column1, column2, ...\n    FROM table_name;\nSELECT column1, column2, ...\n    FROM table_name;\nSELECT DISTINCT column1, column2, ...\n    FROM table_name;\n</code></pre>"},{"location":"CMU%2015-445/Chap2/Chap2/#sql-where","title":"SQL WHERE","text":"<pre><code>SELECT column1, column2, ...\n    FROM table_name WHERE condition;\nSELECT column1, column2, ...\n    FROM table_name\n    ORDER BY column1, column2, ... ASC|DESC;\n</code></pre>"},{"location":"CMU%2015-445/Chap2/Chap2/#sql-insert","title":"SQL INSERT","text":"<ul> <li>id \u5217\u662f\u81ea\u52a8\u66f4\u65b0\u7684\uff0c\u8868\u4e2d\u7684\u6bcf\u6761\u8bb0\u5f55\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6570\u5b57\u3002</li> </ul> <pre><code>INSERT INTO table_name (column1,column2,column3,...)\nVALUES (value1,value2,value3,...);\n</code></pre> <ul> <li>\u6279\u91cf</li> </ul> <pre><code>INSERT INTO student\nSELECT ID,name,dept_name,0\nFROM instructor\n</code></pre>"},{"location":"CMU%2015-445/Chap2/Chap2/#sql-update","title":"SQL Update","text":"<pre><code>UPDATE table_name\nSET column1 = value1, column2 = value2, ...\nWHERE condition;\n</code></pre>"},{"location":"CMU%2015-445/Chap2/Chap2/#sql-delete","title":"SQL DELETE","text":"<pre><code>DELETE FROM table_name WHERE condition;\nDELETE FROM table_name;\n</code></pre>"},{"location":"CMU%2015-445/Chap2/Chap2/#natural-join","title":"Natural Join","text":"<pre><code>select name, course_id\nfrom instructor, teaches\nwhere instructor.ID = teaches.ID;\n\nselect name, course_id\nfrom instructor natural join teaches;\n</code></pre> <pre><code>course(course_id,title, dept_name,credits\nteaches(ID, course_id,sec_id,semester, year)\ninstructor(ID, name, dept_name,salary\uff09 \nDepartment has different meanings.\nselect name, title from (instructor natural join teaches\uff09join course using(course_id); \u5373\u89c4\u5b9a\u8fde\u63a5\u7684\u5c5e\u6027\uff0c\u5bf9\u5e94\u4e8eFind students who takes courses across his/her department.\nor:\nselect distinct student.id\n    from (student natural join takes)join course using (course_id\uff09 \n    where student.dept_name &lt;&gt; course.dept_name\n</code></pre>"},{"location":"CMU%2015-445/Chap2/Chap2/#rename","title":"Rename","text":"<pre><code>select ID, name, salary/12 as monthly_salary\nfrom instructor\n\nselect distinct T. name\nfrom instructor as T, instructor as S\nwhere T.salary &gt; S.salary and S.dept_name = \u2018Comp. Sci.\u2019\n</code></pre> <ul> <li>Keyword as is optional and may be omitted</li> </ul> <pre><code>instructor as T \u2261 instructor T\n</code></pre>"},{"location":"CMU%2015-445/Chap2/Chap2/#string-operations","title":"String operations","text":"<pre><code>like \u2018100 \\%'  escape  '\\' \nlike \u2018100 \\%'  \nlike \u2018100  #%'  escape  \u2018#' \n</code></pre>"},{"location":"CMU%2015-445/Chap2/Chap2/#order","title":"Order","text":"<pre><code>order by name desc\n</code></pre>"},{"location":"CMU%2015-445/Chap2/Chap2/#limit","title":"Limit","text":"<pre><code> select  name\n from    instructor\n order by salary desc\n limit 3\uff1b   //  limit 0,3 \n</code></pre>"},{"location":"CMU%2015-445/Chap2/Chap2/#set-operations","title":"Set Operations","text":"<ul> <li>Set operations union, intersect, and except </li> </ul> <p>Each of the above operations automatically eliminates duplicates</p> <ul> <li> <p>To retain all duplicates use the corresponding multiset versions union all, intersect all and except all.</p> </li> <li> <p>Suppose a tuple occurs m times in r and n times in s, then, it occurs:</p> </li> </ul> <p><code>m  + n times in r union all s</code></p> <p><code>min(m,n) times in r intersect all s</code></p> <p><code>max(0, m \u2013 n) times in r except all s</code></p> <p></p>"},{"location":"CMU%2015-445/Chap2/Chap2/#null-values","title":"Null Values","text":"<ul> <li> <p>null signifies an unknown value or that a value does not exist.</p> </li> <li> <p>The result of any arithmetic expression involving null is nul</p> </li> </ul> <p><code>5 + null  returns null</code></p> <ul> <li>The predicate  is null can be used to check for null values</li> </ul> <p>Find all instructors whose salary is null.        </p> <pre><code>select name   \nfrom instructor   \nwhere salary is null\n</code></pre> <p></p>"},{"location":"CMU%2015-445/Chap2/Chap2/#aggregations-group-by","title":"Aggregations + Group By","text":""},{"location":"CMU%2015-445/Chap2/Chap2/#aggregations","title":"Aggregations","text":"<ul> <li>Aggregate functions can (almost) only be used in</li> </ul> <p>the SELECT output list.</p> <ul> <li>COUNT, SUM, AVGsupport DISTINCT</li> </ul> <pre><code>SELECT COUNT(DISTINCT login)\n    FROM student WHERE login LIKE \"%@cs\"\n</code></pre> <ul> <li>Multiple Aggregates</li> </ul> <pre><code>SELECT AVG(gpq),COUNT(sid)\n    FROM student WHERE login LIKE '%@cs'\n</code></pre> <ul> <li>Output of other columns outside of an aggregate is</li> </ul> <p>undefined.</p> <p>Cause ERROR</p> <pre><code>SELECT AVG(s.gpa), e.cid\n    FROM enrolled AS e JOIN student AS s\n        ON e.sid = s.sid\n</code></pre> <ul> <li>To fix it -- Group By</li> </ul>"},{"location":"CMU%2015-445/Chap2/Chap2/#group-by","title":"Group By","text":"<p> <pre><code>SELECT AVG(s.gpa), e.cid\n    FROM enrolled AS e JOIN student AS s\n        ON e.sid = s.sid\n    GROUP BY e.cid\n</code></pre></p>"},{"location":"CMU%2015-445/Chap2/Chap2/#having","title":"Having","text":"<p> * We cannot use Aggregations to FILTER tuples because we have not computed it yet</p> <p></p>"},{"location":"CMU%2015-445/Chap2/Chap2/#examples","title":"Examples","text":"<ul> <li>Find departments in which there is no duplicate name of students.</li> </ul> <pre><code>select dept_name\nfrom student\ngroup by dept_name\nhaving count(distinct name)= count(id)\n</code></pre> <pre><code> select dept_name\nfrom student\ngroup by dept_name\nhaving 1-count(distinct name)/ count(id)&lt;0.001 ;\n</code></pre>"},{"location":"CMU%2015-445/Chap2/Chap2/#nested-subqueries","title":"Nested Subqueries","text":""},{"location":"CMU%2015-445/Chap2/Chap2/#set-membership","title":"Set Membership","text":"<ul> <li>Find courses offered in Fall 2009 and in Spring 2010</li> </ul> <pre><code>select distinct course_id\nfrom section\nwhere semester = \"Fall\" and year = 2009 and\n  course_id in (select course_id from section\n               where semester = 'Spring' and year = 2010);\n</code></pre> <ul> <li>Find courses offered in Fall 2009 but not in Spring 2010</li> </ul> <pre><code>select distinct course_id\nfrom section\nwhere semester = \u2019Fall\u2019 and year= 2009 and \u000b           course_id  not in (select course_id\n                                 from section\n                                 where semester = \u2019Spring\u2019 and year= 2010);\n</code></pre> <ul> <li>Find the total number of (distinct) students who have taken course sections taught by the instructor with ID 10101</li> </ul> <pre><code>select count(distinct ID)\nfrom takes\nwhere (couse_id,sec_id,semester,year)in\n(select course_id,sec_id,semester,year from teaches \n  where teaches.ID = '10101')\n</code></pre>"},{"location":"CMU%2015-445/Chap2/Chap2/#set-comparison","title":"Set Comparison","text":"<ul> <li>Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.</li> </ul> <pre><code>select distinct T.name\nfrom instructor as T,instructor as S\nwhere T.salary &gt; S.salary and S.dept_name = 'Biology'\n</code></pre> <ul> <li>Same query using &gt; some clause</li> </ul> <pre><code>select name\nfrom instructor\nwhere salary &gt; some (select salary\n            from instructor\n            where dept_name = \u2019Biology\u2019);\n</code></pre> <ul> <li>Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.</li> </ul> <pre><code>select name\nfrom instructor\nwhere salary &gt; all (select salary\n                from instructor\n                where dept_name = \u2019Biology\u2019);\n</code></pre>"},{"location":"CMU%2015-445/Chap2/Chap2/#test-for-empty-relations","title":"Test for Empty Relations","text":"<ul> <li>Yet another way of specifying the query \u201cFind all courses taught in both the Fall 2009 semester and in the Spring 2010 semester\u201d</li> </ul> <pre><code>select course_id\nfrom section as S\nwhere = 'Fall' and year = 2009 and\nexists(select * from section as T\n      where semester = 'Spring' and year = 2010\n      and S.course_id = T.course_id)\n</code></pre> <ul> <li>Find all students who have taken all courses offered in the Biology department.</li> </ul> <p>\\(Note\\ that\\ X \u2013 Y = \\emptyset \\Rightarrow X\\subset Y\\)</p> <pre><code>select distinct S.ID,S.name\nfrom student as S\nwhere not exists(\n  (select course_id from course where dept_name = 'Biology')\n  except\n  (select T.course_id from takes as T\n  where S.ID = T.ID)\n)\n</code></pre> <ul> <li> <p>The unique construct tests whether a subquery has any duplicate tuples in its result.</p> </li> <li> <p>Find all courses that were offered at most once in 2009</p> </li> </ul> <pre><code>select T.couse_id\nfrom course as T\nwhere unique(select R.course_id \n            from section as R\n            where T.course_id = R.course_id and R.year = 2009)\n</code></pre> <ul> <li>Find all courses that were offered once in 2009</li> </ul> <pre><code>select T.course_id\nfrom courses as T\nwhere unique(select R.course_id\n            from section as R\n            where T.course_id = R.course_id \n            and R.year = 2009)\n      and exists(select R.course_id\n                from section as R\n                where T.course_id = R.course_id \n            and R.year = 2009)\n</code></pre> <pre><code>and course_id  in (select course_id                              from section\n            where year = 2009) ;\n</code></pre> <ul> <li>Find all courses that were offered once in every semester</li> </ul> <pre><code>select T.course_id\nfrom course as T\nwhere unique(select R.course_id,year,semester\n            from section as R\n            where T.course_id = R.course_id)\n      and exists(select R.course_id,year,semester\n            from section as R\n            where T.course_id = R.course_id)\n</code></pre> <ul> <li>\u4e5f\u53ef\u4ee5\u7528 <code>group by count(*) &gt; 1</code> \u5b9e\u73b0</li> </ul>"},{"location":"CMU%2015-445/Chap2/Chap2/#other-operations","title":"Other Operations","text":""},{"location":"CMU%2015-445/Chap2/Chap2/#subqueries-in-the-from-clause","title":"Subqueries in the From Clause","text":""},{"location":"CMU%2015-445/Chap2/Chap2/#with-clause","title":"With Clause","text":"<ul> <li> <p>The with clause provides a way of defining a temporary view whose definition is available only to the query in which the with clause occurs. </p> </li> <li> <p>Find all departments with the maximum budget </p> </li> </ul> <pre><code>with max_budget(value) as\n  (select max(budget\n             from department)\n  select dept_name\n  from department,max_budget\n  where department.budget = max_budget.value)\n\nselect dept_name\nfrom department\nwhere budget = (select (max(budget) from department))\n</code></pre> <p>Complex Queries using With Clause</p> <ul> <li>Find all departments where the total salary is greater than the average of the total salary at all departments</li> </ul> <pre><code>with dept_total(dept_name,value)as\n(select dept_name,sum(salary)from instructor\ngroup by dept_name),\n  deot_total_avg(value)as\n(select avg(value)from dept_total)\nselect dept_name\nfrom dept_total,dept_total_avg\nwhere dept_total.value &gt;= dept_total_ang.value;\n</code></pre>"},{"location":"CMU%2015-445/Chap2/Chap2/#modification-of-the-database","title":"Modification of the Database","text":""},{"location":"CMU%2015-445/Chap2/Chap2/#delete","title":"Delete","text":"<pre><code>delete from instructor\nwhere dept_name in (select dept_name                                         from department\n                  where building = \u2019Watson\u2019);\n\ndelete from instructor\nwhere salary&lt; (select avg (salary) from instructor);\n'''\nProblem:  as we delete tuples from deposit, the average salary changes\nSolution used in SQL:\n1.   First, compute avg salary and find all tuples to delete\n2.   Next, delete all tuples found above (without ecomputing avg or retesting the tuples)\n'''\n</code></pre>"},{"location":"CMU%2015-445/Chap2/Chap2/#insert","title":"Insert","text":"<pre><code>insert into course\nvalues (\u2019CS-437\u2019, \u2019Database Systems\u2019, \u2019Comp. Sci.\u2019, 4);\ninsert into course (course_id, title, dept_name, credits)\nvalues (\u2019CS-437\u2019, \u2019Database Systems\u2019, \u2019Comp. Sci.\u2019, 4);\ninsert into student\nvalues (\u20193003\u2019, \u2019Green\u2019, \u2019Finance\u2019, null);\n</code></pre>"},{"location":"CMU%2015-445/Chap2/Chap2/#update","title":"Update","text":"<ul> <li>Increase salaries of instructors whose salary is over $100,000 by 3%, and all others receive a 5% raise</li> </ul> <pre><code> update instructor\n set salary = salary * 1.03\n where salary &gt; 100000;\n update instructor\n set salary = salary * 1.05\n where salary &lt;= 100000;\n</code></pre> <ul> <li> <p>The order is importantCan be done better using the case statement (next slide)</p> </li> <li> <p>Case Statement for Conditional Updates</p> </li> </ul> <pre><code>update instructor\nset salary = case                                         when salary &lt;= 100000 then salary * 1.05\nelse salary * 1.03 \nend\n</code></pre> <p></p> <ul> <li>Must be a scaler (for set from select.)</li> </ul>"},{"location":"CMU%2015-445/Chap2/Chap2/#string-date-time-operations","title":"String / Date / Time Operations","text":""},{"location":"CMU%2015-445/Chap2/Chap2/#string-operations_1","title":"String Operations","text":""},{"location":"CMU%2015-445/Chap2/Chap2/#like","title":"LIKE","text":"<ul> <li> <p>LIKE is used for string matching.</p> </li> <li> <p>String-matching operators     &gt;<code>%</code> matches any sequence of characters, including zero characters.  Any substring.     In other words, <code>%</code> can match any string of any length, including an empty string.  Any character.</p> <ul> <li>For example, <code>'15%'</code> matches any string starting with \"15\", <code>'%15'</code> matches any string ending with \"15\", and <code>'%15%'</code> matches any string containing \"15\" anywhere.</li> </ul> </li> </ul> <pre><code>SELECT * FROM enrolled AS e\n    WHERE e.cid LIKE '15_%'\n</code></pre> <p><code>_</code> matches any single character.  It's used to specify that at a particular position, any character must match, but it doesn't matter which character. For example, <code>'15_'</code> matches \"150\", \"151\", \"152\", etc., but not \"15\" etc. <pre><code>SELECT * FROM student AS s\n    WHERE s.login LIKE '%@c_'\n</code></pre></p>"},{"location":"CMU%2015-445/Chap2/Chap2/#substring","title":"SUBSTRING","text":"<pre><code>SELECT SUBSTRING(name,1,5) AS abbrv_name\n    FROM student WHERE sid = 53688\n</code></pre>"},{"location":"CMU%2015-445/Chap2/Chap2/#upper","title":"UPPER","text":"<pre><code>SELECT * FROM student AS s\n    WHERE UPPER(s.name) LIKE 'KAN%'\n</code></pre>"},{"location":"CMU%2015-445/Chap2/Chap2/#_1","title":"<code>||</code>","text":"<ul> <li>SQL standard says to use ||operator to concatenate two or more strings together.</li> </ul> <p><code>SQL-92</code> <pre><code>SELECT name FROM student\n    WHERE login = LOWER(name) || '@cs'\n</code></pre></p> <p><code>MSSQL</code> <pre><code>SELECT name FROM student\n    WHERE login = LOWER(name) + '@cs'\n</code></pre></p> <p><code>MySQL</code> <pre><code>SELECT name FROM student\n    WHERE login = CONCAT(LOWER(name), '@cs')\n</code></pre></p> <ul> <li>Also like <code>'Li''ly'</code>  will automatically concatenate</li> </ul>"},{"location":"CMU%2015-445/Chap2/Chap2/#datetime-operations","title":"Date/Time Operations","text":"<pre><code> SELECT NOW();\n SELECT CURRENT_TIMESTAMP();\n SELECT CURRENT_TIMESTAMP();\n SELECT EXTRACT(DAY FROM DATE('2018-08-29'));\n //SELECT DATE('2018-08-29')-DATE('2018-01-01');\n SELECT ROUND((UNIX_TIMESTAMP(DATE('2018-08-29'))-UNIX_TIMESTAMP(DATE('2018-01-01')))/(60*60*24),0) AS days;\n SELECT DATEDIFF(DATE('2018-08-29'),DATE('2018-01-01')) AS days;\n</code></pre>"},{"location":"CMU%2015-445/Chap2/Chap2/#output-control-redirection","title":"Output Control + Redirection","text":""},{"location":"CMU%2015-445/Chap2/Chap2/#output-redirection","title":"Output Redirection","text":"<p>Store query results in another table: \u2192 Table must not already be defined. \u2192 Table will have the same # of columns with the same types as the input. <pre><code>CREATE TABLE CourseIds (\nSELECT DISTINCT cid FROM enrolled);\n</code></pre> Insert tuples from query into another table:</p> <p>\u2192 Inner SELECTmust generate the same columns as the</p> <p>target table.</p> <p>\u2192 DBMSs have different options/syntax on what to do with</p> <p>integrity violations (e.g., invalid duplicates).</p> <pre><code>INSERT INTO CourseIds\n(SELECT DISTINCT cid FROM enrolled);\n</code></pre>"},{"location":"CMU%2015-445/Chap2/Chap2/#output-control","title":"Output Control","text":"<ul> <li>ORDER BY \\(&lt;column*&gt; [ASC|DESC]\\) <pre><code>SELECT sid FROM enrolled\nWHERE cid = '15-721'\nORDER BY grade DESC,1,sid ASC\n</code></pre></li> <li>LIMIT \\(&lt;count&gt; [offset]\\) \u2192 Limit the \\(\\#\\)\u200b\u200b of tuples returned in output. \u2192 Can set an offset to return a \u201crange\u201d</li> <li><code>offset -- skip</code> -- should combine with <code>oredered by</code> clause <pre><code>SELECT sid, name FROM student\nWHERE login LIKE '%@cs'\nLIMIT 20 OFFSET 10  \n</code></pre></li> </ul>"},{"location":"CMU%2015-445/Chap2/Chap2/#nested-queries","title":"Nested Queries","text":"<p><pre><code>select name from student\n    Where sid in(\n        select sid from enrolled\n            where cid = '14-445 '\n    )\n</code></pre> </p> <pre><code>SELECT name FROM student\nWHERE sid = ANY(\nSELECT sid FROM enrolled\nWHERE cid = '15-445'\n)\n</code></pre> <pre><code>SELECT (SELECT S.name from student as S where S.sid = E = sid) as sname\nFROM enrolled as E\nwhere cid = '15-445'\n</code></pre> <p>Find student record with the highest id that is enrolled in at least one course.</p> <pre><code>SELECT sid,name FROM student\nWHERE sid IN(\nSELECT MAX(sid)FROM enrolled\n)\n</code></pre> <pre><code>SELECT sid, name FROM student\nWHERE sid IN (\nSELECT sid FROM enrolled\nORDER BY sid DESC LIMIT 1\n)\n</code></pre> <pre><code>SELECT student.sid, name\n    FROM student\n    JOIN (SELECT MAX(sid) AS sid\n    FROM enrolled) AS max_e\n        ON student.sid = max_e.sid;\n</code></pre> <p>Find all courses that have no students enrolled in it.</p> <ul> <li>Through outer quiries , we can access inner queries</li> </ul> <pre><code>SELECT * FROM course\n    WHERE NOT EXISTS(\n  SELECT * FROM enrolled\n    WHERE course.cid = enrolled.cid\n  )\n</code></pre>"},{"location":"CMU%2015-445/Chap2/Chap2/#window-functions","title":"Window Functions","text":"<ul> <li>Still See the Original Tuples</li> </ul>"},{"location":"CMU%2015-445/Chap2/Chap2/#common-table-expressions","title":"Common Table Expressions","text":"<p>Provides a way to write auxiliary statements for use in a larger query.</p> <p>Think of it like a temp table just for one query.</p> <p>Alternative to nested queries and views.</p> <pre><code>WITH cteName AS (\nSELECT 1\n)\nSELECT * FROM cteName\n</code></pre> <p></p> <pre><code>WITH cteSource (maxId) AS (\nSELECT MAX(sid) FROM enrolled\n)\nSELECT name FROM student, cteSource\nWHERE student.sid = cteSource.maxId\n</code></pre> <ul> <li>Recursion\uff01</li> </ul> <p></p> <p>At each iteration, that SELECT produces a row with a new value one greater than the value of n from the previous row set. The first iteration operates on the initial row set (1) and produces 1+1=2; the second iteration operates on the first iteration\u2019s row set (2) and produces 2+1=3; and so forth. This continues until recursion ends, which occurs when n is no longer less than 5. </p> <ul> <li>https://blog.csdn.net/mjfppxx/article/details/124879326</li> </ul> <p></p>"},{"location":"CMU%2015-445/Chap2_inclass/lec/","title":"Lec","text":""},{"location":"CMU%2015-445/Chap2_inclass/lec/#intermediate-sql","title":"Intermediate SQL","text":""},{"location":"CMU%2015-445/Chap2_inclass/lec/#joined-relations","title":"Joined Relations","text":"<ul> <li>join\u9ed8\u8ba4\u662f inner join</li> <li>Natural Join \u548c Inner Join \u5728\u8fde\u63a5\u4e24\u4e2a\u8868\u65f6\u7684\u7ed3\u679c\u662f\u76f8\u540c\u7684\uff0c\u4f46\u662f\u5b83\u4eec\u7684\u5b9e\u73b0\u65b9\u5f0f\u4e0d\u540c</li> </ul> <p>https://blog.csdn.net/yiyelanxin/article/details/86593473</p> <p>Join operations take two relations and return as a result another relation.</p> <ul> <li>Join operations are typically used as subquery expressions in the from clause</li> </ul> <p>Join condition defines which tuples in the two relations match, and what attributes are present in the result of the join.</p> <p>Join type  defines how tuples in each relation that do not match any tuple in the other relation (based on the join condition) are treated.</p>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#examples","title":"Examples","text":""},{"location":"CMU%2015-445/Chap2_inclass/lec/#types","title":"Types.","text":""},{"location":"CMU%2015-445/Chap2_inclass/lec/#built-in-data-types-in-sql","title":"Built-in Data Types in SQL","text":"<ul> <li> <p><code>date \u20182005-7-27\u2019</code></p> </li> <li> <p><code>time \u201809:00:30.75\u2019</code></p> </li> <li> <p><code>timestamp  \u20182005-7-27 09:00:30.75\u2019</code></p> </li> <li> <p><code>interval  \u20181\u2019 day</code></p> </li> </ul> <p>Subtracting a date/time/timestamp value from another gives an interval value</p> <p>Interval values can be added to date/time/timestamp values</p> <ul> <li>date, time functions: </li> </ul> <p><code>current_date(), current_time()</code></p> <p><code>year(x), month(x), day(x), hour(x), minute(x), second(x)</code></p>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#user-defined-types","title":"User-Defined Types","text":"<pre><code>create type Dollars as numeric (12,2) final\ncreate table department(\n  dept_name varchar (20),\n  building varchar (15),\n  budget Dollars);\n</code></pre>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#domains","title":"Domains","text":"<pre><code>create domain person_name char(20) not null\n</code></pre> <ul> <li>Types and domains are similar.  </li> </ul> <p>Domains can have constraints, such as not null, specified on them.</p> <pre><code>create domain degree_level varchar(10)\nconstraint degree_level_test\ncheck (value in (\u2019Bachelors\u2019, \u2019Masters\u2019, \u2019Doctorate\u2019));\n</code></pre>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#large-object-types","title":"Large-Object Types","text":""},{"location":"CMU%2015-445/Chap2_inclass/lec/#integrity-constraints","title":"Integrity Constraints","text":"<p>Integrity constraints guard against accidental damage to the database, by ensuring that authorized changes to the database do not result in a loss of data consistency. </p> <ul> <li>A checking account must have a balance greater than \\(10,000.00\\)</li> <li>A salary of a bank employee must be at least $4.00 an hour</li> <li>A customer must have a (non-null) phone number</li> </ul>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#for-a-single-relation","title":"For a single relation","text":"<ul> <li><code>not null</code></li> </ul> <pre><code>name varchar(20) not null\nbudget numeric(12,2) not null\n</code></pre> <ul> <li> <p><code>primary key</code> </p> </li> <li> <p><code>unique</code> </p> </li> <li> <p><code>check (P), where P is a predicate</code> </p> </li> </ul> <pre><code>create table section (\n    course_id varchar (8),\n    sec_id varchar (8),\n    semester varchar (6),\n    year numeric (4,0),\n    building varchar (15),\n    room_number varchar (7),\n    time slot id varchar (4), \n    primary key (course_id, sec_id, semester, year),\n    check (semester in (\u2019Fall\u2019, \u2019Winter\u2019, \u2019Spring\u2019, \u2019Summer\u2019))\n);\n</code></pre> <pre><code>check (semester in (\u2019Fall\u2019, \u2019Winter\u2019, \u2019Spring\u2019, \u2019Summer\u2019))\n</code></pre> <ul> <li> <p><code>foreign key</code></p> </li> <li> <p>Cascading Actions</p> </li> </ul> <pre><code>create table course (\ncourse_id   char(5) primary key,\ntitle       varchar(20),\ndept_name varchar(20) references department\n)\ncreate table course (\n  ...\ndept_name varchar(20),\nforeign key (dept_name) references department\n  on delete cascade,\n  on update cascade,\n  ...)\n</code></pre> <ul> <li>Integrity Constraint Violation During Transactions</li> </ul> <pre><code>create table person (\n  ID  char(10),\n  name char(40),\n  mother char(10),\n  father  char(10),\n  primary key (ID),\n  foreign key (father) references person,\n  foreign key (mother) references  person);\n</code></pre> <p>How to insert a tuple without causing constraint violation ?</p> <ul> <li>insert father and mother of a person before inserting person</li> <li>OR, set father and mother to null initially, update after inserting all persons (not possible if father and mother attributes declared to be not null) </li> <li>OR defer constraint checking to transaction end.</li> </ul> <p></p> <ul> <li>Unfortunately:  subquery in check clause not supported by pretty much any databaseAlternative: triggers</li> </ul> <p>Assertion</p> <pre><code>create assertion &lt;assertion-name&gt; check &lt;predicate&gt;;\ncreate assertion credits_earned_constraint check\n(not exists \n        (select ID \n      from student\n      where tot_cred &lt;&gt; (\n              select sum(credits)\n              from takes natural join course\n              where student.ID=takes.ID\n                         and grade is not null \n                         and grade&lt;&gt;\u2019F\u2019)))\n</code></pre>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#view","title":"View","text":"<ul> <li>A view provides a mechanism to hide certain data from the view of certain users. </li> <li>Consider a person who needs to know an instructors name and department, but not the salary.  This person should see a relation described, in SQL, by </li> </ul> <pre><code>create view faculty as \nselect ID, name, dept_name\nfrom instructor\n</code></pre> <pre><code>select name\nfrom faculty\nwhere dept_name = \u2018Biology\u2019\n</code></pre> <pre><code>create view departments_total_salary(dept_name, total_salary) as\nselect dept_name, sum (salary)\nfrom instructor\ngroup by dept_name;\n</code></pre> <pre><code>create view physics_fall_2009 as\nselect course.course_id, sec_id, building, room_number\nfrom course, section\nwhere course.course_id = section.course_id\nand course.dept_name = \u2019Physics\u2019\nand section.semester = \u2019Fall\u2019\nand section.year = \u20192009\u2019;\n</code></pre> <pre><code>create view physics_fall_2009_watson as\nselect course_id, room_number\nfrom physics_fall_2009\nwhere building= \u2019Watson\u2019;\n</code></pre> <ul> <li>\u76f4\u63a5\u5bf9view\u7684\u5b9a\u4e49\u8fdb\u884c\u5d4c\u5165</li> </ul>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#update","title":"Update","text":"<pre><code>create view faculty as\nselect ID, name, dept_name\nfrom instructor\n\ninsert into faculty values (\u201930765\u2019, \u2019Green\u2019, \u2019Music\u2019);\n</code></pre> <ul> <li> <p>This insertion must be represented by the insertion of the tuple<code>(\u201930765\u2019, \u2019Green\u2019, \u2019Music\u2019, null)</code>into the instructor relation  insert into  instructor values <code>(\u201930765\u2019, \u2019Green\u2019, \u2019Music\u2019, null);</code></p> </li> <li> <p>Some Updates cannot be Translated Uniquely</p> </li> </ul> <pre><code>create view instructor_info a\nselect ID, name, building\nfrom instructor, department\nwhere instructor.dept_name= department.dept_name;\ninsert into instructor_info values (\u201969987\u2019, \u2019White\u2019, \u2019Taylor\u2019);\n</code></pre> <ul> <li> <p>which department, if multiple departments in Taylor?</p> </li> <li> <p>Most SQL implementations allow updates only on simple views(updatable views) </p> </li> </ul> <p>The from clause has only one database relation.</p> <p>The select clause contains only attribute names of the relation, and does not have any expressions, aggregates, or distinct specification.</p> <p>Any attribute not listed in the select clause can be set to null.</p> <p>The query does not have a group by or having clause.</p>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#materialized-view","title":"Materialized View","text":"<ul> <li>\u6709\u5bf9\u5e94\u7684\u4e34\u65f6\u8868..</li> </ul> <p>create a physical table containing all the tuples in the result of the query defining the view</p> <p>If relations used in the query are updated, the materialized view result becomes out of date</p> <ul> <li>Need to maintain the view, by updating the view whenever the underlying relations are updated.</li> </ul> <pre><code>create materialized view departments_total_salary(dept_name, total_salary) as\n    select dept_name, sum (salary)\n    from instructor\n    group by dept_name;\nselect dept_name\nfrom departments_total_salary\nwhere total_salary &gt; (select avg(total_salary) from departments_total_salary );\n</code></pre>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#view-and-logical-data-indepencence","title":"View and Logical Data Indepencence","text":"<p>If  relation \\(S(a, b, c)\\) is split into two sub relations \\(S_1(a,b)\\) and \\(S_2(a,c)\\)\u200b. How to realize the logical data independence? </p> <pre><code>create table S1...;\ncreate table S2...;\ninsert into S1 select a,b from S;\ninsert into S2 select a,c from S;\ndrop table S;\ncreate view S(a,b,c)as select a,b,c from Sq natural join S2;\n</code></pre> <ul> <li><code>create view S(a,b,c)as select a,b,c from Sq natural join S2;</code>\u5b9e\u73b0\u5bf9\u539f\u8868\u7684\u67e5\u8be2\uff0c\u5bf9\u7528\u6237\u6765\u8bf4\u65e0\u533a\u522b.</li> </ul> <p></p>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#indexes","title":"Indexes","text":"<pre><code>create table student\n(   ID varchar (5),\n name varchar (20) not null,\n dept_name varchar (20),\n tot_cred numeric (3,0) default 0,\n primary key (ID) \n)\ncreate index studentID_index on student(ID)\n</code></pre> <ul> <li>Indices are data structures used to speed up access to records with specified values for index attributes</li> </ul> <pre><code> select *\n from  student\n where  ID = \u201812345\u2019\n</code></pre> <ul> <li>can be executed by using the index to find the required record, without looking at all records of student</li> </ul>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#transactions","title":"Transactions","text":"<ul> <li><code>AUTOCOMMIT=1;</code> -- Everytime auto commit</li> </ul> <pre><code>SET AUTOCOMMIT=0;\nUPDATE account SET balance=balance -100 WHERE ano=\u20181001\u2019;\nUPDATE account SET balance=balance+100 WHERE ano=\u20181002\u2019;\nCOMMIT;\n</code></pre> <pre><code>UPDATE account SET balance=balance -200 WHERE ano=\u20181003\u2019;\nUPDATE account SET balance=balance+200 WHERE ano=\u20181004\u2019;     COMMIT;\n</code></pre> <pre><code>UPDATE account SET balance=balance+balance*2.5%;\nCOMMIT;\n</code></pre>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#acid-properties","title":"ACID Properties","text":""},{"location":"CMU%2015-445/Chap2_inclass/lec/#authorization","title":"Authorization","text":"<pre><code>grant &lt;privilege list&gt;  // privilege\uff1a\u6743\u9650\non &lt;relation name or view name&gt; to &lt;user list&gt;\n</code></pre> <ul> <li>\\&lt;user list&gt; is:</li> </ul> <p>a user-id</p> <p>public, which allows all valid users the privilege granted</p> <p>A role (more on this later)</p> <ul> <li>Granting a privilege on a view does not imply granting any privileges on the underlying relations.</li> <li>The grantor of the privilege must already hold the privilege on the specified item (or be the database administrator).</li> </ul> <pre><code>grant select on instructor  to U1, U2, U3\ngrant select on department  to public\ngrant update (budget) on department  to U1,U2\ngrant all privileges on department   to U1\n</code></pre>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#revoking-authorization-in-sql","title":"Revoking Authorization in SQL","text":"<pre><code>revoke &lt;privilege list&gt;\non &lt;relation name or view name&gt; \nfrom &lt;user list&gt;\nrevoke select on branch  from U1, U2, U3\n</code></pre> <ul> <li>\\&lt;privilege-list&gt; may be all to revoke all privileges the revokee may hold.</li> <li>If \\&lt;revokee-list&gt; includes public, all users lose the privilege except those granted it explicitly.</li> <li>If the same privilege was granted twice to the same user by different grantees, the user may retain the privilege after the revocation.</li> <li>All privileges that depend on the privilege being revoked are also revoked.</li> </ul>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#advanced-sql","title":"Advanced sql","text":"<p>There are two approaches to accessing  database from a general-purpose programming language.</p> <p>API (application-program interface) for a program to interact with a database server</p> <p>Embedded SQL -- provides a means by which a program can interact with a database server.  </p> <ul> <li>The  SQL statements are translated at compile time  into function calls.  </li> <li> <p>At runtime,  these function calls connect to the database  using an API  that provides dynamic  SQL facilities.</p> </li> <li> <p>ODBC (Open Database Connectivity) works with C, C++, C#</p> </li> <li>JDBC (Java Database Connectivity) works with Java</li> <li>Embedded SQL in C</li> <li>SQLJ - embedded SQL in Java</li> <li>JPA(Java Persistence API)  - OR mapping of Java</li> </ul>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#jdbc-code","title":"JDBC Code","text":"<p><pre><code>public static void JDBCexample(String dbid, String userid, String passwd){ \n     try { \n   Connection conn = DriverManager.getConnection(     \n       \"jdbc:oracle:thin:@db.yale.edu:2000:univdb\", userid, passwd); \n          Statement stmt = conn.createStatement(); \n              ... Do Actual Work ....\n          stmt.close();\n          conn.close();\n     }\n     catch (SQLException sqle) { \n          System.out.println(\"SQLException : \" + sqle);\n     }\n        }\n</code></pre> * Update to database</p> <p><pre><code>try {\n     stmt.executeUpdate(\n          \"insert into instructor values(\u201977987\u2019, \u2019Kim\u2019, \u2019Physics\u2019, 98000)\"\n     );\n} \ncatch (SQLException sqle){\n    System.out.println(\"Could not insert tuple. \" + sqle);\n}\n</code></pre> * Execute query and fetch and print results <pre><code>ResultSet rset = stmt.executeQuery(\n                                \"select dept_name, avg (salary)\n                                 from instructor\n                                 group by dept_name\");\nwhile (rset.next()){\n       System.out.println(rset.getString(\"dept_name\") + \" \" +rset.getFloat(2));\n}\n</code></pre></p> <ul> <li>Getting result fields:</li> </ul> <p><code>rset.getString(\u201cdept_name\u201d)</code> and <code>rset.getString(1)</code> equivalent if dept_name is the first argument of select result.</p> <ul> <li>Dealing with Null values</li> </ul> <p><code>int a = rset.getInt(\u201ca\u201d);  if (rset.wasNull()) Systems.out.println(\u201cGot null value\u201d);</code></p> <ul> <li>Prepared Statement <pre><code>PreparedStatement pStmt = conn.prepareStatement( \"insert into instructor values(?,?,?,?)\");\npStmt.setString(1, \"88877\");      \npStmt.setString(2, \"Perry\");\npStmt.setString(3, \"Finance\");   \npStmt.setInt(4, 125000);\n\npStmt.executeUpdate();   \n\npStmt.setString(1, \"88878\");\npStmt.executeUpdate();\n</code></pre> WARNING: always use prepared statements when taking an input from the user and adding it to a query</li> <li>NEVER create a query by concatenating strings which you get as inputs <pre><code>\"insert into instructor values(\u2019 \" + ID + \" \u2019, \u2019 \" + name + \" \u2019, \" + \n                                            \" \u2019 \" + dept name + \" \u2019, \" + salary + \")\"\n</code></pre></li> </ul>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#sql-injection","title":"SQL Injection","text":""},{"location":"CMU%2015-445/Chap2_inclass/lec/#metadata","title":"Metadata","text":"<pre><code>ResultSetMetaData rsmd = rs.getMetaData();\n     for(int i = 1; i &lt;= rsmd.getColumnCount(); i++) {\n           System.out.println(rsmd.getColumnName(i));\n                  System.out.println(rsmd.getColumnTypeName(i));\n}\n</code></pre>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#transaction-control-in-jdbc","title":"Transaction Control in JDBC","text":"<ul> <li>By default, each SQL statement is treated as a separate transaction that is committed automatically</li> </ul> <p>bad idea for transactions with multiple updates</p> <ul> <li>Can turn off automatic commit on a connection</li> </ul> <pre><code>conn.setAutoCommit(false);\n</code></pre> <ul> <li>Transactions must then be committed or rolled back explicitly</li> </ul> <pre><code>conn.commit();    \nconn.rollback();\n</code></pre> <ul> <li><code>conn.setAutoCommit(true)</code> turns on automatic commit.</li> </ul> <p></p>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#sqlj-embedded-sql-in-java","title":"SQLJ: embedded SQL in Java","text":"<pre><code>#sql iterator deptInfoIter ( String dept name, int avgSal);\n    deptInfoIter iter = null;\n    #sql iter = { select dept_name, avg(salary) as avgSal from instructor group by dept name };\n    while (iter.next()) {\n           String deptName = iter.dept_name();\n          int avgSal = iter.avgSal();\n          System.out.println(deptName + \" \" + avgSal);\n    }\n    iter.close();\n</code></pre>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#odbc","title":"ODBC","text":"<p>Each database system supporting ODBC provides a \"driver\" library that must be linked with the client program.</p> <p>When client program makes an ODBC API call, the code in the library communicates with the server to carry out the requested action, and fetch results.</p> <p>ODBC program first allocates an SQL environment, then a database connection handle.</p> <p>Opens database connection using SQLConnect( ).  Parameters for SQLConnect:</p> <ul> <li>connection handle</li> <li>the server to which to connectthe </li> <li>user identifier,</li> <li>password </li> </ul> <p>Must also specify types of arguments:</p> <ul> <li>SQL_NTS denotes previous argument is a null-terminated string.</li> </ul> <pre><code>int ODBCexample()\n{\n  RETCODE error;\n  HENV    env;     /* environment */ \n  HDBC    conn;  /* database connection */ \n  SQLAllocEnv(&amp;env);\n  SQLAllocConnect(env, &amp;conn);\n  SQLConnect(conn, 'db.yale.edu', SQL_NTS, 'avi', SQL_NTS,'avipasswd',SQL_NTS); \n  { .... Do actual work ... }\n  SQLDisconnect(conn); \n  SQLFreeConnect(conn); \n  SQLFreeEnv(env); \n}\n</code></pre> <ul> <li> <p>Program sends SQL commands to database by using <code>SQLExecDirect</code></p> </li> <li> <p>Result tuples are fetched using <code>SQLFetch()</code></p> </li> <li> <p><code>SQLBindCol()</code> binds C language variables to attributes of the query result When a tuple is fetched, its attribute values are automatically stored in corresponding C variables.</p> </li> <li> <p>Arguments to <code>SQLBindCol()</code></p> </li> </ul> <p>ODBC stmt variable, attribute position in query result</p> <p>The type conversion from SQL to C.  </p> <p>The address of the variable. </p> <p>For variable-length types like character arrays, </p> <ul> <li>The maximum length of the variable</li> <li>Location to store actual length when a tuple is fetched.</li> <li>Note: A negative value returned for the length field indicates null value</li> </ul> <p>Good programming requires checking results of every function call for errors; we have omitted most checks for brevity.</p> <pre><code>char deptname[80];\nfloat salary;\nint lenOut1, lenOut2;\n\nHSTMT stmt;\nchar * sqlquery = \"select dept_name, sum (salary) from instructor group by dept_name\";\nSQLAllocStmt(conn, &amp;stmt);\nerror = SQLExecDirect(stmt, sqlquery, SQL_NTS);\n\nif (error == SQL SUCCESS) {\n    SQLBindCol(stmt, 1, SQL_C_CHAR, deptname , 80, &amp;lenOut1);\n    SQLBindCol(stmt, 2, SQL_C_FLOAT, &amp;salary, 0 , &amp;lenOut2);\n    while (SQLFetch(stmt) == SQL_SUCCESS) {\n        printf (\" %s %g\\n\", deptname, salary);\n    }\n}\nSQLFreeStmt(stmt, SQL_DROP);\n//\u5b9a\u4e49\u6570\u7ec4\u9700\u8981\u591a\u4e00\u4e2a\uff0c\u5426\u5219\u4f1a\u6709\u622a\u65ad\u3002\u5982 char deptname[11]; \u624d\u80fd\u5b9a\u4e49\u5341\u4e2a\u5143\u7ec4\u3002\n//\u5982\u679c\u7ed3\u679c\u4e3a\u7a7a\uff0c\u5219 lenOut \u4e3a -1.\n</code></pre>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#odbc-prepared-statements","title":"ODBC Prepared Statements","text":"<pre><code>SQLPrepare(stmt, &lt;SQL String&gt;);\nSQLBindParameter(stmt, &lt;parameter#&gt;,\n                 \u2026 type information and value omitted for simplicity..)\n retcode = SQLExecute( stmt); \n</code></pre>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#embedded-sql","title":"Embedded SQL","text":"<ul> <li>Before executing any SQL statements, the program must first connect to the database.  This is done using:</li> </ul> <pre><code>EXEC-SQL connect to  server  user user-name using password;\n</code></pre> <ul> <li>Variables of the host language can be used within embedded SQL statements.  </li> </ul> <p>They are preceded  by a colon  (:) to distinguish from SQL variables (e.g.,  :credit_amount )</p> <ul> <li>Host Variables used as above must be declared within DECLARE section, as illustrated below. The syntax for declaring the variables, however, follows the usual host language syntax.</li> </ul> <pre><code>EXEC-SQL BEGIN DECLARE SECTION\n   int  credit-amount ;\nEXEC-SQL END DECLARE SECTION;\n</code></pre> <ul> <li>To write an embedded SQL query, we use the </li> </ul> <pre><code>declare c cursor for  &lt;SQL query&gt; \n</code></pre> <pre><code>EXEC SQL\n   declare c cursor for\n   select ID, name\n   from student\n   where tot_cred &gt; :credit_amount;\n</code></pre> <pre><code>main( )\n{   EXEC SQL INCLUDE SQLCA; //\u58f0\u660e\u6bb5\u5f00\u59cb\n    EXEC SQL BEGIN DECLARE SECTION;\n    char account_no [11];    //host variables(\u5bbf\u4e3b\u53d8\u91cf)\u58f0\u660e\n    char branch_name [16];\n    int  balance;  \n        EXEC SQL END DECLARE SECTION;//\u58f0\u660e\u6bb5\u7ed3\u675f\n        EXEC SQL CONNECT  TO  bank_db  USER Adam Using Eve; \n        scanf (\u201c%s  %s  %d\u201d, account_no, branch_name, balance);\n        EXEC SQL insert into account values (:account_no, :branch_name, :balance);\n        If (SQLCA.sqlcode ! = 0){printf ( \u201cError!\\n\u201d);}\n        else {printf (\u201cSuccess!\\n\u201d);}\u00e5\n</code></pre> <ul> <li>the open statement</li> </ul> <p>This statement causes the database system to execute the query and  to save the results within a temporary relation.  </p> <p>The query uses the value of the host-language variable credit-amount at the time the open statement is executed.</p> <pre><code>EXEC SQL open c ;\n</code></pre> <ul> <li>The fetch statement causes the values of one tuple in the query result to be placed on host language variables.</li> </ul> <pre><code>EXEC SQL fetch c into :si, :sn\uff1b\n</code></pre> <ul> <li> <p>A variable called SQLSTATE in the SQL communication area (SQLCA) gets set to '02000' to indicate no more data is available</p> </li> <li> <p>The close statement causes the database system to delete the temporary relation that holds the result of the query.</p> </li> </ul> <pre><code>EXEC SQL close c ;\n</code></pre>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#updates-through-embedded-sql","title":"Updates Through Embedded SQL","text":"<ul> <li>Can update tuples fetched by cursor by declaring that the cursor is for update</li> </ul> <pre><code> EXEC SQL \ndeclare c cursor for\nselect *\nfrom instructor\nwhere dept_name = 'Music'\nfor update\n</code></pre> <p>We then iterate through the tuples by performing  fetch operations on the cursor , and after fetching each tuple we execute the following code:</p> <pre><code> update instructor\n set salary = salary + 1000\n where current of c\n</code></pre>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#procedural-constructs-in-sql","title":"Procedural Constructs in SQL","text":""},{"location":"CMU%2015-445/Chap2_inclass/lec/#sql-functions","title":"SQL Functions","text":"<p><pre><code> create function dept_count (dept_name varchar(20))\n returns integer\n begin\n    declare d_count integer;\n    select count (* ) into d_count\n    from instructor\n    where instructor.dept_name = dept_name\n\n    return d_count;\n end\n</code></pre> <pre><code>select dept_name, budget\nfrom department\nwhere dept_count (dept_name ) &gt; 1\n</code></pre></p>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#table-functions","title":"Table Functions","text":"<p><pre><code>create function instructors_of (dept_name char(20) )\nreturns table ( ID varchar(5),\n                name varchar(20),\n                dept_name varchar(20),\n                salary numeric(8,2))\nreturn table\n(select ID, name, dept_name, salary\n from instructor\n where instructor.dept_name = instructors_of.dept_name)\n</code></pre> <pre><code>select *\nfrom table (instructors_of (\u2018Music\u2019))\n</code></pre></p>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#sql-procedures","title":"SQL Procedures","text":"<ul> <li>The dept_count function could instead be written as procedure: <pre><code>create procedure dept_count_proc (in dept_name varchar(20), out d_count integer)\nbegin\n  select count(*) into d_count\n  from instructor\n  where instructor.dept_name = dept_count_proc.dept_name\nend\n</code></pre></li> <li>Procedures can be invoked either from an SQL procedure or from embedded SQL, using the call statement <pre><code>declare d_count integer;\ncall dept_count_proc( \u2018Physics\u2019, d_count)\n</code></pre></li> <li>Procedures and functions can be invoked also from dynamic SQL</li> <li> <p>While and repeat statements  <pre><code>declare n integer default 0;\nwhile n &lt; 10 do\n  set n = n + 1\nend while   \n</code></pre> <pre><code>repeat\n  set n = n  \u2013 1\n  until n = 0\nend repeat\n</code></pre></p> </li> <li> <p>For loop</p> </li> </ul> <p><pre><code>declare n integer default 0;\n   for r as\n      select budget from department\n      where dept_name = \u2018Music\u2019\n    do\n      set n = n - r.budget\n   end for\n</code></pre> * Conditional statements  (if-then-else) <pre><code>if boolean  expression \n    then statement or compound statement \nelseif boolean  expression \n    then statement or compound statement \n    else statement or compound statement \nend if\n</code></pre> * SQL:1999 also supports a case statement similar to C case statement * EXAMPLE <pre><code>CREATE FUNCTION registerStudent(\n  IN s_id VARCHAR(5),\n  IN s_courseid VARCHAR(8),\n  IN s_secud VARCHAR(8),\n  IN s_semester VARCHAR(6),\n  in s_year NUMERIC(4.0),\n  OUT errorMsg VARCHAR(100)\n)\nRETURNS INTEGER\nBEGIN\n  DECLARE currEnrol INT;\n  SELECT COUNT(*) INTO currEnrol\n    FROM takes\n    WHERE course_id = s_courseid AND sec_id = s_secid AND semester = s_semester AND year = s_year;\n  DECLARE LIMIT INT;\n  SELECT capacity INTO limit\n    FROM classroom NATURAL JOIN section\n    WHERE course_id = s_courseid AND sec_id = s_secid AND semester = s_semester AND year = s_year;\n  IF(currEnrol&lt;limit)\n    BEGIN\n      INSET INTO takes VALUES\n        (s_id,s_course,s_secid,s_semester,s_year,null);\n      RETURN(0);\n    END\n  SET errorMsg = 'Enrollment limit reached for course'||'s_course_id'||'section'||s_secid;\n  RETURN(-1);\nEND;\n</code></pre></p>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#external-language-functionsprocedures","title":"External Language Functions/Procedures","text":"<p><pre><code>create procedure dept_count_proc(in dept_name varchar(20),out count integer)\nlanguage C\nexternal name '/usr/avi/bin/dept_count_proc'\ncreate function dept_count(dept_name varchar(20))\nreturns integer\nlanguage C\nexternal name '/usr/avi/bin/dept_count'\n</code></pre> * Benefits of external language functions/procedures: more efficient for many operations, and more expressive power. * Drawbacks Code to implement function may need to be loaded into  database system and executed in the database system\u2019s  address space.   * risk of accidental corruption of database structures   * security risk, allowing users access to unauthorized data There are alternatives, which give good security at the cost of potentially worse performance. Direct execution in the database system\u2019s space is used when  efficiency is more important than security.</p>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#triggers","title":"Triggers","text":"<p><pre><code>CREATE TRIGGER account_trigger AFTER UPDATE of account ON balance \nreferencing NEW ROW AS nrow                                                                       \nreferencing OLD ROW AS orow \nFOR EACH ROW\n  WHEN nrow.balance - orow.balance &gt; =200000 OR\n       orow.balance - nrow.balance &gt;=50000 \n  BEGIN\n  INSERT INTO account_log VALUES (nrow.account-number, nrow.balance-orow.balance , current_time() )\nEND\n</code></pre> <pre><code>create trigger timeslot_check1 after insert on section\nreferencing new row as nrow\nfor each row\nwhen (nrow.time_slot_id not in (\n                 select time_slot_id\n                 from time_slot)) /* time_slot_id not present in time_slot */\nbegin\n     rollback\nend;\n</code></pre> <pre><code>create trigger timeslot_check2 after delete on timeslot\nreferencing old row as orow\nfor each row\nwhen (orow.time_slot_id not in (select time_slot_id from time_slot) /* last tuple for time slot id deleted from time slot */\nand orow.time_slot_id in (select time_slot_id from section))/* and time_slot_id still referenced from section*/\nbegin\n    rollback\nend;\n</code></pre> <pre><code>create trigger credits_earned after update of takes on grade\nreferencing new row as nrow\nreferencing old row as orow\nfor each row\nwhen nrow.grade &lt;&gt; \u2019F\u2019 and nrow.grade is not null\n    and (orow.grade = \u2019F\u2019 or orow.grade is null)\nbegin atomic\n     update student\n     set tot_cred= tot_cred + \n           (select credits\n            from course\n            where course.course_id= nrow.course_id)\n     where student.id = nrow.id;\nend;\n</code></pre></p>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#statement-level-triggers","title":"Statement Level Triggers","text":"<p>Instead of executing a separate action for each affected row, a single action can be executed for all rows affected by a transaction.</p> <ul> <li>Use  <code>for each statement</code>    instead of  <code>for each row</code></li> </ul> <pre><code>create trigger grade_trigger after update of takes on grade\n      referencing new table as new_table                                                                 \n      for each statement\n      when exists(select avg(grade)\n                    from new_table\n                    group by course_id, sec_id, semester, year\n                    having avg(grade)&lt; 60 )\n      begin \n rollback\n      end\n</code></pre>"},{"location":"CMU%2015-445/Chap2_inclass/lec/#recursive-queries","title":"Recursive Queries","text":"<pre><code>with recursive rec_prereq(course_id, prereq_id) as (\n  select course_id, prereq_id\n  from prereq\n  union\n  select rec_prereq.course_id, prereq.prereq_id\n  from rec_prereq, prereq\n  where rec_prereq.prereq_id = prereq.course_id)\nselect \u2217from rec_prereq;\n</code></pre> <ul> <li>This example view, rec_prereq, is called the transitive closure of the prereq relation</li> </ul>"},{"location":"CMU%2015-445/Chap3/Chap3/","title":"Chap3","text":"<p>"},{"location":"CMU%2015-445/Chap3/Chap3/#database-storage","title":"Database Storage","text":"<ul> <li>Volatile : Not persistent when loose power.   Random Access Byte Addressable Memory.</li> <li> <p>Non-Volatile : Persistent when loose power.   Sequential Access Block Addressable Memory.</p> <p>In the course, we will focus on the DRAM</p> </li> <li> <p>Goal : Allow the DBMS to manage databases that exceed  the amount of memory available</p> </li> <li>Reading/writing to disk is expensive, so it must be managed carefully to avoid large stalls and performance degradation.</li> <li>Random access on disk is usually much slower than sequential access, so the DBMS will want to maximize sequential access.  <p>Virtual Memory : A technique that allows an operating system to provide more memory to a process than is physically available.</p> </li> </ul>"},{"location":"CMU%2015-445/Chap3/Chap3/#why-not-use-os","title":"Why not use OS?","text":"<ul> <li>At this point, no more free memory is available, so the OS must swap some memory to disk to make room for the new memory. </li> <li>When we start writing to disk, problematic.</li> <li>OS is not aware of the DBMS's needs, so it may swap out pages that are important to the DBMS! </li> </ul>"},{"location":"CMU%2015-445/Chap3/Chap3/#how-the-dbms-represents-the-database-in-files-on-disk","title":"How the DBMS represents the database in files on disk?","text":"<ul> <li>Commonly, we store different parts of the database in different files. </li> <li> <p>But also multitable clustering file organization. </p> </li> <li> <p>Self-contained file : A file that contains all the information needed to manage the data it contains.</p> <p>While not entirely true, as the DBMS may store some information to manage the data in other files.</p> </li> </ul>"},{"location":"CMU%2015-445/Chap3/Chap3/#file-storage","title":"File Storage","text":"<ul> <li> <p>Different DBMSs manage pages in files on disk in different ways. </p> </li> <li> <p>like for SQLite,Only 4KB is atomatic read/write!--Hardware can only guarantee atomicity at 4KB.</p> </li> </ul>"},{"location":"CMU%2015-445/Chap3/Chap3/#heap-file-organization","title":"Heap File Organization","text":"<ul> <li>A heap file is an unordered collection of pages with tuples that are stored in random order <p>If store tuples one by one , do not guarantee that the tuples are stored in that order.</p> </li> </ul>"},{"location":"CMU%2015-445/Chap3/Chap3/#naive-approach-linked-list","title":"Naive Approach : Linked List.","text":"<ul> <li>If you want to read a tuple, you must search through the entire file to find it.</li> <li>While if stored sequentially, search maybe easy, but the tradeoff is when insertion:we have to cannot insert at a random free space, but have to insert at the right place. </li> </ul>"},{"location":"CMU%2015-445/Chap3/Chap3/#improved-approach-page-directory","title":"Improved Approach : Page Directory.","text":"<ul> <li>Hash Table.[Page Size : Different DBMSs use different page sizes, but 4KB is common.]</li> </ul>"},{"location":"CMU%2015-445/Chap3/Chap3/#tree-file-organization","title":"Tree File Organization","text":"<ul> <li>B+ Tree (See later chapters)</li> </ul>"},{"location":"CMU%2015-445/Chap3/Chap3/#sequentialsorted-file-organization","title":"Sequential/Sorted File Organization","text":"<p>As demonstrated in <code>Heap File Organization</code>, the tradeoff between read and write is a common problem in database storage.</p>"},{"location":"CMU%2015-445/Chap3/Chap3/#hashing-file-organization","title":"Hashing File Organization","text":"<ul> <li>See later chapters.</li> </ul>"},{"location":"CMU%2015-445/Chap3/Chap3/#page-layout","title":"Page Layout","text":"<p>Every page contains a header of metadata about the page's contents. \u2192 Page Size \u2192 Checksum \u2192 DBMS Version \u2192 Transaction Visibility \u2192 Compression Information * Some systems require pages to be self-contained (e.g., Oracle)</p>"},{"location":"CMU%2015-445/Chap3/Chap3/#tuple-oriented-layout","title":"Tuple-oriented Layout","text":"<ul> <li>We cannot just fit another tuple in the space left by the deleted tuple, as the tuples are of different sizes! Slotted Pages </li> </ul> Details <ul> <li>How to track Tuples ? </li> </ul>"},{"location":"CMU%2015-445/Chap3/Chap3/#log-structured-layout","title":"Log-structured Layout","text":"<p> When the page gets full, the DBMS writes it out disk and starts filling up the next page with records.</p> <ul> <li>\u2192 All disk writes are sequential.</li> <li>\u2192 On-disk pages are immutable. While difficult to read tuples.</li> </ul> Details <p> </p>"},{"location":"CMU%2015-445/Chap3/Chap3/#log-structured-compaction","title":"Log-Structured Compaction","text":"<p>Compaction coalesces larger log files into smaller files by removing unnecessary records.  Log-structured storage managers are more common today. This is partly due to the proliferation of RocksDB. Downsides: * Write - Amplification * Compaction is expensive</p>"},{"location":"CMU%2015-445/Chap3/Chap3/#tuple-layout","title":"Tuple Layout","text":""},{"location":"CMU%2015-445/Chap3/Chap3/#denormalized-tuple-data","title":"Denormalized Tuple Data","text":"Details"},{"location":"CMU%2015-445/Chap3/Chap3/#tuple-storage","title":"Tuple Storage","text":""},{"location":"CMU%2015-445/Chap3/Chap3/#data-representation","title":"Data Representation","text":""},{"location":"CMU%2015-445/Chap3/Chap3/#variable-precision-numbers-fixed-precision-numbers","title":"Variable Precision Numbers &amp; Fixed Precision Numbers","text":"<p>Variable Precision Numbers : Typically faster than arbitrary precision numbers but can have rounding errors...</p> <p></p>"},{"location":"CMU%2015-445/Chap3/Chap3/#large-values","title":"Large Values","text":""},{"location":"CMU%2015-445/Chap3/Chap3/#external-value-storage","title":"External Value Storage","text":""},{"location":"CMU%2015-445/Chap3/Chap3/#system-catalog","title":"System Catalog","text":"<p>See Slides.</p> <p></p>"},{"location":"CMU%2015-445/Chap6/lec/","title":"Problem #2: How the DBMS manages its memory and move data back-and-forth from disk.","text":"<ul> <li>DBMS can't manage data directly in disk, it needs to move data to memory to work with it.</li> <li>We dicuss based on the Disk-Oriented DBMS,not the Log-Oriented DBMS.</li> </ul>"},{"location":"CMU%2015-445/Chap6/lec/#buffer-pool-manager","title":"Buffer Pool Manager","text":""},{"location":"CMU%2015-445/Chap6/lec/#buffer-pool-organization","title":"Buffer Pool Organization","text":"<p>Memory region organized as an array of fixed-size pages. An array entry is called a frame. * When the DBMS requests a page, an exact copy is placed into one of these frames. Dirty pages are buffered and notwritten to disk immediately * \u2192 Write-Back Cache</p>"},{"location":"CMU%2015-445/Chap6/lec/#page-table","title":"Page Table","text":"<p>Hash Table</p> <p></p> <ul> <li>The page table keeps track of pages that are currently in memory.</li> <li>Also maintains additional meta-data per page:   \u2192 Dirty Flag   \u2192 Pin/Reference Counter</li> <li>Prevent other page to overwrite the current processing page.  </li> </ul>"},{"location":"CMU%2015-445/Chap6/lec/#buffer-pool-optimizations","title":"Buffer Pool Optimizations","text":""},{"location":"CMU%2015-445/Chap6/lec/#multiple-buffer-pools","title":"Multiple Buffer Pools","text":"<ul> <li>Partitioning memory across multiple pools helps reduce latch contention and improve locality. </li> </ul>"},{"location":"CMU%2015-445/Chap6/lec/#pre-fetching","title":"Pre-Fetching","text":"<p>See Slides</p>"},{"location":"CMU%2015-445/Chap6/lec/#scan-sharing","title":"Scan Sharing","text":"<p>If a query wants to scan a table and another query is already doing this, then the DBMS will attach the second query's cursor to the existing cursor.</p> <p>See Slides and Lectures</p>"},{"location":"CMU%2015-445/Chap6/lec/#buffer-pool-bypass","title":"Buffer Pool Bypass","text":"<p>See Slides</p>"},{"location":"CMU%2015-445/Chap6/lec/#os-page-cache","title":"OS Page Cache","text":"<p>Most disk operations go through the OS API. Unless you tell it not to, the OS maintains its own filesystem cache (i.e., the page cache) </p>"},{"location":"CMU%2015-445/Chap6/lec/#replacement-policies","title":"Replacement Policies","text":"<p>When the DBMS needs to free up a frame to make room for a new page, it must decide which page to evict from the buffer pool.</p>"},{"location":"CMU%2015-445/Chap6/lec/#lru-least-recently-used","title":"LRU : Least Recently Used","text":"<p>Maintain a single timestamp of when each page was last accessed. When the DBMS needs to evict a page, select the one with the oldest timestamp.</p> <ul> <li>Keep the pages in sorted order to reduce the search time on eviction.</li> </ul>"},{"location":"CMU%2015-445/Chap6/lec/#clock","title":"Clock","text":"<ul> <li>Approximation of LRU that does not need a separate timestamp per page. </li> </ul>"},{"location":"CMU%2015-445/Chap6/lec/#problems","title":"Problems:","text":"<p>LRU and CLOCK replacement policies are susceptible to sequential flooding.</p> <ul> <li>A query performs a sequential scan that reads every page.</li> <li>This pollutes the buffer pool with pages that are read once and then never again. In some workloads the most recently used page is the most unneeded page</li> </ul>"},{"location":"CMU%2015-445/Chap6/lec/#better-policies-lru-k","title":"Better Policies : LRU-K","text":"<p>Track the history of last \\(K\\) references to each page as timestamps and compute the interval between subsequent accesses. The DBMS then uses this history to estimate the next time that page is going to be accessed.</p>"},{"location":"CMU%2015-445/Chap6/lec/#better-policies-localization","title":"Better Policies : Localization","text":"<p>The DBMS chooses which pages to evict on a per txn/query basis. This minimizes the pollution of the buffer pool from each query.</p> <ul> <li>Keep track of the pages that a query has accessed.</li> </ul> <p>Example: Postgres maintains a small ring buffer that is private to the query.</p>"},{"location":"CMU%2015-445/Chap6/lec/#better-policies-proority-hints","title":"Better Policies : Proority Hints","text":""},{"location":"CMU%2015-445/Chap6/lec/#dirty-pages","title":"Dirty Pages","text":"<p>Fast Path: If a page in the buffer pool is not dirty, then the DBMS can simply \"drop\" it. Slow Path: If a page is dirty, then the DBMS must write back to disk to ensure that its changes are persisted.</p> <ul> <li>Trade-off between fast evictions versus dirty writing pages that will not be read again in the future.</li> </ul>"},{"location":"CMU%2015-445/Chap6/lec/#background-writing","title":"Background Writing","text":"<p>The DBMS can periodically walk through the page table and write dirty pages to disk. When a dirty page is safely written, the DBMS can either evict the page or just unset the dirty flag. Need to be careful that the system doesn't write dirty pages before their log records are written...</p>"},{"location":"CMU%2015-445/Chap6/lec/#other-memory-pools","title":"Other Memory Pools","text":""},{"location":"CMU%2015-445/Chap8/Chap8/","title":"Chap8","text":"<p>Index Types see Inclass Slide.(Chapter 14)</p>"},{"location":"CMU%2015-445/Chap8/Chap8/#b-tree-indexes","title":"B+ Tree Indexes","text":"<p>A B+Tree is a self-balancing, ordered tree data structure that allows searches, sequential access,Insertions, and deletions in O(log n).</p> <ul> <li>Generalization of a binary search tree, since a node can have more than two children.</li> <li>Optimized for systems that read and write large blocks of data.</li> </ul>"},{"location":"CMU%2015-445/Chap8/Chap8/#properties","title":"Properties","text":"<p>A B+Tree is an M-way search tree with the following properties:</p> <ul> <li>It is perfectly balanced (i.e., every leaf node is at the same depth in the tree)</li> <li>Every node other than the root is at least half-full \\(M/2-1 \u2264 \\#keys \u2264 M-1\\)</li> <li>Every inner node with \\(k\\) keys has \\(k+1\\) non-null children</li> </ul> <p></p> <p></p> <ul> <li>Visialization : https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</li> </ul> <p></p> <p>Root can have only 2 branches.</p>"},{"location":"CMU%2015-445/Chap9/Chap9/","title":"Chap9","text":"<p>a</p>"},{"location":"CMU%2015-445/ER/lec/","title":"Lec","text":"<p>"},{"location":"CMU%2015-445/ER/lec/#entity-relationship-model","title":"Entity-Relationship Model","text":""},{"location":"CMU%2015-445/ER/lec/#modeling","title":"Modeling","text":"<p>\u53cc\u6a2a\u7ebf\u8868\u793a\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u5fc5\u987b\u53c2\u4e0e\u5173\u7cfb\uff0c\u800c\u5355\u6a2a\u7ebf\u5219\u8868\u793a\u5bf9\u8c61\u53ef\u4ee5\u4e0d\u53c2\u4e0e\u5173\u7cfb</p> <ul> <li>Section is a weak entity. -- Dependent on a strong entity.</li> <li>instructor can have no sections : <code>-----</code></li> <li>section must have instructors: <code>====</code></li> <li> <p><code>&lt;---&gt;</code> one to one</p> </li> <li> <p><code>relationship</code> \u5e26\u5c5e\u6027. :  \u5982 <code>takes</code> \u4e0a\u7684 <code>grade</code>.</p> </li> </ul> <p>A database can be modeled as: </p> <ul> <li>a collection of entities</li> <li>relationship among entities.</li> </ul> <p>An entity is an object that exists and is distinguishable from other objects.</p> <p>An entity set is a set of entities of the same type that share the same</p> <p>properties.</p>"},{"location":"CMU%2015-445/ER/lec/#relationship","title":"Relationship","text":""},{"location":"CMU%2015-445/ER/lec/#attributes","title":"Attributes","text":"<p>Entities have attributes.</p> <p></p> <p></p> <p>Attribute types:</p> <ul> <li>Simple (\u7b80\u5355)and composite(\u590d\u5408) attributes.</li> <li>Single-valued(\u5355\u503c) and multivalued(\u591a\u503c) attributes</li> <li>Example: multivalued attribute: phone_numbers </li> </ul> <p>Derived(\u6d3e\u751f) attributes</p> <ul> <li>Can be computed from other attributes </li> <li>Example: age, given <code>date_of_birth</code></li> </ul> <p></p> <p></p> <p><code>{phone_number}</code> multiple phone numbers.</p> <p>If implemented , have to import using another new entity.</p>"},{"location":"CMU%2015-445/ER/lec/#mapping-cardinality-constraints","title":"Mapping Cardinality Constraints","text":"<p>We express cardinality constraints by drawing either a directed line \\((\\to)\\), signifying \u201cone,\u201d or an undirected line \\((\u2014)\\), signifying \u201cmany,\u201d between the relationship set and the entity set.</p>"},{"location":"CMU%2015-445/ER/lec/#one-to-one","title":"One to one","text":""},{"location":"CMU%2015-445/ER/lec/#one-to-many","title":"One to many","text":""},{"location":"CMU%2015-445/ER/lec/#many-to-one","title":"Many to one","text":""},{"location":"CMU%2015-445/ER/lec/#many-to-many","title":"Many to many","text":"<ul> <li>We allow at most one arrow out of a ternary (or greater degree) relationship to indicate a cardinality constraint</li> <li>For example, an arrow from <code>proj_guide</code> to instructor indicates each student has at most one guide for a project</li> <li>To avoid confusion we outlaw(\u7981\u6b62) more than one arrow.</li> </ul>"},{"location":"CMU%2015-445/ER/lec/#constraints","title":"Constraints","text":""},{"location":"CMU%2015-445/ER/lec/#primary-key","title":"Primary Key","text":"<ul> <li> <p>For Entity Sets.</p> </li> <li> <p>For Relationship Sets.</p> </li> </ul> <p></p> <p></p>"},{"location":"CMU%2015-445/ER/lec/#weak-entity-sets","title":"Weak Entity Sets","text":"<p>An entity set that does not have a primary key is referred to as a weak entity set.</p> <p>The existence of a weak entity set depends on the existence of a identifying entity set(\u6807\u8bc6\u6027\u5b9e\u4f53\u96c6)</p> <ul> <li>It must relate to the identifying entity set via a total, one-to-many relationship set from the identifying to the weak entity set</li> <li>Identifying relationship(\u6807\u8bc6\u6027\u8054\u7cfb) depicted using a double diamond</li> </ul> <p></p> <p>Note: the primary key of the strong entity set is not explicitly stored with the weak entity set, since it is implicit in the identifying relationship.</p> <p>If <code>course_id</code> were explicitly stored, section could be made a strong entity, but then the relationship between section and course would be duplicated by an implicit relationship defined by the attribute <code>course_id</code> common to course and section.</p>"},{"location":"CMU%2015-445/ER/lec/#redundant-attributes","title":"Redundant Attributes","text":"<p>Suppose we have entity sets:</p> <ul> <li>student, with attributes: ID, name, tot_cred, dept_name</li> <li>department, with attributes: dept_name, building, budget</li> </ul> <p>We model the fact that each student has an associated department using a relationship set stud_dept</p> <p>The attribute dept_name in student below replicates information present in the relationship and is therefore redundant and needs to be removed.</p> <p>BUT: when converting back to tables, in some cases the attribute gets reintroduced, as we will see later.</p>"},{"location":"CMU%2015-445/ER/lec/#reduction-to-relation-schemas","title":"Reduction to Relation Schemas","text":"<ul> <li>refer to slides</li> </ul>"},{"location":"CMU%2015-445/ER/lec/#design-issues","title":"Design Issues","text":"<ul> <li>Refer to slides</li> </ul>"},{"location":"CMU%2015-445/ER/lec/#extended-e-r-features","title":"Extended E-R Features","text":"<ul> <li>Refer to Slides</li> </ul>"},{"location":"CMU%2015-445/ER/lec/#uml","title":"UML","text":"<ul> <li>Refer to Slides.</li> </ul>"},{"location":"CMU%2015-445/Relational/lec/","title":"Chap 7: Relational Database Design","text":""},{"location":"CMU%2015-445/Relational/lec/#71-introduction","title":"7.1 Introduction","text":""},{"location":"CMU%2015-445/Relational/lec/#smaller-schemas","title":"Smaller Schemas","text":"<ul> <li>Suppose we had started with  <pre><code>inst_dept(id,name,salary,dept_name, building, budget)\n</code></pre></li> <li>We could have decomposed it into <pre><code>instructor(id,name,salary,dept_name)\ndepartment(dept_name,building,budget)\n</code></pre></li> <li>If there was a schema <code>instructor(id,name,salary,dept_name,building,budget)</code>, then <code>dept_name</code> would be a candidate key.</li> <li> <p>In <code>inst_dept</code>, <code>dept_name</code> is not a candidate key.The <code>building</code> and <code>budget</code> of a department are not determined by the department name alone,may have to be repeated.</p> </li> <li> <p>Lossy Decomposition: If we decompose a relation into smaller relations, we may lose information. </p> </li> </ul>"},{"location":"CMU%2015-445/Relational/lec/#lossless-join-decomposition","title":"Lossless Join Decomposition","text":"<ul> <li>A decomposition of a relation schema R into a set of smaller relation schemas is a lossless decomposition if:<ul> <li>r = \u03c0<sub>X</sub>\u00ae \u2a1d \u03c0<sub>Y</sub>\u00ae where X and Y are the sets of attributes of R.</li> </ul> </li> <li>And,conversely a decomposition is lossy if :<ul> <li>r \\(\\in\\) \u03c0<sub>X</sub>\u00ae \u2a1d \u03c0<sub>Y</sub>\u00ae</li> <li>Note: more tuples implies more uncertainty (less information)</li> </ul> </li> <li>A decomposition of R into \\(R_1\\) and \\(R_2\\) is lossless join if at least one of the following dependencies holds:<ul> <li>\\(R_1\\) \u2229 \\(R_2\\) \u2192 \\(R_1\\)</li> <li>\\(R_1\\) \u2229 \\(R_2\\) \u2192 \\(R_2\\)</li> </ul> </li> </ul>"},{"location":"CMU%2015-445/Relational/lec/#first-normal-form-1nf","title":"First Normal Form (1NF)","text":"<ul> <li>A relation schema R is in 1NF if the domains of all attributes of R are atomic.</li> <li>That is, the values of each attribute are indivisible.</li> </ul> <p>Goal : Devise a Theory for the Following</p> <ul> <li>Decide whether a particular relation R is in \u201cgood\u201d form.</li> <li>In the case that a relation R is not in \u201cgood\u201d form, decompose it into a set of relations {R1, R2, ..., Rn} such that </li> <li>each relation is in good form </li> <li>the decomposition is a lossless-join decomposition</li> <li>Our theory is based on:</li> <li>functional dependencies</li> <li>multivalued dependencies</li> </ul>"},{"location":"CMU%2015-445/Relational/lec/#72-functional-dependencies","title":"7.2 Functional Dependencies","text":""},{"location":"CMU%2015-445/Relational/lec/#constraints-on-relations","title":"Constraints on Relations","text":"<p>A constraint is a condition that must be true for any instance of the database.</p> <ul> <li>Example:</li> <li>Students are uniquely identified by their ID.</li> <li>Each  student has only one name.  </li> <li>Each student is (primarily) associated with only one department.</li> <li>Each department has only one value for its budget, and only one associated building</li> <li>An instance of a relation that satisfies all such real-world constraints is  called a  legal instance of the relation;</li> <li>A legal instance of a database is one where all the relation instances  are legal instances</li> </ul> <p>Functional Dependencies  are constraints on the set of legal relations.</p> <ul> <li>Require that certain attributes have unique values given the values of certain other attributes.</li> <li>Functional Dependencies  are constraints on the set of legal relations</li> </ul> <p>Let R be a relation schema \\(\\alpha \\in R\\) and \\(\\beta \\in R\\). The functional dependency \\(\\alpha\\to\\beta\\) holds on R if and only if:</p> <ul> <li>For any legal relation r(R), if two tuples t1 and t2 agree on the attributes \\(\\alpha\\), then they must also agree on the attributes \\(\\beta\\).</li> <li>That is, if t1[\u03b1] = t2[\u03b1], then t1[\u03b2] = t2[\u03b2].</li> </ul>"},{"location":"CMU%2015-445/Relational/lec/#key","title":"Key","text":"<ul> <li>A set of attributes K is a superkey of R if, in any legal relation r(R), for any two tuples t1 and t2, if t1[K] = t2[K], then t1 = t2.</li> <li>K \\(\\to\\) R</li> <li>K is a candidate key of R if K is a superkey and no proper subset of K is a superkey.</li> <li>K \\(\\to\\) R </li> <li>for no \\(\\alpha\\) \\(\\subset\\) K, \\(\\alpha\\) \\(\\to\\) R</li> <li>Functional dependencies allow us to express constraints that cannot be expressed using superkeys.</li> </ul> <p>A functional dependency is trivial if \\(\\beta\\) is a subset of \\(\\alpha\\).</p> <ul> <li>Example: A \\(\\to\\) A is trivial.</li> <li>Example: AB \\(\\to\\) A is not trivial. In general : \\(\\alpha \\to \\beta\\) is trivial if \\(\\beta \\subset \\alpha\\).</li> </ul>"},{"location":"CMU%2015-445/Relational/lec/#closure-of-a-set-of-functional-dependencies","title":"Closure of a Set of Functional Dependencies","text":"<p>Given a set F of functional dependencies, there are certain other  functional dependencies that are logically implied by F.</p> <ul> <li>If \\(A\\to B\\) and \\(B\\to C\\) , then \\(A\\to C\\) is logically implied The set of all functional dependencies logically implied by F is called the closure of F, denoted F+.</li> </ul> <p>Example:</p> <ul> <li>F = {A \\(\\to\\) B, B \\(\\to\\) C}</li> <li>F+ = {A \\(\\to\\) B, B \\(\\to\\) C, A \\(\\to\\) C,AB \\(\\to\\) C,AC \\(\\to\\) B,ABC \\(\\to\\) C,ABC \\(\\to\\) B,ABC \\(\\to\\) A...}</li> </ul> <p>Armstrong\u2019s Axioms</p> <ul> <li> <p>Armstrong\u2019s Axioms are a set of rules that allow us to infer all the functional dependencies that hold on a relation.</p> </li> <li> <p>The axioms are:</p> </li> <li>Reflexivity: If \\(\\beta\\) \\(\\subset\\) \\(\\alpha\\), then \\(\\alpha\\) \\(\\to\\) \\(\\beta\\).</li> <li>Augmentation: If \\(\\alpha\\) \\(\\to\\) \\(\\beta\\), then \\(\\alpha\\gamma\\) \\(\\to\\) \\(\\beta\\gamma\\).</li> <li> <p>Transitivity: If \\(\\alpha\\) \\(\\to\\) \\(\\beta\\) and \\(\\beta\\) \\(\\to\\) \\(\\gamma\\), then \\(\\alpha\\) \\(\\to\\) \\(\\gamma\\).</p> </li> <li> <p>These rules are:</p> </li> <li>Sound</li> <li>Complete</li> </ul> <p></p> <p>Additional Rules (can be derived from Armstrong\u2019s Axioms)</p> <ul> <li> <p>Union: If \\(\\alpha\\) \\(\\to\\) \\(\\beta\\) and \\(\\alpha\\) \\(\\to\\) \\(\\gamma\\), then \\(\\alpha\\) \\(\\to\\) \\(\\beta\\gamma\\).</p> </li> <li> <p>Decomposition: If \\(\\alpha\\) \\(\\to\\) \\(\\beta\\gamma\\), then \\(\\alpha\\) \\(\\to\\) \\(\\beta\\) and \\(\\alpha\\) \\(\\to\\) \\(\\gamma\\).</p> </li> <li> <p>Pseudotransitivity: If \\(\\alpha\\) \\(\\to\\) \\(\\beta\\) and \\(\\gamma\\beta\\) \\(\\to\\) \\(\\delta\\), then \\(\\alpha\\gamma\\) \\(\\to\\) \\(\\delta\\).</p> </li> </ul> <p></p> <p>Given a set of attributes X, the closure of X under F, denoted X+, is the set of all attributes that are functionally determined by X.</p> <p>Example:</p> <ul> <li>R = {A,B,C,D}</li> <li>F = {A \\(\\to\\) B, B \\(\\to\\) C, B\\(\\to\\) D}\\</li> <li>A+ = {A,B,C,D}</li> <li>B+ = {B,C,D}</li> <li>C+ = {C} Algorithm to compute \\(\\alpha\\)+, the closure of \\(\\alpha\\) under F <pre><code>result := alpha;\nwhile (changes to result) do\n    for each beta -&gt; gamma in F do\n        begin\n            if beta in result then result := result Union gamma \n        end\n</code></pre> </li> </ul>"},{"location":"CMU%2015-445/Relational/lec/#use-of-attribute-closure","title":"Use of Attribute Closure","text":"<ul> <li>Testing for superkeys : A set of attributes K is a superkey of R if K+ = R </li> <li>Testing Fuctional Dependencies : To test if \\(\\alpha\\) \\(\\to\\) \\(\\beta\\) holds on R, check if \\(\\alpha\\)+ contains \\(\\beta\\).</li> <li>Computing the closure of F:     </li> </ul>"},{"location":"CMU%2015-445/Relational/lec/#73-canonical-cover","title":"7.3 Canonical Cover","text":"<ul> <li>Redundant dependencies:</li> <li>F = {A \\(\\to\\) B, A \\(\\to\\) C, B \\(\\to\\) C}</li> <li>A \\(\\to\\) C is redundant because it can be inferred from A \\(\\to\\) B and B \\(\\to\\) C. </li> </ul> <p>Intuitively, a canonical cover of F is a \u201cminimal\u201d set of functional dependencies equivalent to F, having no redundant dependencies or redundant parts of dependencies </p>"},{"location":"CMU%2015-445/Relational/lec/#extraneous-attributes","title":"Extraneous Attributes","text":"<ul> <li>A canonical cover for F is a set of functional dependencies \\(F_c\\) such that:<ul> <li>\\(F\\) logically implies all dependencies in \\(F_c\\)</li> <li>\\(F_c\\) logically implies all dependencies in \\(F\\)</li> <li>No functional dependency in \\(F_c\\) has an extraneous attribute</li> <li>Each left side of a functional dependency in \\(F_c\\) is unique</li> </ul> </li> </ul>"},{"location":"CMU%2015-445/Relational/lec/#computing-a-canonical-cover","title":"Computing a Canonical Cover","text":"<ul> <li>To compute a canonica cover for F:  </li> </ul>"},{"location":"CMU%2015-445/Relational/lec/#boyce-codd-normal-form-bcnf","title":"Boyce-Codd Normal Form (BCNF)","text":"<ul> <li>A relation schema R is in BCNF with respect to a set F of functional dependencies if, for all functional dependencies in F+ of the form \\(\\alpha\\) \\(\\to\\) \\(\\beta\\), at least one of the following holds:</li> <li>\\(\\alpha\\) \\(\\to\\) \\(\\beta\\) is a trivial functional dependency</li> <li>\\(\\alpha\\) is a superkey for schema R</li> <li>\u4efb\u4f55\u975e\u5e73\u51e1\u7684\u51fd\u6570\u4f9d\u8d56\u7684\u5de6\u8fb9\u90fd\u662f\u4e00\u4e2a key  </li> </ul>"},{"location":"CMU%2015-445/Relational/lec/#bcnf-and-dependency-preservation","title":"BCNF and Dependency Preservation","text":"<p>Constraints, including functional dependencies, are costly to check in practice unless they pertain to only one relation. If it is sufficient to test only those dependencies on each individual  relation of a decomposition in order to ensure that all functional dependencies hold, then that decomposition is dependency preserving * Because it is not always possible to achieve both BCNF and dependency preservation, we consider a weaker normal form, known as third normal form.  </p> <ul> <li>It is not always possible to get a BCNF decomposition that is  dependency preserving</li> <li>It is always possible to get a 3NF decomposition that is dependency preserving </li> </ul>"},{"location":"CMU%2015-445/Relational/lec/#74-third-normal-form-3nf","title":"7.4 Third Normal Form (3NF)","text":"<ul> <li>A relation schema R is in 3NF with respect to a set F of functional dependencies if, for all functional dependencies in F+ of the form \\(\\alpha\\) \\(\\to\\) \\(\\beta\\), at least one of the following holds:</li> <li>\\(\\alpha\\) \\(\\to \\beta\\) is a trivial functional dependency</li> <li>\\(\\alpha\\) is a superkey for schema R</li> <li>Each attribute A in \\(\\beta\\) - \\(\\alpha\\) is contained in a candidate key for R</li> <li>If a relation is in BCNF it is in 3NF (since in BCNF one of the first two conditions above must hold).</li> <li>Third condition is a minimal relaxation of BCNF to ensure dependency preservation. </li> <li>It is always possible to decompose a relation into a set of relations that are in 3NF such that:</li> <li>the decomposition is lossless</li> <li>the dependencies are preserved</li> <li>It is always possible to decompose a relation into a set of relations that are in BCNF such that:</li> <li>the decomposition is lossless</li> <li>it may not be possible to preserve dependencies.</li> </ul>"},{"location":"CMU%2015-445/Relational/lec/#75-modeling-and-normal-forms","title":"7.5 Modeling and Normal Forms","text":""},{"location":"CMU%2015-445/Relational/lec/#76-multivalued-dependencies","title":"7.6 Multivalued Dependencies","text":"<p>Let R be a relation schemma with a set of attributes that are partitioned into 3 nonempty subsets Y,Z,W.</p> <p>We say that Y-&gt;-&gt;Z if and only if for all possible relations r(R) \\(\\in\\) r and \\(\\in\\) r then we have \\(\\in\\) r and \\(\\in\\) r  * Note:we can also get Y-&gt;-&gt;W <p></p>"},{"location":"CMU%2015-445/Relational/lec/#fourth-normal-forth","title":"Fourth Normal Forth","text":"<p>Example </p>"},{"location":"CS231n/RNN/lec/","title":"Lecture 8: Recurrent Neural Networks","text":""},{"location":"CS231n/RNN/lec/#vanilla-recurrent-neural-network","title":"(Vanilla) Recurrent Neural Network","text":"<p>The state consists of a single \u201chidden\u201d vector h:</p> <p>\\(h_t = f_W(h_{t-1},x_t)\\)</p> <p>\\(h_t = tanh(W_{hh}h_{t-1}+W_{xh}x_t)\\)</p> <p>\\(y_t = W_{hy}h_t\\)\u200b</p> <ul> <li>\\(f_W\\)\u200b is the same ALL THE TIME</li> </ul> <p>So Backward time, we need to sum over because \\(f_W\\) is repeatedly used many times.</p> <p></p>"},{"location":"CS231n/RNN/lec/#many-to-many","title":"Many to Many","text":""},{"location":"CS231n/RNN/lec/#many-to-one","title":"Many to One","text":""},{"location":"CS231n/RNN/lec/#one-to-many","title":"One to Many","text":""},{"location":"CS231n/RNN/lec/#sequence-to-sequence-many-to-one-one-to-many","title":"Sequence to Sequence: Many-to-one + one-to-many","text":"<ul> <li>Number of output tokens might be different from the number of input tokens.</li> </ul>"},{"location":"CS231n/RNN/lec/#example-character-level-language-model","title":"Example : Character-level Language Model","text":"<ul> <li> <p>Vocabulary: <code>[h,e,l,o]</code></p> </li> <li> <p>Example training sequence: \u201chello\u201d</p> </li> <li> <p>At test-time sample characters one at a time, feed back to model</p> </li> </ul> <p></p> <ul> <li>If only one-hot, not that effectively, so we insert an \"embedding layer between input and hiddne layses\"</li> </ul> <p></p>"},{"location":"CS231n/RNN/lec/#backpropagation-through-time","title":"Backpropagation through time","text":"<ul> <li>Forward through entire sequence to compute loss, then backward through entire sequence to compute gradient \uff1a Takes a lot of memory of long sequences!</li> <li>Run forward and backward through chunks of the sequence instead of whole sequence </li> </ul>"},{"location":"CS231n/RNN/lec/#truncated-backpropagation-through-time","title":"Truncated Backpropagation through time","text":"<ul> <li>Take subsets of the sequence.</li> <li>Carry hidden states forward in time forever, but only backpropagate for some smaller number of steps</li> </ul> <ul> <li>Only <code>112</code> lines withoud using pytorch.</li> </ul> <pre><code>\"\"\"\nMinimal character-level Vanilla RNN model. Written by Andrej Karpathy (@karpathy)\nBSD License\n\"\"\"\nimport numpy as np\n\n# data I/O\ndata = open('input.txt', 'r').read() # should be simple plain text file\nchars = list(set(data))\ndata_size, vocab_size = len(data), len(chars)\nprint 'data has %d characters, %d unique.' % (data_size, vocab_size)\nchar_to_ix = { ch:i for i,ch in enumerate(chars) }\nix_to_char = { i:ch for i,ch in enumerate(chars) }\n\n# hyperparameters\nhidden_size = 100 # size of hidden layer of neurons\nseq_length = 25 # number of steps to unroll the RNN for\nlearning_rate = 1e-1\n\n# model parameters\nWxh = np.random.randn(hidden_size, vocab_size)*0.01 # input to hidden\nWhh = np.random.randn(hidden_size, hidden_size)*0.01 # hidden to hidden\nWhy = np.random.randn(vocab_size, hidden_size)*0.01 # hidden to output\nbh = np.zeros((hidden_size, 1)) # hidden bias\nby = np.zeros((vocab_size, 1)) # output bias\n\ndef lossFun(inputs, targets, hprev):\n  \"\"\"\n  inputs,targets are both list of integers.\n  hprev is Hx1 array of initial hidden state\n  returns the loss, gradients on model parameters, and last hidden state\n  \"\"\"\n  xs, hs, ys, ps = {}, {}, {}, {}\n  hs[-1] = np.copy(hprev)\n  loss = 0\n  # forward pass\n  for t in xrange(len(inputs)):\n    xs[t] = np.zeros((vocab_size,1)) # encode in 1-of-k representation\n    xs[t][inputs[t]] = 1\n    hs[t] = np.tanh(np.dot(Wxh, xs[t]) + np.dot(Whh, hs[t-1]) + bh) # hidden state\n    ys[t] = np.dot(Why, hs[t]) + by # unnormalized log probabilities for next chars\n    ps[t] = np.exp(ys[t]) / np.sum(np.exp(ys[t])) # probabilities for next chars\n    loss += -np.log(ps[t][targets[t],0]) # softmax (cross-entropy loss)\n  # backward pass: compute gradients going backwards\n  dWxh, dWhh, dWhy = np.zeros_like(Wxh), np.zeros_like(Whh), np.zeros_like(Why)\n  dbh, dby = np.zeros_like(bh), np.zeros_like(by)\n  dhnext = np.zeros_like(hs[0])\n  for t in reversed(xrange(len(inputs))):\n    dy = np.copy(ps[t])\n    dy[targets[t]] -= 1 # backprop into y. see http://cs231n.github.io/neural-networks-case-study/#grad if confused here\n    dWhy += np.dot(dy, hs[t].T)\n    dby += dy\n    dh = np.dot(Why.T, dy) + dhnext # backprop into h\n    dhraw = (1 - hs[t] * hs[t]) * dh # backprop through tanh nonlinearity\n    dbh += dhraw\n    dWxh += np.dot(dhraw, xs[t].T)\n    dWhh += np.dot(dhraw, hs[t-1].T)\n    dhnext = np.dot(Whh.T, dhraw)\n  for dparam in [dWxh, dWhh, dWhy, dbh, dby]:\n    np.clip(dparam, -5, 5, out=dparam) # clip to mitigate exploding gradients\n  return loss, dWxh, dWhh, dWhy, dbh, dby, hs[len(inputs)-1]\n\ndef sample(h, seed_ix, n):\n  \"\"\" \n  sample a sequence of integers from the model \n  h is memory state, seed_ix is seed letter for first time step\n  \"\"\"\n  x = np.zeros((vocab_size, 1))\n  x[seed_ix] = 1\n  ixes = []\n  for t in xrange(n):\n    h = np.tanh(np.dot(Wxh, x) + np.dot(Whh, h) + bh)\n    y = np.dot(Why, h) + by\n    p = np.exp(y) / np.sum(np.exp(y))\n    ix = np.random.choice(range(vocab_size), p=p.ravel())\n    x = np.zeros((vocab_size, 1))\n    x[ix] = 1\n    ixes.append(ix)\n  return ixes\n\nn, p = 0, 0\nmWxh, mWhh, mWhy = np.zeros_like(Wxh), np.zeros_like(Whh), np.zeros_like(Why)\nmbh, mby = np.zeros_like(bh), np.zeros_like(by) # memory variables for Adagrad\nsmooth_loss = -np.log(1.0/vocab_size)*seq_length # loss at iteration 0\nwhile True:\n  # prepare inputs (we're sweeping from left to right in steps seq_length long)\n  if p+seq_length+1 &gt;= len(data) or n == 0: \n    hprev = np.zeros((hidden_size,1)) # reset RNN memory\n    p = 0 # go from start of data\n  inputs = [char_to_ix[ch] for ch in data[p:p+seq_length]]\n  targets = [char_to_ix[ch] for ch in data[p+1:p+seq_length+1]]\n\n  # sample from the model now and then\n  if n % 100 == 0:\n    sample_ix = sample(hprev, inputs[0], 200)\n    txt = ''.join(ix_to_char[ix] for ix in sample_ix)\n    print '----\\n %s \\n----' % (txt, )\n\n  # forward seq_length characters through the net and fetch gradient\n  loss, dWxh, dWhh, dWhy, dbh, dby, hprev = lossFun(inputs, targets, hprev)\n  smooth_loss = smooth_loss * 0.999 + loss * 0.001\n  if n % 100 == 0: print 'iter %d, loss: %f' % (n, smooth_loss) # print progress\n\n  # perform parameter update with Adagrad\n  for param, dparam, mem in zip([Wxh, Whh, Why, bh, by], \n                                [dWxh, dWhh, dWhy, dbh, dby], \n                                [mWxh, mWhh, mWhy, mbh, mby]):\n    mem += dparam * dparam\n    param += -learning_rate * dparam / np.sqrt(mem + 1e-8) # adagrad update\n\n  p += seq_length # move data pointer\n  n += 1 # iteration counter \n</code></pre>"},{"location":"CS231n/RNN/lec/#rnn-tradeoffs","title":"RNN Tradeoffs","text":"<p>RNN Advantages:</p> <ul> <li>-  Can process any length input</li> <li>-  Computation for step t can (in theory) use information from many steps back</li> <li>-  Model size doesn\u2019t increase for longer input</li> <li>-  Same weights applied on every timestep, so there is symmetry in how inputs are processed. </li> </ul> <p>RNN Disadvantages:</p> <ul> <li>-  Recurrent computation is slow</li> <li>-  In practice, difficult to access information from many steps back</li> </ul>"},{"location":"CS231n/RNN/lec/#image-captioning","title":"Image Captioning","text":""},{"location":"CS231n/RNN/lec/#long-short-term-memory-lstm","title":"Long Short Term Memory (LSTM)","text":""},{"location":"CS231n/RNN/lec/#vanilla-rnn-fradient-flow","title":"Vanilla RNN Fradient Flow","text":"<ul> <li> <p>Multiply \\(W_{hh}\\)\u200b many times ! -- Really Bad !</p> </li> <li> <p>Largest singular value &gt; 1:Exploding gradients</p> </li> <li>Largest singular value &lt; 1:Vanishing gradients</li> </ul> <p>Gradient Clipping : scale it if the norm is too big -- exploding gradients</p> <pre><code>grad_norm = np.sum(grad*grad)\nif grad_norm &gt; threshold:\n  grad*=(threshold/gram_norm)\n</code></pre> <ul> <li>Largest singular value &lt; 1:Vanishing gradients</li> </ul> <p>Change RNN architecture !</p>"},{"location":"CS231n/RNN/lec/#long-short-term-memory-lstm_1","title":"Long Short Term Memory (LSTM)","text":""},{"location":"CS231n/RNN/lec/#gradient-flow","title":"Gradient Flow","text":"<ul> <li>Backpropagation from \\(c_t\\) to \\(c_{t-1}\\) only elementwise multiplication by \\(f\\), no matrix multiply by \\(W\\)</li> </ul> <p>Do LSTMs solve the vanishing gradient problem?</p> <p>The LSTM architecture makes it easier for the RNN to preserve information over many timesteps</p> <ul> <li> <p>-  e.g. if the f = 1 and the i = 0, then the information of that cell is preserved indefinitely.</p> </li> <li> <p>-  By contrast, it\u2019s harder for vanilla RNN to learn a recurrent weight matrix \\(W_h\\) that preserves info in hidden state</p> </li> </ul> <p>LSTM doesn\u2019t guarantee that there is no vanishing/exploding gradient, but it does provide an easier way for the model to learn long-distance dependencies</p>"},{"location":"CS231n/lec10/lec/","title":"Video Understanding","text":""},{"location":"CS231n/lec10/lec/#late-fusion-approach","title":"Late Fusion Approach","text":"<ul> <li>Fusing the features from different modalities at the end of the network. <p>FC layers may result in overfitting</p> </li> </ul> <p> </p>"},{"location":"CS231n/lec10/lec/#early-fusion-approach","title":"Early Fusion Approach","text":"<ul> <li>Stakcing through channel dimension.</li> <li>Fuse the features Using 2D convolutions.(\\(3T\\times D\\) )</li> </ul> <p> * One layer of temporal processing may not be enough! </p>"},{"location":"CS231n/lec10/lec/#comparison","title":"Comparison","text":""},{"location":"CS231n/lec10/lec/#general-comparison","title":"General Comparison","text":""},{"location":"CS231n/lec10/lec/#2d-conv-early-fusion-vs-3d-conv-3d-cnn","title":"2D Conv (Early Fusion) vs 3D Conv (3D CNN)","text":"<p>Details see Slides. * 2D : perceptive of features of time at once and slide over the space feature. No temporal shift-invariance! Needs to learn separate filters for the same motion at different times in the clip.</p> <ul> <li>3D : Temporal shift-invariant since each filter slides over time !</li> </ul>"},{"location":"CS231n/lec10/lec/#c3d-the-vgg-of-3d-cnns","title":"C3D : The VGG of 3D CNNs","text":""},{"location":"CS231n/lec10/lec/#measuring-motion-optical-flow","title":"Measuring Motion : Optical Flow","text":""},{"location":"CS231n/lec10/lec/#two-stream-networks","title":"Two Stream Networks","text":""},{"location":"CS231n/lec10/lec/#modeling-long-term-temporal-structure","title":"Modeling long-term temporal structure","text":"<p> * Sometimes don\u2019t backprop to CNN to save memory; pretrain and use it as a feature extractor : Like using pretrained C3D as a feature extractor.</p>"},{"location":"CS231n/lec10/lec/#recurrent-convolutional-network","title":"Recurrent Convolutional Network","text":"<p>Actually not too much used because of the time complexity.(Not good for parallelization)  Sequential processing is not good for parallelization.</p>"},{"location":"CS231n/lec10/lec/#spatio-temporal-self-attention-non-local-block","title":"Spatio-Temporal Self-Attention (Non Local Block)","text":"<p>Trick:Add non-local blocks to 3D CNNs , initilize the weights of the non-local block with all zeros, and fine-tune the network.  </p>"},{"location":"CS231n/lec10/lec/#inflating-2d-networks-to-3d-i3d","title":"Inflating 2D Networks to 3D (I3D)","text":"<p>Refer to the slides for details. Trick: Pretrain 2D CNNs and inflate them to 3D CNNs by repeating the weights along the temporal dimension.</p> <p></p>"},{"location":"CS231n/lec12/lec/","title":"Visualizing and Understanding","text":""},{"location":"CS231n/lec12/lec/#visualizing-what-models-have-learned","title":"Visualizing what models have learned:","text":""},{"location":"CS231n/lec12/lec/#visualizing-filters","title":"Visualizing filters","text":""},{"location":"CS231n/lec12/lec/#visualizing-final-layer-features","title":"Visualizing final layer features","text":"<ul> <li>Somehow , the 4096-vectors computed by the net can really learn the features !</li> </ul>"},{"location":"CS231n/lec12/lec/#dimensionality-reduction","title":"Dimensionality Reduction","text":"<ul> <li><code>PCA</code></li> </ul> <ul> <li><code>t-SNE</code></li> </ul>"},{"location":"CS231n/lec12/lec/#visualizing-activations","title":"Visualizing activations","text":""},{"location":"CS231n/lec12/lec/#understanding-input-pixels","title":"Understanding input pixels","text":""},{"location":"CS231n/lec12/lec/#identifying-important-pixels","title":"Identifying important pixels","text":""},{"location":"CS231n/lec12/lec/#saliency-via-occlusion","title":"Saliency via Occlusion","text":"<ul> <li>Mask part of the image before feeding to CNN, check how much predicted probabilities change</li> <li>Computational Expensive</li> </ul>"},{"location":"CS231n/lec12/lec/#saliency-via-backprop","title":"Saliency via Backprop","text":"<ul> <li>How much changing the val of a point can affect the result (Gradient!)</li> </ul> <ul> <li>Such methods also find biases!</li> </ul>"},{"location":"CS231n/lec12/lec/#intermediate-features-via-guided-backprop","title":"Intermediate features via (guided) backprop","text":"<ul> <li>For intermediate result, normal methods tend to produce bad pics.</li> <li>Images come out nicer if you only backprop positive gradients through each ReLU (guided backprop)</li> </ul>"},{"location":"CS231n/lec12/lec/#gradient-ascent-to-visualize-features","title":"Gradient ascent to visualize features","text":"<ul> <li>Generate a synthetic image that maximally activates a neuron.</li> </ul> <p>Like Train A Best Image</p> <p>\\(I^* = argmax_I f(I)+R(I)\\)</p> <p></p> <p>\\(argmax_IS_c(I)-\\lambda||I||_2^2\\)</p> <p>Simple regularizer: Penalize L2 norm of generated image</p> <p>Better regularizer: Penalize L2 norm of image , also during optimization periodically</p> <p>(1) Gaussian blur image</p> <p>(2) Clip pixels with small values to 0 </p> <p>(3) Clip pixels with small gradients to 0</p> <p></p>"},{"location":"CS231n/lec12/lec/#adversarial-perturbations","title":"Adversarial perturbations","text":""},{"location":"CS231n/lec12/lec/#style-transfer","title":"Style transfer","text":""},{"location":"CS231n/lec12/lec/#features-inversion","title":"Features inversion","text":"<p>Given a CNN feature vector for an image, find a new image that:</p> <ul> <li>Matches the given feature vector</li> <li>\u201clooks natural\u201d (image prior regularization)</li> </ul> <p></p> <p></p>"},{"location":"CS231n/lec12/lec/#deep-dream","title":"Deep dream","text":"<p>https://github.com/google/deepdream</p>"},{"location":"CS231n/lec12/lec/#texture-synthesis","title":"Texture synthesis","text":"<p>See Slides</p>"},{"location":"CS231n/lec12/lec/#neural-style-transfe","title":"Neural style transfe","text":"<ul> <li> <p>Average over all pairs of vectors, giving Gram matrix of shape <code>C x C</code></p> </li> <li> <p>Efficient to compute; reshape features from CxHxW to =CxHW then compute G = FFT</p> </li> </ul> <p></p> <p></p> <p></p> <p></p> <p>Details see Slides.</p> <ul> <li> <p>Problem: Style transfer requires many forward / backward passes through VGG; very slow!</p> </li> <li> <p>Solution: Train another neural network to perform style transfer for us!</p> </li> </ul> <p>https://github.com/jcjohnson/fast-neural-style</p> <p></p> <ul> <li> <p>Instance Normalization was developed for style transfer!</p> </li> <li> <p>Network only for a single style.</p> </li> </ul> <p></p>"},{"location":"CS231n/lec13/lec/","title":"Lec","text":"<p>a</p>"},{"location":"CS231n/lec14/lec/","title":"Lec","text":"<p>a</p>"},{"location":"CS231n/lec15/lec/","title":"Generative Models","text":"<p>Supervised vs Unsupervised Learning</p> <p>Refer to Slides.</p>"},{"location":"CS231n/lec15/lec/#discriminative-vs-generative-models","title":"Discriminative vs Generative Models","text":"<p>Details see slides.</p> <p>Discriminative Model: Learn a probability distribution \\(p(y|x)\\)</p> <ul> <li>Only competitions among different labels.</li> <li>No competitions between images.</li> </ul> <p>Assign labels to data</p> <p>Feature learning (with labels)</p> <p>Shortcomes</p> <ul> <li>No way for the model to handle unreasonable inputs : it must give label distributions for all images</li> </ul> <p>Generative Model: Learn a probability distribution \\(p(x)\\)\u200b</p> <ul> <li>All possible images compete with each other for probability mass.</li> <li>Evaluation should consider samples which may not appear in training process.</li> </ul> <p>Detect outliers</p> <p>Feature learning (without labels) </p> <p>Sample to generate new data</p> <p>Conditional Generative Model: Learn \\(p(x|y)\\)</p> <ul> <li>Each possible label induces a competition among all images</li> </ul> <p>Assign labels, while rejecting outliers! </p> <p>Generate new data conditioned on input labels</p> <p></p> <ul> <li>Bayes's Rule</li> </ul> <p>\\(p(x|y)=\\frac{p(y|x)}{p(y)}p(x)\\)</p> <p>We can build a conditional generative model from other components!</p> <ul> <li>Build conditional Generative Model from Discriminative Model &amp; Generative Model</li> </ul> <p></p>"},{"location":"CS231n/lec15/lec/#autoregressive-models","title":"Autoregressive models","text":"<ul> <li>Refer to <code>\u300a\u7edf\u8ba1\u5b66\u4e60\u65b9\u6cd5\u300b</code>,\u5c31\u662f\u4f18\u5316\u6781\u5927\u4f3c\u7136\u51fd\u6570.</li> </ul> <p>\\(\\begin{align*}p(x) &amp;= p(x_1,x_2,x_3,...x_T)\\\\ &amp;=p(x_1)p(x_2|x_1)p(x_3|x_1,x_2)....\\\\&amp;=\\Pi_{t=1}^Tp(x_t|x_1,...x_{t-1})\\end{align*}\\)</p> <ul> <li>We\u2019ve already seen this! Language modeling with an RNN!</li> </ul>"},{"location":"CS231n/lec15/lec/#pixel-rnn","title":"Pixel RNN","text":"<p>https://arxiv.org/pdf/1601.06759.pdf</p> <p></p> <ul> <li>How to get \\(2N-1\\) ? ---- <code>Diagnal Order</code>.</li> </ul>"},{"location":"CS231n/lec15/lec/#pixel-cnn","title":"Pixel CNN","text":"<ul> <li>Training: maximize likelihood of training images \\(p(x) = \\Pi_{i=1}^np(x_i|x_1,...x_{i-1})\\)</li> </ul> <p>Pros:</p> <ul> <li> <p>Can explicitly compute likelihood \\(p(x)\\)</p> </li> <li> <p>Explicit likelihood of training data gives good evaluation metric</p> </li> <li> <p>Good samples </p> </li> </ul> <p>Con:</p> <ul> <li>Sequential generation \\(\\to\\)\u200b slow</li> </ul> <p>Improving PixelCNN performance</p> <ul> <li>Gated convolutional layers</li> <li>Short-cut connections</li> <li>Discretized logistic loss</li> <li>Multi-scale</li> <li>Training tricks - Etc...</li> </ul>"},{"location":"CS231n/lec15/lec/#variational-autoencoders","title":"Variational Autoencoders","text":"<p>Variational Autoencoders (VAE) define an intractable density that we cannot explicitly compute or optimize.</p> <p>But we will be able to directly optimize a lower bound on the density !</p>"},{"location":"CS231n/lec15/lec/#regular-non-variational-autoencoders","title":"(Regular, non-variational) Autoencoders","text":"<p>Unsupervised method for learning feature vectors from raw data x, without any labels</p> <p></p> <p>Problem: How can we learn this feature transform from raw data?</p> <p>Idea: Use the features to reconstruct the input data with a decoder \u201cAutoencoding\u201d = encoding itself</p> <p></p> <ul> <li> <p>Somehow Compress the input data.</p> </li> <li> <p>After training, throw away decoder.</p> </li> <li> <p>Encoder can be used to initialize a supervised model.</p> </li> </ul> <p></p> <p>Autoencoders learn latent features for data without any labels! Can use features to initialize a supervised model</p> <ul> <li>Not probabilistic: No way to sample new data from learned model</li> </ul>"},{"location":"CS231n/lec15/lec/#variational-autoencoders_1","title":"Variational Autoencoders","text":"<ul> <li>Learn latent features z from raw data.</li> <li>Sample from the model to generate new data.</li> </ul> <ul> <li>Assume simple prior \\(p(z)\\) eg. Unit , Gaussian.</li> <li>If we could observe the <code>z for each x</code>, then could train a conditional generative model <code>p(x|z)</code></li> </ul> <p>Basic idea: maximize likelihood of data</p> <ul> <li>We don\u2019t observe z, so need to marginalize: \\(p_{\\theta}(x) = \\int p_{\\theta}(x,z)dz = \\int p_{\\theta}(x|z)p_{\\theta}(z)dz\\)\u200b</li> </ul> <p>Problem: Impossible to integrate over all z!</p> <ul> <li>Another idea: Try Bayes\u2019 Rule: \\(\\frac{p_{\\theta}(x|z)p_{\\theta}(z)}{p_{\\theta}(z|x)}\\)</li> </ul> <p>Problem: No way to compute this! \\(p_{\\theta}(z|x)\\)</p> <p>Solution: Train another network (encoder) that learns \\(q_{\\Phi}(z|x)\\approx p_{\\theta}(z|x)\\)</p> <p>Use encoder to compute \\(q_{\\Phi}(z|x)\\approx p_{\\theta}(z|x)\\)</p> <p></p>"},{"location":"CS231n/lec9/lec/","title":"Attention and Transformers","text":"<p>Log on probability : Preserve precision : </p> <ul> <li>\u7279\u522b\u5c0f\u7684\u6570\u5b57 negative \u4fdd\u7559\u7cbe\u5ea6</li> <li>\u6c42\u5bfceasy</li> <li>prevent \u68af\u5ea6\u6d88\u5931</li> </ul>"},{"location":"CS231n/lec9/lec/#sequence-to-sequence-with-rnns","title":"Sequence to Sequence with RNNs","text":"<ul> <li>During training, we feed the gold (aka reference) target sentence into the decoder, regardless of what the decoder predicts. This training method is called Teacher Forcing.</li> <li>Use Teacher forcing &amp; feed decoder predictions together. 3:7 ?</li> </ul>"},{"location":"CS231n/lec9/lec/#how-to-pass-hidden-state","title":"How to Pass Hidden State?","text":"<p>Problem: Input sequence bottlenecked through fixed-sized vector. What if T=1000?</p>"},{"location":"CS231n/lec9/lec/#attention","title":"Attention","text":""},{"location":"CS231n/lec9/lec/#sequence-to-sequence-with-rnns-and-attention","title":"Sequence to Sequence with RNNs and Attention","text":"<ul> <li>Repeat: </li> </ul> <p>Use \\(s_1\\) to compute new context vector \\(c_2\\)</p> <p>Use \\(c_2\\) to compute \\(s_2\\), \\(y_2\\)</p> <p></p> <p></p>"},{"location":"CS231n/lec9/lec/#example","title":"Example","text":"<ul> <li>The decoder doesn\u2019t use the fact that \\(h_i\\) form an ordered sequence \u2013 it just treats them as an unordered set \\(\\{h_i\\}\\).</li> </ul>"},{"location":"CS231n/lec9/lec/#image-captioning-using-spatial-features","title":"Image Captioning using spatial features","text":""},{"location":"CS231n/lec9/lec/#original-version","title":"Original Version","text":"<p>Input: Image I</p> <p>Output: Sequence y = \\(y_1, y_2,..., y_T\\)</p> <p>Encoder: \\(h_0\\) = \\(f_W(z)\\)  where z is spatial CNN features \\(f_W(.)\\) is an MLP</p> <p>Decoder: \\(y_t = g_V(y_{t-1},h_{t-1}, c)\\)  where context vector c is often \\(c = h_0\\)</p> <p></p>"},{"location":"CS231n/lec9/lec/#image-captioning-with-rnns-and-attention","title":"Image Captioning with RNNs and Attention","text":"<p>Attention idea: New context vector at every time step.Each context vector will attend to different image regions</p> <p></p> <p></p> <p>This entire process is differentiable:</p> <ul> <li>model chooses its own attention weights. No attention supervision is required.</li> </ul> <p>Each timestep of decoder uses a different context vector that looks at different parts of the input image.</p>"},{"location":"CS231n/lec9/lec/#attention-layer","title":"Attention Layer","text":"<p> Attention operation is permutation invariant. - Doesn't care about ordering of the features - Stretch H x W = N into N vectors</p> <p>Change \\(f_{att}\\) to a simple dot product - only works well with key &amp; value transformation trick (will mention in a few slides)</p> <p>Change \\(f_{att}(.)\\) to a scaled simple dot product - Larger dimensions means more terms in the dot product sum. - So, the variance of the logits is higher. Large magnitude vectors will produce much higher logits. - So, the post-softmax distribution has lower-entropy, assuming logits are IID. - Ultimately, these large magnitude vectors will cause softmax to peak and assign very little weight to all others - Divide by \u221aD to reduce effect of large magnitude vectors</p> <p>Notice that the input vectors are used for both the alignment as well as the attention calculations. - We can add more expressivity to the layer by adding a different FC layer before each of the two steps.   * Self Attention Layer does not CARE about the order of the input vectors! * Use positional encoding to give the model some notion of order.  </p> <p></p> <p>Desiderata of pos(.) :</p> <ol> <li>It should output a unique encoding for each time-step (word\u2019s position in a sentence)</li> <li>Distance between any two time-steps should be consistent across sentences with different lengths.</li> <li>Our model should generalize to longer sentences without any efforts. Its values should be bounded.</li> <li>It must be deterministic. </li> </ol>"},{"location":"CS231n/lec9/lec/#masked-self-attention","title":"Masked Self Attention","text":"<ul> <li>Prevent vectors from looking at future vectors.</li> <li>Manually set alignment scores to infinity </li> <li>Commonly used for language modeling tasks</li> </ul>"},{"location":"CS231n/lec9/lec/#multi-head-attention","title":"Multi-Head Attention","text":""},{"location":"CS231n/lec9/lec/#transformers","title":"Transformers","text":""},{"location":"CS231n/lec9/lec/#image-captioning-with-transformers","title":"Image Captioning with Transformers","text":""},{"location":"CV/ML-4360/BS/lec2/","title":"Basic Transformations","text":"<p>"},{"location":"CV/ML-4360/BS/lec2/#lec2-for-ml-4360","title":"Lec2 for ML-4360","text":""},{"location":"CV/ML-4360/BS/lec2/#21-primitives-transformations","title":"2.1 Primitives &amp; Transformations","text":""},{"location":"CV/ML-4360/BS/lec2/#homogeneous","title":"\\(Homogeneous\\)","text":"<ul> <li>homogeneous coordinates &amp; inhomogeneous coordinates</li> <li>argmented vector[one element out of the whole equivalent class],homogeneous vectors,homogeneous vectors</li> <li>points at infinity </li> <li>In homogeneous coordinates, the intersection of two lines is given by: \\(\\tilde{x}\\)=\\(\\tilde{l1}\\) \u00d7 \\(\\tilde{l2}\\) </li> <li>the line joining two points can be compactly written as: \\(\\tilde{l}\\)=\\(\\tilde{x1}\\) \u00d7 \\(\\tilde{x2}\\) </li> </ul>"},{"location":"CV/ML-4360/BS/lec2/#transformations","title":"\\(Transformations\\)\u200b\u200b","text":"<ul> <li>\\(\\tilde{l}'\\) = \\((\\tilde{H}^T)^{-1}\\)\\(\\tilde{l}\\)</li> </ul>"},{"location":"CV/ML-4360/BS/lec2/#translation-2dof","title":"translation 2DOF","text":"<p>\\(\\begin{bmatrix}I&amp;t\\\\0^{T}&amp;1\\end{bmatrix}\\)</p>"},{"location":"CV/ML-4360/BS/lec2/#euclidean-3dof","title":"Euclidean 3DOF","text":"<p>\\(RR^T=I \\ der(R)=1\\)\u200b</p> <p>\\(\\begin{bmatrix}R&amp;t\\\\0^{T}&amp;1\\end{bmatrix}\\)</p> <p>\u6b63\u4ea4\u77e9\u9635\\(A^TA=I\\)</p> <ul> <li>\\(A^{-1}=A^T\\)</li> <li>\\(\\left|A\\right|\\) = \\(+-1\\)</li> <li>A\u7684\u884c\uff08\u5217\uff09\u5411\u91cf\u7ec4\u4e3an\u7ef4\u5355\u4f4d\u6b63\u4ea4\u5411\u91cf\u7ec4</li> <li>\u6b63\u4ea4\u53d8\u6362\u4fdd\u6301\u5411\u91cf\u7684\u957f\u5ea6\u4e0e\u5185\u79ef\u4e0d\u53d8 \\(|\\sigma\\alpha|=|\\alpha|\\)</li> </ul>"},{"location":"CV/ML-4360/BS/lec2/#similarity-4dof","title":"Similarity 4DOF","text":"<p>\\(\\begin{bmatrix}sR&amp;t\\\\0^{T}&amp;1\\end{bmatrix}\\)\u200b</p> <p>\\(RR^{T}=I\\)</p>"},{"location":"CV/ML-4360/BS/lec2/#affine-6dof","title":"Affine: 6DOF","text":"<p>\\(\\begin{bmatrix}A&amp;t\\\\0^{T}&amp;1\\end{bmatrix}\\)</p> <ul> <li> <p>arbitrary \\(2\u00d72\\) matrix</p> </li> <li> <p>Parallels Remain!</p> </li> </ul>"},{"location":"CV/ML-4360/BS/lec2/#projective-8dof","title":"Projective :8DOF","text":"<ul> <li>preserve straight lines</li> <li>\\(\\tilde{H}\\in R_{3\\times 3}\\)is an arbitrary homogeneous \\(3 \u00d7 3\\)\u200b matrix (specified up to scale)</li> </ul> <ul> <li>DOF\uff082D\uff09:n(n-1)/2</li> </ul>"},{"location":"CV/ML-4360/BS/lec2/#direct-linear-transform-for-homography-estimationalgorithm-dlt","title":"Direct Linear Transform for Homography Estimation[algorithm DLT","text":"<ul> <li>Please Refer to Structure from Motion</li> </ul>"},{"location":"CV/ML-4360/BS/lec2/#22-geometric-image-formation","title":"2.2 Geometric Image Formation","text":""},{"location":"CV/ML-4360/BS/lec2/#orthographic-projection","title":"Orthographic projection","text":"<p>An orthographic projection simply drops the z component of the 3D point in camera</p> <p>coordinates \\(x_c\\) to obtain the corresponding 2D point on the image plane (= screen) \\(x_s\\)</p> <ul> <li>Scaled -- The unit for s is \\(px/m\\) or \\(px/mm\\) to convert metric 3D points into pixels.</li> </ul> <p>\\(\\bar{x_s}=\\begin{bmatrix}s&amp;0&amp;0&amp;0\\\\0&amp;s&amp;0&amp;0\\\\0&amp;0&amp;0&amp;1\\end{bmatrix}\\).</p>"},{"location":"CV/ML-4360/BS/lec2/#perspective-projection","title":"Perspective projection","text":""},{"location":"CV/ML-4360/BS/lec2/#chaining-transformations","title":"Chaining Transformations","text":"<p>\\(\\tilde{x}_s=K[R \\ t]\\bar{x}_w\\)</p> <p></p> <p>\u6211\u7684\u7406\u89e3\uff1a\\(\\bar{x}_s\\)\u662f\u771f\u5b9e\u7684\u76f8\u673a\u5750\u6807\u7cfb\u4e0b\u7684\u5750\u6807\uff0c\u4e0e\\(\\tilde{x}_s\\)\u5dee\u4e00\u4e2a\u7cfb\u6570\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u8fd9\u4e2a\u7cfb\u6570\uff0c\u5c31\u53ef\u4ee5\u6062\u590d\u51fa\\(\\tilde{x}_s\\)\u5e76\u6839\u636e\\(\\tilde{x}_s\\)\u7684\u8ba1\u7b97\u65b9\u6cd5\u6062\u590d\u51fa\u4e16\u754c\u5750\u6807\u7cfb\u4e0b\u7684\u5750\u6807\\(\\bar{x}_c\\)</p>"},{"location":"CV/ML-4360/BS/lec2/#23-photometric-image-formation","title":"2.3 Photometric Image Formation","text":""},{"location":"CV/ML-4360/BS/lec2/#rendering-equation","title":"\\(Rendering\\ Equation\\)","text":"<ul> <li>intensity :power per solid angle <p>\\(dw=\\sin\\theta\\)\\(d\\theta\\)\\(d\\phi\\)</p> </li> <li>Irradiance :power per unit area <p>E(x)=d\\(\\Phi(x)\\)/dA</p> </li> <li>Radiannce <p>\\(L(p,w)=d^2\\Phi(p,\\omega)\\)/\\(d\\omega\\)\\(dAcos\\theta\\) </p> </li> </ul>"},{"location":"CV/ML-4360/BS/lec2/#brdf-radiance_outirradiance_in","title":"\\(BRDF\\) \"\\(Radiance_{out}/Irradiance_{in}\\)\"","text":""},{"location":"CV/ML-4360/BS/lec2/#the-reflection-equation","title":"\\(The\\ Reflection\\ Equation\\)\u200b","text":"<p>\\(L_r(p,w_r)=\\int_{H^2}f_r(p,w_i\\rightarrow w_r)L_i(p,w_i)cos\\theta_id_{w_i}\\)</p> <p></p>"},{"location":"CV/ML-4360/BS/lec2/#back-to-cameras","title":"Back To Cameras","text":""},{"location":"CV/ML-4360/CBN/lec9/","title":"Coordinate-Based Networks","text":"<p>"},{"location":"CV/ML-4360/CBN/lec9/#implicit-neural-representations","title":"Implicit Neural Representations","text":""},{"location":"CV/ML-4360/CBN/lec9/#what-is-a-good-output-representation","title":"What is a good output representation?","text":"<ul> <li>Voxels</li> </ul> <p>Flat surface only in the canonical directions</p> <p></p> <ul> <li>Points</li> </ul> <p>No surface</p> <p></p> <ul> <li>Meshes</li> </ul> <p></p> <p>#### Occupancy Networks</p> <p></p> <p></p> <p>Also possible: signed distance field [Park et al., 2019]</p> <ul> <li>Equivalent to a neural network for binary classification, except that we are interested in the decision boundary which implicitly represents the object\u2019s surface.</li> </ul> <p></p> <p>\\(L(\\theta,\u03c8) =  \\sum_{j=1}^KBCE(f_\u03b8(p_{ij},z_{i}),o_{ij})+KL[q_\u03c8(z|(p_{ij},o_{ij})_{j=1:K})\u2225p0(z)]\\)\u200b</p> <ul> <li>BCD \uff1a Binaray Cross-Entropy Loss</li> <li>K : Randomly sampled 3D points (K = 2048)</li> <li>\\(q_\u03c8\\): Encoder</li> </ul> <p></p> <p></p>"},{"location":"CV/ML-4360/CBN/lec9/#representing-materials-and-lighting","title":"Representing Materials and Lighting","text":"<p>Conditional Surface Light Field</p> <ul> <li>model p,v,l to a 3D colour value</li> </ul> <p>Given any light &amp; view direction, we want to know the color</p> <p></p> <p></p>"},{"location":"CV/ML-4360/CBN/lec9/#representing-motion","title":"Representing Motion","text":"<ul> <li>Extending Occupancy Networks to 4D is hard (curse of dimensionality)</li> <li>Represent shape at \\(t = 0\\) using a 3D Occupancy Network</li> <li>Represent motion by temporally and spatially continuous vector field</li> <li>Relationship between 3D trajectorys and velocity \\(v\\) given by (differentiable) ODE:  \\(\\frac{\\partial s(t)}{\\partial t} = v(s(t),t)\\)\u200b</li> </ul>"},{"location":"CV/ML-4360/CBN/lec9/#representing-scenes","title":"Representing Scenes","text":"<p>Problems for occupancy network </p> <ul> <li>Global latent code \u21d2 no local information, overly smooth geometry</li> <li>Fully connected architecture \u21d2 does not exploit translation equivariance</li> </ul> <p>Implicit models work well for simple objects but poorly on complex scenes</p>"},{"location":"CV/ML-4360/CBN/lec9/#convolutional-occupancy-networks","title":"Convolutional Occupancy Networks","text":""},{"location":"CV/ML-4360/CBN/lec9/#differentiable-volumetric-rendering","title":"Differentiable Volumetric Rendering","text":""},{"location":"CV/ML-4360/CBN/lec9/#learning-from-images","title":"Learning from Images","text":"<ul> <li>Given only RGB images</li> </ul>"},{"location":"CV/ML-4360/CBN/lec9/#forward-pass-rendering","title":"Forward Pass (Rendering)","text":"<p>Secant Method : A finite-difference approximation of Newton\u2019s method.</p>"},{"location":"CV/ML-4360/CBN/lec9/#backward-passdifferentiation","title":"Backward Pass(Differentiation)","text":"<p>Comes to Backward Pass</p> <ul> <li> <p>Image Observation I</p> </li> <li> <p>Loss \\(L(\\hat{I},I) = \\sum_u||\\hat{I}_u-I_u||\\)\u200b</p> </li> <li> <p>Gradient of Loss Function</p> </li> </ul> <p>\\(\\frac{\\partial{L}}{\\partial{\\theta}} = \\sum_u \\frac{\\partial L}{\\partial\\hat{I_u}}\u00b7\\frac{\\partial{\\hat{I_u}}}{\\partial\\theta}\\)\u200b</p> <p>\\(\\frac{\\partial{\\hat{I_u}}}{\\partial\\theta}=\\frac{\\partial{t_{\\theta}(\\hat{p})}}{\\partial\\theta} +\\frac{\\partial{t_{\\theta}(\\hat{p})}}{\\partial\\hat{p}}\u00b7\\frac{\\partial{\\hat{p}}}{\\partial\\theta}\\)\u200b</p> <p>Note : \\(\\hat{p}\\) (The Surface Intersection) also depends on \\(\\theta\\)\u200b !! </p> <ul> <li> <p>So we have to apply total derivative !!</p> </li> <li> <p>Differentiation of \\(f_{\\theta}(\\hat{p}=\\tau)\\) yields :</p> </li> </ul> <p>\\(\\frac{\\partial\\hat{p}}{\\partial\\theta}=-w(\\frac{\\partial f_{\\theta}(\\hat{p})}{\\partial\\hat{p}}\u00b7w)^{-1}\\frac{\\partial f_{\\theta}(\\hat{p})}{\\partial\\theta}\\)\u200b\u200b</p> <p>Derivation :</p> <p>Note \\(\\bold{w}\\) is a vector!</p> <p></p>"},{"location":"CV/ML-4360/CBN/lec9/#neural-radiance-fields","title":"Neural Radiance Fields","text":"<p>Task: Given a set of images of a scene, render image from novel viewpoint</p> <p></p> <ul> <li>A Nerual Network related to a singls scene ! Like \"overfit\" the nerual network to a single scene!</li> </ul>"},{"location":"CV/ML-4360/CBN/lec9/#nerf-training","title":"NeRF Training","text":"<p>\\(min_{\\theta}=\\sum_i||render_i(F_{\\theta})-I_i||^2\\)\u200b</p> <p>Shoot ray, render ray to pixel, minimize reconstruction error via backpropagation</p> <ul> <li>NeRF\u2019s parameters are optimized on many different views of a single scene</li> </ul> <p>From the Paper :</p> <p>We encourage the representation to be multiview consistent by restricting the network to predict the volume density \u03c3 as a function of only the location x, while allowing the RGB color c to be predicted as a function of both location and viewing direction. </p> <p>To accomplish this, the MLP \\(F_\u0398\\) first processes the input 3D coordinate x with 8 fully-connected layers (using ReLU activations and 256 channels per layer), and outputs \u03c3 and a 256-dimensional feature vector.</p> <p>This feature vector is then concatenated with the camera ray\u2019s viewing direction and passed to one additional fully-connected layer (using a ReLU activation and 128 channels) that output the view-dependent RGB color.</p>"},{"location":"CV/ML-4360/CBN/lec9/#volume-rendering-with-radiance-fields","title":"Volume Rendering with Radiance Fields","text":"<p>From the Paper :</p> <ul> <li> <p>The volume density \\(\u03c3(x)\\) can be interpreted as the differential probability of a ray terminating at an infinitesimal particle at location \\(x\\)\u200b. </p> </li> <li> <p>The expected color \\(C(r)\\) of camera ray \\(r(t) = o + td\\) with near and far bounds \\(t_n\\) and \\(t_f\\) is:</p> </li> </ul> <p></p> <ul> <li>\\(T(t)\\)\u200b probability that the ray doesn't hit anything</li> </ul> <p></p>"},{"location":"CV/ML-4360/CBN/lec9/#optimizing-a-neural-radiance-field","title":"Optimizing a Neural Radiance Field","text":""},{"location":"CV/ML-4360/CBN/lec9/#positional-encoding","title":"Positional encoding","text":"<ul> <li> <p>Having the network \\(F_\u0398\\) directly operate on \\(xyz\u03b8\u03c6\\)\u200b input coordinates results in renderings that perform poorly at representing high-frequency variation in color and geometry</p> </li> <li> <p>(Recap Transformers)</p> </li> </ul> <p></p> <ul> <li>Pass low-dimensional coordinates through fixed positional encoding or random Fourier features of varying frequencies controlled by L</li> <li>These features let networks learn high-freq. functions in low-dim. domains</li> </ul>"},{"location":"CV/ML-4360/CBN/lec9/#generative-radiance-fields","title":"Generative Radiance Fields","text":"<ul> <li>Refer to Slides</li> </ul>"},{"location":"CV/ML-4360/Diverse/lec/","title":"Diverse Topics in Computer Vision","text":""},{"location":"CV/ML-4360/Diverse/lec/#input-optimization","title":"Input Optimization","text":""},{"location":"CV/ML-4360/Diverse/lec/#adversarial-attacks","title":"Adversarial Attacks","text":""},{"location":"CV/ML-4360/PGM/lec5/","title":"Probabilistic Graphical Models","text":"<p>"},{"location":"CV/ML-4360/PGM/lec5/#probabilistic-graphical-models","title":"Probabilistic Graphical Models","text":""},{"location":"CV/ML-4360/PGM/lec5/#structured-prediction","title":"Structured Prediction","text":""},{"location":"CV/ML-4360/PGM/lec5/#spatial-regularization","title":"Spatial regularization","text":"<p>\\(p(D)\\propto e^{-\\sum_i\\phi_{data}(d_i)-\\lambda\\sum_{(i\uff0cj)\\in S}\\phi_{smooth}(d_i,d_j)}\\)</p> <ul> <li> <p>\\(i\\)~\\(j\\) neighbouring pixels (on a 4-connected grid). </p> </li> <li> <p>$\\phi_{smooth} $ is a regularization term that encourages neighboring pixels to have similar disparities. </p> </li> <li>\\(\\phi_{data}(d_i) =min(|I(xi, yi) - J(xi - di, yi)|, \u03c3)\\)</li> <li>\\(\\phi_{smooth} (di,dj) = min(|di - dj|,\u03c4)\\)</li> </ul> <p>where \\(I\\)and \\(J\\) are the image pairs. \\(\u03c3\\) and \\(\u03c4\\) are truncation thresholds.</p> <ul> <li>Structured Prediction:</li> </ul> <p>Probabilistic graphical models encode local dependencies of the problem</p> <p>Deep neural netwoks with image-based outputs (stereo, flow, semantics)</p>"},{"location":"CV/ML-4360/PGM/lec5/#markov-random-fields","title":"Markov Random Fields","text":""},{"location":"CV/ML-4360/PGM/lec5/#undirected-graphical-models-ugm","title":"Undirected graphical models (UGM)","text":"<ul> <li>Pairwise (non-causal) relationships</li> <li>Can write down model, and score specific configurations of the graph, but no explicit way to generate samples</li> <li>Contingency constrains on node configurations</li> </ul>"},{"location":"CV/ML-4360/PGM/lec5/#cliques","title":"cliques","text":"<p>Refers to fully connected subgraphs in a graphical model, particularly in models like Markov Random Fields or Conditional Random Fields.</p> <p>In this context, a clique is a group of nodes in a graph where every pair of nodes is directly connected.</p>"},{"location":"CV/ML-4360/PGM/lec5/#potential","title":"potential","text":"<ul> <li>A potential \\(\u03c6(x)\\)is a non-negative function of the variable x</li> <li>A joint potential \\(\u03c6(x1, x2, . . . )\\) is a non-negative function of a set of variables.</li> </ul>"},{"location":"CV/ML-4360/PGM/lec5/#definations-of-an-undirected-graphical-model","title":"Definations of an undirected graphical model","text":"<p>\\(P(x_1\u2026\u2026x_n)=\\frac{1}{Z}\\prod_{c\\in C}\\phi_c(x_c)\\)</p> <p>\\(Z = \\sum_{x_1\u2026\u2026x_n}\\prod_{c\\in C}\\phi_c(x_c)\\)</p>"},{"location":"CV/ML-4360/PGM/lec5/#defination-of-markov-random-field","title":"Defination of Markov Random Field","text":"<ul> <li>For a set of variables \\(X ={x_1,...,x_M}\\), a Markov Random Field is defined as a product of potentials over the (maximal) cliques \\({(X_k)}_{k=1}^K\\)of the undirected graph G</li> </ul> <p>\\(p(X)=\\frac{1}{Z}\\prod_{k=1}^K\\phi_k(X_k)\\)</p> <ul> <li>\\(Z\\)\u200b  normalizes the distribution and is called partition function</li> </ul> <p>Examples\uff1a</p> <p></p>"},{"location":"CV/ML-4360/PGM/lec5/#properties","title":"Properties","text":"<p>\\(Condition \\ One\\)</p> <p></p>"},{"location":"CV/ML-4360/PGM/lec5/#marginalizing-over-c-makes-a-and-b-dependent","title":"Marginalizing over c makes a and b dependent","text":"<p>\\(Proof\\)</p> <p></p> <p></p> <ul> <li>Explain:take \\(\\sum_c\\phi_1(a,c)\\phi_2(b,c)\\) for example</li> </ul> a b c \u03c61(a,c) \u03c62(b,c) \u03c61(a,c)*\u03c62(b,c) sum 0 0 0 1 1 1 1 1 0 0 0 1 1 0 0 0 0 1 1 1 1 1 0 1 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 0 1 1 0 0"},{"location":"CV/ML-4360/PGM/lec5/#conditioning-on-c-makes-a-and-b-independent","title":"Conditioning on c makes a and b independent","text":"<p>\\(Proof\\)</p> <p></p>"},{"location":"CV/ML-4360/PGM/lec5/#global-markov-property","title":"Global Markov Property","text":""},{"location":"CV/ML-4360/PGM/lec5/#local-markov-property","title":"Local Markov Property","text":"<ul> <li>Markov blanket</li> </ul>"},{"location":"CV/ML-4360/PGM/lec5/#hammersley-clifford-theorem","title":"Hammersley-Clifford Theorem","text":"<p>A probability distribution that has a strictly positive mass or density satisfies the Markov properties with respect to an undirected graph G if and only if it is a Gibbs random field,</p> <p>i.e. its density can be factorized over the (maximal) cliques of the graph.</p> <p></p> <p></p>"},{"location":"CV/ML-4360/PGM/lec5/#factor-graphs","title":"Factor Graphs","text":"<p>\\(p(X) = \\frac{1}{Z}\\prod_{k=1}^Kf_k(X_k)_{k=1}^K\\)\u200b</p>"},{"location":"CV/ML-4360/PGM/lec5/#example","title":"Example","text":""},{"location":"CV/ML-4360/PGM/lec5/#belief-propagation","title":"Belief Propagation","text":""},{"location":"CV/ML-4360/PGM/lec5/#inference-in-chain-structured-factor-graphs","title":"Inference in Chain Structured Factor Graphs","text":"<p>\\(p(a, b, c, d) = \\frac{1}{Z}f_1(a, b)f_2(b, c)f_3(c, d)f4(d)\\)</p> <p>\\(p(a,b,c) = \\sum_{d}p(a,b,c,d)\\)</p> <p>\\(\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ = \\frac{1}{Z}f_1(a,b)f_2(b,c)\\underbrace{\\sum_{d}f_3(c,d)f_4(d)}_{\u03bc_{d\u2192c}(c)}\\)</p> <p>\\(p(a,b) = \\sum_{c}p(a,b,c)\\)</p> <p>\\(\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ = \\frac{1}{Z}f_1(a,b)\\underbrace{\\sum_{c}f_2(b,c)\u03bc_{d\u2192c}(c)}_{\u03bc_{c\u2192b}(b)}\\)</p> <p>\\(\u2026\u2026\\)</p> <ul> <li>Belief Propagation assumes a singly-connected graph \\(G = (V,E)\\), which means it has \\(|V|\u22121 = O(|V|)\\) many edges (in contrast to \\(|V|(|V| \u2212 1)/2 = O(|V|^2)\\) of a fully connected graph). </li> <li>That simplifies the computation of any marginal distribution significantly</li> </ul>"},{"location":"CV/ML-4360/PGM/lec5/#inference-in-tree-structured-factor-graphs","title":"Inference in Tree Structured Factor Graphs","text":"<p>Factor-to-Variable Messages</p> <p></p> <p>Variable-to-Factor Messages</p> <p></p>"},{"location":"CV/ML-4360/PGM/lec5/#sum-product-algorithm","title":"Sum-Product Algorithm","text":""},{"location":"CV/ML-4360/PGM/lec5/#belief-propagation_1","title":"Belief Propagation:","text":"<ul> <li>Algorithm to compute all messages efficiently</li> <li>Assumes that the graph is singly-connected (chain, tree)</li> </ul>"},{"location":"CV/ML-4360/PGM/lec5/#algorithm","title":"Algorithm:","text":"<ul> <li>Initialization</li> <li>Variable to Factor message</li> <li>Factor to Variable message</li> <li>Repeat until all messages have been calculated</li> <li>Calculate the desired marginals from the messages</li> </ul>"},{"location":"CV/ML-4360/PGM/lec5/#log-representation","title":"Log Representation","text":""},{"location":"CV/ML-4360/PGM/lec5/#max-product-algorithm","title":"Max-Product Algorithm","text":"<ul> <li>Example: Chain</li> </ul> <p>\\(\\begin{align*}\\underset{\\text{a,b,c,d}}{\\text{max}}p(a,b,c,d)&amp;= \\underset{\\text{a,b,c,d}}{\\text{max}}f_1(a,b)f2(b,c)f_3(c,d)\\\\&amp;=\\underset{\\text{a,b,c}}{\\text{max}}f_1(a,b)f2(b,c)\\underbrace{\\underset{\\text{d}}{\\text{max}}f_3(c,d)}_{\\mu_{d-&gt;c}(c)}\\\\&amp;=\u2026\u2026\\\\ &amp;=\\underset{\\text{a}}{\\text{max}}\\mu_{b-&gt;a}(a)\\end{align*}\\)</p> <p></p>"},{"location":"CV/ML-4360/PGM/lec5/#loopy-belief-propagation","title":"Loopy Belief Propagation","text":"<ul> <li>Messages are also well defined for loopy graphs!</li> <li>Simply apply them to loopy graphs as well</li> <li>We loose exactness (\u21d2 approximate inference)</li> <li>Even no guarantee of convergence [Yedida et al. 2004] I But often works surprisingly well in practice</li> </ul>"},{"location":"CV/ML-4360/PGM/lec5/#summary","title":"Summary","text":"<ul> <li>REFER To PPT</li> </ul>"},{"location":"CV/ML-4360/PGM/lec5/#examples","title":"Examples","text":""},{"location":"CV/ML-4360/PGM/lec5/#example-1-vehicle-localization","title":"Example 1: Vehicle Localization","text":"<p>Max-Product Belief Propagation on chain structured Markov Random Fields for Vehicle Localization</p> <p>Let's consider an autonomous vehicle driving on a highway and tracking a vehicle in front in order to initiate an overtaking maneuver. Let \\(x_t\\in\\{1,2,3\\}\\) denote the lane the vehicle in front is driving on at time \\(t\\in\\{1,\\dots,10\\}\\). Unfortunately, the sensor readings are noisy as depicted below.</p> <p></p> <p>Selecting the most likely lane at each time \\(t\\) independently (green) leads to wrong estimates for \\(t=\\{3,7,10\\}\\). To solve this problem, and recover the correct situation depicted below</p> <p></p> <p>we can integrate prior knowledge and infer the most likely situation using max-product belief propagation. A sensible prior would favor staying on the same lane over changing one lane at a time over changing two lanes at a time. This prior can be integrated via a pairwise, chain-structured Markov Random Field (also called: Hidden Markov Model or HMM) where pairwise factors between adjacent frames modulate transition likelihoods:</p> <p></p> \\[g_\\theta(x_i,x_{i+1}) = \\begin{bmatrix}0.8 &amp; 0.2 &amp; 0.0\\\\ 0.2 &amp; 0.6 &amp; 0.2 \\\\ 0.0 &amp; 0.2 &amp; 0.8\\end{bmatrix}\\] \\[ p_\\theta({\\bf x}) \\propto \\prod_{1}^{10} f_i(x_i)\\prod_{1}^{9}g_{\\theta}(x_i, x_{i+1})\\] <ul> <li>Coding (Refer to HW)</li> </ul>"},{"location":"CV/ML-4360/PGM/lec5/#example-2-image-denoising","title":"Example 2: Image Denoising","text":"<p>You are given a noisy binary image (\\(10 \\times 10\\) pixels) which you want to denoise.</p> <p></p> <p>Make use of the Ising model for that purpose where neighboring pixels are encouraged to take the same value: \\(\\(p(x_1,\\dots,x_{100}) \\propto \\exp \\left\\{\\sum_{i=1}^{100} \\psi_i(x_i) + \\sum_{i\\sim j} \\psi_{ij} (x_i,x_j) \\right\\}\\)\\)</p> <p>Here, \\(i\\) is the pixel index and \\(i\\sim j\\) are neighboring pixels on a 4-connected grid. The unary term \\(\\psi_i(x_i) = [x_i = o_i]\\) models the observation at pixel \\(i\\), and the pairwise term is the Ising prior \\(\\psi_{ij}(x_i,x_j) = \\alpha \\cdot [x_i = x_j]\\), where \\(\\alpha\\) controls the strength of the interaction/smoothing. </p> <p>Because we have large number of variables in this exercise, we use logarithm factors to avoid potential numerical underflow issues.</p> <p>Inputs: * <code>num_vars</code>, <code>num_states</code>, <code>factors</code>, <code>msg_fv</code>, <code>msg_vf</code>, <code>ne_var</code></p> <p>Outputs: * <code>max_marginals</code>: <code>num_vars</code> x <code>num_states</code> array of estimated max-marginals * <code>map_est</code>: array comprising the estimated MAP state of each variable</p> <p>Algorithm Pseudocode:</p> <ul> <li>For <code>N=30</code> iterations do:</li> <li>Update all unary factor-to-variable messages: \\(\\lambda_{f\\rightarrow x}(x) = f(x)\\)</li> <li>Update all pairwise factor-to-variable messages: \\(\\lambda_{f\\rightarrow x}(x) = \\max_y \\left[f(x,y)+\\lambda_{y\\rightarrow f}(y)\\right]\\)</li> <li> <p>Update all variable-to-factor messages: \\(\\lambda_{x\\rightarrow f}(x) = \\sum_{g\\in\\{ ne(x)\\setminus f\\}}\\lambda_{g\\rightarrow x}(x)\\)</p> </li> <li> <p>Calculate Max-Marginals: \\(\\gamma_x(x) = \\sum_{g\\in\\{ ne(x)\\}}\\lambda_{g\\rightarrow x}(x)\\)</p> </li> <li>Calculate MAP Solution: \\(x^* = \\underset{x}{\\mathrm{argmax}} ~ \\gamma_x(x)\\)</li> </ul> <p></p> <ul> <li>CODE  : Refer to HW</li> </ul>"},{"location":"CV/ML-4360/PGM/lec5/#applications-of-graphical-models","title":"Applications of Graphical Models","text":""},{"location":"CV/ML-4360/PGM/lec5/#stereo-reconstruction","title":"Stereo Reconstruction","text":"<ul> <li>Depth varies slowly except at object discontinuities which are sparse</li> </ul> <ul> <li>[Matching cost computed directly]\\(f_{data}(d_i)\\)  can be obtained by like: \\(Siamese Network\\)\u200b\u200b (in ex02).</li> <li>Adding Pairwise connections.</li> </ul> <ul> <li> <p>To minimize the ENERGY</p> </li> <li> <p>Add Truncated penalty</p> </li> <li> <p>\\(\\lambda\\)\u200b -- \"tradeoff\"</p> </li> </ul>"},{"location":"CV/ML-4360/PGM/lec5/#non-local-priors","title":"Non-local Priors","text":"<ul> <li>Despite we have introduced the smoothness regularizaer.Due to Very Strong violation of matching assumptions.</li> </ul> <p>Very LOCAL pairwise terms cannot deal with some cases (like reflections)</p> <p></p> <ul> <li>Add Object Semantics &amp; 3D Consistency</li> </ul>"},{"location":"CV/ML-4360/PGM/lec5/#summary_1","title":"Summary","text":"<ul> <li> <p>Block matching suffers from ambiguities</p> </li> <li> <p>Choosing window size is problematic (tradeoff)</p> </li> <li> <p>Incorporating smoothness constraints can resolve some of the ambiguities and allows for choosing small windows (no bleeding artifacts)</p> </li> <li> <p>Can be formulated as MAP inference in a discrete MRF</p> </li> <li>MAP solution can be obtained using belief propagation, graph cuts, etc. </li> <li>Integrating recognition cues can further regularize the problem</li> </ul>"},{"location":"CV/ML-4360/PGM/lec5/#multi-view-reconstruction","title":"Multi-View Reconstruction","text":"<p>Representation</p> <ul> <li>Voxel</li> </ul> <p></p> <p></p> <p>Voxel occupancy: This concept describes whether a voxel is occupied by a solid entity. In many tasks such as 3D reconstruction, object detection, SLAM (Simultaneous Localization and Mapping), etc., voxel occupancy is crucial. Typically, a voxel is either occupied by a solid entity or empty (occupied by other objects or background in space). In representations of voxel occupancy, a common method is binary, where a voxel is considered occupied when it's 1 and empty otherwise.</p> <p>Voxel appearance: This concept describes the visual properties of a voxel, i.e., how it appears in images or voxel grids. It may include color, texture, brightness, etc. </p> <p>Image Formation Process</p> <p></p> <ul> <li>Actually quite simple --  only the first occupied can appear</li> </ul> <p>Probabilistic Model</p> <ul> <li> <p>Joint Distribution:   \\(p(\\bold{O},\\bold{A})=\\frac{1}{Z}\\Pi_{v\\in\\bold{V}}\u03c6_v(o_v)\\Pi_{r\\in\\bold{R}}\u03c8_r(o_r, a_r)\\)\u200b</p> </li> <li> <p>Unary Potentails : \\(\u03c6_v(o_v) = \u03b3^{o_v} (1 \u2212 \u03b3)^{(1\u2212o_v)}\\) </p> <p>Most voxels are empty \u21d2 \\(\u03b3\\)\u200b &lt; 0.5</p> </li> <li> <p>Ray Potentials :</p> <ul> <li>We know \\(I_r\\) ?</li> </ul> <p></p> </li> <li> <p>If first occupied voxel \\(a_i^r\\) similar to the corresponding pixel , \\(\u03c8(o_r,a_r)\\) will increase</p> </li> </ul> <p>Depth Distribution For Single Ray</p> <ul> <li>Let : \\(o_1=0\\ \u2026\u2026o_{k-1}=0\\ o_k=1\\)\u200b\u200b</li> <li> <p>Message from and to the unary factors \\(\\mu_{\u03c6_i\\to o_i}\\) \\(\\mu_{o_i\\to \u03c6_i}\\)  and \\(\\mu_{o_i\\to \u03c8_i}\\) can be easilly computed.</p> </li> <li> <p>Occupancy message</p> </li> </ul> <p></p> <p>\u200b   Thus, resulting in [DERIVATION SEE PAPER BELOW]</p> <p>\u200b   \\(\\mu_{\u03c8\\to o_1}(o_1=1)=\\int_{a_1}v(a_1)\\mu(a_1)da_1\\)\u200b</p> <p>\u200b   \\(\\mu_{\u03c8\\to o_1}(o_1=0)=\\sum_{j=2}^N\\mu(o_j=1)\\Pi_{k=2}^{j-1}\\mu(o_k=0)\\rho_j\\)</p> <p>\u200b   \\(\\rho_j=\\int _{a_j}v(a_j)u(a_j)da_j\\) </p> <p>\u200b   More General :[see PAPER]</p> <ul> <li>Appearance messages [see PAPER]</li> </ul> <p>Bayes Optimal Depth Estimation</p> <ul> <li>Consider a single ray r in space</li> <li>Let \\(d_k\\) be the distance from the camera to voxel \\(k\\) along ray \\(r\\)</li> <li> <p>Depth \\(D\u2208\\{d_1,...,d_N\\}\\):distance to closest occupied voxel</p> </li> <li> <p>Optimal depth estimate:</p> </li> </ul> <p></p> <ul> <li> <p>\\(p(D=d_i)\u221d\\mu(o_i=1)\\Pi_{j=1}^{i-1}\\mu(o_j=0)\\rho_i\\) [Derivation see PPT &amp; Paper]</p> </li> <li> <p>Requires marginal depth distribution \\(p(D)\\) along each ray</p> </li> </ul>"},{"location":"CV/ML-4360/PGM/lec5/#optical-flow","title":"Optical Flow","text":"<ul> <li>Motion Field Vs Optical Flow</li> </ul> <p>Motion field:</p> <ul> <li>2D motion field representing the projection of the 3D motion of points in the scene onto the image plane</li> <li>Can be the result of camera motion or object motion (or both)</li> </ul> <p>Optical flow: </p> <ul> <li>2D velocity field describing the apparent motion in the image(i.e., the displacement of pixels looking \u201csimilar\u201d)  </li> <li>Optical flow \\(\\ne\\) motion field! Why?</li> </ul>"},{"location":"CV/ML-4360/PGM/lec5/#determining-optical-flow","title":"Determining Optical Flow","text":"<ul> <li>A single observation is not enough to determine flow</li> </ul> <ul> <li>\\(\\lambda\\) positive</li> </ul> <p>Solution: linearize the brightness constancy assumption</p> <p>\\(f(x,y)\u2248f(a,b)+ \\frac{\\partial f(a,b)}{\u2202x} (x\u2212a)+ \\frac{\\partial f(a,b)}{\u2202y} (y\u2212b)\\)\u200b</p> <p>Thus , we have \\(I(x + u(x, y), y + v(x, y), t + 1) \\approx I(x,y,t)+I_x(x,y,t)u(x,y)+I_y(x,y,t)v(x,y)+I_t(x,y,t)\\)</p> <p>\\(E(u,v) \\approx \\iint [(I_x(x,y,t)u(x,y)+I_y(x,y,t)v(x,y)+I_t(x,y,t))^2+\\lambda(||\\triangledown u(x,y||)^2+||\\triangledown v(x,y||)^2]dxdy\\)</p> <p>which leads to the following discretized objective:</p> <p></p> <ul> <li>The HS results are quite plausible already</li> <li>However, the flow is very smooth, i.e., to overcome ambituities we need to set \\(\u03bb\\) to a high value which oversmooths flow discontinuities. Why?</li> <li>We use a quadratic penalty for penalizing changes in the flow</li> <li>This does not allow for discontinuities in the flow field</li> <li>In other words, it penalizes large changes too much and causes oversmoothing</li> </ul>"},{"location":"CV/ML-4360/PGM/lec5/#robust-estimation-of-optical-flow","title":"Robust Estimation of Optical Flow","text":"<ul> <li>Gibbs Energy \\(E(u,v) \\approx \\iint [(I_x(x,y,t)u(x,y)+I_y(x,y,t)v(x,y)+I_t(x,y,t))^2+\\lambda(||\\triangledown u(x,y||)^2+||\\triangledown v(x,y||)^2]dxdy\\)</li> </ul> <ul> <li>Both assumptions are invalid (e.g., discontinuities at object boundaries). Why? <p>The text points out the invalidity of two assumptions. Firstly, the assumption of having a smooth probability distribution in the image at object boundaries is invalid because object boundaries typically exhibit discontinuities, whereas Gaussian distributions assume continuity.</p> </li> <li>Gaussian distributions correspond to squared loss functions <p>Gaussian distributions correspond to quadratic loss functions. This means that using Gaussian distributions to model smoothness is equivalent to using squared terms in the loss function, which is somewhat sensitive to outliers.</p> </li> <li>Squared loss functions are not robust to outliers! <p>Squared loss functions are not sufficiently robust to outliers. This means that in the presence of outliers, using squared loss functions may lead to larger errors, as they heavily influence the process of minimizing the error.</p> </li> <li>Outliers occur at object boundaries (violation of smoothness/regularizer) <p>Outliers typically occur at object boundaries, violating the assumptions of smoothness and regularization. Object boundaries usually have sharp transitions, so outliers may occur in these areas.</p> </li> <li>Outliers occur at specular highlights (violation of photoconsistency/data term) <p>Outliers may also occur at specular highlights, violating the assumptions of photoconsistency and data terms. Specular highlights often result in very high brightness or intensity in image regions, which may differ significantly from the surrounding areas, thus being considered outliers.</p> </li> </ul> <p> </p>"},{"location":"CV/ML-4360/PGM/lec5/#learning-in-graphical-models","title":"Learning in Graphical Models","text":""},{"location":"CV/ML-4360/PGM/lec5/#conditional-random-fields","title":"Conditional Random Fields","text":"<p>\\(p(x_1,...,x_{100})= \\frac{1}{\\bold{Z}}exp\\{\\sum_i\u03c8_i(x_i)+\u03bb\\sum_{i\\to j}\u03c8_{ij}(x_i,x_j)\\}\\) * How to estimate the parameters , say \\(\\lambda\\) </p>"},{"location":"CV/ML-4360/PGM/lec5/#parameter-estimation","title":"Parameter Estimation","text":"<ul> <li>Refer to PPT</li> </ul>"},{"location":"CV/ML-4360/PGM/lec5/#deep-structured-models","title":"Deep Structured Models","text":"<ul> <li>Refer to PPT</li> </ul>"},{"location":"CV/ML-4360/Recognition/lec10/","title":"Recognition","text":"<p>"},{"location":"CV/ML-4360/Recognition/lec10/#object-detection","title":"Object Detection","text":"<p>Input: Single RGB Image</p> <p>Output: A set of detected objects:</p> <ul> <li>Category label (from fixed, known set of categories)</li> <li>Boundingbox (four numbers: \\(x, y, width, height\\)\u200b)</li> </ul> <p>Challenges</p> <ul> <li>Multiple outputs: Need to output variable numbers of objects per image</li> <li>Multiple types of output: Need to predict what (category label) as well as where (bounding box)</li> <li>Large images: Classification works at 224x224; need higher resolution for detection, often ~800x600</li> </ul> <p></p> <ul> <li>Refer to Slides</li> </ul>"},{"location":"CV/ML-4360/Recognition/lec10/#detecting-a-single-object","title":"Detecting a single object","text":""},{"location":"CV/ML-4360/Recognition/lec10/#detecting-multiple-objects","title":"Detecting Multiple Objects","text":""},{"location":"CV/ML-4360/Recognition/lec10/#sliding-window","title":"Sliding Window","text":"<ul> <li> <p>Apply a CNN to many different crops of the image, CNN classifies each crop as object or background</p> </li> <li> <p>We should consider all possible sizes and possible positions</p> </li> </ul> <p></p> <ul> <li>Really Bad!!</li> </ul> <p>Solutions</p> <p>Region Proposals</p> <ul> <li>Find a small set of boxes that are likely to cover all objects </li> <li>Often based on heuristics: e.g. look for \u201cblob-like\u201d image regions</li> <li>Relatively fast to run; e.g. Selective Search gives 2000 region proposals in a few seconds on CPU</li> </ul>"},{"location":"CV/ML-4360/Recognition/lec10/#r-cnn","title":"R-CNN","text":"<ul> <li> <p>Use MultiTask Loss</p> </li> <li> <p>Bbox : Modify the Region Proposals</p> </li> </ul>"},{"location":"CV/ML-4360/Recognition/lec10/#overlapping-boxes","title":"Overlapping Boxes","text":"<ul> <li>When transform is 0, output = proposal </li> </ul> <p>\\(L_2\\) regularization encourages leaving proposal unchanged.</p> <ul> <li>Scale / Translation invariance: </li> </ul> <p>Transform encodes relative difference between proposal and output; important since \\(CNN\\) doesn\u2019t see absolute size or position after cropping</p> <p></p>"},{"location":"CV/ML-4360/Recognition/lec10/#r-cnn-training","title":"R-CNN Training","text":"<ul> <li>Categorize each region proposal as positive, negative, or neutral based on overlap with ground-truth boxes:</li> </ul> <p>Positive: &gt; 0.5 IoU with a GT box</p> <p>Negative: &lt; 0.3 IoU with all GT boxes</p> <p>Neutral: between 0.3 and 0.5 IoU with GT boxes</p> <ul> <li>Crop pixels from each positive and negative proposal, resize to 224 x 224</li> </ul> <p></p>"},{"location":"CV/ML-4360/Recognition/lec10/#r-cnn-test-time","title":"R-CNN Test-Time","text":"<ul> <li>Run proposal method.</li> <li>Run CNN on each proposal to get class scores, transforms.</li> <li>Threshold class scores to get a set of detections.</li> </ul>"},{"location":"CV/ML-4360/Recognition/lec10/#comparing-boxes","title":"Comparing Boxes","text":""},{"location":"CV/ML-4360/Recognition/lec10/#overlapping-boxes_1","title":"Overlapping Boxes","text":"<p>Problem: Object detectors often output many overlapping detections:</p> <p>Solution: Post-process raw detections using Non-Max Suppression (NMS)</p> <p>Select next highest-scoring box</p> <p>Eliminate lower-scoring boxes with  IoU &gt; threshold (e.g. 0.7)</p> <p>If any boxes remain, GOTO 1</p> <p>Problem: NMS may eliminate \u201dgood\u201d boxes when objects are highly overlapping... </p> <p>no good solution =(</p> <ul> <li>Difficult to Tell From vey close objects / same object  overlapping</li> </ul>"},{"location":"CV/ML-4360/Recognition/lec10/#evaluating-object-detectors","title":"Evaluating Object Detectors","text":"<ul> <li>Precision : Frcation of our detections that are actually True</li> <li>Recall : Fraction of the Ground Truths that we hit .</li> </ul>"},{"location":"CV/ML-4360/Recognition/lec10/#fast-r-cnn","title":"Fast R-CNN","text":"<p>R-CNN Problem: Very slow! Need to do 2000 forward passes through CNN per image</p> <p>Idea: Overlapping proposals cause a lot of repeated work: same pixels processed many times. Can we avoid this?</p> <p></p> <ul> <li> <p>Per-Region network is relatively lightweight</p> </li> <li> <p>Most of the computation happens in backbone network; </p> </li> </ul> <p>this saves work for overlapping region proposals.</p> <ul> <li>Refer to Slides (Example)</li> </ul> <p>How to crop features?</p>"},{"location":"CV/ML-4360/Recognition/lec10/#cropping-features-roi-pool","title":"Cropping Features: RoI Pool","text":"<ul> <li>Problem: Slight misalignment due to snapping; different-sized subregions is weird</li> </ul>"},{"location":"CV/ML-4360/Recognition/lec10/#cropping-features-roi-align","title":"Cropping Features: RoI Align","text":"<ul> <li>Refer To Slides [Object Detectors]</li> </ul>"},{"location":"CV/ML-4360/Recognition/lec10/#region-proposal-network-rpn","title":"Region Proposal Network (RPN)","text":"<ul> <li>For positive anchors, also predict a transform that converting the anchor to the GT box (like R-CNN) Predict transforms with conv</li> </ul> <ul> <li>Positive anchors: &gt;= 0.7 IoU with some GT box (plus highest IoU to each GT)</li> <li>Negative anchors: &lt; 0.3 IoU with all GT boxes. Don\u2019t supervised transforms for negative boxes.</li> <li>Neutral anchors: between 0.3 and 0.7 IoU with all GT boxes; ignored during training</li> <li>At test-time, sort all K56 boxes by their positive score, take top 300 as our region proposals</li> </ul>"},{"location":"CV/ML-4360/Recognition/lec10/#dealing-with-scale","title":"Dealing With Scale","text":"<ul> <li>We need to detect objects of many different scales. How to improve scale invariance of the detector?</li> </ul> <p>Classic idea: build an image pyramid by resizing the image to different scales, then process each image scale independently.</p> <p></p> <p>Problem: Expensive! Don\u2019t share any computation between scales.</p> <ul> <li>Multiscale Features</li> </ul> <p></p> <ul> <li>Feature Pyramid Network</li> </ul> <p></p>"},{"location":"CV/ML-4360/Recognition/lec10/#single-stage-detectors-retinanet","title":"Single-Stage Detectors: RetinaNet","text":"<ul> <li>Refer to Slides</li> <li>Refer to Lec16</li> </ul>"},{"location":"CV/ML-4360/Recognition/lec10/#segmentation","title":"Segmentation","text":""},{"location":"CV/ML-4360/Recognition/lec10/#semantic-segmentation","title":"Semantic Segmentation","text":"<ul> <li>Label each pixel in the image with a category label</li> <li>Don\u2019t differentiate instances, only care about pixels</li> </ul> <p>Simple Idea : Sliding Window</p> <p>Use Fully Convolutional Network</p> <ul> <li>Design a network as a bunch of convolutional layers to make predictions for pixels all at once!</li> </ul> <p>Dose not have any pooling layers or fully connected layers.</p> <p></p> <p>Problem #1: Effective receptive field size is linear in number of conv layers: </p> <ul> <li>With L \\(3\\times3\\) conv layers, receptive field is \\(1+2L\\)\u200b</li> </ul> <p>Let's say we have L 3x3 convolutional layers. In a CNN, each neuron in a convolutional layer is connected to a small region of neurons from the previous layer, which is its receptive field. For a 3x3 convolutional kernel, the receptive field size is 3x3.</p> <p>Now, consider L 3x3 convolutional layers. In the first layer, the receptive field of each neuron is 3x3. In the second layer, the receptive field of each neuron relative to the input image will cover a larger area, which is the combination of receptive fields from the previous layer. Similarly, in the third layer, the receptive field relative to the input image will be even larger.</p> <p>Therefore, as the number of layers increases, the influence of each layer on the input image gradually expands. Assuming each convolutional layer has a stride of 1, and there are no pooling layers or padding, after L 3x3 convolutional layers, the receptive field size relative to the input image for each neuron will be 1 plus twice the number of convolutional layers, denoted as 1+2L.</p> <p>Problem #2: Convolution on high res images is expensive! Recall ResNet stem aggressively downsamples</p> <p></p>"},{"location":"CV/ML-4360/Recognition/lec10/#in-network-upsampling-unpooling","title":"In-Network Upsampling: \u201cUnpooling\u201d","text":"<ul> <li>Simple Idea</li> </ul> <ul> <li>Bilinear Interpolation</li> </ul> <p>Refer to Slides</p> <ul> <li>Max Unpooling</li> </ul> <p>Refer to Slides</p> <ul> <li> <p>Learnable Upsampling: Transposed Convolution</p> </li> <li> <p>Convolution with stride &gt; 1 is \u201cLearnable Downsampling\u201d</p> </li> <li>Can we use stride &lt; 1 for \u201cLearnable Upsampling\u201d?</li> </ul> <p></p> <ul> <li>1D Example - Refer to Slides</li> <li>Convolution as Matrix Multiplication (1D Example)</li> </ul> <p></p>"},{"location":"CV/ML-4360/Recognition/lec10/#instance-segmentation","title":"Instance Segmentation","text":"<ul> <li> <p>Detect all objects in the image, and identify the pixels that belong to each object (Only things!)</p> </li> <li> <p>Approach: Perform object detection, then predict a segmentation mask for each object!</p> </li> </ul> <p></p> <ul> <li>Refer to Slides</li> </ul>"},{"location":"CV/ML-4360/Recognition/lec10/#mask-r-cnn","title":"Mask R-CNN","text":""},{"location":"CV/ML-4360/SFM/lec3/","title":"structure from motion","text":"<p>"},{"location":"CV/ML-4360/SFM/lec3/#structure-form-motion","title":"Structure Form Motion","text":""},{"location":"CV/ML-4360/SFM/lec3/#preliminarynaries","title":"preliminarynaries","text":""},{"location":"CV/ML-4360/SFM/lec3/#point-features","title":"Point Features","text":"<ul> <li>Point features describe the appearance of local, salient regions in an image</li> <li>They can be used to describe and match images taken from different viewpoints</li> <li>They form the basis of sparse 3D reconstruction methods covered in this lecture</li> <li>Features should be invariant to perspective effects and illumination</li> <li>The same point should have similar vectors independent of pose/viewpoint</li> <li>Plain RGB/intensity patches will not have this property, we need something better</li> </ul>"},{"location":"CV/ML-4360/SFM/lec3/#scale-invariant-feature-transform-sift","title":"Scale Invariant Feature Transform (SIFT)","text":"<p>Reference to https://medium.com/@deepanshut041/introduction-to-sift-scale-invariant-feature-transform-65d7f3a72d40 https://www.qixinbo.info/2021/10/26/sift/</p> <ul> <li>SIFT constructs a scale space by iteratively filtering the image with a Gaussian</li> <li>Adjacent scales are subtracted, yielding Difference of Gaussian (DoG) images</li> <li>Interest points (=blobs) are detected as extrema in the resulting scale space</li> </ul>"},{"location":"CV/ML-4360/SFM/lec3/#1-scale","title":"(1) Scale","text":"<p>\\(L(x,y,\u03c3)=G(x,y,\u03c3)\u2217I(x,y)\\)</p> <p>Note \uff1a\u5377\u79ef</p> <p>\u8fde\u7eed\u5f62\u5f0f\uff1a</p> <p>\\((f\u2217g)(n)=\\int_{-\\infty }^{\\infty}f(\\tau )g(n-\\tau)d\\tau\\)</p> <p>\u79bb\u6563\u5f62\u5f0f\uff1a</p> <p>\\((f\u2217g)(n)=\\sum_{\\tau=-\\infty }^{\\infty}f(\\tau)g(n-\\tau)\\)</p> <p>\u5bf9\u56fe\u50cf\u7684\u5904\u7406\u51fd\u6570\uff08\u5982\u5e73\u6ed1\uff0c\u6216\u8005\u8fb9\u7f18\u63d0\u53d6\uff09\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e00\u4e2ag\u77e9\u9635\u6765\u8868\u793a\uff0c\u5982\uff1a</p> <p>\\(g=\\begin{bmatrix} &amp;b_{-1,-1} &amp;b_{-1,0} &amp;b_{-1,1}\\\\ &amp;b_{0,-1} &amp;b_{0,0} &amp;b_{0,1} \\\\ &amp;b_{1,-1} &amp;b_{1,0} &amp;b_{1,1} \\end{bmatrix}\\)</p> <p>\\(f(x,y)=a_{x,y}\\)</p> <p>\\(g(x,y)=b_{x,y}\\)</p> <p>\u6309\u5377\u79ef\u7684\u5b9a\u4e49\uff0c\u4e8c\u7ef4\u79bb\u6563\u5f62\u5f0f\u7684\u5377\u79ef\u516c\u5f0f\u5e94\u8be5\u662f\uff1a</p> <p>\\((f\u2217g)(u,v)=\u2211_i\u2211_jf(i,j)g(u-i,v-j)=\\sum_{i} \\sum_{j} a_{i,j} b_{u-i,v-j}\\)</p> <p></p> <p>\u9996\u5148\u6211\u4eec\u5728\u539f\u59cb\u56fe\u50cf\u77e9\u9635\u4e2d\u53d6\u51fa\uff08u,v)\u5904\u7684\u77e9\u9635\uff1a</p> <p>\\(f=\\begin{bmatrix} &amp;a_{u-1,v-1} &amp;a_{u-1,v} &amp;a_{u-1,v+1}\\\\ &amp;a_{u,v-1} &amp;a_{u,v} &amp;a_{u,v+1} \\\\ &amp;a_{u+1,v-1} &amp;a_{u+1,v} &amp;a_{u+1,v+1} \\end{bmatrix}\\)</p> <p>\u7136\u540e\u5c06\u56fe\u50cf\u5904\u7406\u77e9\u9635\u7ffb\u8f6c</p> <ul> <li>\u539f\u59cb\u77e9\u9635\uff1a</li> </ul> <p></p> <ul> <li>\u7ffb\u8f6c\u540e\u7684\u77e9\u9635\uff1a</li> </ul> <p>\\((g^{'}=\\begin{bmatrix} &amp;b_{1,1} &amp;b_{1,0} &amp;b_{1,-1}\\\\ &amp;b_{0,1} &amp;b_{0,0} &amp;b_{0,-1} \\\\ &amp;b_{-1,1} &amp;b_{-1,0} &amp;b_{-1,-1} \\end{bmatrix}\\)</p>"},{"location":"CV/ML-4360/SFM/lec3/#2construct-the-gaussian-pyramid","title":"(2)Construct the Gaussian Pyramid","text":"<ul> <li>Apply Gaussian blur at different scales to the image.</li> <li>Downsample the image, typically reducing it by half in the horizontal and vertical directions before sampling.</li> <li>To reflect the continuity of scale space ,Gaussian pyramids perform Gaussian blurring in addition to simple downsampling.</li> <li>Different parameters are used for Gaussian blurring on each image in each level of the pyramid, resulting in multiple Gaussian-blurred images within each level of the pyramid. Here, each level of the pyramid with multiple images is referred to as a \"group\" (Octave).</li> <li>Each level of the pyramid contains one group of images, and it's easy to see that the number of groups is equal to the number of levels in the pyramid. Each image within a group is referred to as a \"layer\" (Interval) in that group.</li> <li>IGaussian pyramids consist of multiple groups, and each group contains multiple layers.</li> <li>The scales between the layers within a group are different (meaning different Gaussian parameters \u03c3 are used),and the scale difference between adjacent layers is a factor of k.</li> <li>If each group has S layers, then \\(k = 2^{1/S}\\). The bottommost image in the previous group is obtained by downsampling the image with a scale of 2\u03c3 from the previous group by a factor of 2 (Gaussian pyramids are built from the bottom-up).</li> </ul>"},{"location":"CV/ML-4360/SFM/lec3/#3difference-of-gaussian-dog","title":"(3)Difference of Gaussian (DoG)","text":"<p>Image feature points are composed of local extrema in the DoG (Difference of Gaussians) scale space. To find these extrema in the DoG space, each pixel is compared with all of its neighboring points to determine whether it is larger or smaller than its neighboring points in both the image domain and scale domain. As shown in the figure below, the central detection point is compared with its 8 neighboring points at the same scale and 18 points corresponding to the upper and lower adjacent scales, totaling 26 points to ensure the detection of extrema in both the two-dimensional image space and scale space. If a point is the maximum or minimum value among these 26 points in the DoG scale space at the current layer and the two neighboring layers, it is considered a feature point in the image at that scale.</p>"},{"location":"CV/ML-4360/SFM/lec3/#4keypoint-localization","title":"\uff084\uff09Keypoint Localization","text":"<p>Key0points generated in the previous step produce a lot of keypoints. Some of them lie along an edge, or they don\u2019t have enough contrast. In both cases, they are not as useful as features. So we get rid of them.  The approach is similar to the one used in the Harris Corner Detector for removing edge features. For low contrast features, we simply check their intensities.</p> <p>They used Taylor series expansion of scale space to get a more accurate location of extrema, and if the intensity at this extrema is less than a threshold value (0.03 as per the paper), it is rejected. DoG has a higher response for edges, so edges also need to be removed. They used a 2x2 Hessian matrix (H) to compute the principal curvature.</p> <p>Detailed explanation:</p> <ul> <li> <p>Keypoint Filtering: Keypoints generated in the previous step might include features along edges or those with low contrast, which may not be sufficiently prominent or useful. For features with low contrast, their intensities are examined. If the intensity is below a specified threshold (as mentioned in the paper, 0.03), the feature is excluded.</p> </li> <li> <p>Taylor Series Expansion: Utilizing a Taylor series expansion of the scale space to obtain a more accurate location of extrema, improving the precision of keypoint localization. Intensity Check and Exclusion: For extrema identified through the Taylor series expansion, their intensities are checked. If the intensity falls below the set threshold, they are excluded.</p> </li> <li> <p>Edge Removal: Due to the higher response of the Difference of Gaussians (DoG) for edges, further removal of edge features is necessary. A 2x2 Hessian matrix is employed to calculate the principal curvature. If the principal curvature is small, indicating the point may lie along an edge, it can be excluded.  (\\(f=\\frac{\\lambda_1\\lambda_2}{\\lambda_1+\\lambda_2}\\)) for the Harris operator Which means f is large indicates an edge</p> </li> </ul>"},{"location":"CV/ML-4360/SFM/lec3/#5-orientation-assignment","title":"(5) Orientation Assignment","text":"<p>Now we have legitimate keypoints. They\u2019ve been tested to be stable. We already know the scale at which the keypoint was detected (it\u2019s the same as the scale of the blurred image).  So we have scale invariance. The next thing is to assign an orientation to each keypoint to make it rotation invariance.</p> <p>A neighborhood is taken around the keypoint location depending on the scale, and the gradient magnitude and direction is calculated in that region.  An orientation histogram with 36 bins covering 360 degrees is created. Let's say the gradient direction at a certain point (in the \u201corientation collection region\u201d) is 18.759 degrees, then it will go into the 10\u201319-degree bin. And the \u201camount\u201d that is added to the bin is proportional to the magnitude of the gradient at that point. Once you\u2019ve done this for all pixels around the keypoint, the histogram will have a peak at some point.  The highest peak in the histogram is taken and any peak above 80% of it is also considered to calculate the orientation. It creates keypoints with same location and scale, but different directions. It contributes to the stability of matching.</p>"},{"location":"CV/ML-4360/SFM/lec3/#6keypoint-descriptor","title":"(6)Keypoint descriptor","text":"<p>At this point, each keypoint has a location, scale, orientation. Next is to compute a descriptor for the local image region about each keypoint that is highly distinctive and invariant as possible to variations such as changes in viewpoint and illumination.</p> <p>To do this, a 16x16 window around the keypoint is taken. It is divided into 16 sub-blocks of 4x4 size.  For each sub-block, 8 bin orientation histogram is created. </p> <p>So 4 X 4 descriptors over 16 X 16 sample array were used in practice. 4 X 4 X 8 directions give 128 bin values. It is represented as a feature vector to form keypoint descriptor. This feature vector introduces a few complications. We need to get rid of them before finalizing the fingerprint.</p> <ul> <li>Rotation dependence    The feature vector uses gradient orientations.    Clearly, if you rotate the image, everything changes. All gradient orientations also change.    To achieve rotation independence, the keypoint\u2019s rotation is subtracted from each orientation. Thus each gradient orientation is relative to the keypoint\u2019s orientation.</li> <li>Illumination dependence    If we threshold numbers that are big, we can achieve illumination independence. So, any number (of the 128) greater than 0.2 is changed to 0.2. This resultant feature vector is normalized again. And now you have an illumination independent feature vector!</li> </ul>"},{"location":"CV/ML-4360/SFM/lec3/#7keypoint-matching","title":"\uff087\uff09Keypoint Matching","text":"<ul> <li>Feature Descriptor Extraction:    For each detected feature point, SIFT calculates the gradient direction histogram in its surrounding neighborhood and arranges these histograms into a 128-dimensional vector, acting as the feature descriptor of this feature point. This step is based on the detection of keypoints, ensuring the scale and rotation invariance of the descriptor.</li> <li>Feature Matching:    A feature descriptor is used to find the nearest neighbor in the feature descriptor set of another image. The nearest neighbor distance measurement often uses Euclidean distance, meaning the smaller the distance, the higher the match. If no obvious nearest neighbor can be found, this feature point will be discarded and not used for further matching.</li> <li>Discarding Mismatches:    To enhance the reliability of matches, SIFT employs a ratio test to discard potential mismatches. This criterion involves the ratio of the distance of the nearest neighbor to that of the second nearest neighbor of a feature descriptor. If this ratio exceeds a predetermined threshold (such as 0.8), then the nearest neighbor is deemed a mismatch and should be discarded.</li> </ul>"},{"location":"CV/ML-4360/SFM/lec3/#epipolar-geometry","title":"Epipolar Geometry","text":"<ul> <li>Let \\(R\\) and \\(t\\) denote the relative pose between two perspective cameras </li> <li>A 3D point x is projected to pixel \\(\\bar{x}_1\\)in image 1 and to pixel \\(\\bar{x}_2\\) in image 2 </li> <li>The 3D point \\(x\\) and the two camera centers span the epipolar plane </li> <li>The correspondence of pixel \\(\\bar{x}_1\\) in image 2 must lie on the epipolar line \\(\\widetilde{l}_2\\)in image 2 </li> <li>All epipolar lines pass through the epipole</li> </ul>"},{"location":"CV/ML-4360/SFM/lec3/#equations","title":"Equations:","text":"<p>Let \\(K_i \u2208 R_{3\u00d73}\\)denote the camera matrix of camera \\(i\\).</p> <p>Let \\(\\widetilde{x}_i\\)= \\(K_i^{-1} x \u0304_i\\)denote the local ray direction of pixel \\(x \u0304_i\\) in camera \\(i\\).</p> <p>We have:</p> <ul> <li> <p>\\(\\tilde{x}_2 \u221d x_2 = Rx_1+t \u221d R\\tilde{x}_1+st\\)</p> </li> <li> <p>Taking the cross product of both sides with t we obtain:</p> </li> </ul> <p>\\([t]_\u00d7\\tilde{x}_2 \u221d [t]_\u00d7R\\tilde{x}_1\\)</p> <ul> <li>Taking the dotproduct of both sides with\\(\\tilde{x}^\u22a4_2\\)yields (triple product):</li> </ul> <p>$\\tilde{x}^\u22a4_2 [t]\u00d7R\\tilde{x}_1 \u221d \\tilde{x}^\u22a4_2 [t]\u00d7\\tilde{x}2 = 0 $</p> <p>\\(\u21d2 \\tilde{x}^\u22a4_2 [t]\u00d7R \\tilde{x}_1 = 0\\)</p> <ul> <li>We arrive at the epipolar constraintwith essential matrix:</li> </ul> <p>\\(\\tilde{x}^\u22a4_2 \\tilde{E}\\tilde{x} _1 = 0\\) </p> <p>\\(\\widetilde{E} = [ t ] \u00d7 R\\)\u200b</p> <ul> <li> <p>\\(\\widetilde{E}\\) maps a point \\(\\tilde{x}_1\\) in image \\(1\\) to the corresponding epipolar line in image 2 \\(\\widetilde{l}_2=\\widetilde{E} \\tilde{x}_1\\)</p> </li> <li> <p>Similarly, by transposition, we obtain the epipolar line in image 1:\\(\\widetilde{l}_1 = \\widetilde{E}^\u22a4\\tilde{x}_2\\)</p> </li> <li> <p>For any point \\(\\tilde{x}_1\\)in the first image, the corresponding epipolar line \\(\\widetilde{l}_2 = \\widetilde{E}\\tilde{x}_1\\) in the second image passes through the so-called epipole \\(\\tilde{e}_2\\) which therefore satisfies</p> </li> </ul> <p>\\(\\widetilde{e}^\u22a4_2 \\ \\widetilde{l}_2 = \\widetilde{e}^\u22a4_2 \\widetilde{E}\\tilde{x}_1 = 0\\) for all \\(\\tilde{x}_1.\\)</p> <p>It follows that:\\(\\widetilde{e}^\u22a4_2 \\widetilde{E} = 0\\)</p> <p>Thus,  \\(\\tilde{e}^\u22a4_2\\)is the leftnull-space (left singular vector with singular value 0) of\\(\\widetilde{E}\\).</p> <p>Further:\\(\\widetilde{E}\\tilde{e}_1 = 0\\) Thus,\\(\\tilde{e}_1\\) is the rightnull-space (right singular vector with singular value 0)of  \\(\\widetilde{E}.\\)</p>"},{"location":"CV/ML-4360/SFM/lec3/#recover-r-t","title":"Recover \\(R\\ \\&amp;\\ t\\)","text":"<p>Derivation</p> <p>\\(\\tilde{x}_{2i}^T \\widetilde{E} \\tilde{x}_{1i}=0\\)</p> <p>\\(\\widetilde{E}=\\begin{pmatrix} e_{11} &amp; e_{12} &amp; e_{13} \\\\ e_{21} &amp; e_{22} &amp; e_{23} \\\\ e_{31} &amp; e_{32} &amp; e_{33} \\end{pmatrix} \\ \\ \\ \\ \\ \\ \\ \\ E = \\begin{pmatrix} e_{11} \\\\ e_{12} \\\\ e_{13} \\\\ e_{21} \\\\ e_{22} \\\\ e_{23} \\\\ e_{31} \\\\ e_{32} \\\\ e_{33} \\end{pmatrix}\\)\\(\\Rightarrow x_1x_2e_{11} + y_1x_2e_{12} + x_2e_{13}+ x_1y_2e_{21} + y_1y_2e_{22} + y_2e_{23}+ x_1e_{31} + y_1e_{32} + e_{33 }= 0\\)</p> <ul> <li>As \\(\\widetilde{E}\\) is homogeneous we use singular value decomposition to constrain the scale.</li> <li>Note that some terms are products of two image measurements and hence amplify measurement noise asymmetrically. Thus, the normalized 8-point algorithm whitens the observations to have zero-mean and unit variance before the calculation and back-transforms the matrix recovered by \\(SVD\\) accordingly.</li> </ul>"},{"location":"CV/ML-4360/SFM/lec3/#svd-method","title":"SVD Method","text":"<ul> <li> <p>Rearranging the product, so \\(E\\) is on the left hand side:\\(\\tilde{x}_2^T\\tilde{E}\\tilde{x}_1 =\\begin{pmatrix} x_{11}x_{12} &amp; y_{11}x_{12} &amp; x_{12}&amp;x_{11}y_{12}&amp;y_{11}y_{12}&amp;y_{12}&amp;x_{11}&amp;y_{11}&amp;1 \\\\ \u2026\u2026 \\\\ x_{i1}x_{i2} &amp; y_{i1}x_{i2} &amp; x_{i2}&amp;x_{i1}y_{i2}&amp;y_{i1}y_{i2}&amp;y_{i2}&amp;x_{i1}&amp;y_{i1}&amp;1 \\\\\u2026\u2026 \\\\x_{81}x_{82} &amp; y_{81}x_{82} &amp; x_{82}&amp;x_{81}y_{82}&amp;y_{81}y_{82}&amp;y_{82}&amp;x_{81}&amp;y_{81}&amp;1\\end{pmatrix} \\begin{pmatrix} e_{11} \\\\ e_{12} \\\\ e_{13} \\\\ e_{21} \\\\ e_{22} \\\\ e_{23} \\\\ e_{31} \\\\ e_{32} \\\\ e_{33} \\end{pmatrix} =0\\)\\(\\Rightarrow AE = 0\\)</p> </li> <li> <p>If there are more than 8 point correspondences, the system is usually over-determined and an exact solution is not possible. Instead, we solve a least squares problem for AE</p> </li> <li>\\(min(||AE||),||E||=1\\)\u200b</li> </ul> <p>\u6211\u7684\u7406\u89e3\uff1a\u5e76\u4e0d\u662f\u8bf4\\(E\\) \u7684\u8303\u6570\u5c31\u662f1 \u800c\u662f\u5728\u8ba1\u7b97 \\(min(||AE||)\\)\u65f6\uff0c\u7b49\u540c\u4e8e\u8ba1\u7b97 minimize \\(||AE||\\) subject to \\(||x||^2=1\\)\u200b</p> <p></p> <p>\u52d8\u8bef x is the last column of V</p> <p>Credits to Carnegie Mellon University and Kris Kitani, http://www.cs.cmu.edu/~16385/s17/Slides/11.5_SVD.pdf</p>"},{"location":"CV/ML-4360/SFM/lec3/#properties-of-the-tildee","title":"Properties of the \\(\\tilde{E}\\)","text":"<ul> <li> <p>by readjustment:</p> </li> <li> <p>\\(\\widetilde{E} =\\begin{bmatrix} u_0&amp;u_1&amp;u_2 \\end{bmatrix}\\begin{bmatrix} s&amp;0&amp;0\\\\0&amp;s&amp;0\\\\0&amp;0&amp;0 \\end{bmatrix} \\begin{bmatrix}v_0^T\\\\v_1^T\\\\v_2^T \\end{bmatrix} =U\\sum V^T\\)</p> </li> <li> <p>\\(s=\\frac{\\lambda_1+\\lambda_2}{2}\\) \\(\\lambda_1\\ge \\lambda_2\\ge\\lambda_3\\)</p> </li> <li> <p>Proof</p> </li> </ul> <p>\u5177\u4f53\u8bc1\u660e\u89c1 https://blog.csdn.net/weixin_44387324/article/details/119182590</p> <ul> <li>Thus we have</li> </ul> <p>\\(W=\\begin{bmatrix} 0&amp;-1&amp;0\\\\1&amp;0&amp;0\\\\0&amp;0&amp;1 \\\\ \\end{bmatrix} \\\\ t_x=UW\\sum U^T \\\\ R=UW^{-1}V^T \\\\E=U\\sum V^T\\)</p>"},{"location":"CV/ML-4360/SFM/lec3/#fundamental-matrix-if-k_i-unknown","title":"Fundamental matrix (if \\(K_i\\) unknown):","text":"<ul> <li>\\(\\tilde{x}_2^T\\tilde{E}\\widetilde{x}_1=\\bar{x_2}^T\\tilde{F}\\bar{x}_1\\)</li> <li>\\(\\widetilde{F} = K_2^{-1}\\widetilde{E} K_1^{-1}\\)</li> </ul>"},{"location":"CV/ML-4360/SFM/lec3/#triangulation","title":"Triangulation","text":"<p>Let \\(\\tilde{x}^s_i = \\widetilde{P}_ i \\tilde{x}_w\\) denote the projection of a 3D world point \\(\\tilde{x}_w\\) onto the image of the i\u2019th camera \\(\\tilde{x}^s_i\\).</p> <p>Consider the cross product \\(x \u0304^s_i \u00d7 \\tilde{P}_i\\tilde{x}_w =0\\).</p> <ul> <li>Using \\(\\tilde{p}^\u22a4_{ik}\\) to denote the k\u2019th row of the i\u2019th camera\u2019s projection matrix \\(\\widetilde{P_i}\\), we obtain:</li> </ul> <p>\\(\\begin{bmatrix}x^s_i\\widetilde{p}_{i3}^T - \\widetilde{p}_{i1}^T \\\\ y^s_i\\widetilde{p}_{i3}^T - \\widetilde{p}_{i2}^T \\end{bmatrix}\\widetilde{x}_w=0\\) \\([\\bar{x}_i^s=(x_i^s,y_i^s,1)]\\) </p> <ul> <li> <p>Stacking \\(N \u2265 2\\) observations of a point, we obtain a linear system \\(A\\tilde{x}_w = 0.\\)</p> </li> <li> <p>As \\(\\tilde{x}_w\\)\u200b is homogeneous this leads to a constrained least squares problem. </p> </li> </ul> <p>The solution to this problem is the right singular vector corresponding to the smallest singular value of A.</p> <p>This is the Direct Linear Transformation we are already familiar with from \\(Lecture 2\\).</p> <ul> <li> <p>Direcr Linear Transformation https://medium.com/@insight-in-plain-sight/estimating-the-homography-matrix-with-the-direct-linear-transform-dlt-ec6bbb82ee2b</p> </li> <li> <p>Proof  https://blog.csdn.net/u011178262/article/details/86729887</p> </li> <li> <p>Reprojection Error Minimization:</p> </li> </ul> <p>While DLT often works well, it is not invariant to perspective transformations.The gold standard is to minimize the reprojection error using numerical methods:</p> <p></p> <ul> <li>This allows to take measurement noise appropriately into account</li> <li>The minimum can also be obtained in closed form as the solution of a sixth degree polynomial, see Hartley &amp; Zisserman, Section 12.5 for details.</li> </ul>"},{"location":"CV/ML-4360/SFM/lec3/#factorization","title":"Factorization","text":""},{"location":"CV/ML-4360/SFM/lec3/#orthographic-factorization","title":"Orthographic Factorization","text":""},{"location":"CV/ML-4360/SFM/lec3/#algorithm","title":"Algorithm:","text":"<p>1.Take measurements \\(\\hat{W}\\)</p> <p>2.Compute SVD $\\hat{W} = U\u03a3V^\u22a4 $and keep the top 3 SVs</p> <p>3.Define\\(\\hat{R} =U\u03a3^{\\frac{1}{2}}\\) and \\(\\hat{X} =\\sum^{\\frac{1}{2}}V^T\\)</p> <p>4.Compute \\(QQ^\u22a4\\) and from this Q</p> <p>5.Compute\\(R=\\hat{R}Q\\)and\\(X=Q^{-1}\\hat{X}\\)</p> <p>Remarks:</p> <ul> <li>Advantage: closed form solution (determined up to an arbitrary global rotation)</li> <li>Disadvantage: complete feature tracks required (\u21d2 cannot handle occlusions)</li> <li>Solution: Apply to subsets of features/frames and propagate (see T&amp;K, Sec. 5)</li> </ul>"},{"location":"CV/ML-4360/SFM/lec3/#bundle-adjustment","title":"Bundle Adjustment","text":""},{"location":"CV/ML-4360/SFM/lec3/#appendix","title":"Appendix","text":"<ul> <li>CNN https://www.zhihu.com/question/52668301/answer/1231346589</li> </ul>"},{"location":"CV/ML-4360/SFX/lec8/","title":"Shape-From-X","text":"<p>"},{"location":"CV/ML-4360/SFX/lec8/#shape-from-shading","title":"Shape-from-Shading","text":""},{"location":"CV/ML-4360/SFX/lec8/#recap-rendering-equation","title":"Recap: Rendering Equation","text":"<ul> <li>\\(BRDF\\) : \\(Radience_{out}/Irradiance_{in}\\)\u200b</li> </ul>"},{"location":"CV/ML-4360/SFX/lec8/#simplifying-the-rendering-equation","title":"Simplifying the Rendering Equation","text":"<p>Dropping the dependency on \u03bb and p for notational simplicity, and considering a single point light source located in direction s, the rendering equation simplifies as follows:</p> <p>\\(L_{out}(v)=BRDF(s,v)\u00b7L_{in}\u00b7(-n^{T}\u00b7s)\\) </p> <p>Assuming a purely diffuse material with albedo (=diffuse reflectance) BRDF(s, v) = \u03c1 \uff0c further simplifies to the following equation (Lout becomes independent of v): \\(L_{out} = \u03c1 \u00b7 L_{in} \u00b7 (\u2212n^\u22a4\u00b7s)\\)</p> <p></p> <p>For simplicity, we further eliminate the minus sign by reversing the orientation (definition) of the light ray s and obtain:</p> <p>\\(L_{out} = \u03c1 \u00b7 L_{in} \u00b7 n^\u22a4s\\)</p> <p></p>"},{"location":"CV/ML-4360/SFX/lec8/#shape-from-shading_1","title":"Shape-from-Shading","text":"<p>Gradient Space Representation</p> <ul> <li>2 degrees of freedom of \\(\\vec{n}\\)\u200b</li> </ul> <p>\u200b   \\((p,q)=(-\\frac{\\partial z}{\\partial x},-\\frac{\\partial z}{\\partial y})\\)</p> <p>\u200b   \\(\\vec{n}=\\frac{(p,q,1)^T}{\\sqrt{p^2+q^2+1}}\\)</p> <ul> <li>Assuming \\(\u03c1 \u00b7 L_{in} = 1\\), the reflectance becomes:</li> </ul> <p>\\(R(n)=n^Ts=\\frac{ps_x+qs_y+s_z}{1+\\sqrt{p^2+q^2+1}}=R(p,q)\\)</p> <p></p> <p>Reflectance Map</p> <p></p> <p></p> <p></p> <ul> <li>The stereographic mapping projects each point on the surface of the sphere, along a ray from one pole, onto a plane tangent to the opposite pole.</li> </ul> <p>Shape-from-Shading Formulation</p> <ul> <li> <p>Assumption: image irradiance (=intensity) should equal the reflectance map:\\(I(x, y) = R(f(x, y), g(x, y))\\)</p> </li> <li> <p>SfS thus minimizes:</p> </li> </ul> <p>\\(E_{image}(f,g)=\\iint (I(x,y)-R(f,g))^2dxdy\\)\u200b</p> <ul> <li>Goal: Penalize errors between image irradiance and reflectance map</li> </ul> <p>However, as we have seen, this problem is ill-posed (unknowns &gt; observations)</p> <p>Numerical Shape-from-Shading</p> <p>To constrain this ill-posed problem, SfS exploits two additional constraints:</p> <ul> <li>Smmothness:</li> </ul> <p>Goal: Penalize rapid changes in surface gradients \\(f\\) and \\(g\\)</p> <p>\u200b   \\(E_{smooth}(f,g)=\\iint (f_x^2+f_y^2+g_x^2+g_y^2)dxdy\\) with gradients \\(f_x=\\frac{\\partial f}{\\partial x}\\) \\(f_y=\\frac{\\partial f}{\\partial y}\\)\u200b\u200b</p> <ul> <li>Occluding Boundaries:</li> </ul> <p>Goal: Constrain normals at occluding boundaries where they are known</p> <p>\u200b   </p> <p></p>"},{"location":"CV/ML-4360/SFX/lec8/#surface-integration","title":"Surface Integration","text":"<p>Given the surface gradients (from above methods) \\((p,q)=(-\\frac{\\partial z}{\\partial x},-\\frac{\\partial z}{\\partial y})\\) how can we recover the 3D surface / depth map?</p> <p>Assuming a smooth surface, we can solve the following variational problem</p> <p>$E(z)=\\iint[(\\frac{\\partial z}{\\partial x}+p)^2+(\\frac{\\partial z}{\\partial y}+q)^2]dxdy $\u200b\u200b </p> <p>efficiently using the discrete Fast Fourier Transform (Frankot and Chellappa, 1988).</p> <p></p>"},{"location":"CV/ML-4360/SFX/lec8/#photometric-stereo","title":"Photometric Stereo","text":"<ul> <li> <p>Instead of smoothness constraints, add more observations per pixel</p> </li> <li> <p>Take K images of the object from same viewpoint (e.g., with a tripod) but with different (known) point light source each</p> </li> </ul> <p></p> <ul> <li> <p>Per-pixel estimation of normal and albedo or material</p> </li> <li> <p>Also assumes far camera/light</p> </li> </ul>"},{"location":"CV/ML-4360/SFX/lec8/#reflectance-maps","title":"Reflectance Maps","text":""},{"location":"CV/ML-4360/SFX/lec8/#photometric-stereo-formulation","title":"Photometric Stereo Formulation","text":"<ul> <li>If \\(s_3 = \u03b1s_1 + \u03b2s_2\\)</li> </ul> <p>i.e., if all three light sources \\(s_1, s_2, s_3\\) and the origin \\(p\\) lie on a 3D plane, the linear system becomes rank-deficient and thus there exists no unique solution \\(\\tilde{n} = S^{-1}I\\)\u200b.</p> <ul> <li>Better results can be obtained by using more images (by averaging noise):</li> </ul> <p></p>"},{"location":"CV/ML-4360/SFX/lec8/#photometric-stereo-algorithm","title":"Photometric Stereo Algorithm","text":"<ol> <li>Compute surface normals and albedo values (per pixel) </li> <li>Integrate depth from surface normals</li> <li>Relight the object (here: with uniform albedo)</li> </ol> <ul> <li>For color images, apply PS to each channel separately to obtain color albedo</li> <li>Deviations from Lambertian assumption and global illumination cause errors</li> </ul>"},{"location":"CV/ML-4360/SFX/lec8/#deep-uncalibrated-photometric-stereonot-single-light-ray","title":"Deep Uncalibrated Photometric Stereo\uff08not single light ray)","text":""},{"location":"CV/ML-4360/SFX/lec8/#shape-from-x","title":"Shape-from-X","text":"<p>Refer to PPT</p>"},{"location":"CV/ML-4360/SFX/lec8/#volumetric-fusion","title":"Volumetric Fusion","text":""},{"location":"CV/ML-4360/SFX/lec8/#representation","title":"Representation","text":"<ul> <li>Explicit </li> </ul> <ul> <li>Implicit</li> </ul> <p>3 Steps:</p> <ul> <li>Depth-to-SDF Conversion </li> <li>Volumetric Fusion</li> <li>Mesh Extraction</li> </ul>"},{"location":"CV/ML-4360/SFX/lec8/#depth-to-sdf-conversion","title":"Depth-to-SDF Conversion","text":"<p>As the distance to surface is unknown, approximate it with distance along ray</p> <ul> <li>Take the voxel center that intersect with a particular ray and meaure the distance</li> </ul> <p></p> <p>This approximation is good only in the vincinity of the surface (often suffices)</p>"},{"location":"CV/ML-4360/SFX/lec8/#volumetric-fusion_1","title":"Volumetric Fusion","text":"<ul> <li>Orthographic Example</li> </ul> <p>After conversion, calculate average of the discrete SDF fields</p> <p>The implicit surface will be an average of the two original ones</p> <p></p> <ul> <li>Formulation</li> </ul> <p></p> <ul> <li>Thus constant time</li> </ul> <p></p>"},{"location":"CV/ML-4360/SFX/lec8/#mesh-extraction","title":"Mesh Extraction","text":""},{"location":"CV/ML-4360/SFX/lec8/#applications","title":"Applications","text":""},{"location":"CV/ML-4360/SFX/lec8/#kinectfusion","title":"KinectFusion","text":""},{"location":"CV/ML-4360/SFX/lec8/#dynamicfusion","title":"DynamicFusion","text":""},{"location":"CV/ML-4360/SFX/lec8/#octnetfusion","title":"OctNetFusion","text":""},{"location":"CV/ML-4360/SFX/lec8/#deep-marching-cubes","title":"Deep Marching Cubes","text":""},{"location":"CV/ML-4360/SR/lec4/","title":"Stereo Reconstruction","text":"<p>"},{"location":"CV/ML-4360/SR/lec4/#stereo-reconstruction","title":"Stereo Reconstruction","text":""},{"location":"CV/ML-4360/SR/lec4/#preliminaries","title":"Preliminaries","text":""},{"location":"CV/ML-4360/SR/lec4/#epipolar-geometry","title":"Epipolar Geometry","text":"<ul> <li>A point  \\(\\bar{x}\\)  in the left image must be located on the epipolar line  \\(\\tilde{l}_2\\)</li> <li>This reduces correspondence search to a (much simpler) 1D problem I For VGA images: \uff5e640 instead of \uff5e300k hypotheses (factor 480 less)</li> </ul>"},{"location":"CV/ML-4360/SR/lec4/#image-rectification","title":"Image Rectification","text":"<p>What if both cameras face exactly the same direction?</p> <p></p> <ul> <li>Image planes are co-planar \u21d2 Epipoles at infinity, epipolar lines parallel.</li> <li>Correspondences search along horizontal scanlines (simplifies implementation)</li> <li> <p>Let\\(K_1 = K_2 = R = I\\) and \\(t = (t,0,0)^\u22a4\\)</p> </li> <li> <p>\\(\\bar{x}_2^T\\tilde{E}\\bar{x}_1=\\bar{x_2}^T \\begin{bmatrix}0&amp;0&amp;0\\\\0&amp;0&amp;-t\\\\0&amp;t&amp;0\\end{bmatrix}\\bar{x1}=ty_1-ty_2=0\\)</p> </li> <li> <p>Thus \\(y_1=y_2\\)</p> </li> </ul> <p>What if the images are not in the required setup?</p> <ul> <li>There is a trick: We can rewarp them through rotation, mapping both image planes to a common plane parallel to the baseline, this is called  rectification</li> <li>For this rotation around the camera center, the 3D structure must not be known </li> </ul> <p>How can we make epipolar lines horizontal?</p> <p></p> <p>Step1:Estimate\\(\\tilde{E}\\) , decompose into \\(t\\)  and \\(R\\)</p> <p>Step2: Find \\(R_{rect}\\) </p> <ul> <li> <p>Choose \\(OO^\u2032=\\vec{T}=(t_x,t_y,t_z)^T\\)</p> </li> <li> <p>\\(e_1=\\frac{T}{\u2223\u2223T\u2223\u2223}\\)</p> </li> <li> <p>\\(e_2=\\frac{1}{\\sqrt{T_x^2+T_y^2}}(-T_y,T_x,0)^T= [(0, 0, 1)^\u22a4]\u00d7r_1\\)</p> </li> <li> <p>\\(e_3=e_2\\) x \\(e_1\\)</p> </li> </ul> <p>\\(\\Rightarrow R_{rect}=\\begin{bmatrix}e_1^T\\\\e_2^T\\\\e_3^T\\end{bmatrix}\\)</p> <p>Step3  :  Adjust \\(\\tilde{x}_i\\)</p> <ul> <li>Warp pixels in the first image as follows: \\(\\tilde{x}_1^{'}= KR_{rect}K_1^{-1}x \u0304_1\\)</li> <li> <p>Warp pixels in the second image as follows: \\(\\tilde{x}_2^{'}=KRR_{rect}K_2^{-1}x \u0304_2\\)</p> </li> <li> <p>NOTE \uff1aDifferent coordinate systems result in different perception of \\(R_{rect}\\)</p> </li> </ul> <p>Thus the \\(R_{rect}^{'}=RR_{rect}\\)</p> <ul> <li> <p>\\(K\\) is a shared projection matrix that can be chosen arbitrarily (e.g., \\(K = K_1\\))</p> </li> <li> <p>In practice, the inverse transformation is used for warping (i.e. query the source)</p> </li> </ul>"},{"location":"CV/ML-4360/SR/lec4/#disparity-to-depth","title":"Disparity to Depth","text":""},{"location":"CV/ML-4360/SR/lec4/#block-matching","title":"Block Matching","text":"<ul> <li>Choose disparity range[0,D]</li> <li>For all pixels \\(x = (x, y)\\) compute the best disparity \u21d2 winner-takes-all (WTA)</li> <li>Do this for both images and apply left-right consistency check to remove outliers</li> </ul>"},{"location":"CV/ML-4360/SR/lec4/#zero-normalized-cross-correlation","title":"Zero Normalized Cross-Correlation","text":"<p>https://martin-thoma.com/zero-mean-normalized-cross-correlation/</p> <p></p>"},{"location":"CV/ML-4360/SR/lec4/#sum-of-squared-differences-ssd","title":"Sum of squared differences (SSD)","text":""},{"location":"CV/ML-4360/SR/lec4/#assumption-violations","title":"Assumption Violations","text":"<ul> <li>Block matching assumes that all pixels inside the window are displaced by d</li> </ul> <p>This is called the fronto-parallel assumption which is often invalid</p> <ul> <li> <p>Slanted surfaces deform perspectively when the viewpoint changes</p> </li> <li> <p>Effect of Window Size</p> </li> </ul> <p>Small windows lead to matching ambiguities and noise in the disparity maps</p> <p>Larger windows lead to smoother results, but loss of details and border bleeding</p> <p>Border Bleeding:</p> <p></p> <p></p> <ul> <li>Left-Right Consistency Test:</li> </ul>"},{"location":"CV/ML-4360/SR/lec4/#siamese-networks","title":"Siamese Networks","text":""},{"location":"CV/ML-4360/SR/lec4/#training","title":"Training","text":""},{"location":"CV/ML-4360/SR/lec4/#loss-function","title":"Loss Function","text":"<p>Hinge Loss:\\(L = max(0, m +\\ s_-\\ -\\ s_+)\\)</p> <ul> <li> <p>\\(s_- / s_+\\) is the score of the network for the negative/positive example</p> </li> <li> <p>The loss is zero when the similarity of the positive example is greater than the similarity of the negative example by at least margin m</p> </li> <li> <p>The network is trained by minimizing a hinge loss. </p> </li> <li> <p>The loss is computed by considering pairs of examples centered around the same image position where one example belongs to the positive and one to the negative class.</p> </li> <li> <p>Let \\(s_+\\)be the output of the network for the positive example, \\(s_-\\) be the output of the network for the negative example</p> </li> <li> <p>Let m, the margin, be a positive real number.</p> </li> <li> <p>The hinge loss for that pair of examples is defined as \\(L = max(0, m + s_- - s_+)\\) The loss is zero when the similarity of the positive example is greater than the similarity of the negative example by at least the margin m.</p> </li> <li> <p>Set the margin to 0.2 in our experiments.</p> </li> </ul>"},{"location":"CV/ML-4360/SR/lec4/#paper","title":"Paper","text":"<p>https://www.jmlr.org/papers/volume17/15-535/15-535.pdf</p>"},{"location":"CV/ML-4360/SR/lec4/#spatial-regularization","title":"Spatial Regularization","text":"<ul> <li> <p>Add Pairwise terms: Smoothness between adjacent pixels in addition to matching costs;</p> </li> <li> <p>Potts: \\(\u03c8_{smooth}(d, d^\u2032) = [d\\ne d^\u2032]\\)</p> </li> <li> <p>Truncated\\(l_1:\u03c8+{smooth}(d,d^\u2032)=min(|d-d^\u2032|,\u03c4)\\)</p> </li> <li> <p>Paper </p> </li> </ul> <p>https://dash.harvard.edu/bitstream/handle/1/3637107/Mumford_StatRangeImage.pdf?sequence=3&amp;isAllowed=y</p>"},{"location":"CV/ML-4360/SR/lec4/#end-to-end-learning","title":"End-to-End Learning","text":"<p>End to End learning in the context of AI and ML is a technique where the model learns all the steps between the initial input phase and the final output result. This is a deep learning process where all of the different parts are simultaneously trained instead of sequentially.</p>"},{"location":"CV/ML-4360/SR/lec4/#dispnet","title":"DISPNET","text":""},{"location":"CV/ML-4360/SR/lec4/#gcnet","title":"GCNET","text":""},{"location":"CV/ML-4360/SR/lec4/#stereo-mixture-density-networks-smd-nets","title":"STEREO MIXTURE DENSITY NETWORKS (SMD-NETS)","text":""},{"location":"CV/ML-4360/Self/lec/","title":"Self-Supervised Learning","text":"<p>"},{"location":"CV/ML-4360/Self/lec/#preliminaries","title":"Preliminaries","text":"<ul> <li>Refer to Slides</li> </ul> <p>Idea of self-supervision:</p> <ul> <li>Obtain labels from raw unlabeled data itself </li> <li>Predict parts of the data from other parts</li> </ul>"},{"location":"CV/ML-4360/Self/lec/#task-specific-models","title":"Task-specific Models","text":""},{"location":"CV/ML-4360/Self/lec/#unsupervised-learning-of-depth-and-ego-motion","title":"Unsupervised Learning of Depth and Ego-Motion","text":""},{"location":"CV/ML-4360/Self/lec/#depth-estimation-network","title":"Depth Estimation Network","text":"<p>Specifically, at training time, we have access to two images \\(I^l\\) and \\(I^r\\) , corresponding to the left and right color images from a calibrated stereo pair, captured at the same moment in time. </p> <p>Instead of trying to directly predict the depth, we attempt to find the dense correspondence field \\(d_r\\) that, when applied to the left image, would enable us to reconstruct the right image. We will refer to the reconstructed image \\(I^l(d_r)\\) as \\(\\tilde{I}^r\\)\u200b. Similarly, we can also estimate the left image given the right one, \\(\\tilde{I}^l =I^r(d_l)\\).</p> <p>Assuming that the images are rectified , \\(d\\) corresponds to the image disparity - a scalar value per pixel that our model will learn to predict. Given the baseline distance \\(b\\) between the cameras and the camera focal length \\(f\\), we can then trivially recover the depth \\(\\hat{d}\\) from the predicted disparity, \\(\\hat{d}=bf/d\\)\u200b\u200b\u200b.</p> <p>Simultaneously infer both disparities (left-to-right and right-to-left), using only the left input image, and obtain better depths by enforcing them to be consistent with each other.</p> <ul> <li>Naively learning to generate the right image by sampling from the left</li> </ul> <p></p>"},{"location":"CV/ML-4360/Self/lec/#digging-into-self-supervised-monocular-depth-estimation","title":"Digging Into Self-Supervised Monocular Depth Estimation","text":""},{"location":"CV/ML-4360/Self/lec/#unsupervised-learning-of-optical-flow","title":"Unsupervised Learning of Optical Flow","text":"<ul> <li>Refer to Slides and Paper.</li> </ul>"},{"location":"CV/ML-4360/Self/lec/#pretext-tasks","title":"Pretext Tasks","text":"<p>A pretext (adj: pretextual) is an excuse to do something or say something that is not accurate. Pretexts may be based on a half-truth or developed in the context of a misleading fabrication. Pretexts have been used to conceal the true purpose or rationale behind actions and words</p>"},{"location":"CV/ML-4360/Self/lec/#visual-representation-learning-by-context-prediction","title":"Visual Representation Learning by Context Prediction","text":"<ul> <li> <p>Care has to be taken to avoid trivial shortcuts (e.g., edge continuity)</p> </li> <li> <p>A network can predict the absolute image location of randomly sampled patches In this case, the relative location can be inferred easily. Why is this happening?</p> </li> </ul> <ul> <li>Aberration: Color channels shift with respect to the image location</li> </ul> <p>Solution: Random dropping of color channels or projection towards gray</p>"},{"location":"CV/ML-4360/Self/lec/#visual-representation-learning-by-solving-jigsaw-puzzles","title":"Visual Representation Learning by Solving Jigsaw Puzzles","text":"<ul> <li>Refer to Slides and Paper</li> </ul>"},{"location":"CV/ML-4360/Self/lec/#contrastive-learning","title":"Contrastive Learning","text":"<p>Can we find a more general pretext task?</p> <ul> <li>Pre-trained features should represent how images relate to each other</li> <li>They should also be invariant to nuisance factors (location, lighting, color)</li> <li>Augmentations generated from one reference image are called \u201cviews\u201d</li> </ul> <p>I Given a chosen score function \\(s(\u00b7, \u00b7)\\), we want to learn an encoder f that yields high score for positive pairs \\((x, x+)\\) and low score for negative pairs \\((x, x\u2212)\\):\\(s(f(x), f(x+)) \u226b s(f(x), f(x\u2212))\\)</p> <p></p> <p></p> <ul> <li>Remaining Refer To Slides and Paper</li> </ul>"},{"location":"CV/ML-4360/Self/lec/#barlow-twins","title":"Barlow Twins","text":"<ul> <li>Refer to Slides and Paper</li> </ul>"},{"location":"DIP/Basic/DIP/","title":"Basic concept and programming introduction","text":"<p>"},{"location":"DIP/Basic/DIP/#image-format","title":"Image Format","text":"<p>Digital image can be represented as a 2D array or matrix.</p> <ul> <li> <p>Grayscale:Each pixel in a grayscale image is represented by a byte (8 bits), which covers 256 degrees by [0..255] </p> </li> <li> <p>Colour image: Each pixel in a color image is represented by 3 bytes (24 bits), which are for R (red), G (Green) and B (Blue), respectively.</p> </li> </ul> <p>\u76ee\u7684\uff1a\u5b58\u50a8\u56fe\u50cf</p> <p>\u4fe1\u606f\u56fe\u50cf\u7279\u70b9\uff1a\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\uff0c\u77e9\u5f62\u533a\u57df\u4fe1\u606f\u91cf\u5927</p> <p>\u6709\u4e9b\u6587\u4ef6\u683c\u5f0f\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u6709\u5173\uff1awindows\u3001unix\u3001mac\u7f16\u7801\u65b9\u5f0f\uff1a\u65e0\u538b\u7f29\u3001\u65e0\u635f\u538b\u7f29\u3001\u6709\u635f\u538b\u7f29</p>"},{"location":"DIP/Basic/DIP/#1bmp","title":"1.BMP\u7684\u6587\u4ef6\u683c\u5f0f\uff1a","text":"<p>\u200b   BMP\uff08Bitmap\uff09\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u56fe\u50cf\u6587\u4ef6\u683c\u5f0f\uff0c\u662fWindows\u7cfb\u7edf\u7684\u4e00\u79cd\u6807\u51c6\u6587\u4ef6\u683c\u5f0f\u3002BMP \u4f4d\u56fe\u6587\u4ef6\u9ed8\u8ba4\u7684\u6587\u4ef6\u6269\u5c55\u540d\u662f bmp \u6216\u8005 dib\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0cBMP \u56fe\u50cf\u91c7\u7528\u975e\u538b\u7f29\u65b9\u5f0f\uff1b\u7136\u800c\uff0c\u5b83\u4e5f\u652f\u6301\u56fe\u50cf\u538b\u7f29\uff0c\u4f8b\u5982 RLE \u683c\u5f0f\u3002\u4e0b\u9762\u4ecb\u7ecdBMP\u6587\u4ef6\u7684\u5177\u4f53\u6587\u4ef6\u7ed3\u6784\u3002</p> <p>BMP \u56fe\u50cf\u6bcf\u4e00\u884c\u626b\u63cf\u7531\u8868\u793a\u56fe\u50cf\u50cf\u7d20\u7684\u8fde\u7eed\u7684\u5b57\u8282\u7ec4\u6210\uff0c\u6bcf\u4e00\u884c\u4ee5\u56db\u5b57\u8282\u5bf9\u9f50\uff08\u4ee50\u8865\u9f50\uff09\u3002\u56fe\u50cf\u7684\u626b\u63cf\u884c\u662f\u7531\u5e95\u5411\u4e0a\u5b58\u50a8\u7684\uff0c\u8fd9\u5c31\u662f\u8bf4\uff0c\u9635\u5217\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u8868\u793a\u4f4d\u56fe\u5de6\u4e0b\u89d2\u7684\u50cf\u7d20\uff0c\u800c\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u8868\u793a\u4f4d\u56fe\u53f3\u4e0a\u89d2\u7684\u50cf\u7d20\u3002</p> <pre><code>// \u5b9a\u4e49BMP\u6587\u4ef6\u5934\u7684\u5927\u5c0f\u4e3a54\u4e2a\u5b57\u8282\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\u56fa\u5b9a\u4e0d\u53d8\n#define HEADERSIZE 54\n\n// \u5b9a\u4e49\u51e0\u79cd\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u522b\u540d\uff0c\u4ee5\u4fbf\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u66f4\u5177\u53ef\u8bfb\u6027\u7684\u540d\u79f0\ntypedef unsigned char byte;\ntypedef unsigned short word;\ntypedef unsigned int dword;\n\n// \u4f7f\u7528#pragma pack(1)\u6307\u4ee4\u8bbe\u7f6e\u7ed3\u6784\u4f53\u7684\u5b57\u8282\u5bf9\u9f50\u65b9\u5f0f\u4e3a1\u5b57\u8282\n#pragma pack(1)\n\n// \u5b9a\u4e49BMP\u6587\u4ef6\u5934\u7684\u7ed3\u6784\u4f53\ntypedef struct {\n    word bfType;          // BMP\u6587\u4ef6\u7684\u7c7b\u578b\u6807\u8bc6\uff0c\u901a\u5e38\u4e3a\"BM\"\n    dword bfSize;         // BMP\u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\n    word reserved1;       // \u4fdd\u7559\u5b57\u6bb5\uff0c\u8bbe\u7f6e\u4e3a0\n    word reserved2;       // \u4fdd\u7559\u5b57\u6bb5\uff0c\u8bbe\u7f6e\u4e3a0\n    dword bfOffset;       // \u4f4d\u56fe\u6570\u636e\u7684\u504f\u79fb\u91cf\uff0c\u5373\u6587\u4ef6\u5934\u7684\u5927\u5c0f\n} BMPHeader;\n\n// \u5b9a\u4e49BMP\u4fe1\u606f\u5934\u7684\u7ed3\u6784\u4f53\ntypedef struct {\n    dword size;           // \u4fe1\u606f\u5934\u7684\u5927\u5c0f\uff0c\u901a\u5e38\u4e3a40\u5b57\u8282\n    int width;            // \u56fe\u50cf\u7684\u5bbd\u5ea6\uff0c\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\n    int height;           // \u56fe\u50cf\u7684\u9ad8\u5ea6\uff0c\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\n    word planes;          // \u989c\u8272\u5e73\u9762\u6570\uff0c\u901a\u5e38\u4e3a1\n    word bitCount;        // \u6bcf\u4e2a\u50cf\u7d20\u7684\u4f4d\u6570\n    dword compression;    // \u538b\u7f29\u7c7b\u578b\n    dword imageSize;      // \u4f4d\u56fe\u6570\u636e\u7684\u5927\u5c0f\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\n    int xPixelsPerMeter;  // \u6c34\u5e73\u5206\u8fa8\u7387\uff0c\u6bcf\u7c73\u7684\u50cf\u7d20\u6570\n    int yPixelsPerMeter;  // \u5782\u76f4\u5206\u8fa8\u7387\uff0c\u6bcf\u7c73\u7684\u50cf\u7d20\u6570\n    dword colorsUsed;     // \u4f7f\u7528\u7684\u989c\u8272\u6570\n    dword colorsImportant; // \u91cd\u8981\u989c\u8272\u6570\n} BMPInfoHeader;\n\n// \u5b9a\u4e49\u8c03\u8272\u677f\u4e2d\u7684\u4e00\u4e2a\u989c\u8272\u7684\u7ed3\u6784\u4f53\ntypedef struct {\n    byte blue;     // \u84dd\u8272\u5206\u91cf\n    byte green;    // \u7eff\u8272\u5206\u91cf\n    byte red;      // \u7ea2\u8272\u5206\u91cf\n    byte reserved; // \u4fdd\u7559\u5b57\u6bb5\uff0c\u901a\u5e38\u8bbe\u7f6e\u4e3a0\n} pallete;\n\n// \u5b9a\u4e49\u5305\u542bBMP\u6587\u4ef6\u5934\u3001BMP\u4fe1\u606f\u5934\u3001\u8c03\u8272\u677f\u548c\u4f4d\u56fe\u6570\u636e\u7684\u5b8c\u6574BMP\u56fe\u50cf\u7684\u7ed3\u6784\u4f53\ntypedef struct {\n    BMPHeader bmph;         // BMP\u6587\u4ef6\u5934\n    BMPInfoHeader bmpih;    // BMP\u4fe1\u606f\u5934\n    pallete colours[256];   // \u8c03\u8272\u677f\uff0c\u901a\u5e38\u7528\u4e8e8\u4f4d\u989c\u8272\u7d22\u5f15\u56fe\u50cf\n    byte *bitmap;           // \u4f4d\u56fe\u6570\u636e\n} BMP;\n</code></pre>"},{"location":"DIP/Basic/DIP/#1bmp_1","title":"(1)BMP\u6587\u4ef6\u6574\u4f53\u7ed3\u6784\uff1a","text":""},{"location":"DIP/Basic/DIP/#_1","title":"Basic concept and programming introduction","text":"<p>BMP \u6587\u4ef6 \u5927\u4f53\u4e0a\u5206\u4e3a\u56db\u4e2a\u90e8\u5206:\u56fe\u50cf\u6587\u4ef6\u5934\uff08Image file header\uff09\u3001\u56fe\u50cf\u4fe1\u606f\u5934\uff08Image information header\uff09\u3001\u8c03\u8272\u677f\uff08Palette\uff09\u3001\u56fe\u50cf\u6570\u636e\u5b57\u8282\u9635\u5217\uff08Image data\uff09</p> <ul> <li>\u5bf9\u7528\u5230\u8c03\u8272\u677f\u7684\u4f4d\u56fe\uff0c\u56fe\u50cf\u6570\u636e\u4e3a\u8be5\u50cf\u7d20\u989c\u8272\u5728\u8c03\u8272\u677f\u4e2d\u7684\u7d22\u5f15\u503c</li> <li>\u5bf9\u4e8e\u771f\u5f69\u8272\u56fe\uff0c\u56fe\u50cf\u6570\u636e\u5c31\u662f\u5b9e\u9645\u7684 R\u3001G\u3001B \u503c\u3002</li> </ul>"},{"location":"DIP/Basic/DIP/#2bmpimage-file-header","title":"(2)BMP\u56fe\u50cf\u6587\u4ef6\u5934\uff08Image file header\uff09","text":"Start Size(Byte) Name Purpose 1 2 bfType Must always be set to 'BM'(0x4D42) to declare that this is a .bmp-file 3 4 bfSize Specifies the size of the file in bytes. 7 2 bfReserved1 Must always be set to zero. 9 2 bfReserved2 Must always be set to zero. 11 4 bfOffBits Specifies the offset from the beginning of the file to the bitmap data <ul> <li>\\(bfOffbits\\)  \u8bf4\u660e\u4ece\u6587\u4ef6\u5934\u5f00\u59cb\u5230\u5b9e\u9645\u7684\u56fe\u8c61\u6570\u636e\u4e4b\u95f4\u7684\u5b57\u8282\u7684\u504f\u79fb\u91cf\u3002\u8fd9\u4e2a\u53c2\u6570\u662f\u975e\u5e38\u6709\u7528\u7684\uff0c\u56e0\u4e3a\u4f4d\u56fe\u4fe1\u606f\u5934\u548c\u8c03\u8272\u677f\u7684\u957f\u5ea6\u4f1a\u6839\u636e\u4e0d\u540c\u60c5\u51b5\u800c\u53d8\u5316\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u7528\u8fd9\u4e2a\u504f\u79fb\u503c\u8fc5\u901f\u7684\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5230\u4f4d\u6570\u636e\u3002</li> </ul>"},{"location":"DIP/Basic/DIP/#3bmpimage-information-header","title":"(3)BMP\u56fe\u50cf\u4fe1\u606f\u5934\uff08image information header\uff09","text":"Size(Byte) Name Purpose 4 biSize Number of bytes to define BITMAPINFOHEADER structure 4 biWidth Image width (number of pixels) 4 biHeight Image height (number of pixels).  2 biPlane Number of planes. Always be 1. 2 biBitCount Bits per pixel (Bits/pixel), which is 1, 4, 8, 16, 24 or 32.  4 biCompression Compression type. Only non-compression is discussed here: BI_RGB. 4 biSizeImage Image size with bytes. When biCompression=BI_RGB, biSizeImage=0. 4 biXPelsPerMeter Horizontal resolution, pixels/meter. 4 biYPelsPerMeter Vertical resolution, pixels/meter 4 biClrUsed Number of color indices used in the bitmap (0-&gt;all the palette items are used). 4 biClrImportant Number of important color indices for image display. 0-&gt;all items are important. <ul> <li>\u6ce8\u660e  \\(biHeight\\) \u53ef\u4ee5\u8868\u793a\u56fe\u50cf\u662f\u5426\u5012\u7f6e\uff0c\\(biHeight\\) \u4e3a\u6b63\u6570\u8868\u793a\u5012\u7f6e\uff08inverted\uff09\uff0c \u8d1f\u6570\u8868\u793a\u6b63\u5e38\uff08upright)\uff0c\u5927\u591a\u6570BMP\u6587\u4ef6\u662f\u5012\u7f6e\u7684\u4f4d\u56fe\uff0c\u5373 \\(biHeight\\)&gt;0</li> <li>biClrUsed\u8bf4\u660e\u4f4d\u56fe\u5b9e\u9645\u4f7f\u7528\u7684\u5f69\u8272\u8868\u4e2d\u7684\u989c\u8272\u7d22\u5f15\u6570\uff08\u8bbe\u4e3a0\u7684\u8bdd\uff0c\u5219\u8bf4\u660e\u4f7f\u7528\u6240\u6709\u8c03\u8272\u677f\u9879</li> <li>biClrImportant\u8bf4\u660e\u5bf9\u56fe\u8c61\u663e\u793a\u6709\u91cd\u8981\u5f71\u54cd\u7684\u989c\u8272\u7d22\u5f15\u7684\u6570\u76ee\uff0c\u5982\u679c\u662f0\uff0c\u8868\u793a\u90fd\u91cd\u8981</li> </ul>"},{"location":"DIP/Basic/DIP/#4palette","title":"(4)\u8c03\u8272\u677f\uff08Palette\uff09","text":"<ul> <li>\u8c03\u8272\u677f\u7684\u5927\u5c0f\u4e3a\\(N*4\\) (bytes)\u3002\u8c03\u8272\u677f\u4e2d\u7684\u6bcf\u4e00\u9879\u75281 \u5b57\u8282\u8868\u793a\u84dd\u8272\u5206\u91cf\u30011 \u5b57\u8282\u8868\u793a\u7eff\u8272\u5206\u91cf\u30011 \u5b57\u8282\u8868\u793a\u7ea2\u8272\u5206\u91cf\u30011 \u5b57\u8282\u7528\u4e8e\u586b\u5145\u7b26 (\u8bbe\u7f6e\u4e3a 0)</li> </ul> <p>\u6709\u4e00\u4e2a\u957f\u5bbd\u5404\u4e3a200\u4e2a\u8c61\u7d20\uff0c\u989c\u8272\u6570\u4e3a16\u8272\u7684\u5f69\u8272\u56fe\uff0c\u6bcf\u4e00\u4e2a\u8c61\u7d20\u90fd\u7528R\u3001G\u3001B\u4e09\u4e2a\u5206\u91cf\u8868\u793a</p> <p>\u56e0\u4e3a\u6bcf\u4e2a\u5206\u91cf\u6709256\u4e2a\u7ea7\u522b\uff0c\u8981\u75288\u4f4d(bit)\uff0c\u5373\u4e00\u4e2a\u5b57\u8282(byte)\u6765\u8868\u793a\uff0c\u6240\u4ee5\u6bcf\u4e2a\u8c61\u7d20\u9700\u8981\u75283\u4e2a\u5b57\u8282\u3002\u6574\u4e2a\u56fe\u8c61\u8981\u7528200\u00d7200\u00d73\uff0c\u7ea6120k\u5b57\u8282\uff0c\u53ef\u4e0d\u662f\u4e00\u4e2a\u5c0f\u6570\u76ee\u5440\uff01\u5982\u679c\u6211\u4eec\u7528\u4e0b\u9762\u7684\u65b9\u6cd5\uff0c\u5c31\u80fd\u7701\u7684\u591a\u3002</p> <p>\u56e0\u4e3a\u662f\u4e00\u4e2a16\u8272\u56fe\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u5e45\u56fe\u4e2d\u6700\u591a\u53ea\u670916\u79cd\u989c\u8272\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u8868\uff1a\u8868\u4e2d\u7684\u6bcf\u4e00\u884c\u8bb0\u5f55\u4e00\u79cd\u989c\u8272\u7684R\u3001G\u3001B\u503c\u3002\u8fd9\u6837\u5f53\u6211\u4eec\u8868\u793a\u4e00\u4e2a\u8c61\u7d20\u7684\u989c\u8272\u65f6\uff0c\u53ea\u9700\u8981\u6307\u51fa\u8be5\u989c\u8272\u662f\u5728\u7b2c\u51e0\u884c\uff0c\u5373\u8be5\u989c\u8272\u5728\u8868\u4e2d\u7684\u7d22\u5f15\u503c\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u8868\u7684\u7b2c0\u884c\u4e3a255\uff0c0\uff0c0(\u7ea2\u8272)\uff0c\u90a3\u4e48\u5f53\u67d0\u4e2a\u8c61\u7d20\u4e3a\u7ea2\u8272\u65f6\uff0c\u53ea\u9700\u8981\u6807\u660e0\u5373\u53ef</p> <p>\u8fd9\u5f20R\u3001G\u3001B\u7684\u8868\uff0c\u5c31\u662f\u6211\u4eec\u5e38\u8bf4\u7684\u8c03\u8272\u677f(Palette)\uff0c\u53e6\u4e00\u79cd\u53eb\u6cd5\u662f\u989c\u8272\u67e5\u627e\u8868LUT(Look Up Table)\uff0c\u4f3c\u4e4e\u66f4\u786e\u5207\u4e00\u4e9b\u3002Windows\u4f4d\u56fe\u4e2d\u4fbf\u7528\u5230\u4e86\u8c03\u8272\u677f\u6280\u672f\u3002\u5176\u5b9e\u4e0d\u5149\u662fWindows\u4f4d\u56fe\uff0c\u8bb8\u591a\u56fe\u8c61\u6587\u4ef6\u683c\u5f0f\u5982pcx\u3001tif\u3001gif\u7b49\u90fd\u7528\u5230\u4e86\u3002\u6240\u4ee5\u5f88\u597d\u5730\u638c\u63e1\u8c03\u8272\u677f\u7684\u6982\u5ff5\u662f\u5341\u5206\u6709\u7528\u7684\u3002</p>"},{"location":"DIP/Basic/DIP/#5image-data","title":"(5)\u56fe\u50cf\u6570\u636e\u5b57\u8282\u9635\u5217\uff08Image data\uff09","text":"<ul> <li> <p>\u56fe\u50cf\u6570\u636e\u5b57\u8282\u9635\u5217\u5b58\u50a8\u4e86\u8c03\u8272\u677f\u7684\u7d22\u5f15\u53f7\uff0c\u6216\u8005\u53d6\u51b3\u4e8e\u989c\u8272\u6df1\u5ea6\u7684RGB\u503c</p> </li> <li> <p>\u5176\u5927\u5c0f\u53d6\u51b3\u4e8e\u56fe\u50cf\u5927\u5c0f\u548c\u989c\u8272\u6df1\u5ea6\u3002</p> </li> </ul> <p>(1)\u6bcf\u4e00\u884c\u7684\u5b57\u8282\u6570\u5fc5\u987b\u662f4\u7684\u6574\u500d\u6570\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u9700\u8981\u8865\u9f50(append zero)</p> <p>(2)\u4e00\u822c\u6765\u8bf4\uff0c.bMP\u6587\u4ef6\u7684\u6570\u636e\u4ece\u4e0b\u5230\u4e0a\uff0c\u4ece\u5de6\u5230\u53f3\u7684</p> <ul> <li> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ece\u6587\u4ef6\u4e2d\u6700\u5148\u8bfb\u5230\u7684\u662f\u56fe\u8c61\u6700\u4e0b\u9762\u4e00\u884c\u7684\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u8c61\u7d20\uff0c\u7136\u540e\u662f\u5de6\u8fb9\u7b2c\u4e8c\u4e2a\u8c61\u7d20\u2026\u2026\u63a5\u4e0b\u6765\u662f\u5012\u6570\u7b2c\u4e8c\u884c\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u8c61\u7d20\uff0c\u5de6\u8fb9\u7b2c\u4e8c\u4e2a\u8c61\u7d20\u2026\u2026\u4f9d\u6b21\u7c7b\u63a8 \uff0c\u6700\u540e\u5f97\u5230\u7684\u662f\u6700\u4e0a\u9762\u4e00\u884c\u7684\u6700\u53f3\u4e00\u4e2a\u8c61\u7d20\u3002</p> </li> <li> <p>You do not need to turn around the rows manually. The API functions which also display the bitmap will do that for you automatically.</p> </li> </ul> 6 bytes that represent a row in the bitmap: A0 37 F2 8B 31 C4 must be saved as: A0 37 F2 8B 31 C4 00 00"},{"location":"DIP/Basic/DIP/#2bmp","title":"2.BMP\u6587\u4ef6\u7684\u8bfb\u5165\u548c\u5b58\u50a8","text":"<p>\u5229\u7528 C \u8bed\u8a00\u4e2d\u7684 fopen fread fwrite \u8fdb\u884c\u8bfb\u5165\u3001\u5199\u51fa\u5373\u53ef</p> <p>\u5728\u8bfb\u5165\u4e0e\u5199\u51fa\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u6ce8\u610f BMP\u6587\u4ef6\u4fe1\u606f\u7684\u8c03\u6574\uff0c\u4f8b\u5982\u753124\u4f4d\u5f69\u8272BMP\u8f6c\u4e3a\u7070\u8272\u56fe\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u8c03\u8272\u677f\u3001\u4f4d\u6df1\u7b49\u7684\u8c03\u6574\u3002</p> <pre><code>FILE *inputFile = fopen(\"input.bmp\", \"rb\");\n // \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u6210\u529f\u6253\u5f00\nif (!inputFile) {\n    printf(\"Unable to open input BMP file.\\n\"); // \u8f93\u51fa\u9519\u8bef\u4fe1\u606f\n    return 0; // \u9000\u51fa\u7a0b\u5e8f\n}\nprintf(\"successfully loaded!\"); // \u6210\u529f\u52a0\u8f7d\u7684\u63d0\u793a\u4fe1\u606f\nBMP bmp; // \u521b\u5efa\u4e00\u4e2aBMP\u7ed3\u6784\u4f53\u53d8\u91cf\u7528\u4e8e\u5b58\u50a8BMP\u6587\u4ef6\u7684\u4fe1\u606f\u548c\u6570\u636e\n// \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6BMP\u6587\u4ef6\u5934\u548c\u4fe1\u606f\u5934\nfread(&amp;(bmp), HEADERSIZE, 1, inputFile);\nint width = bmp.bmpih.width; // \u83b7\u53d6\u56fe\u50cf\u7684\u5bbd\u5ea6\nint height = bmp.bmpih.height; // \u83b7\u53d6\u56fe\u50cf\u7684\u9ad8\u5ea6\n// \u5982\u679c\u56fe\u50cf\u5927\u5c0f\u4e3a0\uff0c\u5219\u8ba1\u7b97\u56fe\u50cf\u6570\u636e\u5927\u5c0f\nif (bmp.bmpih.imageSize == 0) {bmp.bmpih.imageSize = bmp.bmph.bfSize - bmp.bmph.bfOffset;}\n// \u4e3a\u4f4d\u56fe\u6570\u636e\u5206\u914d\u5185\u5b58\nbmp.bitmap = (byte*)malloc(sizeof(byte) * (bmp.bmph.bfSize - HEADERSIZE));\n// \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u4f4d\u56fe\u6570\u636e\nfread(bmp.bitmap, bmp.bmph.bfSize - HEADERSIZE, 1, inputFile);\nfclose(inputFile); // \u5173\u95ed\u6587\u4ef6\n</code></pre>"},{"location":"DIP/Basic/DIP/#visual-intelligence-and-pattern-analysis","title":"Visual Intelligence and Pattern Analysis","text":""},{"location":"DIP/Basic/DIP/#history","title":"History","text":""},{"location":"DIP/Basic/DIP/#_2","title":"\u9488\u5b54\u6210\u50cf","text":"<ul> <li> <p>\u6295\u5f71\u4fbf\u6210\u4e3a\u5012\u7acb\u7684\uff1b\u7269\u8ddd\u8d8a\u8fdc,\u50cf\u8d8a\u5c0f\uff1b\u7269\u8ddd\u8d8a\u8fd1,\u50cf\u8d8a\u5927</p> </li> <li> <p>\u5982\u524d\u9762\u63d0\u5230\u7684\u60c5\u51b5\uff0c\u5149\u5708\u5b54\u5f84\u5927\u7684\u65f6\u5019\uff0c\u4f1a\u5bfc\u81f4\u6a21\u7cca\uff1b\u90a3\u662f\u4e0d\u662f\u53ef\u4ee5\u5c3d\u91cf\u7f29\u5c0f\u5149\u5708\u7684\u5b54\u5f84\u5462\uff1f</p> </li> </ul> <p>NO.\u5982\u679c\u5b54\u5f84\u592a\u5c0f\uff0c\u53ef\u901a\u8fc7\u7684\u5149\u7ebf\u5c31\u5f88\u5c11\uff0c\u5bfc\u81f4\u5149\u5f3a\u592a\u5f31\uff0c\u540c\u65f6\u5f53\u5b54\u5f84\u5c0f\u5230\u4e00\u5b9a\u7a0b\u5ea6\u65f6\uff0c\u4f1a\u4ea7\u751f\u884d\u5c04\u73b0\u8c61\u3002</p>"},{"location":"DIP/Basic/DIP/#lenses","title":"Lenses","text":"<ul> <li> <p>\u901a\u8fc7\u4f7f\u7528\u900f\u955c\u53ef\u4ee5\u4f1a\u805a\u66f4\u591a\u7684\u5149\u7ebf\u5230\u4e00\u4e2a\u6210\u50cf\u70b9\uff0c\u53ea\u662f\u53ea\u6709\u5728\u7279\u6b8a\u7684\u4f4d\u7f6e\u4e0a\u624d\u80fd\u8fbe\u5230\u8fd9\u4e2a\u76ee\u6807\uff0c\u5373\u5927\u5bb6\u4ee5\u524d\u5c31\u5b66\u4e60\u8fc7\u7684\u900f\u955c\u805a\u7126</p> </li> <li> <p>\u4f4d\u4e8e\u5408\u9002\u8ddd\u79bb\u7684\u7269\u4f53\u70b9\u53ef\u4ee5\u6210\u6e05\u6670\u50cf\uff0c\u5176\u4ed6\u7684\u70b9\u5219\u4f1a\u4ea7\u751f\u5f25\u6563\u5706 \u901a\u8fc7\u6539\u53d8\u955c\u5934\u7684\u5f62\u72b6\u53ef\u4ee5\u6539\u53d8\u805a\u7126\u65f6\u7684\u7269\u4f53\u70b9\u6240\u9700\u8981\u7684\u8ddd\u79bb</p> </li> <li>\u5f25\u6563\u5706(circle of confusion) \uff1a\u5728\u7126\u70b9\u524d\u540e\uff0c\u5149\u7ebf\u5f00\u59cb\u805a\u96c6\u548c\u6269\u6563\uff0c\u70b9\u7684\u5f71\u50cf\u53d8\u6a21\u7cca\uff0c\u5f62\u6210\u4e00\u4e2a\u6269\u5927\u7684\u5706</li> <li>\u5982\u679c\u5f25\u6563\u5706\u7684\u76f4\u5f84\u5c0f\u4e8e\u4eba\u773c\u7684\u9274\u522b\u80fd\u529b\uff0c\u5728\u4e00\u5b9a\u8303\u56f4\u5185\u5b9e\u9645\u5f71\u50cf\u4ea7\u751f\u7684\u6a21\u7cca\u662f\u4e0d\u80fd\u8fa8\u8ba4\u7684\u3002\u4e0d\u80fd\u8fa8\u8ba4\u7684\u76f4\u5f84\u53eb\u505a\u5bb9\u8bb8\u5f25\u6563\u5706\u3002\u7126\u70b9\u524d\u540e\u5404\u6709\u4e00\u4e2a\u5bb9\u8bb8\u5f25\u6563\u5706</li> <li>\u5bf9\u4e8e6\u5bf8\u7167\u7247\uff0c\u89c2\u5bdf\u8ddd\u79bb25\uff0d30cm \uff0c\u5927\u6982\u662f\u5e95\u7247\u5bf9\u89d2\u7ebf1/1000-1/1500.</li> </ul> <p></p> <ul> <li>\u5149\u5708\u7684\u5927\u5c0f\u4e0e\u666f\u6df1\u6709\u5bc6\u5207\u5173\u7cfb\uff1a\u7126\u70b9\u524d\u540e\u5404\u6709\u4e00\u4e2a\u5bb9\u8bb8\u5f25\u6563\u5706\uff0c\u4ed6\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\u53eb\u505a\u666f\u6df1</li> </ul> <p>\u666f\u6df1\u968f\u955c\u5934\u7684\u7126\u8ddd\u3001\u5149\u5708\u503c\u3001\u62cd\u6444\u8ddd\u79bb\u800c\u53d8\u5316</p> <p>(1)\u955c\u5934\u5149\u5708\uff1a\u5149\u5708\u8d8a\u5927\uff0c\u666f\u6df1\u8d8a\u5c0f\uff1b\u5149\u5708\u8d8a\u5c0f\uff0c\u666f\u6df1\u8d8a\u5927</p> <p>(2)\u955c\u5934\u7126\u8ddd\uff1a\u955c\u5934\u7126\u8ddd\u8d8a\u957f\uff0c\u666f\u6df1\u8d8a\u5c0f\uff1b\u7126\u8ddd\u8d8a\u77ed\uff0c\u666f\u6df1\u8d8a\u5927</p> <p>(3)\u62cd\u6444\u8ddd\u79bb\uff1a\u8ddd\u79bb\u8d8a\u8fdc\uff0c\u666f\u6df1\u8d8a\u5927\uff1b\u8ddd\u79bb\u8d8a\u8fd1\uff0c\u666f\u6df1\u8d8a\u5c0f</p> <p>For a given subject framing and camera position, the DOF is controlled by the lens aperture diameter, which is usually specified as the f-number, the ratio of lens focal length to aperture diameter. </p> <p>Reducing the aperture diameter (increasing the f-number) increases the DOF; however, it also reduces the amount of light transmitted, and increases diffraction, placing a practical limit on the extent to which DOF can be increased by reducing the aperture diameter.</p>"},{"location":"DIP/Basic/DIP/#digital-camera","title":"Digital camera","text":"<ul> <li>\u62cd\u6444\u666f\u7269\u65f6\uff0c\u666f\u7269\u53cd\u5c04\u7684\u5149\u7ebf\u901a\u8fc7\u6570\u7801\u76f8\u673a\u7684\u955c\u5934\u900f\u5c04\u5230CCD\u4e0a</li> <li> <p>\u5f53CCD\u66dd\u5149\u540e\uff0c\u5149\u7535\u4e8c\u6781\u7ba1\u53d7\u5230\u5149\u7ebf\u7684\u6fc0\u53d1\u800c\u91ca\u653e\u51fa\u7535\u8377\uff0c\u751f\u6210\u611f\u5149\u5143\u4ef6\u7684\u7535\u4fe1\u53f7</p> </li> <li> <p>CCD\u63a7\u5236\u82af\u7247\u5229\u7528\u611f\u5149\u5143\u4ef6\u4e2d\u7684\u63a7\u5236\u4fe1\u53f7\u7ebf\u8def\u5bf9\u53d1\u5149\u4e8c\u6781\u7ba1\u4ea7\u751f\u7684\u7535\u6d41\u8fdb\u884c\u63a7\u5236\uff0c\u7531\u7535\u6d41\u4f20\u8f93\u7535\u8def\u8f93\u51fa\uff0cCCD\u4f1a\u5c06\u4e00\u6b21\u6210\u50cf\u4ea7\u751f\u7684\u7535\u4fe1\u53f7\u6536\u96c6\u8d77\u6765\uff0c\u7edf\u4e00\u8f93\u51fa\u5230\u653e\u5927\u5668\u3002</p> </li> <li>\u7ecf\u8fc7\u653e\u5927\u548c\u6ee4\u6ce2\u540e\u7684\u7535\u4fe1\u53f7\u88ab\u4f20\u9001\u5230ADC\uff0c\u7531ADC\u5c06\u7535\u4fe1\u53f7\uff08\u6a21\u62df\u4fe1\u53f7\uff09\u8f6c\u6362\u4e3a\u6570\u5b57\u4fe1\u53f7\uff0c\u6570\u503c\u7684\u5927\u5c0f\u548c\u7535\u4fe1\u53f7\u7684\u5f3a\u5ea6\u4e0e\u7535\u538b\u7684\u9ad8\u4f4e\u6210\u6b63\u6bd4\uff0c\u8fd9\u4e9b\u6570\u503c\u5176\u5b9e\u4e5f\u5c31\u662f\u56fe\u50cf\u7684\u6570\u636e\u3002</li> <li>\u6b64\u65f6\u8fd9\u4e9b\u56fe\u50cf\u6570\u636e\u8fd8\u4e0d\u80fd\u76f4\u63a5\u751f\u6210\u56fe\u50cf\uff0c\u8fd8\u8981\u8f93\u51fa\u5230DSP\uff08\u6570\u5b57\u4fe1\u53f7\u5904\u7406\u5668\uff09\u4e2d\uff0c\u5728DSP\u4e2d\uff0c\u5c06\u4f1a\u5bf9\u8fd9\u4e9b\u56fe\u50cf\u6570\u636e\u8fdb\u884c\u8272\u5f69\u6821\u6b63\u3001\u767d\u5e73\u8861\u5904\u7406\uff0c\u5e76\u7f16\u7801\u4e3a\u6570\u7801\u76f8\u673a\u6240\u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f\u3001\u5206\u8fa8\u7387\uff0c\u7136\u540e\u624d\u4f1a\u88ab\u5b58\u50a8\u4e3a\u56fe\u50cf\u6587\u4ef6\u3002</li> <li>\u5f53\u5b8c\u6210\u4e0a\u8ff0\u6b65\u9aa4\u540e\uff0c\u56fe\u50cf\u6587\u4ef6\u5c31\u4f1a\u88ab\u4fdd\u5b58\u5230\u5b58\u50a8\u5668\u4e0a,\u6211\u4eec\u5c31\u53ef\u4ee5\u6b23\u8d4f\u4e86\u3002</li> </ul>"},{"location":"DIP/Basic/DIP/#physical-meaning-of-color","title":"Physical meaning of color","text":"<p>Colorful view is generated by the interactions between light and objects, e.g., reflection, refraction, scattering, transmission, absorption, and diffraction.</p> <p>\u8272\u5f69\u573a\u666f\u662f\u7531\u5149\u4e0e\u7269\u4f53\u4e4b\u95f4\u7684\u4ea4\u4e92\u8fc7\u7a0b\u4ea7\u751f\u7684\u3002\u5982\uff1a\u53cd\u5c04\u3001\u6298\u5c04\u3001\u6563\u5c04\u3001\u4f20\u64ad\u3001\u5438\u6536\u4ee5\u53ca\u884d\u5c04\u7b49\u7b49</p> <p>\u8272\u5f69\u53ef\u4ee5\u5206\u4e3a\u5f69\u8272\uff08chromatic color\uff09\u548c\u6d88\u8272\uff08achromatic color\uff09\u4e24\u5927\u7c7b</p> <ul> <li>\u5f69\u8272\u662f\u6307\u7ea2\u3001\u9ec4\u3001\u84dd\u7b49\u5355\u8272\u4ee5\u53ca\u5b83\u4eec\u7684\u6df7\u5408\u8272\uff0c\u5f69\u8272\u7269\u4f53\u5bf9\u5149\u8c31\u5404\u6ce2\u957f\u7684\u53cd\u5c04\u5177\u6709\u9009\u62e9\u6027\uff0c\u6240\u4ee5\u5b83\u4eec\u5728\u767d\u5149\u7167\u5c04\u4e0b\u5448\u73b0\u51fa\u4e0d\u540c\u7684\u989c\u8272</li> <li>\u6d88\u8272\uff0c\u53c8\u79f0\u975e\u5f69\u8272\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u901a\u5e38\u6240\u8bf4\u7684\u7070\u5ea6\uff0c\u662f\u6307\u767d\u8272\uff0c\u9ed1\u8272\u4ee5\u53ca\u5404\u79cd\u6df1\u6d45\u4e0d\u540c\u7684\u7070\u8272\u3002\u6d88\u8272\u7269\u4f53\u5bf9\u5149\u8c31\u5404\u6ce2\u957f\u7684\u53cd\u5c04\u6ca1\u6709\u9009\u62e9\u6027\uff0c\u5b83\u4eec\u662f\u4e2d\u6027\u8272</li> </ul>"},{"location":"DIP/Basic/DIP/#light-and-colour","title":"Light and Colour","text":"<p>\u8272\u89c9(colour vision)\u662f\u6307\u4e0d\u540c\u6ce2\u957f\u7684\u5149\u7ebf\u4f5c\u7528\u4e8e\u89c6\u7f51\u819c\u800c\u5728\u5927\u8111\u4e2d\u5f15\u8d77\u7684\u611f\u89c9</p> <ul> <li> <p>\u4eba\u773c\u53ef\u89c1\u5149\u7ebf\u7684\u6ce2\u957f\u662f390nm\uff5e780nm\uff0c\u4e00\u822c\u53ef\u8fa8\u51fa\u5305\u62ec\u7d2b\u3001\u84dd\u3001\u9752\u3001\u7eff\u3001\u9ec4\u3001\u6a59\u3001\u7ea27\u79cd\u4e3b\u8981\u989c\u8272\u5728\u5185\u7684120\uff5e180\u79cd\u4e0d\u540c\u7684\u989c\u8272</p> </li> <li> <p>\u89c6\u7f51\u819c\u662f\u4eba\u773c\u4e2d\u6700\u91cd\u8981\u7684\u7ec4\u6210\u90e8\u5206\uff0c\u5c31\u50cf\u76f8\u673a\u91cc\u7684\u611f\u5149\u5e95\u7247\uff0c\u4e13\u95e8\u8d1f\u8d23\u611f\u5149\u6210\u50cf\u3002\u89c6\u7f51\u819c\u4e0a\u5206\u5e03\u7740\u4e24\u79cd\u89c6\u89c9\u7ec6\u80de\uff0c\u4e00\u79cd\u4e3a\u6746\u72b6\u4f53\uff0c\u53e6\u4e00\u79cd\u4e3a\u9525\u72b6\u4f53</p> </li> </ul> <p>\u6746\u72b6\u4f53\u7ec6\u80de\u6bd4\u8f83\u591a\uff0c\u5927\u7ea6\u6709\u4e0a\u4ebf\u4e2a\uff0c\u5b83\u5bf9\u5149\u6781\u4e3a\u7075\u654f\uff0c\u4f46\u6ca1\u6709\u533a\u5206\u8272\u5f69\u7684\u80fd\u529b</p> <p>\u9525\u72b6\u4f53\u7ec6\u80de\u5219\u53ea\u6709\u516d\u3001\u4e03\u767e\u4e07\u4e2a\uff0c\u5b83\u8981\u5728\u8f83\u5f3a\u7684\u7167\u5ea6\u4e0b\u624d\u80fd\u6fc0\u53d1\uff0c\u5b83\u7684\u5b58\u5728\u4f7f\u6211\u4eec\u80fd\u591f\u8fa8\u522b\u5404\u79cd\u4e0d\u540c\u7684\u989c\u8272</p> <ul> <li>\\(\\lambda:\\ Red&gt;Green&gt;Blue\\) </li> </ul> <p></p>"},{"location":"DIP/Basic/DIP/#three-primary-colors","title":"Three-primary colors","text":"<p>\u89c6\u7f51\u819c\u4e0a\u5b58\u5728\u4e09\u79cd\u5206\u522b\u5bf9\u7ea2\u7eff\u84dd\u5149\u6ce2\u957f\u7279\u522b\u654f\u611f\u7684\u89c6\u9525\u7ec6\u80de\u6216\u76f8\u5e94\u7684\u611f\u5e94\u8272\u7d20\uff0c\u4e0d\u540c\u6ce2\u957f\u7684\u5149\u8fdb\u5165\u773c\u775b\u540e\uff0c\u4e0e\u4e4b\u76f8\u7b26\u6216\u76f8\u8fd1\u7684\u89c6\u9525\u7ec6\u80de\u53d1\u751f\u4e0d\u540c\u7a0b\u5ea6\u7684\u5174\u594b\uff0c\u4e8e\u662f\u5728\u5927\u8111\u4ea7\u751f\u76f8\u5e94\u7684\u8272\u89c9\uff1b\u82e5\u4e09\u79cd\u89c6\u9525\u7ec6\u80de\u53d7\u5230\u540c\u7b49\u7a0b\u5ea6\u7684\u523a\u6fc0\uff0c\u90a3\u4e48\u4ea7\u751f\u6d88\u8272</p>"},{"location":"DIP/Basic/DIP/#perception-priority-and-sensitivity","title":"Perception priority and sensitivity","text":"<ul> <li> <p>Priority: Under the same setting, human notices first the hue (H) (\u8272\u8c03)changes, then the saturation (S) (\u9971\u548c\u5ea6), then the lightness value (V) (\u4eae\u5ea6).</p> </li> <li> <p>Sensitivity: Human eyes are the most sensitive to the lightness changes and have the best resolution, which is responsible for the eyes\u2019 HDR capacity</p> </li> </ul> <p>\u4eba\u773c\u5bf9\u4e8e\u4eae\u5ea6\u7684\u53d8\u5316\u6700\u4e3a\u654f\u611f\uff0c\u5206\u8fa8\u80fd\u529b\u6700\u5f3a\u3002\u6070\u597d\u4e0e\u4eba\u773c\u7684\u9ad8\u52a8\u6001\u80fd\u529b\u76f8\u5339\u914d\u3002</p>"},{"location":"DIP/Basic/DIP/#definition-of-color-space","title":"Definition of color space","text":"<ul> <li>Device dependent color space model:RGB CMY HSV (HSV more similar to human's sensation)</li> <li>Device independent color space model:Most of them are defined by CIE :CIE XYZ, CIE \\(L^*a^*b\\), CIE YUV</li> </ul>"},{"location":"DIP/Basic/DIP/#rgb-color-model","title":"RGB color model","text":"<p>RGB color model is a unit cube in a Cartesian coordinates system.</p> <ul> <li> <p>The magnitudes of each primary color are equivalent on the main diagonal line, which lead to the white color from darkness to brightness, i.e., grayscale. (0,0,0)-dark, (1,1,1)-bright. </p> </li> <li> <p>The other 6 corners are respectively red, yellow, cyan, blue and magenta.(\u7ea2\u3001\u9ec4\u3001\u7eff\u3001\u9752\u3001\u84dd\u548c\u54c1\u7ea2)</p> </li> <li> <p>RGB is a subset of CIE primary color space. </p> </li> <li> <p>RGB is usually used in Color cathode ray tube and Color raster graphics display (computer , TV). </p> </li> </ul> <p>RGB\u989c\u8272\u6a21\u578b\u901a\u5e38\u7528\u4e8e\u5f69\u8272\u9634\u6781\u5c04\u7ebf\u7ba1\u548c\u5f69\u8272\u5149\u6805\u56fe\u5f62\u663e\u793a\u5668\uff08\u8ba1\u7b97\u673a\u548c\u7535\u89c6\u673a\u91c7\u7528\uff09</p>"},{"location":"DIP/Basic/DIP/#cmy-color-model","title":"CMY color model","text":"<ul> <li> <p>\u5f69\u8272\u5370\u5237\u6216\u8005\u5f69\u8272\u6253\u5370\u7684\u7eb8\u5f20\u4e0d\u80fd\u53d1\u5c04\u5149\u7ebf\uff0c\u56e0\u800c\u5370\u5237\u673a\u6216\u6253\u5370\u673a\u5c31\u53ea\u80fd\u4f7f\u7528\u4e00\u4e9b\u80fd\u591f\u5438\u6536\u7279\u5b9a\u5149\u6ce2\u800c\u53cd\u5c04\u5176\u4ed6\u5149\u6ce2\u7684\u6cb9\u58a8\u6216\u8005\u989c\u8272</p> </li> <li> <p>\u6cb9\u58a8\u6216\u989c\u6599\u76843\u79cd\u57fa\u8272\u662f\u4ee5\u7ea2\u3001\u7eff\u3001\u84dd\u4e09\u8272\u7684\u8865\u8272 : \u9752\uff08Cyan\uff09\u3001\u54c1\u7ea2\uff08Magenta\uff09\u3001\u9ec4\uff08Yellow\uff09\u4e3a\u57fa\u8272</p> </li> <li> <p>\u7528CMY\u6a21\u578b\u4ea7\u751f\u7684\u989c\u8272\u79f0\u4e3a\u76f8\u51cf\u8272\uff0c\u662f\u56e0\u4e3a\u5b83\u51cf\u6389\u4e86\u4e3a\u89c6\u89c9\u7cfb\u7edf\u8bc6\u522b\u989c\u8272\u6240\u9700\u8981\u7684\u53cd\u5c04\u5149</p> </li> <li>CMY\u7a7a\u95f4\u4e0eRGB\u7a7a\u95f4\u4e92\u8865\uff0c\u4e5f\u5c31\u662f\u7528\u767d\u8272\u51cf\u53bbRGB\u7a7a\u95f4\u4e2d\u7684\u67d0\u4e00\u989c\u8272\u503c\u5c31\u7b49\u4e8e\u540c\u6837\u989c\u8272\u5728CMY\u7a7a\u95f4\u4e2d\u7684\u503c</li> </ul> <p></p> <p></p>"},{"location":"DIP/Basic/DIP/#hsv-color","title":"HSV color","text":"<p>HIS/HSV color space is defined based on human visual system. </p> <p>\u8272\u8c03\uff08Hue)\u3001\u8272\u9971\u548c\u5ea6\uff08Saturation\uff09\u548c\u4eae\u5ea6\uff08Intensity\uff0c\u6216\u8005Value\uff09</p> <ul> <li>Hue, Saturation, Intensity/ValueHIS can be depicted as a cone</li> <li>Top surface of cone: \\(V=1\\), which includes R=1, G=1, B=1. </li> <li>Hue: around the axis: RED-- \\(0^o\\) , GREEN-- \\(120^o\\) , BLUE-- \\(240^o\\)</li> <li>Saturation: along the radial direction.</li> <li>Bottom point of cone: \\(V=0\\)\uff0c\\(H =null, S=null\\), for darkness.</li> <li>Center of the top surface: \\(S=0, V=1, H=null\\), for brightness.</li> </ul> <p>Advantages:</p> <ul> <li>Close to human color vision. </li> <li>When using RGB or CMY, if you want to change hue, you must adjust R, G, and B at the same time. But using HSV, you DON\u2019T have to do that. Only ONE channel is adjusted. </li> <li>HSV color model is a uniform color space, linearly distributed. The color difference perception is proportional to Euclidean distance on the HSV cone volume.</li> </ul> <p></p>"},{"location":"DIP/Basic/DIP/#cie-color-model","title":"CIE color model","text":""},{"location":"DIP/Basic/DIP/#cie-color-model_1","title":"CIE color model","text":"<ul> <li>A series of color models according to the response of human eyes to RGB, which are carefully measured.</li> </ul> <p>Device independent:</p> <ul> <li>Such color models are used to define device-independent color. </li> <li>Help people to reproduce color consistently on different devices such as scanner, monitor, and printer. CIE color modelsCIE XYZ, CIE \\(L^*a^*b\\) CIE YUV etc.</li> </ul>"},{"location":"DIP/Basic/DIP/#cie-xyz","title":"CIE XYZ","text":"<p>XYZ concept is based on the three-primary color theory, which describes human eyes have RGB receptors and all other color are mixture of RBG. </p> <ul> <li> <p>Computed by using functions\\(\\overline{x(\\lambda)},\\overline{y(\\lambda)},\\overline{z(\\lambda)}\\) </p> </li> <li> <p>\\(Y_{xy}\\)color space given in 1931: Y-&gt;luminance, x,y are color coordinates computed based XYZ.</p> </li> <li>Describes the color range human can perceives. </li> </ul>"},{"location":"DIP/Basic/DIP/#cie-lab","title":"CIE \\(L^*a^*b\\)","text":"<ul> <li>Defined in 1976</li> <li>Modification of CIE XYZ</li> <li>Overcomes the un-proportional problem in Yxy color space: \\(x,y\\) distance does not reflect the color difference you observe.</li> <li>L: lightness a: green to red b: blue to yellow</li> <li>L,a, b can be adjust separately. </li> </ul> <ul> <li>\u662fCIE XYZ\u989c\u8272\u6a21\u578b\u7684\u6539\u8fdb\u578b\uff0c\u4ee5\u4fbf\u514b\u670d\u539f\u6765\u7684Yxy\u989c\u8272\u7a7a\u95f4\u5b58\u5728\u7684\u5728x\uff0cy\u8272\u5ea6\u56fe\u4e0a\u76f8\u7b49\u7684\u8ddd\u79bb\u5e76\u4e0d\u76f8\u5f53\u4e8e\u6211\u4eec\u6240\u89c9\u5bdf\u5230\u7684\u76f8\u7b49\u8272\u5dee\u7684\u95ee\u9898</li> <li>\u5b83\u7684\u201cL\u201d\uff08\u660e\u4eae\u5ea6\uff09\uff0c\u201ca\u201d\uff08\u7eff\u8272\u5230\u7ea2\u8272\uff09\u548c\u201cb\u201d(\u84dd\u8272\u5230\u9ec4\u8272)\u4ee3\u8868\u8bb8\u591a\u7684\u503c</li> <li>\u4e0eXYZ\u6bd4\u8f83\uff0cCIE \\(L^*a^*b*\\) \u989c\u8272\u66f4\u9002\u5408\u4e8e\u4eba\u773c\u7684\u611f\u89c9</li> <li>\u989c\u8272\u7684\u4eae\u5ea6\uff08L\uff09\u3001\u7070\u9636\u548c\u9971\u548c\u5ea6\uff08a,b\uff09\u53ef\u4ee5\u5355\u72ec\u4fee\u6b63\uff0c\u8fd9\u6837\uff0c\u56fe\u50cf\u7684\u6574\u4e2a\u989c\u8272\u90fd\u53ef\u4ee5\u5728\u4e0d\u6539\u53d8\u56fe\u50cf\u6216\u5176\u4eae\u5ea6\u7684\u60c5\u51b5\u4e0b\uff0c\u53d1\u751f\u6539\u53d8\u3002</li> </ul>"},{"location":"DIP/Basic/DIP/#cie-yuv","title":"CIE YUV","text":"<p>\u5728\u73b0\u4ee3\u5f69\u8272\u7535\u89c6\u7cfb\u7edf\u4e2d\uff0c\u901a\u5e38\u91c7\u7528\u4e09\u7ba1\u5f69\u8272\u6444\u50cf\u673a\u6216\u5f69\u8272CCD\uff08\u7535\u8377\u8026\u5408\u5668\u4ef6\uff09\u6444\u50cf\u673a\uff0c\u5b83\u628a\u6444\u5f97\u7684\u5f69\u8272\u56fe\u50cf\u4fe1\u53f7\uff0c\u7ecf\u5206\u8272\uff0c\u5206\u522b\u653e\u5927\u6821\u6b63\u5f97\u5230RGB\uff0c\u518d\u7ecf\u8fc7\u77e9\u9635\u53d8\u6362\u7535\u8def\u5f97\u5230\u4eae\u5ea6\u4fe1\u53f7Y\u548c\u4e24\u4e2a\u8272\u5dee\u4fe1\u53f7R\uff0dY\u3001B\uff0dY\uff0c\u6700\u540e\u53d1\u9001\u7aef\u5c06\u4eae\u5ea6\u548c\u8272\u5dee\u4e09\u4e2a\u4fe1\u53f7\u5206\u522b\u8fdb\u884c\u7f16\u7801\uff0c\u7528\u540c\u4e00\u4fe1\u9053\u53d1\u9001\u51fa\u53bb,\u8fd9\u5c31\u662f\u6211\u4eec\u5e38\u7528\u7684YUV\u989c\u8272\u7a7a\u95f4</p> <p>\u91c7\u7528YUV\u989c\u8272\u7a7a\u95f4\u7684\u91cd\u8981\u6027\u662f\u5b83\u7684\u4eae\u5ea6\u4fe1\u53f7Y\u548c\u8272\u5ea6\u4fe1\u53f7U\u3001V\u662f\u5206\u79bb\u7684</p> <ul> <li>\u5982\u679c\u53ea\u6709Y\u4fe1\u53f7\u5206\u91cf\u800c\u6ca1\u6709U\u3001V\u5206\u91cf\uff0c\u90a3\u4e48\u8fd9\u6837\u8868\u793a\u7684\u56fe\u5c31\u662f\u9ed1\u767d\u7070\u5ea6\u56fe</li> <li>\u5f69\u8272\u7535\u89c6\u91c7\u7528YUV\u7a7a\u95f4\u6b63\u662f\u4e3a\u4e86\u7528\u4eae\u5ea6\u4fe1\u53f7Y\u89e3\u51b3\u5f69\u8272\u7535\u89c6\u673a\u4e0e\u9ed1\u767d\u7535\u89c6\u673a\u7684\u517c\u5bb9\u95ee\u9898\uff0c\u4f7f\u9ed1\u767d\u7535\u89c6\u673a\u4e5f\u80fd\u63a5\u6536\u5f69\u8272\u4fe1\u53f7\u3002</li> </ul>"},{"location":"DIP/Basic/DIP/#transformation-between-color-spaces","title":"Transformation between color spaces","text":""},{"location":"DIP/Basic/DIP/#rgb-cmy","title":"RGB&lt;-&gt;CMY","text":"<p>\\(RGB-&gt;CMY\\\\     C = 255 \u2013 R\\\\       M = 255 \u2013 G\\\\       Y = 255 \u2013 B\\\\\\)</p>"},{"location":"DIP/Basic/DIP/#rgb-hsv","title":"RGB&lt;-&gt;HSV","text":"<p>Search in table:</p> <ul> <li>CIE has defined transformation tables</li> </ul> <p>\\(RGB&lt;-&gt;XYZ\\\\HSV&lt;-&gt;XYZ\\)</p> <ul> <li>Compute directly</li> </ul> <p></p> <p></p>"},{"location":"DIP/Basic/DIP/#rgb-cie-xyz-in-a-computable-way","title":"RGB&lt;-&gt;CIE XYZ in a computable way","text":"<p>\\(\\begin{gathered}\\begin{bmatrix} X  \\\\ Y \\\\ Z\\end{bmatrix}=\\begin{bmatrix} 0.608 &amp; 0.714 &amp; 0.200  \\\\0.299&amp; 0.587&amp;0.133 \\\\0.000 &amp;0.066&amp; 1.112\\end{bmatrix}\\begin{bmatrix} R \\\\ G\\\\ B\\end{bmatrix}\\quad\\end{gathered}\\)</p>"},{"location":"DIP/Basic/DIP/#cie-xyz-cie-lab","title":"CIE XYZ&lt;-&gt;CIE Lab*","text":""},{"location":"DIP/Basic/DIP/#rgb-yuv","title":"RGB \u548c YUV \u7684\u76f8\u4e92\u8f6c\u5316","text":"<p>RGB\uff08\u7ea2\u7eff\u84dd\uff09\u548cYUV\u662f\u4e24\u79cd\u989c\u8272\u8868\u793a\u65b9\u5f0f\uff0c\u5e38\u7528\u4e8e\u56fe\u50cf\u548c\u89c6\u9891\u5904\u7406\u4e2d\u3002RGB\u662f\u4e00\u79cd\u76f4\u63a5\u8868\u793a\u989c\u8272\u7684\u65b9\u5f0f\uff0c\u5176\u4e2d\u7ea2\u8272\uff08R\uff09\u3001\u7eff\u8272\uff08G\uff09\u548c\u84dd\u8272\uff08B\uff09\u5206\u91cf\u7684\u503c\u51b3\u5b9a\u4e86\u989c\u8272\u7684\u5177\u4f53\u5916\u89c2</p> <ul> <li>RGB\u53ef\u4ee5\u6d6e\u70b9\u8868\u793a\u65b9\u5f0f\uff1a\u53d6\u503c\u8303\u56f4\u4e3a <code>0.0 ~ 1.0</code></li> <li> <p>\u6216\u4ee5\u6574\u6570\u8868\u793a\uff1a\u53d6\u503c\u8303\u56f4\u4e3a <code>0 ~ 255</code> \u6216\u8005 <code>00 ~ FF</code>\u3002RGB \u989c\u8272\u6a21\u578b \u901a\u5e38\u7528\u4e8e\u5f69\u8272\u9634\u6781\u5c04\u7ebf\u7ba1\u548c\u5f69\u8272\u5149\u6805\u56fe\u5f62\u663e\u793a\u5668(\u8ba1\u7b97\u673a\u548c\u7535\u89c6\u673a\u91c7\u7528)\u3002</p> </li> <li> <p>YUV\u662f\u4e00\u79cd\u989c\u8272\u7a7a\u95f4\uff0c\u57fa\u4e8e <code>YUV</code> \u7684\u989c\u8272\u7f16\u7801\u662f\u6d41\u5a92\u4f53\u7684\u5e38\u7528\u7f16\u7801\u65b9\u5f0f\uff0c\u8fd9\u79cd\u8868\u8fbe\u65b9\u5f0f\u8d77\u521d\u662f\u4e3a\u4e86\u5f69\u8272\u7535\u89c6\u4e0e\u9ed1\u767d\u7535\u89c6\u4e4b\u95f4\u7684\u4fe1\u53f7\u517c\u5bb9\uff1b\u5176\u4e2d\uff1aY\uff1a\u8868\u793a\u660e\u4eae\u5ea6\uff08Luminance \u6216 Luma\uff09\uff0c\u4e5f\u79f0\u7070\u5ea6\u56fe\u3002U\u3001V\uff1a\u8868\u793a\u8272\u5ea6\uff08Chrominance \u6216 Chroma\uff09\uff0c\u4f5c\u7528\u662f\u63cf\u8ff0\u5f71\u50cf\u7684\u8272\u5f69\u53ca\u9971\u548c\u5ea6\uff0c\u7528\u4e8e\u6307\u5b9a\u50cf\u7d20\u7684\u989c\u8272\u3002</p> </li> </ul> <ul> <li>RGB\u8f6c\u5316\u4e3aYUV\u7684\u516c\u5f0f\u5982\u4e0b\uff1a</li> </ul> <p>\\(\\begin{gathered}\\begin{bmatrix} Y  \\\\ U \\\\ V\\end{bmatrix}=\\begin{bmatrix} 0.299 &amp; 0.587 &amp; 0.114  \\\\ \u22120.147&amp; \u22120.289 &amp;0.435 \\\\0.615 &amp;\u22120.515&amp; \u22120.100\\end{bmatrix}\\begin{bmatrix} R \\\\ G\\\\ B\\end{bmatrix}\\quad\\end{gathered}\\)</p> <ul> <li>YUV \u8f6c\u5316\u4e3aRGB\u7684\u516c\u5f0f\u5982\u4e0b\uff1a</li> </ul> <p>\\(\\begin{gathered}\\quad\\quad\\begin{bmatrix} R  \\\\ G \\\\ B\\end{bmatrix}=\\begin{bmatrix} 1.0000 &amp;0.0000&amp; 1.3707  \\\\1.0000&amp; \u22120.3376 &amp;-0.6980 \\\\ 1.0000&amp;1.7324&amp; 0.0000\\end{bmatrix}\\begin{bmatrix} Y \\\\ U\\\\ V\\end{bmatrix}\\quad\\end{gathered}\\)</p> <ul> <li>\u7531BMP\u5f69\u8272\u56fe\u8f6c\u4e3a\u7070\u5ea6\u56fe\u65f6\uff0c\u53ea\u9700\u5c06RGB\u8f6c\u4e3aYUV\uff0c\u5e76\u53ea\u4fdd\u7559 Y\u5206\u91cf \u5373\u53ef\u5f97\u5230\u7070\u5ea6\u56fe\u5728\u8c03\u8282BMP\u56fe\u7247\u4eae\u5ea6\u65f6\uff0c\u53ea\u9700\u5c06RGB\u8f6c\u4e3aYUV\uff0c\u6539\u53d8 Y \u5206\u91cf\u7684\u503c\uff0c\u968f\u540e\u5c06 YUV \u8f6c\u56de RGB \u5373\u53ef\u5f97\u5230\u88ab\u66f4\u6539\u8fc7\u4eae\u5ea6\u7684\u56fe\u7247</li> </ul>"},{"location":"DIP/Basic/DIP/#jpeg-format","title":"JPEG Format","text":"<ul> <li> <p>File extension: .JPEG, .JFIF, .JPG,  .JPE</p> </li> <li> <p>Compression format for static image :</p> </li> </ul> <p>As a counterpart of Moving Picture Expert Group. </p> <p>Lossy encoding method</p> <p>Allow user to make balance between image quality and image size. </p> <ul> <li> <p>Encoding based on transformation, e.g. Discrete Cosine Transformation (DCT)JPEG2000 is based on wavelet. </p> </li> <li> <p>Different manipulations for high-frequency signal and low-frequency signal.</p> </li> </ul>"},{"location":"DIP/Basic/DIP/#compression-strategy","title":"Compression Strategy","text":"<p>Compression strategy: According to the requirement of compression ratio, remove information from high frequency to low frequency. </p> <p>Advantages:</p> <ul> <li>High frequency information occupies much more memory. Hence, high frequency removal leads to high compression ratio</li> <li>Low frequency information preserves the principle structure and color distribution of object, which is the key factors of an image. </li> <li>Suitable for internet based visual media.</li> </ul> <p>\u538b\u7f29\u7b56\u7565\uff1a\u6839\u636e\u538b\u7f29\u6bd4\u8981\u6c42\uff0c\u4ece\u9ad8\u9891\u5230\u4f4e\u9891\u9010\u6b65\u524a\u51cf\u4fe1\u606f</p> <ul> <li>\u9ad8\u9891\u4fe1\u606f\u5360\u7528\u5b58\u50a8\u7a7a\u95f4\u5927\uff0c\u51cf\u5c11\u9ad8\u9891\u4fe1\u606f\u66f4\u5bb9\u6613\u83b7\u5f97\u9ad8\u538b\u7f29\u6bd4</li> <li>\u4f4e\u9891\u4fe1\u606f\u53ef\u4ee5\u4fdd\u7559\u7269\u4f53\u7684\u57fa\u672c\u8f6e\u5ed3\u548c\u8272\u5f69\u5206\u5e03\uff0c\u6700\u5927\u9650\u5ea6\u7ef4\u6301\u56fe\u50cf\u8d28\u91cf</li> <li>\u9002\u5408\u7528\u4e8e\u4e92\u8054\u7f51</li> </ul> <ul> <li>\u4eba\u773c\u5bf9\u4e8e\u4e00\u4e2a\u76f8\u5bf9\u8f83\u5927\u8303\u56f4\u7684\u533a\u57df\uff0c\u8fa8\u522b\u8272\u5f69\u7ec6\u5fae\u5dee\u5f02\u80fd\u529b\u6bd4\u8f83\u5f3a\uff08\u4f4e\u9891\uff09\uff0c\u4f46\u5bf9\u4e8e\u9ad8\u9891\u533a\u57df\uff0c\u5374\u8868\u73b0\u4e00\u822c</li> <li>\u53d7\u6b64\u542f\u53d1\uff0c\u4eba\u4eec\u53ef\u4ee5\u5bf9\u9ad8\u9891\u90e8\u5206\u8fdb\u884c\u91cf\u5316\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u628a\u9891\u57df\u4e0a\u7684\u6bcf\u4e2a\u5206\u91cf\uff0c\u9664\u4ee5\u9488\u5bf9\u8be5\u5206\u91cf\u7684\u5e38\u6570\uff0c\u7136\u540e\u56db\u820d\u4e94\u5165\u53d6\u6574\uff0c\u8fd9\u6837\u4e00\u822c\u4f1a\u628a\u9ad8\u9891\u5206\u91cf\u53d8\u4e3a0</li> <li>\u4f46\u8fd9\u6837\u64cd\u4f5c\u5c31\u8981\u6c42\u9488\u5bf9\u6bcf\u4e00\u4e2a\u5206\u91cf\u8bbe\u7f6e\u4e00\u4e2a\u5e38\u6570\u503c\uff0c\u6240\u4ee5\u5c31\u6700\u7ec8\u5f62\u6210\u4e86\u91cf\u5316\u8868\u3002</li> </ul> <p>More specifically,refer to the PPT(Chapter I)</p>"},{"location":"DIP/Basic/DIP/#disadvantages","title":"Disadvantages","text":"<ul> <li>Not for line drawing, text, symbol, icon, etc.. </li> <li>Its lossy compression leads to unavoidable artifacts.</li> </ul> <p>\u4e0d\u9002\u5408\u7528\u4e8e\u7ebf\u6761\u753b\u3001\u6587\u5b57\u3001\u56fe\u6807\u7b49\uff0c\u5176\u6709\u635f\u538b\u7f29\u4f1a\u5bfc\u81f4\u8fd9\u7c7b\u5bf9\u8c61\u7684\u7455\u75b5\u4e25\u91cd</p>"},{"location":"DIP/Basic/DIP/#tiff-format","title":"TIFF format","text":""},{"location":"DIP/Basic/DIP/#gif-format","title":"GIF format","text":""},{"location":"DIP/Basic/DIP/#chains","title":"Chains","text":"<p>Chains are used for description of object borders</p> <p>Chains can be represented using static data structures (e.g., 1D arrays); their size is the longest length of the chain expected.</p>"},{"location":"DIP/Basic/DIP/#run-length-encoding-rle","title":"Run length encoding (RLE)","text":"<p>RLE is run-length encoding. It is used to encode the location of foreground objects in segmentation. Instead of outputting a mask image, you give a list of start pixels and how many pixels after each of those starts is included in the mask.</p> <ul> <li>In binary images, run length coding records only areas that belong to the object in the image,the area is then represented as a list of lists. </li> <li>Each row of the image is described by a sublist, the first element of which is the row number. Subsequent terms are coordinate pairs; the first element of a pair is the beginning of a run and the second is the end. </li> <li>There can be several such sequences in the row. </li> </ul> <p></p> <p></p>"},{"location":"DIP/DL/DL/","title":"Deep Learning","text":"<p> <ul> <li>CNNs have won several competitions</li> <li> <p>ImageNet, Kaggle Facial Expression, Kaggle Multimodal Learning, German Traffic Signs, Handwriting, \u2026.</p> </li> <li> <p>CNNs are deployed in many practical applications</p> </li> <li> <p>Image recognition, speech recognition, Google\u2019s and Baidu\u2019s photo taggers</p> </li> <li> <p>xCNNs are applicable to array data where nearby values are correlated</p> </li> <li> <p>Images, sound, time-frequency representations, video, volumetric images, RGB-Depth images, \u2026</p> </li> <li> <p>CNN is one of the few deep models that can be trained in supervised way.</p> </li> <li>Easy to understand and implement.</li> </ul>"},{"location":"DIP/DL/DL/#what-is-the-neural","title":"What is the neural ?","text":""},{"location":"DIP/DL/DL/#multilayer-neural-network","title":"Multilayer neural network","text":"<ul> <li>And return to repeat step 1-3 until error is smaller than threshold</li> </ul>"},{"location":"DIP/DL/DL/#back-propagation","title":"Back propagation","text":"<p>https://towardsdatascience.com/understanding-backpropagation-algorithm-7bb3aa2f95fd</p> <p>http://galaxy.agh.edu.pl/%7Evlsi/AI/backp_t_en/backprop.html</p> <ul> <li>Proof https://towardsdatascience.com/backpropagation-the-natural-proof-946c5abf63b1</li> </ul> <p></p> <ul> <li>\\(\\eta\\) \u5b66\u4e60\u7387</li> </ul> <p>\u5b66\u4e60\u7387\u4f4e\uff0c\u6536\u655b\u6162\uff0c\u5bb9\u6613\u6389\u5230\u5751\u91cc\u9677\u5165\u5c40\u90e8\u6700\u4f18\uff1b\u5b66\u4e60\u7387\u9ad8\uff0c\u53ef\u80fd\u4f7f\u5f97\u6536\u655b\u8fc7\u7a0b\u4e0d\u7a33\u5b9a\uff0c\u6765\u56de\u9707\u8361\uff0c\u4e00\u76f4\u4e0d\u6536\u655b</p> <p>idea:</p> <ul> <li>\u8bbe\u7f6e\u4e0d\u540c\u7684\u5b66\u4e60\u7387\uff0c\u770b\u54ea\u79cd\u60c5\u51b5\u6700\u597d</li> <li>\u8bbe\u8ba1\u4e00\u4e2a\u81ea\u9002\u5e94\u5b66\u4e60\u7387\u3002\u6b64\u65f6\u5b66\u4e60\u7387\u4e0d\u518d\u56fa\u5b9a\uff0c\u53ef\u4ee5\u901a\u8fc7\u5916\u5728\u6761\u4ef6\u7b97(\u68af\u5ea6\uff0c\u5b66\u4e60\u8981\u6709\u591a\u5feb\uff0c\u7279\u5f81\u6743\u91cd\u7684\u5927\u5c0f...)</li> </ul>"},{"location":"DIP/DL/DL/#deep-learning-for-image-understanding","title":"Deep Learning For Image Understanding","text":""},{"location":"DIP/DL/DL/#advantages-for-convolution","title":"Advantages for convolution","text":"<p>Example:</p> <ul> <li>200x200 image</li> <li>10 filters of size 10x10</li> <li>10 feature maps of size 200x200 </li> <li>400,000 hidden units with 10x10 </li> <li>fields=1000 parameters</li> </ul> <p></p> <p>\u4e3a\u4ec0\u4e48\u5f15\u5165CNN\u53ef\u4ee5\u5927\u89c4\u6a21\u51cf\u5c11\u6743\u6570\u53c2\u6570\u8bad\u7ec3\u91cf\u56e0\u4e3aCNN\u901a\u8fc7</p> <p>1\uff09 \u5c40\u90e8\u8fde\u63a5\uff08Local Connectivity\uff09</p> <p>2\uff09 \u6743\u503c\u5171\u4eab\uff08Shared Weights\uff09</p> <p>3\uff09 \u6c60\u5316\uff08Pooling\uff09</p> <ul> <li>\u6765\u964d\u4f4e\u53c2\u6570\u91cf</li> </ul>"},{"location":"DIP/DL/DL/#pooling","title":"Pooling","text":"<p>CNN\u6c60\u5316\u53ef\u4ee5\u901a\u8fc7\u6c60\u5316\u5c42\u6765\u964d\u4f4e\u5377\u79ef\u5c42\u8f93\u51fa\u7684\u7279\u5f81\u7ef4\u5ea6\uff0c\u5728\u6709\u6548\u51cf\u5c11\u7f51\u7edc\u53c2\u6570\u7684\u540c\u65f6\u8fd8\u53ef\u4ee5\u9632\u6b62\u8fc7\u62df\u5408\u73b0\u8c61</p> <p>https://zhuanlan.zhihu.com/p/78760534</p> <p></p>"},{"location":"DIP/DL/DL/#cnn-in-detail","title":"CNN in Detail","text":"<ul> <li> <p>\u6b65\u957f\uff1f</p> </li> <li> <p>Refer to the PPT !</p> </li> <li>\u4f20\u7edf\u56fe\u50cf\u5206\u7c7b\uff1a\u5206\u6bb5\uff1b\u6df1\u5ea6\u5b66\u4e60\u56fe\u50cf\u5206\u7c7b\uff1a\u7aef\u5230\u7aef</li> <li>\u4ea4\u53c9\u5546</li> </ul> <p></p> <ul> <li>Minimize Loss - Gradient Descent.</li> </ul> <p></p>"},{"location":"DIP/Fourier/Fourier/","title":"Fourier transform","text":"<p> <p>Many mathematicians tried to find a way to approximate a complex function by some simple functions for many years. Apart from the theoretical concern, this technique is invaluable for many practical applications.</p> <p>Before the invention of differential calculus, this problem kept open. </p>"},{"location":"DIP/Fourier/Fourier/#fourier-transform","title":"Fourier Transform","text":"<ul> <li>British mathematician Taylor invented a method to represent one analytic function by infinite linear combination of power functions.</li> <li>In the middle of 18<sup>th</sup> century, Fourier found that the infinite linear combination of trigonometric functions could represent a general function in a finite interval, when he was studying the heat propagation problem.</li> </ul> Fourier <p>\\(\\begin{align*}f(x)&amp;=\\frac{1}{2}a_0+\\sum_{n=1}^{\\infty}a_ncos(nx)+\\sum_{n=1}^{\\infty}b_nsin(nx)\\\\ a_0 &amp;= \\frac{1}{\\pi}\\int_{-\\pi}^{\\pi}f(x)dx\\\\a_n &amp;= \\frac{1}{\\pi}\\int_{-\\pi}^{\\pi}f(x)cos(nx)dx\\\\b_n &amp;= \\frac{1}{\\pi}\\int_{-\\pi}^{\\pi}f(x)sin(nx)dx \\end{align*}\\)</p> <p>Just like Calculus invented by Newton, Fourier analysis is another mathematical tool</p> <ul> <li>BIOM: fake iris detection</li> <li>CS: anti-aliasing in computer graphics</li> </ul>"},{"location":"DIP/Fourier/Fourier/#complex-numbers","title":"Complex Numbers","text":"<ul> <li> <p>Magnitude-Phase\uff08vector\uff09\\(x=|x|e^{j\\phi(x)}\\) where \\(|x|=\\sqrt{a^2+b^2}\\ \\phi(x)=tan^{-1(\\frac{b}{a})}\\)</p> </li> <li> <p>Basic Properties</p> </li> </ul> <p>\\(xy=|x|e^{j\\phi(x)}|y|e^{j\\phi(y)}=|x||y|e^{j(\\phi(x)+\\phi(y))}\\)</p> <p>\\(|x|=|x^*|\\) </p> <p>\\(\\phi(x)=-\\phi(x^*)\\)</p> <p>\\(xx^*=|x|^2\\)</p> <ul> <li>Euler\u2019s formula \\(e^{j\\theta}=cos\\theta + isin\\theta\\)</li> </ul> Basic Properties <p> </p>"},{"location":"DIP/Fourier/Fourier/#image-transform","title":"Image Transform","text":"<p>Many times, image processing tasks are best performed in transformed domain other than the spatial domain.</p> <p>Key steps:</p> <p>(1) Transform the image</p> <p>(2) Carry out the task(s) in the transformed domain.</p> <p>(3) Apply inverse transform to return to the spatial domain.</p> <p></p>"},{"location":"DIP/Fourier/Fourier/#transformation-kernels","title":"Transformation Kernels","text":""},{"location":"DIP/Fourier/Fourier/#continuous-fourier-transform-ft","title":"Continuous Fourier Transform (FT)","text":"<ul> <li>\\(1-D\\)</li> </ul> <p>Transforms a signal (i.e., function) from the spatial domain to the frequency domain.</p> <p></p> <ul> <li>Example: Removing undesirable frequencies</li> </ul> <p>To remove certain frequencies, set their corresponding F(u) coefficients to zero!</p> <p></p> <ul> <li>How do frequencies show up in an image?</li> </ul> <p>Low frequencies correspond to slowly varying information (e.g., continuous surface).</p> <p>High frequencies correspond to quickly varying information (e.g., edges)</p> <ul> <li>\\(2-D\\)</li> </ul> <p></p>"},{"location":"DIP/Fourier/Fourier/#discrete-fourier-transform-dft","title":"Discrete Fourier Transform (DFT)","text":"<ul> <li>\\(2-D\\)</li> </ul> <p>\u4e8c\u7ef4\u79bb\u6563\u5085\u7acb\u53f6\u53d8\u6362\u5b9a\u4e49\u4e3a</p> <p></p> <p>\u4e8c\u7ef4\u79bb\u6563\u5085\u7acb\u53f6\u9006\u53d8\u6362\u5b9a\u4e49\u4e3a</p> <p></p> <p>\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u53ef\u5c06\u4e0a\u8ff0\u4e24\u5f0f\u6539\u4e3a\u5411\u91cf\u5f62\u5f0f</p> <p></p> <p></p> <p>\u5176\u4e2d  \u3002</p> For Images <p> </p> <p>\\((u,v)\\)-- \u76f8\u4f4d</p> <p>\\(F(u,v)\\)-- \u5e45\u503c</p> <p></p>"},{"location":"DIP/Fourier/Fourier/#fast-fourier-transformfft","title":"Fast Fourier Transform\uff08FFT\uff09","text":"<p>Speed up the discrete Fourier Transform</p> <p>There are many repetitive work in the computation.</p> <p>Cooley and Tukey presented in 1965:</p> <ul> <li>Divide the original N-points sequence into several short sequence successively</li> <li>Compute the Discrete Fourier Transform of these short sequences</li> <li>Make up the wanted transform value</li> <li>Computational workload: \\(2N^2\\rightarrow2Nlog_2N\\)</li> </ul>"},{"location":"DIP/Fourier/Fourier/#fft-principle","title":"FFT Principle","text":"<ul> <li>\u52d8\u8bef\uff1a \\(F(k)=\\frac{1}{N}\\sum_{n=0}^{N-1}f(n)e^{-j2\\pi kn/N}\\)</li> </ul> <ul> <li> <p>HENCE   \\(F(k+M)=\\lfloor F_e(k)-F_o(k)W_{2M}^k\\rfloor\\)!! </p> </li> <li> <p>\u610f\u4e49\uff1a\u5bf9\u4e00\u4e2a\u957f\u5ea6\u4e3a N \u7684\u5e8f\u5217\u8fdb\u884c\u5085\u7acb\u53f6\u53d8\u6362\u53ef\u4ee5\u901a\u8fc7\u5c06\u5176\u5206\u6210\u4e24\u534a\u8ba1\u7b97\uff0c\u5bf9\u7b2c\u4e00\u90e8\u5206\u7684\u8ba1\u7b97\u9700\u8981\u901a\u8fc7\u8ba1\u7b97\u4e24\u4e2a\u957f\u5ea6\u4e3a N/2 \u957f\u5ea6\u5e8f\u5217\u7684\u5085\u7acb\u53f6\u53d8\u6362\u5f0f\u8fdb\u884c\uff0c\u7136\u540e\u5229\u7528\u8fd9\u4e24\u4e2a\u957f\u5ea6\u4e3a N/2 \u7684\u5e8f\u5217\u53ef\u4ee5\u5f97\u5230\u7b2c\u4e8c\u90e8\u5206\u7684\u503c</p> </li> </ul>"},{"location":"DIP/Fourier/Fourier/#magnitude-and-phase-of-dft","title":"Magnitude and Phase of DFT","text":"<p>Hint: use inverse DFT to reconstruct the image by magnitude or phase only information</p> <ul> <li> <p>magnitude determines the contribution of each component!(cannot be used to reconstruct a image!)</p> </li> <li> <p>phase determines which components are present!</p> </li> <li> <p>PHASE is more important!</p> </li> </ul> <p></p>"},{"location":"DIP/chap2/chap2/","title":"Binary image and morphology","text":"<p>"},{"location":"DIP/chap2/chap2/#binary-image-and-morphological-operation","title":"Binary Image and Morphological Operation","text":""},{"location":"DIP/chap2/chap2/#binary-image","title":"Binary image","text":"<p>\u4f18\u70b9\uff1a\u66f4\u5c0f\u7684\u5185\u5b58\u9700\u6c42 \u8fd0\u884c\u901f\u5ea6\u66f4\u5feb \u4e3a\u4e8c\u503c\u56fe\u50cf\u5f00\u53d1\u7684\u7b97\u6cd5\u5f80\u5f80\u53ef\u4ee5\u7528\u4e8e\u7070\u5ea6\u7ea7\u56fe\u50cf \u66f4\u4fbf\u5b9c \u7f3a\u70b9\uff1a\u5e94\u7528\u8303\u56f4\u6bd5\u7adf\u6709\u9650\uff1b \u66f4\u65e0\u6cd5\u63a8\u5e7f\u5230\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u8868\u73b0\u529b\u6b20\u7f3a\uff0c\u4e0d\u80fd\u8868\u73b0\u7269\u4f53\u5185\u90e8\u7ec6\u8282\u65e0\u6cd5\u63a7\u5236\u5bf9\u6bd4\u5ea6</p>"},{"location":"DIP/chap2/chap2/#_1","title":"\u56fe\u50cf\u4e8c\u503c\u5316\uff1a","text":""},{"location":"DIP/chap2/chap2/#1","title":"\uff081\uff09\u4e8c\u503c\u56fe\u50cf","text":"<p>\u4e8c\u503c\u56fe\u50cf\uff08Binary Image\uff09\u4e2d\uff0c\u50cf\u7d20\u503c\u9650\u5b9a\u4e3a \\(0\\) \u6216 \\(1\\)\uff08\u7f16\u7a0b\u4e2d\u4e00\u822c\u7528 \\(0\\) \u548c\\(255\\) \u6765\u6784\u9020\u4e8c\u503c\u56fe\u50cf)\u3002</p> <ul> <li>\u4f18\u70b9\uff1a\u5360\u7528\u66f4\u5c11\u5185\u5b58\u3001\u66f4\u9ad8\u6548\uff0c\u6709\u65f6\u53ef\u5e94\u7528\u4e8e\u7070\u5ea6\u56fe\u50cf\uff0c\u540c\u65f6\u66f4\u52a0\u4fbf\u5b9c\u3002</li> <li>\u7f3a\u70b9\uff1a\u5e94\u7528\u9886\u57df\u6709\u9650\uff0c\u4e0d\u80fd\u7528\u4e8e\u4e09\u7ef4\u6570\u636e\uff0c\u8868\u8fbe\u80fd\u529b\u8f83\u5f31\uff0c\u96be\u4ee5\u4f20\u8fbe\u89c6\u89c9\u7ec6\u8282\uff0c\u4e5f\u4e0d\u80fd\u63a7\u5236\u5bf9\u6bd4\u5ea6\u3002</li> </ul>"},{"location":"DIP/chap2/chap2/#2otsus-algorithm","title":"\uff082\uff09\u5927\u6d25\u7b97\u6cd5\uff08Otsu's algorithm\uff09","text":"<p>\u5728\u628a\u7070\u5ea6\u56fe\u8f6c\u6362\u4e3a\u4e8c\u503c\u56fe\u50cf\u7684\u65f6\u5019\uff0c\u4e00\u4e2a\u57fa\u672c\u7684\u60f3\u6cd5\u662f\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684\u9608\u503c\uff08Threshold\uff09\uff0c\u50cf\u7d20\u70b9\u503c\u6bd4\u9608\u503c\u5927\u7684\u8bbe\u4e3a\\(255\\)\uff0c\u6bd4\u9608\u503c\u5c0f\u7684\u8bbe\u4e3a\\(0\\)\u3002\u5373\u4e3a\u5982\u4e0b\uff1a</p> <p>\\(\\left\\{                \\begin{array}{**lr**}                   I(x,y) = 0\\ if\\ I(x,y)\\leq Threshold  \\\\              I(x,y) = 255\\ if\\ I(x,y)\\geq Threshold \\\\                 \\end{array}   \\right.\\)</p> <ul> <li>\u800c\u5927\u6d25\u7b97\u6cd5\u5c31\u662f\u4e00\u79cd\u81ea\u52a8\u786e\u5b9a\u8be5\u5408\u9002\u9608\u503c\u7684\u65b9\u6cd5\uff0c\u65e8\u5728\u627e\u5230\u4e00\u4e2a\u9608\u503c\uff0c\u5c06\u56fe\u50cf\u5206\u6210\u4e24\u4e2a\u7c7b\u522b\uff08\u524d\u666f\u548c\u80cc\u666f\uff09\uff0c\u4ee5\u4f7f\u4e24\u4e2a\u7c7b\u522b\u5185\u7684\u65b9\u5dee\u6700\u5c0f\uff0c\u540c\u65f6\u4e24\u4e2a\u7c7b\u522b\u4e4b\u95f4\u7684\u65b9\u5dee\u6700\u5927\uff0c\u6b65\u9aa4\u5982\u4e0b\u3002</li> </ul> <p>a.\u7edf\u8ba1\u50cf\u7d20\u70b9\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c</p> <p>b.\u5bf9\u4e8e\u6bcf\u4e2a\u53ef\u80fd\u7684\u9608\u503c\uff0c\u8ba1\u7b97\u5206\u6210\u4e24\u4e2a\u7c7b\u522b\u540e\u7684\u80cc\u666f\u548c\u524d\u666f\u7684\u5185\u90e8\u534f\u65b9\u5dee\u548c\u5916\u90e8\u534f\u65b9\u5dee\u3002</p> <p>c.\u9009\u62e9\u6700\u5927\u5916\u90e8\u548c\u6700\u5c0f\u5185\u90e8\u534f\u65b9\u5dee\u5bf9\u5e94\u7684 threshold\u4f5c\u4e3a\u4e8c\u503c\u5316\u9608\u503c\u3002</p> <p>d.\u5e94\u7528\u9009\u62e9\u7684\u9608\u503c\u5c06\u56fe\u50cf\u5206\u5272\u6210\u524d\u666f\u548c\u80cc\u666f\u3002</p> <p>\u5176\u4e2d\uff0c\u6700\u5927\u5916\u90e8\u65b9\u5dee\u548c\u6700\u5c0f\u5185\u90e8\u65b9\u5dee\u662f\u7b49\u4ef7\u7684\uff0c\u6211\u4eec\u9009\u62e9\u627e\u5230\u6700\u5927\u5916\u90e8\u65b9\u5dee\uff0c\u63a8\u5bfc\u8fc7\u7a0b\u5982\u4e0b\uff1a</p> <p>\u8bbe\u56fe\u50cf\u5c3a\u5bf8\u4e3a\\(M\\ *\\ N\\)\uff0c\u5176\u4e8c\u503c\u5316\u7684\u6700\u4f73\u9608\u503c\u4e3a\\(T\\)\uff0c\u8be5\u9608\u503c\u5c06\u56fe\u50cf\u5206\u4e3a\u80cc\u666f\u548c\u76ee\u6807\u4e24\u4e2a\u7c7b\u522b\u3002\u5176\u4e2d\u5c5e\u4e8e\u80cc\u666f\u7684\u50cf\u7d20\u70b9\u6570\u91cf\u4e3a\\(N0\\),\u5c5e\u4e8e\u76ee\u6807\u7684\u50cf\u7d20\u70b9\u6570\u91cf\u4e3a\\(N1\\),\u80cc\u666f\u50cf\u7d20\u70b9\u6570\u5360\u6574\u5e45\u56fe\u50cf\u7684\u6bd4\u4f8b\\(\\omega0\\),\u5176\u7070\u5ea6\u5747\u503c\\(\u03bc0\\),\u76ee\u6807\u50cf\u7d20\u70b9\u6570\u5360\u6574\u5e45\u56fe\u50cf\u7684\u6bd4\u4f8b\u4e3a\\(\u03c91\\),\u5176\u7070\u5ea6\u5747\u503c\u4e3a\\(\u03bc1\\) \uff0c\u6574\u5e45\u56fe\u50cf\u7684\u7070\u5ea6\u5747\u503c\u4e3a\\(\\mu\\)\u3002</p> <p>\\(\\omega_0=\\frac{N0}{M*N}\\\\\\) \\(\\omega_1=\\frac{N1}{M*N}\\) \\(N0+N1=M*N\\\\\\) \\(\\omega0\\ + \\omega1\\ = 1\\\\\\)</p> <p>\\(\\mu = \\frac{\\mu0*N0+\\mu1*N1}{M*N}=\\mu0\\omega0\\ + \\mu1\\omega1\\\\\\)</p> <p>\\(\u7c7b\u5185\u65b9\u5dee(Within-class\\ variance)\u516c\u5f0f:\\)</p> <p>\\(\\sigma_{Withen}^{2}=\\omega_{0} \\sigma_{0}^{2}+\\omega_{1} \\sigma_{1}^{2} \\\\\\)</p> <p>\\(\u7c7b\u95f4\u65b9\u5dee(Between-class\\ variance)\u7684\u516c\u5f0f:\\sigma_{Between}^{2}=\\sigma^{2}-\\sigma_{Within}^{2}\\\\\\)</p> <p>\\(\u6709\u6b64\u53ef\u63a8\u5bfc\u5f97\u5230\\)</p> <p>\\(\\sigma_{Between}^{2}=\\omega_{0}(\\mu_{0}-\\mu)^{2}+\\omega_{1}(\\mu_{1}-\\mu)^{2}\\)</p> <p>\\(\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\omega0(\\mu0-\\omega0\\mu0-\\omega1\\mu1)^{2}+\\omega1(\\mu1-\\omega0\\mu0-\\omega1\\mu1)^{2}\\) \\(\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\omega0(\\omega1\\mu0-\\omega1\\mu1)^{2}+\\omega1(\\omega0\\mu1-\\omega0\\mu0)^{2}\\\\\\) \\(\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =(\\omega0\\omega1^{2}+\\omega1\\omega0^{2})(\\mu1-\\mu0)^{2}\\\\\\)</p> <p>\\(\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\omega0\\omega1(\\mu0-\\mu1)^{2}\\\\\\)</p> <ul> <li>\u5373\u5728\u8ba1\u7b97\u6700\u5927\u5916\u90e8\u548c\u6700\u5c0f\u5185\u90e8\u65b9\u5dee\u65f6\uff0c\u53ea\u9700\u5224\u65ad\\(\\omega0\\omega1(\\mu0-\\mu1)^{2}\\)\u53d6\u5f97\u6700\u5927\u503c\u5373\u53ef</li> </ul> <p>Step 1: \u786e\u5b9a\u539f\u59cb\u56fe\u50cf\u4e2d\u50cf\u7d20\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c</p> <p>Step 2: \u6700\u5c0f\u503c\u52a01\u4f5c\u4e3a\u521d\u59cbthreshold\u5bf9\u539f\u59cb\u56fe\u50cf\u8fdb\u884c\u4e8c\u503c\u5316\u64cd\u4f5c</p> <p>Step 3: \u6839\u636e\u5bf9\u5e94\u5173\u7cfb\u786e\u5b9a\u524d\u666f\u548c\u80cc\u666f\uff0c\u5206\u522b\u8ba1\u7b97\u5f53\u524dthreshold\u4e0b\u7684\u5185\u90e8\u534f\u65b9\u5dee\u548c\u5916\u90e8\u534f\u65b9\u5dee</p> <p>Step 4: \u56de\u5230Step 2\u76f4\u5230\u8fbe\u5230\u50cf\u7d20\u6700\u5927\u503c</p> <p>Step 5\uff1a\u627e\u5230\u6700\u5927\u5916\u90e8\u548c\u6700\u5c0f\u5185\u90e8\u534f\u65b9\u5dee\u5bf9\u5e94\u7684threshold.</p> <ul> <li>\u524d\u8ff0thresholding\u7b56\u7565\u63a8\u5e7f\u5230\u5f69\u8272\u56fe\u50cf\uff0c\u540c\u65f6\u8003\u8651rgb\u4e09\u4e2a\u901a\u9053\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u9488\u5bf9\u7279\u5b9a\u7684\u8272\u5f69\u8fdb\u884cthresholding\u64cd\u4f5c\uff0c</li> </ul>"},{"location":"DIP/chap2/chap2/#_2","title":"\u6539\u8fdb","text":"<ul> <li>\u5c40\u90e8\u81ea\u9002\u5e94\u64cd\u4f5c\u8bbe\u5b9a\u4e00\u4e2a\u5c40\u90e8\u7a97\u53e3\uff0c\u5728\u6574\u4e2a\u56fe\u50cf\u4e0a\u6ed1\u52a8\u8be5\u7a97\u53e3</li> <li> <p>\u5bf9\u4e8e\u6bcf\u4e00\u7a97\u53e3\u4f4d\u7f6e\uff0c\u786e\u5b9a\u9488\u5bf9\u8be5\u7a97\u53e3\u7684threshold</p> </li> <li> <p>\u76f8\u6bd4\u5168\u5c40\u5927\u6d25\u6cd5\uff0c\u6211\u4eec\u4f9d\u6b21\u679a\u4e3e\u7070\u5ea6\u56fe\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\\(\uff08i,j)\\)\uff0c\u4ee5\u7528\u6237\u8f93\u5165\u4e00\u4e2a\u6574\u6570\u4e3a\u8fb9\u957f\uff0c\u5728\\((i - length / 2, j - length / 2, i + length / 2, j + length / 2, i, j)\\)\u8fd9\u4e2a\u6b63\u65b9\u5f62\u4e2d\u8fdb\u884c\u5927\u6d25\u6cd5\uff0c\u5f97\u5230\u9608\u503c\u540e\u4ec5\u5bf9\\((i,j)\\)\u70b9\u8fdb\u884c\u4e8c\u503c\u5316\u5904\u7406\u3002</p> </li> <li> <p>\u76f8\u6bd4\u5168\u5c40\u5927\u6d25\u6cd5\uff0c\u5c40\u90e8\u5927\u6d25\u6cd5\u8017\u65f6\u663e\u8457\u589e\u52a0\u3002</p> </li> </ul>"},{"location":"DIP/chap2/chap2/#morphological-operation","title":"Morphological Operation","text":"<p>\u200b   \u6570\u5b66\u5f62\u6001\u5b66\uff08\u4e5f\u79f0\u56fe\u50cf\u4ee3\u6570\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u5206\u6790\u56fe\u50cf\u5f62\u6001\u548c\u7ed3\u6784\u7684\u5de5\u5177\u3002\u5176\u57fa\u672c\u601d\u60f3\u662f\u901a\u8fc7\u5229\u7528\u7ed3\u6784\u5143\u7d20\u6765\u5ea6\u91cf\u548c\u63d0\u53d6\u5f62\u72b6\uff0c\u4ece\u800c\u5b9e\u73b0\u5bf9\u56fe\u50cf\u7684\u5206\u6790\u548c\u8bc6\u522b\u3002\u56fe\u50cf\u5f62\u6001\u5b66\u64cd\u4f5c\u57fa\u4e8e\u96c6\u5408\u8bba\uff0c\u53ef\u4ee5\u7b80\u5316\u56fe\u50cf\uff0c\u53bb\u9664\u4e0d\u9700\u8981\u7684\u7ed3\u6784\uff0c\u540c\u65f6\u4fdd\u7559\u4e3b\u8981\u7684\u5f62\u72b6\u7279\u5f81\u3002\u5728\u8fd9\u91cc\u6709\u56db\u79cd\u5f62\u6001\u5b66\u64cd\u4f5c\u7b26\uff1a\u81a8\u80c0\u3001\u8150\u8680\u3001\u5f00\u8fd0\u7b97\u548c\u95ed\u8fd0\u7b97\u3002</p> <p>\u200b   \u5728\u4e0b\u9762\u7684\u4ecb\u7ecd\u4e2d\uff0c\u6211\u4eec\u7684 A \u6307\u4e8c\u503c\u56fe\u50cf; B \u6307\u4e8c\u503c\u6a21\u677f\uff0c\u79f0\u4e3a\u7ed3\u6784\u5143(structure element)\u3002</p>"},{"location":"DIP/chap2/chap2/#_3","title":"\u81a8\u80c0","text":"<p>\u200b   \u5f62\u6001\u5b66\u7684\u81a8\u80c0\u64cd\u4f5c\u662f\u56fe\u50cf\u5904\u7406\u4e2d\u7684\u4e00\u79cd\u57fa\u672c\u64cd\u4f5c\uff0c\u901a\u5e38\u7528\u4e8e\u589e\u5f3a\u56fe\u50cf\u4e2d\u7684\u7279\u5b9a\u76ee\u6807\u6216\u7ed3\u6784\uff0c\u4f7f\u5176\u66f4\u52a0\u663e\u8457\u548c\u5bb9\u6613\u68c0\u6d4b\u3002\u81a8\u80c0\u64cd\u4f5c\u7684\u4e3b\u8981\u601d\u60f3\u662f\u5229\u7528\u4e00\u4e2a\u79f0\u4e3a\u7ed3\u6784\u5143\u7d20\u7684\u5c0f\u7a97\u53e3\u6216\u6a21\u677f\uff0c\u6cbf\u7740\u56fe\u50cf\u7684\u5404\u4e2a\u65b9\u5411\u626b\u63cf\uff0c\u5e76\u6839\u636e\u7ed3\u6784\u5143\u7d20\u4e0e\u56fe\u50cf\u7684\u91cd\u53e0\u7a0b\u5ea6\u6765\u6539\u53d8\u56fe\u50cf\u7684\u50cf\u7d20\u503c\u3002</p> <p>\u200b   \u81a8\u80c0\u64cd\u4f5c\u7684\u7ed3\u679c\u901a\u5e38\u662f\u589e\u5f3a\u4e86\u539f\u59cb\u56fe\u50cf\u4e2d\u7684\u76ee\u6807\u6216\u7279\u5b9a\u7ed3\u6784\u3002\u8fd9\u662f\u56e0\u4e3a\u5b83\u53ef\u4ee5\u5c06\u76ee\u6807\u533a\u57df\u6269\u5c55\uff0c\u586b\u5145\u7a7a\u6d1e\uff0c\u4f7f\u8fb9\u7f18\u66f4\u52a0\u6e05\u6670\u3002\u56e0\u6b64\uff0c\u81a8\u80c0\u64cd\u4f5c\u53ef\u7528\u4e8e\u6539\u5584\u56fe\u50cf\u4e2d\u7684\u7279\u5b9a\u7279\u5f81\uff0c\u4f7f\u5b83\u4eec\u66f4\u5bb9\u6613\u68c0\u6d4b\u548c\u5206\u6790\u3002 $$ A\u2295B={ z|(B)_z \u2229A\\ne\u2205 } $$</p> <p></p> <ul> <li> <p>Dilation: Bridging gaps in images</p> </li> <li> <p>\u7531B\u5bf9A\u81a8\u80c0\u6240\u4ea7\u751f\u7684\u4e8c\u503c\u56fe\u8c61D\u662f\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u70b9(x,y)\u7684\u96c6\u5408\uff1a</p> </li> </ul> <p>\u5982\u679cB\u7684\u539f\u70b9\u5e73\u79fb\u5230\u70b9(x,y)\uff0c\u90a3\u4e48\u5b83\u4e0eA\u7684\u4ea4\u96c6\u975e\u7a7a\u3002 </p>"},{"location":"DIP/chap2/chap2/#_4","title":"\u8150\u8680","text":"<p>\u200b   \u5f62\u6001\u5b66\u7684\u8150\u8680\u64cd\u4f5c\u662f\u56fe\u50cf\u5904\u7406\u4e2d\u7684\u4e00\u79cd\u57fa\u672c\u64cd\u4f5c\uff0c\u901a\u5e38\u7528\u4e8e\u51cf\u5c0f\u56fe\u50cf\u4e2d\u7684\u7279\u5b9a\u76ee\u6807\u6216\u7ed3\u6784\uff0c\u4ece\u800c\u5f31\u5316\u6216\u6d88\u9664\u4e00\u4e9b\u7279\u5f81\u3002\u8150\u8680\u64cd\u4f5c\u7684\u4e3b\u8981\u601d\u60f3\u662f\u5229\u7528\u4e00\u4e2a\u79f0\u4e3a\u7ed3\u6784\u5143\u7d20\u7684\u5c0f\u7a97\u53e3\u6216\u6a21\u677f\uff0c\u6cbf\u7740\u56fe\u50cf\u7684\u5404\u4e2a\u65b9\u5411\u626b\u63cf\uff0c\u5e76\u6839\u636e\u7ed3\u6784\u5143\u7d20\u4e0e\u56fe\u50cf\u7684\u91cd\u53e0\u7a0b\u5ea6\u6765\u6539\u53d8\u56fe\u50cf\u7684\u50cf\u7d20\u503c\u3002</p> <p>\u200b   \u8150\u8680\u64cd\u4f5c\u7684\u7ed3\u679c\u901a\u5e38\u662f\u51cf\u5c0f\u4e86\u539f\u59cb\u56fe\u50cf\u4e2d\u7684\u76ee\u6807\u6216\u7279\u5b9a\u7ed3\u6784\u3002\u8fd9\u662f\u56e0\u4e3a\u5b83\u53ef\u4ee5\u53bb\u9664\u5c0f\u7684\u7279\u5f81\u3001\u7f29\u5c0f\u76ee\u6807\u533a\u57df\u6216\u6d88\u9664\u566a\u58f0\u3002\u8150\u8680\u64cd\u4f5c\u53ef\u7528\u4e8e\u5f31\u5316\u56fe\u50cf\u4e2d\u7684\u7279\u5b9a\u7279\u5f81\uff0c\u4f7f\u5176\u66f4\u5bb9\u6613\u68c0\u6d4b\u548c\u5206\u6790\u3002 $$ A\u2296B={(x,y)|(B)_{xy} \u2286A} $$</p> <p></p> <ul> <li>\u7531B\u5bf9A\u8150\u8680\u6240\u4ea7\u751f\u7684\u4e8c\u503c\u56fe\u8c61E\u662f\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u70b9(x,y)\u7684\u96c6\u5408\uff1a</li> </ul> <p>\u5982\u679cB\u7684\u539f\u70b9\u5e73\u79fb\u5230\u70b9(x,y)\uff0c\u90a3\u4e48B\u5c06\u5b8c\u5168\u5305\u542b\u4e8eA\u4e2d</p>"},{"location":"DIP/chap2/chap2/#duality","title":"Duality","text":""},{"location":"DIP/chap2/chap2/#application-boundary-extraction","title":"Application: Boundary Extraction","text":""},{"location":"DIP/chap2/chap2/#application-filling-holes","title":"Application: Filling holes\uff01","text":""},{"location":"DIP/chap2/chap2/#_5","title":"\u5f00\u64cd\u4f5c","text":"<p>\u200b   \u5f62\u6001\u5b66\u7684\u5f00\u64cd\u4f5c\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u56fe\u50cf\u5904\u7406\u64cd\u4f5c\uff0c\u5b83\u7ed3\u5408\u4e86\u8150\u8680\uff08erosion\uff09\u548c\u81a8\u80c0\uff08dilation\uff09\u64cd\u4f5c\uff0c\u901a\u5e38\u7528\u4e8e\u53bb\u566a\u548c\u5206\u5272\u56fe\u50cf\u4e2d\u7684\u76ee\u6807\u3002\u5f00\u64cd\u4f5c\u7684\u4e3b\u8981\u601d\u60f3\u662f\u9996\u5148\u5bf9\u56fe\u50cf\u6267\u884c\u8150\u8680\u64cd\u4f5c\uff0c\u7136\u540e\u518d\u5bf9\u5176\u6267\u884c\u81a8\u80c0\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u901a\u5e38\u4f7f\u7528\u4e00\u4e2a\u7279\u5b9a\u7684\u7ed3\u6784\u5143\u7d20\u8fdb\u884c\u3002</p> <p>\u200b   \u5f00\u64cd\u4f5c\u5728\u56fe\u50cf\u5904\u7406\u4e2d\u5e38\u7528\u4e8e\u53bb\u9664\u566a\u58f0\u3001\u5206\u5272\u76ee\u6807\u3001\u51cf\u5c0f\u76ee\u6807\u533a\u57df\u7684\u4e0d\u89c4\u5219\u6027\u4ee5\u53ca\u51cf\u5c0f\u76ee\u6807\u4e4b\u95f4\u7684\u5e72\u6270\u3002\u5b83\u4e5f\u6709\u52a9\u4e8e\u6539\u5584\u4e8c\u503c\u5316\u56fe\u50cf\u7684\u8d28\u91cf\uff0c\u4ee5\u4fbf\u540e\u7eed\u7684\u5206\u6790\u548c\u7279\u5f81\u63d0\u53d6\u3002 $$ A \u25e6 B = (A \u2296 B) \u2295 B $$</p> <ul> <li>\u7528\u6765\u5728\u7ea4\u7ec6\u70b9\u5904\u5206\u79bb\u7269\u4f53\uff0c\u6d88\u9664\u5c0f\u7269\u4f53\u3001\u5e73\u6ed1\u5176\u8fb9\u754c\u7684\u540c\u65f6\u5e76\u4e0d\u660e\u663e\u6539\u53d8\u5176\u9762\u79ef\u3002 </li> </ul>"},{"location":"DIP/chap2/chap2/#_6","title":"\u95ed\u64cd\u4f5c","text":"<p>\u200b   \u5f62\u6001\u5b66\u7684\u5f00\u64cd\u4f5c\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u56fe\u50cf\u5904\u7406\u64cd\u4f5c\uff0c\u5b83\u7ed3\u5408\u4e86\u8150\u8680\uff08erosion\uff09\u548c\u81a8\u80c0\uff08dilation\uff09\u64cd\u4f5c\uff0c\u901a\u5e38\u7528\u4e8e\u53bb\u566a\u548c\u5206\u5272\u56fe\u50cf\u4e2d\u7684\u76ee\u6807\u3002\u5f00\u64cd\u4f5c\u7684\u4e3b\u8981\u601d\u60f3\u662f\u9996\u5148\u5bf9\u56fe\u50cf\u6267\u884c\u8150\u8680\u64cd\u4f5c\uff0c\u7136\u540e\u518d\u5bf9\u5176\u6267\u884c\u81a8\u80c0\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u901a\u5e38\u4f7f\u7528\u4e00\u4e2a\u7279\u5b9a\u7684\u7ed3\u6784\u5143\u7d20\u8fdb\u884c\u3002</p> <p>\u200b   \u95ed\u64cd\u4f5c\u5728\u56fe\u50cf\u5904\u7406\u4e2d\u5e38\u7528\u4e8e\u53bb\u9664\u5c0f\u5b54\u3001\u8fde\u63a5\u65ad\u5f00\u7684\u7ebf\u6761\u3001\u586b\u5145\u4e0d\u89c4\u5219\u76ee\u6807\u7684\u5185\u90e8\u7a7a\u6d1e\u3001\u589e\u5f3a\u56fe\u50cf\u4e2d\u7684\u8fde\u901a\u533a\u57df\uff0c\u5e73\u6ed1\u5176\u8fb9\u754c\u7684\u540c\u65f6\u5e76\u4e0d\u660e\u663e\u6539\u53d8\u5176\u9762\u79ef\u3002\u5b83\u4e5f\u6709\u52a9\u4e8e\u6539\u5584\u4e8c\u503c\u5316\u56fe\u50cf\u7684\u8d28\u91cf\uff0c\u4ee5\u4fbf\u540e\u7eed\u7684\u5206\u6790\u548c\u7279\u5f81\u63d0\u53d6\u3002 $$ A \u2022 B = (A \u2295 B) \u2296 B $$  </p> <p></p>"},{"location":"DIP/chap3/chap3/","title":"Basic Operation","text":"<p>"},{"location":"DIP/chap3/chap3/#visibility-enhancement","title":"Visibility enhancement","text":""},{"location":"DIP/chap3/chap3/#logarithmic-operation","title":"logarithmic operation","text":"<p>\u4e3a\u4e86\u589e\u5f3a\u56fe\u50cf\u7684\u53ef\u89c6\u4fe1\u606f\uff0c\u5bf9\u56fe\u50cf\u4e2d\u7684\u50cf\u7d20\u8fdb\u884c\u57fa\u4e8e\u5bf9\u6570\u7684\u64cd\u4f5c \\(L_d =  \\frac{log{({L_{w}+1})}}{log{({L_{max}+1})}}\\) \u5176\u4e2d\uff0c\\(L_d\\)\u662f\u663e\u793a\u4eae\u5ea6\uff0c\\(L_w\\)\u662f\u771f\u5b9e\u4e16\u754c\u4eae\u5ea6\uff0c\\(L_{max}\\)\u662f\u573a\u666f\u4e2d\u7684\u6700\u4eae\u503c\u3002</p> <ul> <li>\u8fd9\u4e2a\u6620\u5c04\u80fd\u591f\u786e\u4fdd\u4e0d\u7ba1\u573a\u666f\u7684\u52a8\u6001\u8303\u56f4\u662f\u600e\u4e48\u6837\u7684\uff0c\u5176\u6700\u5927\u503c\u90fd\u80fd\u6620\u5c04\u5230 1(\u767d)\uff0c\u5176\u4ed6\u7684\u503c\u80fd\u591f\u6bd4\u8f83\u5e73\u6ed1\u5730\u53d8\u5316\u3002</li> </ul>"},{"location":"DIP/chap3/chap3/#grayscale-perception","title":"Grayscale perception","text":""},{"location":"DIP/chap3/chap3/#histogram-equalization","title":"Histogram equalization","text":""},{"location":"DIP/chap3/chap3/#1","title":"(1)\u76f4\u65b9\u56fe","text":""},{"location":"DIP/chap3/chap3/#a","title":"a.\u7070\u5ea6\u76f4\u65b9\u56fe","text":"<ul> <li>\u7070\u5ea6\u76f4\u65b9\u56fe\u662f\u4e00\u79cd\u7edf\u8ba1\u56fe\uff0c\u5b83\u8868\u793a\u7ed9\u5b9a\u56fe\u50cf\u4e2d\u4e0d\u540c\u7070\u5ea6\u7ea7\u7684\u50cf\u7d20\u6570\u5360\u603b\u50cf\u7d20\u6570\u7684\u6bd4\u4f8b\u3002</li> <li>\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \\(p(r_k)=\\frac{n_k}{MN}\\)</li> </ul> <p>\\(r_k - \u50cf\u7d20\u7684\u7070\u5ea6\u7ea7\\)</p> <p>\\(n_k - \u5177\u6709\u7070\u5ea6rk\u7684\u50cf\u7d20\u7684\u4e2a\u6570\\)</p> <p>\\(MN - \u56fe\u50cf\u4e2d\u603b\u7684\u50cf\u7d20\u4e2a\u6570\\)</p> <p>\\(\\sum_{k=0}^{MN-1}P(r_k)=1\\)</p>"},{"location":"DIP/chap3/chap3/#b","title":"b.\u5f69\u8272\u76f4\u65b9\u56fe","text":"<ul> <li>\u5f69\u8272\u76f4\u65b9\u56fe\u8868\u793a\u7ed9\u5b9a\u56fe\u50cf\u4e2d\u4e0d\u540c R\u3001G\u3001B\u7b49\u7ea7\u7684\u50cf\u7d20\u6570\u5360\u603b\u50cf\u7d20\u6570\u7684\u6bd4\u4f8b,\u8ba1\u7b97\u65b9\u6cd5\u4e0e\u7070\u5ea6\u76f4\u65b9\u56fe\u7c7b\u4f3c</li> </ul>"},{"location":"DIP/chap3/chap3/#2","title":"\uff082\uff09\u76f4\u65b9\u56fe\u5747\u8861\u5316","text":"<p>\u76f4\u65b9\u56fe\u5747\u8861\u5316\uff08Histogram Equalization\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u589e\u5f3a\u6570\u5b57\u56fe\u50cf\u5bf9\u6bd4\u5ea6\u7684\u56fe\u50cf\u5904\u7406\u6280\u672f\u3002\u5b83\u901a\u8fc7\u91cd\u65b0\u5206\u5e03\u56fe\u50cf\u7684\u50cf\u7d20\u503c\uff0c\u4f7f\u76f4\u65b9\u56fe\u53d8\u5f97\u66f4\u5747\u5300\uff0c\u4ece\u800c\u6539\u5584\u56fe\u50cf\u7684\u89c6\u89c9\u8d28\u91cf</p> <p>\u76f4\u65b9\u56fe\u5747\u8861\u5316\u5e38\u88ab\u7528\u4e8e\u63d0\u9ad8\u56fe\u50cf\u7684\u53ef\u89c6\u6027\u3001\u5206\u6790\u6027\u80fd\u548c\u81ea\u52a8\u56fe\u50cf\u5904\u7406\u5e94\u7528\u4e2d\u3002\u4f8b\u5982\uff0c\u8fc7\u66dd\u5149\u56fe\u50cf\u7684\u7070\u5ea6\u7ea7\u96c6\u4e2d\u5728\u9ad8\u4eae\u5ea6\u8303\u56f4\u5185\uff0c\u800c\u66dd\u5149\u4e0d\u8db3\u5c06\u4f7f\u56fe\u50cf\u7070\u5ea6\u7ea7\u96c6\u4e2d\u5728\u4f4e\u4eae\u5ea6\u8303\u56f4\u5185\u3002\u91c7\u7528\u76f4\u65b9\u56fe\u5747\u8861\u5316\uff0c\u53ef\u4ee5\u628a\u539f\u59cb\u56fe\u50cf\u7684\u76f4\u65b9\u56fe\u53d8\u6362\u4e3a\u5747\u5300\u5206\u5e03(\u5747\u8861)\u7684\u5f62\u5f0f\uff0c\u8fd9\u6837\u5c31\u589e\u52a0\u4e86\u50cf\u7d20\u4e4b\u95f4\u7070\u5ea6\u503c\u5dee\u522b\u7684\u52a8\u6001\u8303\u56f4\uff0c\u4ece\u800c\u8fbe\u5230\u589e\u5f3a\u56fe\u50cf\u6574\u4f53\u5bf9\u6bd4\u5ea6\u7684\u6548\u679c</p> <p>\u6362\u8a00\u4e4b\uff0c\u76f4\u65b9\u56fe\u5747\u8861\u5316\u7684\u57fa\u672c\u539f\u7406\u662f:\u5bf9\u5728\u56fe\u50cf\u4e2d\u50cf\u7d20\u4e2a\u6570\u591a\u7684\u7070\u5ea6\u503c(\u5373\u5bf9\u753b\u9762\u8d77\u4e3b\u8981\u4f5c\u7528\u7684\u7070\u5ea6\u503c)\u8fdb\u884c\u5c55\u5bbd\uff0c\u800c\u5bf9\u50cf\u7d20\u4e2a\u6570\u5c11\u7684\u7070\u5ea6 \u503c(\u5373\u5bf9\u753b\u9762\u4e0d\u8d77\u4e3b\u8981\u4f5c\u7528\u7684\u7070\u5ea6\u503c)\u8fdb\u884c\u5f52\u5e76\uff0c\u4ece\u800c\u589e\u5927\u5bf9\u6bd4\u5ea6\uff0c\u4f7f\u56fe\u50cf\u6e05\u6670\uff0c\u8fbe\u5230\u589e\u5f3a\u7684\u76ee\u7684</p> <p>\u5c3d\u7ba1\u76f4\u65b9\u56fe\u5747\u8861\u5316\u5177\u6709\u663e\u8457\u7684\u4f18\u70b9\uff0c\u4f46\u5b83\u4e5f\u6709\u4e00\u4e9b\u9650\u5236\u3002\u5b83\u53ef\u80fd\u5bfc\u81f4\u56fe\u50cf\u51fa\u73b0\u566a\u70b9\u6216\u8fc7\u5ea6\u589e\u5f3a\u7ec6\u8282\uff0c\u7279\u522b\u662f\u5728\u566a\u97f3\u5b58\u5728\u7684\u60c5\u51b5\u4e0b</p> <ul> <li> <p>\u6b64\u5916\uff0c\u5747\u8861\u5316\u53ef\u80fd\u6539\u53d8\u56fe\u50cf\u7684\u6574\u4f53\u4eae\u5ea6\uff0c\u8fd9\u53ef\u80fd\u4e0d\u9002\u7528\u4e8e\u6240\u6709\u56fe\u50cf</p> </li> <li> <p>\u8fde\u7eed\u60c5\u51b5\u7684\u8f6c\u6362\\(T\\):</p> </li> </ul> <p></p> <ul> <li> <p>\u8bbe r \u4e3a\u8f6c\u6362\u524d\u7684\u7070\u5ea6\u7ea7\uff0c s \u4e3a\u53d8\u6362\u524d\u540e\u7684\u7070\u5ea6\u7ea7</p> </li> <li> <p>\\(0 \u2264 r,s \u2264 1\\) [\u5bf9\u5e94\\((0,255)\\)]</p> </li> <li> <p>P\u00ae \u548c P(s) \u662f\u5bf9\u5e94\u4e8e r \u548c s \u7684\u6982\u7387\u3002\u8f6c\u6362\u89c4\u5219\u4e3a:</p> <ul> <li> <p>T\u00ae\u662f\u5355\u8c03\u9012\u589e\u51fd\u6570\uff0c\\(0\u2264r\u22641\\)\u4e14\\(0\u2264T(r)\u22641\\)</p> </li> <li> <p>\u9006\u53d8\u6362 r = \\(T^{-1}(s)\\)\u4e5f\u662f\u4e00\u4e2a\u5355\u8c03\u9012\u589e\u51fd\u6570 \u8003\u8651\u5230\u7070\u5ea6\u53d8\u6362\u4e0d\u4f1a\u6539\u53d8\u4f4d\u7f6e\u548c\u50cf\u7d20\u6570</p> </li> <li>\u6211\u4eec\u6709 \\(\\int_0^rP(r)dr = \\int_0^sP(s)ds=\\int_0^s 1*ds = s = T(r)\\)</li> </ul> <p>\\(Thus: T(r)=\\int_0^rP(r)dr\\) </p> </li> <li> <p>\u79bb\u6563\u60c5\u51b5\u7684\u8f6c\u6362 \\(T\\):</p> </li> </ul> <p>\u8bbe\u4e00\u5e45\u56fe\u50cf\u7684\u50cf\u7d20\u603b\u6570\u4e3an\uff0c\u5206L\u4e2a\u7070\u5ea6\u7ea7\uff0c\\(n_k\\)\u4e3a\u7b2ck\u4e2a\u7070\u5ea6\u7ea7\u51fa\u73b0\u7684\u50cf\u7d20\u6570\uff0c\u5219\u7b2c\\(k\\)\u4e2a\u7070\u5ea6\u7ea7\u51fa\u73b0\u7684\u6982\u7387\u4e3a\uff1a $$ P(r_k)= \\frac{n_k}{n}(0\u2264n_k \u22641,k=0,1,2,...,MN\u22121) $$</p> <ul> <li>\u79bb\u6563\u7070\u5ea6\u76f4\u65b9\u56fe\u5747\u8861\u5316\u7684\u8f6c\u6362\u516c\u5f0f\u4e3a   $$   s_k = T(r_k)=\\sum_{i=0}^kP(ri)=\\frac{1}{n}\\sum_{i=0}^{k}ni   $$</li> </ul> <p>\u5bf9\u4e8e\u539f\u76f4\u65b9\u56fe\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u7070\u5ea6\u7ea7\\(r_k\\)\uff0c\u53ea\u9700\u5c06\u7070\u5ea6\u7ea7\u4e3a\\([0,r_k]\\)\u4ee5\u5185\u7684\u6240\u6709\u50cf\u7d20\u4e2a\u6570\u7684\u548c\u9664\u4ee5\u56fe\u50cf\u7684\u50cf\u7d20\u603b\u6570\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u8f6c\u6362\u4e4b\u540e\u7684\u5bf9\u5e94\u7070\u5ea6\u7ea7\\(s_k\\)</p> <p></p> <ul> <li>Problem</li> </ul> <p>\u6309\u7167\u5747\u8861\u5316\u7684\u8981\u6c42\uff0c\u5728\u5747\u8861\u5316\u540e\u7684\u7ed3\u679c\u76f4\u65b9\u56fe\u4e2d\uff0c\u5404\u7070\u5ea6\u7ea7\u53d1\u751f\u7684\u6982\u7387\u5e94\u8be5\u662f\u76f8\u540c\u7684\uff0c\u5982\u53f3\u4e0a\u56fe\u6240\u793a\u8fde\u7eed\u7070\u5ea6\u7ea7\u5747\u8861\u5316\u7ed3\u679c\u90a3\u6837\u3002\u4f46\u662f\uff0c\u53f3\u4e0b\u56fe\u4e2d\u79bb\u6563\u7070\u5ea6\u7ea7\u5747\u8861\u5316\u540e\uff0c\u5404\u7070\u5ea6\u7ea7\u51fa\u73b0\u7684\u6982\u7387\u5e76\u4e0d\u5b8c\u5168\u4e00\u6837\u3002\u4e3a\u4ec0\u4e48\uff1f</p> <p></p> <ul> <li>\u6b65\u9aa42\u4e2d\uff0c\u6240\u5f97\u7684\\(s_k\\)\u4e0d\u53ef\u80fd\u6b63\u597d\u7b49\u4e8e8\u7ea7\u7070\u5ea6\u503c\u4e2d\u7684\u67d0\u4e00\u7ea7\uff0c\u56e0\u6b64\u9700\u8981\u5c31\u8fd1\u5f52\u5165\u67d0\u4e00\u4e2a\u7070\u5ea6\u7ea7\u4e2d</li> </ul> <p>\u8fd9\u6837\uff0c\u76f8\u90bb\u7684\u591a\u4e2a\\(s_k\\)\u5c31\u53ef\u80fd\u843d\u5165\u540c\u4e00\u4e2a\u7070\u5ea6\u7ea7\uff0c\u9700\u8981\u5728\u6b65\u9aa43\u65f6\u5c06\u5904\u4e8e\u540c\u4e00\u4e2a\u7070\u5ea6\u7ea7\u7684\u50cf\u7d20\u4e2a\u6570\u7d2f\u52a0,\u56e0\u6b64\uff0c\u79bb\u6563\u7070\u5ea6\u76f4\u65b9\u56fe\u5747\u8861\u5316\u64cd\u4f5c\u4ee5\u540e\uff0c\u6bcf\u4e2a\u7070\u5ea6\u7ea7\u5904\u7684\u6982\u7387\u5bc6\u5ea6\uff08\u6216\u50cf\u7d20\u4e2a\u6570\uff09\u5e76\u4e0d\u5b8c\u5168\u4e00\u6837\u3002 </p>"},{"location":"DIP/chap3/chap3/#histogram-fitting","title":"Histogram fitting","text":"<ul> <li>\u6240\u8c13\u76f4\u65b9\u56fe\u5339\u914d\uff0c\u5c31\u662f\u4fee\u6539\u4e00\u5e45\u56fe\u50cf\u7684\u76f4\u65b9\u56fe\uff0c\u4f7f\u5f97\u5b83\u4e0e\u53e6\u4e00\u5e45\u56fe\u50cf\u7684\u76f4\u65b9\u56fe\u5339\u914d\u6216\u5177\u6709\u4e00\u79cd\u9884\u5148\u89c4\u5b9a\u7684\u51fd\u6570\u5f62\u72b6</li> <li>\u76f4\u65b9\u56fe\u5339\u914d\u7684\u76ee\u6807\uff0c\u662f\u7a81\u51fa\u6211\u4eec\u611f\u5174\u8da3\u7684\u7070\u5ea6\u8303\u56f4\uff0c\u4f7f\u56fe\u50cf\u8d28\u91cf\u6539\u5584</li> <li>\u5229\u7528\u76f4\u65b9\u56fe\u5747\u8861\u5316\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5b9e\u73b0\u76f4\u65b9\u56fe\u5339\u914d\u8fc7\u7a0b\u3002</li> </ul>"},{"location":"DIP/chap3/chap3/#steps","title":"Steps","text":"<ul> <li>Step 1 : Base on the equation \\(s=T(r)=\\int_0^rP(r)dr\\) map r in the original histogram to be s</li> <li>Step 2 : Based on equation \\(v=T(z)=\\int_0^zP(z)dz\\) map the gray level z in the resulted histogram to be \\(v\\)</li> <li>Step 3 : obtain \\(z=G^{-1}(v)\\)  from \\(v=G(z)\\) beacuse s and v have the same distribution obtain \\(z=G^{-1}(s)\\) corresponding \\(r\\) </li> </ul> <ul> <li>Simple version:</li> </ul> <p>\u5728\u6b65\u9aa41\u548c2\u4e2d\uff0c\u5206\u522b\u8ba1\u7b97\u83b7\u5f97\u4e24\u5f20\u8868\uff08\u53c2\u89c1\u76f4\u65b9\u56fe\u5747\u8861\u5316\u4e2d\u7684\u7b97\u4f8b\uff09\uff0c\u4ece\u4e2d\u9009\u53d6\u4e00\u5bf9\\(v_k\u3001s_j\\)\uff0c\u4f7f\\(v_k = s_j\\)\uff0c\u5e76\u4ece\u4e24\u5f20\u8868\u4e2d\u67e5\u51fa\u5bf9\u5e94\u7684\\(z_k\\)\u3001\\(r_j\\)</p> <p>\u8fd9\u6837\uff0c\u539f\u59cb\u56fe\u50cf\u4e2d\u7070\u5ea6\u7ea7\u4e3a\\(r_j\\)\u7684\u6240\u6709\u50cf\u7d20\u90fd\u6620\u5c04\u6210\u7070\u5ea6\u7ea7\\(z_k\\)\uff0c\u6700\u7ec8\u5f97\u5230\u6240\u671f\u671b\u7684\u56fe\u50cf\u3002</p>"},{"location":"DIP/chap3/chap3/#histogram-transform","title":"Histogram transform","text":""},{"location":"DIP/chap3/chap3/#linear-histogram-transform","title":"Linear histogram transform","text":"<ul> <li>Contrast stretching</li> </ul> <ul> <li>Piecewise linear grayscale transform</li> </ul> <p>Linear grayscale transform by using a piecewise function, which strengthen the region of interest, weaken the region of no-interest.</p> <p>\u5229\u7528\u5206\u6bb5\u76f4\u65b9\u56fe\u53d8\u6362\uff0c\u53ef\u4ee5\u5c06\u611f\u5174\u8da3\u7684\u7070\u5ea6\u8303\u56f4\u7ebf\u6027\u6269\u5c55\uff0c\u540c\u65f6\u76f8\u5bf9\u6291\u5236\u4e0d\u611f\u5174\u8da3\u7684\u7070\u5ea6\u533a\u57df</p> <p></p>"},{"location":"DIP/chap3/chap3/#nonlinear-histogram-transform","title":"Nonlinear histogram transform","text":"<p>Logarithmic function and Exponential function are two popular nonlinear transform functions.</p> <p>Logarithmic</p> <p></p> <ul> <li>Stretch low grayscale region</li> <li>Compress high grayscale region </li> </ul> <p>Expoential</p> <p></p> <ul> <li>Stretch high grayscale region</li> <li>Compress low grayscale region </li> </ul> <p></p>"},{"location":"DIP/chap3/chap3/#geometric-transform","title":"Geometric transform","text":""},{"location":"DIP/chap3/chap3/#1_1","title":"1.\u57fa\u672c\u51e0\u4f55\u53d8\u5316","text":""},{"location":"DIP/chap3/chap3/#translation","title":"\u5e73\u79fb\uff08Translation\uff09","text":"<p>\u5c06\u56fe\u50cf\u6cbf\u6c34\u5e73\u548c\u7ad6\u76f4\u65b9\u5411\u79fb\u52a8\uff0c\u4ece\u800c\u4ea7\u751f\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b\u3002 </p> <p>\u5e73\u79fb\u540e\u7684\u666f\u7269\u4e0e\u539f\u56fe\u50cf\u76f8\u540c\uff0c\u4f46\u201c\u753b\u5e03\u201d\u4e00\u5b9a\u662f\u6269\u5927\u4e86\uff0c\u5426\u5219\u5c31\u4f1a\u4e22\u5931\u4fe1\u606f\u3002  * \u77e9\u9635\u8868\u793a \\(\\begin{bmatrix}x^{'}\\\\y^{'}\\\\1\\end{bmatrix}=\\begin{bmatrix}1&amp;0&amp;x_0\\\\0&amp;1&amp;y_0\\\\0&amp;0&amp;1\\end{bmatrix}\\begin{bmatrix}x\\\\y\\\\1\\end{bmatrix}\\)</p>"},{"location":"DIP/chap3/chap3/#rotation","title":"\u65cb\u8f6c\uff08Rotation\uff09","text":"<ul> <li>\u7ed5\u539f\u70b9\u65cb\u8f6c\\(\\theta\\)\u89d2\uff0c\u5f97\u5230\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b   </li> <li>\u6ce8\u610f\uff1a\u65cb\u8f6c\u53d8\u6362\u7684\u8fc7\u7a0b\u4e2d\uff0c\u56fe\u50cf\u4e2d\u4f1a\u4ea7\u751f\u7a7a\u6d1e\uff0c\u7528\u63d2\u503c\u6cd5\u8865\u5168(\u884c\u63d2\u503c\u2014\u2014\u6309\u987a\u5e8f\u5bfb\u627e\u6bcf\u4e00\u884c\u4e2d\u7684\u7a7a\u6d1e\u50cf\u7d20\uff0c\u8bbe\u7f6e\u5176\u50cf\u7d20\u503c\u4e0e\u540c\u4e00\u884c\u4e2d\u524d\u4e00\u4e2a\u50cf\u7d20\u7684\u50cf\u7d20\u503c\u76f8\u540c\u3002)</li> <li>\u77e9\u9635\u8868\u793a   \\(\\begin{bmatrix}x^{'}\\\\y^{'}\\\\1\\end{bmatrix}=\\begin{bmatrix}cos\\theta&amp;-sin\\theta&amp;0\\\\sin\\theta&amp;cos\\theta&amp;0\\\\0&amp;0&amp;1\\end{bmatrix}\\begin{bmatrix}x\\\\y\\\\1\\end{bmatrix}\\)</li> </ul>"},{"location":"DIP/chap3/chap3/#3-scale","title":"\uff083\uff09\u7f29\u653e (Scale)","text":"<p>\u5c06\u56fe\u50cf\u4e58\u4ee5\u4e00\u5b9a\u7cfb\u6570\uff0c\u4ece\u800c\u4ea7\u751f\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b </p> <ul> <li>\u6cbfx\u8f74\u65b9\u5411\u7f29\u653ec\u500d\uff08c&gt;1\u65f6\u4e3a\u653e\u5927\uff0c0&lt;c&lt;1\u65f6\u4e3a\u7f29\u5c0f\uff09</li> </ul> <p>\u6cbfy\u8f74\u65b9\u5411\u7f29\u653ed\u500d\uff08d&gt;1\u65f6\u4e3a\u653e\u5927\uff0c0&lt;d&lt;1\u65f6\u4e3a\u7f29\u5c0f\uff09</p> <ul> <li>\u5f53c=d\u65f6\uff0c\u56fe\u50cf\u7b49\u6bd4\u7f29\u653e\uff1b\u5426\u5219\u4e3a\u975e\u7b49\u6bd4\u7f29\u653e\uff0c\u5bfc\u81f4\u56fe\u50cf\u53d8\u5f62\u3002</li> <li>\u7f29\u5c0f \uff1a\u6309\u4e00\u5b9a\u95f4\u9694\u9009\u53d6\u67d0\u4e9b\u884c\u548c\u5217\u7684\u50cf\u7d20\u6784\u6210\u7f29\u5c0f\u540e\u7684\u65b0\u56fe\u50cf\uff1b</li> <li> <p>\u653e\u5927  \uff1a\u65b0\u56fe\u50cf\u51fa\u73b0\u7a7a\u884c\u548c\u7a7a\u5217\uff0c\u53ef\u91c7\u7528\u63d2\u503c\u7684\u65b9\u6cd5\u52a0\u4ee5\u586b\u8865\uff0c\u4f46\u5b58\u5728\u201c\u9a6c\u8d5b\u514b\u201d\u73b0\u8c61\u3002</p> </li> <li> <p>\u77e9\u9635\u8868\u793a   \\(\\begin{bmatrix}x^{'}\\\\y^{'}\\\\1\\end{bmatrix}=\\begin{bmatrix}c&amp;0&amp;0\\\\0&amp;d&amp;0\\\\0&amp;0&amp;1\\end{bmatrix}\\begin{bmatrix}x\\\\y\\\\1\\end{bmatrix}\\)</p> </li> </ul>"},{"location":"DIP/chap3/chap3/#shear","title":"\u56fe\u50cf\u526a\u5207 (Shear)","text":"<p>\u56fe\u50cf\u7684\u9519\u5207\u53d8\u6362\u5b9e\u9645\u4e0a\u662f\u666f\u7269\u5728\u5e73\u9762\u4e0a\u7684\u975e\u5782\u76f4\u6295\u5f71\u6548\u679c</p> <p> \\(Shear\\ on\\ x-axis:\\left\\{\\begin{aligned}&amp;a(x, y) = x + d_xy \\\\&amp;b(x, y) = y\\end{aligned}\\right.\\) \\(Shear\\ on\\ y-axis:\\left\\{\\begin{aligned}&amp;a(x, y) = x  \\\\&amp;b(x, y) = y+d_yx\\end{aligned}\\right.\\)</p> <ul> <li>\u77e9\u9635\u8868\u793a   \\(\\begin{bmatrix}x^{'}\\\\y^{'}\\\\1\\end{bmatrix}=\\begin{bmatrix}1&amp;d_x&amp;0\\\\d_y&amp;1&amp;0\\\\0&amp;0&amp;1\\end{bmatrix}\\begin{bmatrix}x\\\\y\\\\1\\end{bmatrix}\\)</li> </ul>"},{"location":"DIP/chap3/chap3/#mirror","title":"\u955c\u50cf\u53d8\u6362 (Mirror)","text":"<p>\u7ed5x\u8f74\u6216y\u8f74\u7ffb\u8f6c\uff0c\u4ece\u800c\u4ea7\u751f\u4e0e\u539f\u56fe\u50cf\u5bf9\u79f0\u7684\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b  * \u77e9\u9635\u8868\u793a \\(\\begin{bmatrix}x^{'}\\\\y^{'}\\\\1\\end{bmatrix}=\\begin{bmatrix}s_x&amp;0&amp;0\\\\0&amp;s_y&amp;0\\\\0&amp;0&amp;1\\end{bmatrix}\\begin{bmatrix}x\\\\y\\\\1\\end{bmatrix}\\)</p> <ul> <li>\u5f53\\(S_x\\) =\\(1\\)\uff0c\u4e14\\(S_y\\) =\\(-1\\)\u65f6\u5b9e\u73b0\u7ed5x\u8f74\u7684\u955c\u50cf\u53d8\u6362</li> <li>\u5f53\\(S_x\\) = \\(-1\\)\uff0c\u4e14\\(S_y\\) =\\(1\\)\u65f6\u5b9e\u73b0\u7ed5y\u8f74\u7684\u955c\u50cf\u53d8\u6362</li> </ul>"},{"location":"DIP/chap3/chap3/#_1","title":"\u590d\u5408\u51e0\u4f55\u53d8\u6362","text":"\\[\\begin{bmatrix}x^{'}\\\\y^{'}\\\\1\\end{bmatrix}=\\begin{bmatrix}a&amp;b&amp;c\\\\d&amp;e&amp;f\\\\g&amp;h&amp;1\\end{bmatrix}\\begin{bmatrix}x\\\\y\\\\1\\end{bmatrix}\\]"},{"location":"DIP/chap3/chap3/#_2","title":"\u63d2\u503c","text":""},{"location":"DIP/chap3/chap3/#nearest-neighbor","title":"\u6700\u90bb\u8fd1\u63d2\u503c (Nearest neighbor)","text":"<ul> <li>\u6700\u90bb\u8fd1\u63d2\u503c\uff0c\u5373\u8f93\u51fa\u50cf\u7d20\u7684\u7070\u5ea6\u503c\u7b49\u4e8e\u79bb\u5b83\u6240\u6620\u5c04\u5230\u7684\u4f4d\u7f6e\u6700\u8fd1\u7684\u8f93\u5165\u50cf\u7d20\u7684\u7070\u5ea6\u503c\u3002</li> </ul> <p>\u4e3a\u4e86\u8ba1\u7b97\u51e0\u4f55\u53d8\u6362\u540e\u65b0\u56fe\u50cf\u4e2d\u67d0\u4e00\u70b9\\(P\u2019\\)\u5904\u7684\u50cf\u7d20\u503c\uff0c\u53ef\u4ee5\u9996\u5148\u8ba1\u7b97\u8be5\u51e0\u4f55\u53d8\u6362\u7684\u9006\u53d8\u6362\uff0c\u8ba1\u7b97\u51fa \\(P\u2019\\) \u6240\u5bf9\u5e94\u7684\u539f\u56fe\u50cf\u4e2d\u7684\u4f4d\u7f6e \\(P\\)</p> <p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\\(P\\) \u7684\u4f4d\u7f6e\u4e0d\u53ef\u80fd\u6b63\u597d\u5904\u5728\u539f\u56fe\u50cf\u7684\u67d0\u4e00\u4e2a\u50cf\u7d20\u4f4d\u7f6e\u4e0a(\u5373 $P $\u70b9 \u7684\u5750\u6807\u901a\u5e38\u90fd\u4e0d\u4f1a\u6b63\u597d\u662f\u6574\u6570)</p> <p>\u5bfb\u627e\u4e0e \\(P\\) \u70b9\u6700\u63a5\u8fd1\u7684\u50cf\u7d20\\(Q\\)\uff0c\u628a \\(Q\\) \u70b9\u7684\u50cf\u7d20\u503c\u4f5c\u4e3a\u65b0\u56fe\u50cf\u4e2d \\(P\u2019\\)\u70b9\u7684 \u50cf\u7d20\u503c\u3002</p> <ul> <li> <p>\\(Steps\\) \\((x^{'},y^{'})\\Rightarrow{\\text{Inverse Transtion}}(x,y)\\\\  \\Rightarrow{\\text{rounding operation}}(x_{int},y_{int})\\\\  \\Rightarrow{\\text{assign value}}I_{new}(x^{'},y^{'})=I_{old}(x_{int},y_{int})\\\\\\)</p> </li> <li> <p>\u5f53\u56fe\u50cf\u4e2d\u5305\u542b\u660e\u663e\u7684\u51e0\u4f55\u7ed3\u6784\u65f6\uff0c\u7ed3\u679c\u5c06\u4e0d\u592a\u5149\u6ed1\u8fde\u7eed\uff0c\u4ece\u800c\u5728\u56fe\u50cf\u4e2d\u4ea7\u751f\u4eba\u4e3a\u7684\u75d5\u8ff9</p> </li> </ul>"},{"location":"DIP/chap3/chap3/#linear-interpolation","title":"\u7ebf\u6027\u63d2\u503c (Linear interpolation)","text":"<ul> <li> <p>\u5728\u4e00\u7ef4\u60c5\u51b5\u4e0b\uff0c\u5df2\u77e5x1\u548cx2\u5904\u7684\u7070\u5ea6\u503c\u5206\u522b\u4e3ag1\u548cg2\uff0c\u5219x3\u5904\u7684\u7070\u5ea6\u503cg3\u4e3a\uff1a    $$   g_3 = \\frac{g_2-g_1}{x_2-x_1}(x_3-x_1)+g1   $$</p> </li> <li> <p>\u5728\u4e8c\u7ef4\u60c5\u51b5\u4e0b\uff0c\u79f0\u4e3a\u53cc\u7ebf\u6027\u63d2\u503c</p> </li> <li> <p>\u6ce8\uff1a\u53ef\u7531\u4e00\u7ef4\u7684\u60c5\u51b5\u63a8\u5bfc\u800c\u6765\uff0c\u5f97\u5230\u53cc\u7ebf\u6027\u65b9\u7a0bg(x,y)\u4e3a     $$     g(x,y)=\\frac{(y_1-y)(x_1-x)}{(y_1-y_0)(x_1-x_0)}g(0,0)+\\frac{(y_1-y)(x-x_0)}{(y_1-y_0)(x_1-x_0)}g(1,0)+\\frac{(y-y_0)(x_1-x)}{(y_1-y_0)(x_1-x_0)}g(0,1)+\\frac{(y-y_0)(x-x_0)}{(y_1-y_0)(x_1-x_0)}g(1,1)     $$     \u5373\u6ee1\u8db3\\(g(x,y)=ax+by+cxy+d\\)\u7684\u5f62\u5f0f</p> </li> <li> <p>\u5df2\u77e5\u56fe\u50cf\u7684\u6b63\u65b9\u5f62\u7f51\u683c\u4e0a\u56db\u4e2a\u70b9A\u3001B\u3001C\u3001D\u7684\u7070\u5ea6\uff0c\u6c42P\u70b9\u7684\u7070\u5ea6:</p> <ul> <li>\u5b9a\u4e49\u53cc\u7ebf\u6027\u65b9\u7a0b$g(x,y)=ax+by+cxy+d $</li> <li>\u5206\u522b\u5c06\\(A\\ B\\ C\\ D\\)\u56db\u70b9\u7684\u4f4d\u7f6e\u548c\u7070\u5ea6\u4ee3\u5165\u65b9\u7a0b\uff0c\u5f97\u5230\u65b9\u7a0b\u7ec4</li> <li>\u89e3\u65b9\u7a0b\u7ec4\uff0c\u89e3\u51fa\\(a\\ b\\ c\\ d\\)\u56db\u4e2a\u7cfb\u6570</li> <li>\u5c06P\u70b9\u7684\u4f4d\u7f6e\u4ee3\u5165\u65b9\u7a0b\uff0c\u5f97\u5230P\u70b9\u7684\u7070\u5ea6</li> </ul> </li> </ul>"},{"location":"DIP/chap3/chap3/#radial-basis-function-rbf-based-interpolation","title":"\u5f84\u5411\u57fa\u51fd\u6570\u63d2\u503c[Radial Basis Function (RBF) based interpolation]","text":"<ul> <li> <p>\u5f84\u5411\u57fa\u51fd\u6570\\(\\phi(x)\\)</p> </li> <li> <p>\u6700\u5e38\u89c1\u4e3a\u9ad8\u65af\u51fd\u6570\\(\u03c6(r)=e^{\\frac{\u2212r^2}{2\u03c3^2}}\\) </p> </li> <li> <p>Multiquadrics:\\(\\phi(r)=\\sqrt{1+\\frac{r^2}{\\sigma^2}}\\) </p> </li> <li> <p>Linear: \\(\\phi(r)=r\\)</p> </li> <li> <p>Cubic:\\(\\phi(r)=r^3\\)</p> <p>\u2026\u2026</p> </li> <li> <p>\u63d2\u503c\u51fd\u6570   \\(\\hat{f}(x)=\\sum_{i=1}^Nw_i\\phi(||x-x_i||)\\) where \\(w_i=\\frac{\\phi(|x-c_i|)}{\\sum_{i=1}^n\\phi(|x-c_i|)}\\) </p> </li> </ul> <p></p>"},{"location":"DIP/feature/feature/","title":"Image feature","text":"<p>"},{"location":"DIP/feature/feature/#feature-detection","title":"Feature detection","text":""},{"location":"DIP/feature/feature/#feature-detection-the-math","title":"Feature detection:  the math","text":"<p>Consider shifting the window \\(W\\) by \\((u,v)\\)</p> <p>\\(\\begin{align*}Error(u,v)&amp;=\\sum_{(x,y)\\in W}[I(x+u,y+v)-I(x,y)]^2\\\\ &amp;\\approx\\sum_{(x,y)\\in W}[I(x,y)+\\frac{\\partial I}{\\partial x}u+\\frac{\\partial I}{\\partial y}v-I(x,y)]^2\\\\ &amp;\\approx\\sum_{(x,y)\\in W}[u,v]\\begin{bmatrix}I_x^2&amp;I_xI_y\\\\I_yI_x&amp;I_y^2\\end{bmatrix}\\begin{bmatrix}u\\\\v\\end{bmatrix} \\\\ \\end{align*}\\)</p> <ul> <li>Which directions will result in the largest and smallest E values?</li> </ul> <p>We can find these directions by looking at the eigenvectors of H \\((\\begin{bmatrix}I_x^2&amp;I_xI_y\\\\I_yI_x&amp;I_y^2\\end{bmatrix})\\)</p> <p>Eigenvalues and eigenvectors of H</p> <p></p> <ul> <li>Define shifts with the smallest and largest change (E value)</li> <li>\\(x_+\\) = direction of largest increase in E. </li> <li>\\(\\lambda_+\\) = amount of increase in direction x+       \\(Hx_{+}=\\lambda_{x_+}x_+\\)</li> <li>\\(x_-\\) = direction of smallest increase in E. </li> <li>\\(\\lambda_-\\) = amount of increase in direction x- .      \\(Hx_{-}=\\lambda_{x_-}x_-\\)</li> </ul> <p>Since \\(H\\) is symmetric ,so \\(H=R^{-1}\\begin{bmatrix}\\lambda_1&amp;0\\\\0&amp;\\lambda_2\\end{bmatrix}R\\)</p> <p></p> <p></p> <ul> <li>Compute the gradient at each point in the image</li> <li>Create the \\(H\\) matrix from the entries in the gradient</li> <li>Compute the eigenvalues. </li> <li>Find points with large response (\\(\\lambda_-\\) &gt; threshold)</li> <li>Choose those points where \\(\\lambda_-\\) is a local maximum as features</li> </ul>"},{"location":"DIP/feature/feature/#the-harris-operator","title":"The Harris operator","text":"<ul> <li>\\(\\lambda_-\\)  is a variant of the Harris operator for feature detection</li> </ul> <p>\\(f=\\frac{\\lambda_1\\lambda_2}{\\lambda_1+\\lambda_2}=\\frac{determinant(H)}{trace(H)}\\)</p> <ul> <li>The trace is the sum of the diagonals, i.e., \\(trace(H) = h_{11} + h_{22}\\)</li> <li>Very similar to \\(\\lambda_-\\) but less expensive (no square root)</li> <li>Called the \u201cHarris Corner Detector\u201d or \u201cHarris Operator\u201dLots of other detectors, this is one of the most popular</li> </ul>"},{"location":"DIP/feature/feature/#some-properties","title":"Some Properties","text":"<ul> <li> <p>Rotation Invariance</p> </li> <li> <p>Partial Invariance to additive and multiplicative intensity changes</p> </li> <li> <p>Not invariance to scaling. !!!</p> </li> </ul>"},{"location":"DIP/feature/feature/#scale-invariant-detection","title":"Scale Invariant Detection","text":"<ul> <li>Eg. Take a local \\(MAXIMUM\\)</li> </ul>"},{"location":"DIP/feature/feature/#harris-laplacian","title":"Harris-Laplacian","text":"<p>We define the characteristic scale as the scale that produces peak of Laplacian response</p> <p>Stage 1: Initialization--Multiscale Harris Corner Detection</p> <ol> <li>Image Pyramid Construction: Begin by constructing a scale-space pyramid of the image, generating different scales by applying Gaussian smoothing and downsampling.</li> <li>Computation of Harris Corner Response: At each scale, calculate the corner response using the Harris corner detection method. This typically involves computing local gradients at each pixel position, forming the autocorrelation matrix, calculating the corner response function, and identifying local maxima as keypoints.</li> <li>Non-Maximum Suppression: For each scale, perform non-maximum suppression to eliminate redundant keypoints in the corner response function, retaining only the keypoints corresponding to local maxima.</li> </ol> <p>Stage 2: Scale Selection Based on Laplacian</p> <ol> <li>Laplacian Scale Selection: </li> </ol> <p>The Laplacian is an operator used to detect edges and texture variations in an image by computing the second derivative at each point. </p> <p>In the context of scale selection, the Laplacian serves to measure the changes in the image at different scales.</p> <ul> <li>Example: Consider an image containing a circle. As you view this circle at different scales, its edges will exhibit varying degrees of change. By applying the Laplacian at different scales, we can observe the intensity of edge variations.</li> </ul> <p>The optimal scale for a keypoint is where the maximum edge response occurs, indicating that the details of the keypoint are most pronounced at that scale.</p> <ol> <li>Keypoint Filtering: </li> </ol> <p>For the same corner, even with changes in scale, the corner remains detectable, indicating robustness in terms of repeatability.</p> <p>The content within the feature scale range of the same corner in images of different sizes should be consistent. </p> <p>Therefore, the pixel locations within the feature scale range of corners in images of varying scales are proportional to the scale.(\u4e0d\u540c\u5c3a\u5bf8\u56fe\u7247\u4e2d\u7684\u76f8\u540c\u89d2\u70b9\u7684\u7279\u5f81\u5c3a\u5ea6\u8303\u56f4\u4e2d\u7684\u5185\u5bb9\u8981\u76f8\u540c\uff0c\u56e0\u6b64\uff0c\u4e0d\u540c\u5c3a\u5ea6\u7684\u56fe\u7247\u7684\u89d2\u70b9\u7684\u7279\u5f81\u5c3a\u5ea6\u8303\u56f4\u5185\u7684\u50cf\u7d20\u70b9\u4e0e\u5c3a\u5ea6\u6210\u6bd4\u4f8b\u5173\u7cfb\u3002)</p>"},{"location":"DIP/feature/feature/#local-extrema-detection","title":"Local Extrema Detection","text":"<ul> <li>Maxima and minima</li> <li>Compare \\(x\\) with its 26 neighbors at 3 scales</li> </ul>"},{"location":"DIP/feature/feature/#orientation","title":"Orientation","text":""},{"location":"DIP/feature/feature/#sift","title":"SIFT","text":"<p>Let's illustrate the construction process of a Gaussian pyramid with a simple example. We assume that each group contains S layers, and the scale differences within each group are achieved through downsampling by a factor of 2 and using different Gaussian blur parameters \u03c3.</p> <ol> <li>Initial Image: Suppose we have an initial image, labeled as Group 0, containing image A.</li> <li>Group 1:    - We apply Gaussian blur to image A in Group 0, obtaining image B in Group 1. The Gaussian blur parameter here is \u03c31.    - Next, we downsample (reduce by half) image B, resulting in image C in Group 1.</li> <li>Group 2:    - We apply Gaussian blur to image B in Group 1, obtaining image D in Group 2. The Gaussian blur parameter here is \u03c32.    - We then downsample image D, obtaining image E in Group 2.</li> <li>Group 3:    - Gaussian blur is applied to image D in Group 2, resulting in image F in Group 3. The Gaussian blur parameter here is \u03c33.    - Image F is then downsampled, resulting in image G in Group 3.</li> </ol> <p>This process can be repeated iteratively, and each round of Gaussian blur and downsampling constructs one level of the pyramid. Within each group, we have S images at different scales (determined by different Gaussian blur parameters), and each image, obtained by downsampling, aligns with the corresponding image from the previous group in terms of scale.</p> <p>This ensures that the construction of the pyramid is \"bottom-up,\" reflecting the features of the image at different scales.</p> <ul> <li>REFER TO ML-4360 Structure from motion </li> </ul> <p></p>"},{"location":"DIP/feature/feature/#visual-word-generation","title":"Visual Word Generation","text":"<p>Based on the collected images we detect their interest points with Difference of Gaussian, and extract the SIFT descriptors. </p> <p>The extracted descriptors are then clustered to generate the vocabulary tree with the hierarchical k-means clustering. In this experiment we generated a visual vocabulary containing 32357 visual words</p> <p></p>"},{"location":"DIP/feature/feature/#surf-detectors-and-descriptors","title":"SURF detectors and descriptors","text":"<p>Reference to https://medium.com/@deepanshut041/introduction-to-surf-speeded-up-robust-features-c7396d6e7c4e</p> <ul> <li>speeded up robust features</li> </ul> <p></p>"},{"location":"DIP/feature/feature/#1feature-extraction","title":"(1)Feature Extraction","text":"<p>Basic Hessian matrix approximation.</p>"},{"location":"DIP/feature/feature/#aintegral-images","title":"a.Integral images","text":"<p>The Integral Image or Summed-Area Table was introduced in 1984. The Integral Image is used as a quick and effective way of calculating the sum of values (pixel values) in a given image \u2014 or a rectangular subset of a grid (the given image). It can also, or is mainly, used for calculating the average intensity within a given image.</p> <p></p>"},{"location":"DIP/feature/feature/#bhessian-matrix-based-interest-points","title":"b.Hessian matrix-based interest points","text":"<p>\\(SURF\\) uses the Hessian matrix because of its good performance in computation time and accuracy. Rather than using a different measure for selecting the location and the scale (Hessian-Laplace detector), surf relies on the determinant of the Hessian matrix for both. </p> <p>For adapt to any scale, we filtered the image by a Gaussian kernel, so given a point \\(X = (x, y)\\), the Hessian matrix \\(H(x, \u03c3)\\) in x at scale \u03c3 is defined as:</p> <p>\\(H(\\vec{x},\\sigma)=\\begin{bmatrix}L_{xx}(x,\\sigma)&amp;L_{xy}(x,\\sigma)\\\\ L_{xy}(x,\\sigma)&amp;L_{yy}(x,\\sigma)\\end{bmatrix}\\)</p> <p>where \\(L_{xx}(x, \u03c3)\\) is the convolution of the Gaussian second order derivative with the image \\(I\\) in point \\(x\\), and similarly for \\(L_{xy} (x, \u03c3)\\) and \\(L_{yy} (x, \u03c3)\\). </p> <p>Gaussians are optimal for scale-space analysis but in practice, they have to be discretized and cropped. This leads to a loss in repeatability under image rotations around odd multiples of \\(\u03c0 /4\\). This weakness holds for Hessian-based detectors in general. Nevertheless, the detectors still perform well, and the slight decrease in performance does not outweigh the advantage of fast convolutions brought by the discretization and cropping.</p> <p>After Lowe\u2019s success with LoG approximations(SIFT), SURF pushes the approximation(both convolution and second-order derivative) even further with box filters. These approximate second-order Gaussian derivatives and can be evaluated at a very low computational cost using integral images and independently of size, and this is part of the reason why SURF is fast.</p> <ul> <li>eg.</li> </ul> <p>\\(d^2L(x)/dx^2=(L(x+1)-L(x))-(L(x)-L(x-1))=-2*L(x)+L(x+1)+L(x-1)\\)</p> <p></p> <p></p> <p>The \\(9 \u00d7 9\\) box filters in the above images are approximations for Gaussian second order derivatives with \u03c3 = 1.2.</p> <p>We denote these approximations by \\(D_{xx}, D_{yy}, and D_{xy}\\). </p> <p>Now we can represent the determinant of the Hessian (approximated) as:\\(det(H_{approx})=D_{xx}D_{yy}-(wD_{xy})^2\\) \\(w=0.9 (Bay\u2019s\\ suggestion)\\)</p>"},{"location":"DIP/feature/feature/#cscale-space-representation","title":"c.Scale-space representation","text":"<p>SURF can be considered as a faster feature extraction method compared to SIFT.</p> <p>It processes the original image directly using box filters at different scales, eliminating the need to build multiple layers of a pyramid like SIFT. This makes SURF computationally more efficient, especially in scenarios where large-scale image databases or real-time applications are involved.</p> <ul> <li>\u6211\u7684\u7406\u89e3\uff0c\u56e0\u4e3a\u76d2\u5b50\u6ee4\u6ce2\u53ef\u4ee5\u7528\u540c\u6837\u5904\u7406\u5728\u4e00\u5f20\u56fe\u4e0a\u5b8c\u6210\u8c61\u5f81\u7740\u6539\u53d8\u5c3a\u5ea6\uff08\u5bf9\u4e0d\u540c\u5c3a\u5ea6\u7684\u64cd\u4f5c\uff09\uff08\u6bd4\u5982\u4e0a\u56fe\u5c31\u662f\u5728\u505a\u5bf9\u5df2\u7ecf\uff08\u5bf9\u539f\u56fe\uff09\u964d\u91c7\u6837\u540e\u56fe\u7247\uff0c\u7684\u4e8c\u9636\u5fae\u5206)</li> </ul> <p>If you use a 9x9 box filter on a 36x36 image, and you start from the center of the filter, moving the width of the filter at each step, you would end up with a 4x4 grid, deriving 16 new coordinate detection points. This is because 36 divided by 9 equals 4, thus, you can get 4 coordinate points in each direction. </p> <p>However, this is just a logical understanding, and the actual results may vary due to the details of filter processing, such as edge handling, stride of the filter, and other factors.</p> <p></p> <p>\u8fd9\u91cc\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u95ee\u9898\uff0c\u627e\u5230\u7684\u5c40\u90e8\u6700\u5927\u503c\u5982\u679c\u653e\u56de\u539f\u56fe\u7684\u5c3a\u5ea6\uff0c\u5176\u5b9e\u662f\u5bf9\u5e94\u7740\u4e00\u4e2a\u533a\u57df\u7684\uff0c\u90a3\u4e48\u5982\u4f55\u786e\u5b9a\u4e00\u4e2a\u7cbe\u786e\u7684\u5750\u6807\u5462\uff1f</p> <p>To locate the precise position of feature points, we apply a Taylor expansion to the Hessian matrix at the local maximum points. This approximates a smooth surface depicting the variation of image intensity around the feature points. Then, we identify the peak of this smooth surface. Compared to the original discrete maximum point, the location of this peak is more accurate. Hence, we refer to it as the true location of the feature point.</p>"},{"location":"DIP/feature/feature/#interpolation","title":"Interpolation","text":"<p>For each local maximum, need to interpolate to get true location (to overcome discretization effects)</p> <p></p>"},{"location":"DIP/feature/feature/#2feature-description","title":"(2)Feature Description","text":""},{"location":"DIP/feature/feature/#orientation-assignment","title":"Orientation Assignment","text":"<ol> <li>First calculate the Haar-wavelet responses in \\(x\\) and \\(y\\)-direction, and this in a circular neighborhood of radius \\(6*s\\) around the keypoint, with \\(s\\) the scale at which the keypoint was detected. </li> </ol> <p>Also, the sampling step is scale dependent and chosen to be s, and the wavelet responses are computed at that current scale s. </p> <p>Accordingly, at high scales the size of the wavelets is big. Therefore integral images are used again for fast filtering.</p> <ol> <li>Then we calculate the sum of vertical and horizontal wavelet responses in a scanning area, then change the scanning orientation (add \\(\u03c0/3\\)), and re-calculate, until we find the orientation with largest sum value, this orientation is the main orientation of feature descriptor.</li> </ol> <p></p>"},{"location":"DIP/feature/feature/#descriptor-components","title":"Descriptor Components","text":"<p>Now it\u2019s time to extract the descriptor</p> <ol> <li> <p>The first step consists of constructing a square region centered around the keypoint and oriented along the orientation we already got above. The size of this window is 20s.</p> </li> <li> <p>Then the region is split up regularly into smaller 4 \u00d7 4 square sub-regions. For each sub-region, we compute a few simple features at 5\u00d75 regularly spaced sample points. </p> </li> </ol> <p>For reasons of simplicity, we call dx the Haar wavelet response in the horizontal direction and dy the Haar wavelet response in the vertical direction (filter size 2s). </p> <p>To increase the robustness towards geometric deformations and localization errors, the responses dx and dy are first weighted with a Gaussian (\u03c3 = 3.3s) centered at the keypoint.</p> <p></p> <p>Then, the wavelet responses dx and dy are summed up over each subregion and form a first set of entries to the feature vector.</p> <p>In order to bring in information about the polarity of the intensity changes, we also extract the sum of the absolute values of the responses, |dx| and |dy|. </p> <p>Hence, each sub-region has a four-dimensional descriptor vector \\(\\vec{v}\\) for its underlying intensity structure \\(V = (\u2211 dx, \u2211 dy, \u2211|dx|, \u2211|dy|)\\).</p> <p>This results in a descriptor vector for all 4\u00d74 sub-regions of length 64.</p> <ul> <li>(In \\(SIFT\\), our descriptor is the 128-D vector, so this is part of the reason that SURF is faster than Sift).</li> </ul>"},{"location":"DIP/feature/feature/#image-stitching","title":"Image Stitching","text":"<p>Procedure</p> <ul> <li>Detect feature points in both images. --Build SIFT descriptors</li> <li>Find correponding pairs -- Match SIFT descriptors (Euclidean distance)</li> <li>Use these pairs to align the images --  Fitting the transformation</li> <li>RANSAC</li> <li>Image Blending</li> </ul>"},{"location":"DIP/feature/feature/#ransac","title":"RANSAC","text":"<p>A further refinement of matches.--RANdom SAmple Consensus </p> <p>In short words, \\(RANSAC\\) fits \\(N\\) models using different random sample S of the whole available data each time. Then, for each model it evaluates its performance P (i.e. number of inliers or outliers) and chooses the best one. Note that RANSAC doesn\u2019t determine what method should you use to find model parameters.(least squares for example)</p> <p></p> <ul> <li> <p>How many samples are needed?</p> </li> <li> <p>Suppose \\(w\\) is fraction of inliers (points from line).</p> </li> <li> <p>\\(n\\) points needed to define hypothesis (2 for lines)</p> </li> <li> <p>\\(k\\) samples chosen.</p> <p>Prob. that a single sample of n points is correct \\(w^n\\)</p> <p>Prob. that all k samples fail is: \\((1-w^n)^k\\)</p> <ul> <li>Choose k high enough to keep this below desired failure rate.</li> </ul> </li> </ul> <p></p> <ul> <li> <p>k-- iterations</p> </li> <li> <p>RANSAC divides data into inliers and outliers and yields estimate computed from minimal set of inliers.Improve this initial estimate with estimation over all inliers (e.g. with standard least-squares minimization).</p> </li> <li> <p>But this may change inliers, so alternate fitting with re-classification as inlier/outlier.</p> </li> </ul>"},{"location":"DIP/feature/feature/#pros","title":"Pros:","text":"<ul> <li>General method suited for a wide range of model fitting problems</li> <li>Easy to implement and easy to calculate its failure rate</li> </ul>"},{"location":"DIP/feature/feature/#cons","title":"Cons:","text":"<ul> <li>Only handles a moderate percentage of outliers without cost blowing up</li> <li>Many real problems have high rate of outliers (but sometimes selective choice of random subsets can help)</li> </ul> <p>A voting strategy, the Hough transform, can handle high percentage of outliers</p>"},{"location":"DIP/feature/feature/#image-blending","title":"Image Blending","text":""},{"location":"DIP/feature/feature/#image-pyramids","title":"Image Pyramids","text":"<ul> <li> <p>An image pyramid can be constructed by repeatedly downsampling (or upsampling) an image and creating a set of images at different resolutions. </p> </li> <li> <p>The resulting images are referred to as \u201clevels\u201d of the pyramid, with the highest resolution image at the top and the lowest resolution image at the bottom.</p> </li> </ul>"},{"location":"DIP/feature/feature/#gaussian-pyramids","title":"Gaussian Pyramids","text":"<p>This type of pyramid is constructed by repeatedly applying a Gaussian blur filter to an image and downsampling it by a factor of two. The resulting images are smoother and have lower resolution than the original image because Gaussians are low pass filters.</p>"},{"location":"DIP/feature/feature/#laplacian-pyramid","title":"Laplacian Pyramid","text":"<p>This type of pyramid is constructed by subtracting a downsampled version of an image from the original image. </p> <ul> <li>The resulting images are high-pass filtered versions of the original image, which highlight the fine details and edges.</li> </ul>"},{"location":"DIP/feature/feature/#procedure","title":"Procedure","text":"<p>\u2022 Build Laplacian pyramid for both images: \\(L_A, L_B\\).</p> <p>\u2022 Build Gaussian pyramid for mask: \\(G\\).</p> <p>\u2022 Build a combined Laplacian pyramid: \\(L(j) = G(j) LA(j) + (1-G(j)) LB(j).\\)</p> <p>\u2022 Collapse \\(L\\) to obtain the blended image.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"DIP/filter/filter/","title":"image filter","text":"<p>"},{"location":"DIP/filter/filter/#_1","title":"\u6ee4\u6ce2","text":""},{"location":"DIP/filter/filter/#_2","title":"\u5377\u79ef","text":"<p>\\(L(x,y,\u03c3)=G(x,y,\u03c3)\u2217I(x,y)\\)</p> <p>\u8fde\u7eed\u5f62\u5f0f\uff1a\\((f\u2217g)(n)=\\int_{-\\infty }^{\\infty}f(\\tau )g(n-\\tau)d\\tau\\)</p> <p>\u79bb\u6563\u5f62\u5f0f\uff1a\\((f\u2217g)(n)=\\frac{1}{M}\\sum_{\\tau=0 }^{M-1}f(\\tau)g(n-\\tau)\\)</p>"},{"location":"DIP/filter/filter/#properties","title":"Properties","text":"<p>\\(f(x)*h(x)=h(x)*f(x)\\\\ f*(g+h)=f*g+f*h\\\\f*(g*h)=(f*g)*h\\)</p>"},{"location":"DIP/filter/filter/#examples","title":"Examples","text":"<ul> <li>Effective range\uff1a       </li> </ul> <p>Covers all the points that \\(h(t)\\) go through during the sliding operation.        </p> <p>In this example, the effective range of x is from 0 to 799.</p>"},{"location":"DIP/filter/filter/#_3","title":"\u57fa\u672c\u6982\u5ff5","text":"<p>\u6ee4\u6ce2\u5668\u662f\u4e00\u4e2a\u5927\u5c0f\u4e3a \\(M\\times N\\) \u7684\u7a97\u53e3\uff0c\u5176\u4e2d\u7a97\u53e3\u4e2d\u7684\u5143\u7d20\u5bf9\u5e94\u4e8e\u539f\u59cb\u56fe\u50cf\u4e2d\u7684\u76f8\u5e94\u50cf\u7d20\u8fdb\u884c\u64cd\u4f5c\uff0c\u7ed3\u679c\u4fdd\u5b58\u4e3a\u65b0\u56fe\u50cf\u4e2d\u7684\u50cf\u7d20</p> <p>\u6ee4\u6ce2\u4e5f\u88ab\u79f0\u4f5c:\u906e\u7f69 (mask)\u3001\u5185\u6838 (kernel)\u3001\u6a21\u677f (template) \u7b49\u3002\u6ee4\u6ce2\u5668\u4e2d\u7684\u5143\u7d20\u662f\u7cfb\u6570\u800c\u4e0d\u662f\u50cf\u7d20\u503c\uff0c\u5b83\u4eec\u8868\u793a\u5e94\u7528\u4e8e\u539f\u59cb\u56fe\u50cf\u4e2d\u50cf\u7d20\u7684\u6743\u91cd\u3002\u5728\u5f85\u5904\u7406\u56fe\u50cf\u4e2d\u9010\u70b9\u79fb\u52a8\u63a9\u6a21\uff0c\u5728\u6bcf\u4e00\u70b9(x,y)\u5904\uff0c\u6ee4\u6ce2\u5668\u5728\u8be5\u70b9\u7684\u54cd\u5e94\u901a\u8fc7\u5b9e\u73b0\u5b9a\u4e49\u7684\u5173\u7cfb\u6765\u8ba1\u7b97\u3002\u5bf9\u4e8e\u7ebf\u6027\u7a7a\u95f4\u6ee4\u6ce2\uff0c\u5176\u54cd\u5e94\u7531\u6ee4\u6ce2\u5668\u7cfb\u6570\u4e0e\u6ee4\u6ce2\u63a9\u6a21\u626b\u8fc7\u533a\u57df\u7684\u5bf9\u5e94\u50cf\u7d20\u503c\u7684\u4e58\u79ef\u4e4b\u548c\u7ed9\u51fa\u3002 </p> <p>\u901a\u5e38\uff0c\u63a9\u6a21\u7684\u957f\u5bbd\u90fd\u4e3a\u5947\u6570</p> <ul> <li>\u5047\u8bbe\u5206\u522b\u4e3a\\(2a+1\\)\u548c\\(2b+1\\)\u3002\u5f53\u7a97\u53e3\u4e2d\u5fc3\u5904\u4e8e\u50cf\u7d20\\((x,y)\\)\u5904\u65f6\uff0c\u65b0\u7684\u50cf\u7d20\u503c\u4e3a\uff1a\\(g(x,y)=\\sum_{s=-a}^a\\sum_{t=-b}^b w(s,t)f(x+s,y+t)\\).\u5bf9\u56fe\u50cff\u4e2d\u6240\u6709\u50cf\u7d20\u90fd\u4e0e\u63a9\u6a21\u8fdb\u884c\u8fd0\u7b97\u4e4b\u540e\uff0c\u6700\u7ec8\u4ea7\u751f\u4e00\u5e45\u65b0\u56fe\u50cfg  (\u8fd9\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u5377\u79ef\u64cd\u4f5c)</li> </ul> <p>\u56fe\u50cf\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\uff0c\u7531\u4e8e\u4f20\u8f93\u4fe1\u9053\u3001\u91c7\u6837\u7cfb\u7edf\u8d28\u91cf\u8f83\u5dee\uff0c\u6216\u53d7\u5404\u79cd\u5e72\u6270\u7684\u5f71\u54cd\uff0c\u800c\u9020\u6210\u56fe\u50cf\u6bdb\u7cd9\uff0c\u6b64\u65f6\uff0c\u5c31\u9700\u5bf9\u56fe\u50cf\u8fdb\u884c\u5e73\u6ed1\u5904\u7406\u3002\u5e73\u6ed1\u53ef\u4ee5\u6291\u5236\u9ad8\u9891\u6210\u5206\uff0c\u4f46\u4e5f\u4f7f\u56fe\u50cf\u53d8\u5f97\u6a21\u7cca\u3002  \u5e73\u6ed1\u7a7a\u95f4\u6ee4\u6ce2\u5668\u7528\u4e8e\u6a21\u7cca\u5904\u7406\u548c\u51cf\u5c11\u566a\u58f0\u3002\u6a21\u7cca\u5904\u7406\u7ecf\u5e38\u7528\u4e8e\u9884\u5904\u7406\uff0c\u4f8b\u5982\uff0c\u5728\u63d0\u53d6\u5927\u7684\u76ee\u6807\u4e4b\u524d\u53bb\u9664\u56fe\u50cf\u4e2d\u4e00\u4e9b\u7410\u788e\u7684\u7ec6\u8282\uff0c\u6865\u63a5\u76f4\u7ebf\u6216\u66f2\u7ebf\u7684\u7f1d\u9699\u3002</p>"},{"location":"DIP/filter/filter/#_4","title":"\u5e73\u6ed1\u7ebf\u6027\u7a7a\u95f4\u6ee4\u6ce2\u5668","text":"<p>\u5e73\u6ed1\u7ebf\u6027\u7a7a\u95f4\u6ee4\u6ce2\u5668\u7684\u8f93\u51fa\u662f\u5305\u542b\u5728\u6ee4\u6ce2\u63a9\u6a21\u90bb\u57df\u5185\u50cf\u7d20\u7684\u7b80\u5355\u5e73\u5747\u503c\u3002\u56e0\u6b64\uff0c\u8fd9\u4e9b\u6ee4\u6ce2\u5668\u4e5f\u79f0\u4e3a\u5747\u503c\u6ee4\u6ce2\u5668\u3002</p> <ul> <li> <p>\u7b80\u5355\u5e73\u5747(simple mean)\uff0c\u8868\u793a\u7a97\u53e3\u4e2d\u6bcf\u4e00\u4e2a\u50cf\u7d20\u5bf9\u54cd\u5e94\u7684\u8d21\u732e\u662f\u4e00\u6837\u7684, \u6ee4\u6ce2\u7a97\u53e3\uff1a\\(\\frac{1}{9} \\times \\begin{bmatrix}1&amp;1&amp;1 \\\\ 1&amp;1&amp;1\\\\ 1&amp;1&amp;1\\end{bmatrix}\\)</p> </li> <li> <p>\u52a0\u6743\u5e73\u5747(weighted mean)\uff0c\u8868\u793a\u7a97\u53e3\u4e2d\u7684\u50cf\u7d20\u5bf9\u76f8\u5e94\u7684\u8d21\u732e\u6709\u5927\u5c0f\u4e4b\u5206\uff0c\u6ee4\u6ce2\u7a97\u53e3\uff1a\\(\\frac{1}{16} \\times \\begin{bmatrix}1&amp;2&amp;1 \\\\ 2&amp;4&amp;2\\\\ 1&amp;2&amp;1\\end{bmatrix}\\)</p> </li> <li> <p>General Equation</p> </li> </ul> <p></p> <p>\u5176\u4e2d\uff0c\u6ee4\u6ce2\u5668\u5927\u5c0f\u4e3a\\((2a+1) \u00d7(2b+1)\\)\uff0c\\(w\\)\u4e3a\u6ee4\u6ce2\u5668\uff0c\\(f\\)\u4e3a\u8f93\u5165\u56fe\u50cf\uff0c\\(g\\)\u4e3a\u8f93\u51fa\u56fe\u50cf\u3002</p> <ul> <li>\u6ee4\u6ce2\u63a9\u6a21\u7684\u5927\u5c0f\u4e0e\u56fe\u50cf\u7684\u5e73\u6ed1\u6548\u679c\u6709\u76f4\u63a5\u7684\u5173\u7cfb</li> </ul> <p>\u5f53\u63a9\u6a21\u6bd4\u8f83\u5c0f\u65f6\uff0c\u53ef\u4ee5\u89c2\u5bdf\u5230\u5728\u6574\u5e45\u56fe\u50cf\u4e2d\u6709\u8f7b\u5fae\u7684\u6a21\u7cca</p> <p>\u5f53\u63a9\u6a21\u5927\u5c0f\u589e\u52a0\uff0c\u6a21\u7cca\u7a0b\u5ea6\u4e5f\u968f\u4e4b\u589e\u52a0</p> <ul> <li>\u4e3a\u4e86\u5bf9\u611f\u5174\u8da3\u7269\u4f53\u5f97\u5230\u4e00\u4e2a\u7c97\u7565\u7684\u63cf\u8ff0\u800c\u6a21\u7cca\u4e00\u5e45\u56fe\u50cf\uff0c\u8fd9\u6837\uff0c\u90a3\u4e9b\u8f83\u5c0f\u7269\u4f53\u7684\u5f3a\u5ea6\u4e0e\u80cc\u666f\u6df7\u5408\u5728\u4e00\u8d77\u4e86\uff0c\u8f83\u5927\u7269\u4f53\u53d8\u5f97\u50cf\u201c\u6591\u70b9\u201d\u800c\u6613\u4e8e\u68c0\u6d4b\u3002\u63a9\u6a21\u7684\u5927\u5c0f\u7531\u90a3\u4e9b\u5373\u5c06\u878d\u5165\u80cc\u666f\u4e2d\u53bb\u7684\u7269\u4ef6\u5c3a\u5bf8\u6765\u51b3\u5b9a\u3002 </li> </ul>"},{"location":"DIP/filter/filter/#_5","title":"\u7edf\u8ba1\u6ee4\u6ce2\u5668","text":"<p>\u7edf\u8ba1\u6ee4\u6ce2\u5668\u662f\u4e00\u79cd\u975e\u7ebf\u6027\u7684\u7a7a\u95f4\u6ee4\u6ce2\u5668\uff0c\u5b83\u7684\u54cd\u5e94\u662f\u57fa\u4e8e\u7a97\u53e3\u5185\u56fe\u50cf\u533a\u57df\u4e2d\u50cf\u7d20\u503c\u7684\u6392\u5e8f\uff0c\u7531\u7edf\u8ba1\u6392\u5e8f\u7ed3\u679c\u51b3\u5b9a\u7684\u503c\u4ee3\u66ff\u4e2d\u5fc3\u50cf\u7d20\u7684\u503c\u3002      </p> <ul> <li>\u7edf\u8ba1\u6ee4\u6ce2\u5668\u4e2d\u6700\u5e38\u89c1\u7684\u4f8b\u5b50\u5c31\u662f\u4e2d\u503c\u6ee4\u6ce2\u5668\u3002</li> <li>\u7528\u50cf\u7d20\u90bb\u57df\u5185\u7070\u5ea6\u7684\u4e2d\u503c\u4ee3\u66ff\u8be5\u50cf\u7d20\u7684\u503c</li> <li>\u63d0\u4f9b\u4e86\u4f18\u79c0\u7684\u53bb\u566a\u80fd\u529b\uff0c\u6bd4\u5c0f\u5c3a\u5bf8\u7684\u7ebf\u6027\u5e73\u6ed1\u6ee4\u6ce2\u5668\u7684\u6a21\u7cca\u7a0b\u5ea6\u660e\u663e\u8981\u4f4e</li> <li> <p>\u5bf9\u5904\u7406\u8109\u51b2\u566a\u58f0\uff08\u4e5f\u79f0\u4e3a\u6912\u76d0\u566a\u58f0\uff09\u975e\u5e38\u6709\u6548\uff0c\u56e0\u4e3a\u8fd9\u79cd\u566a\u58f0\u662f\u4ee5\u9ed1\u767d\u70b9\u53e0\u52a0\u5728\u56fe\u50cf\u4e0a\u7684\u3002 </p> </li> <li> <p>\u4e3a\u4e86\u5bf9\u4e00\u5e45\u56fe\u50cf\u4e0a\u7684\u67d0\u4e2a\u70b9\u4f5c\u4e2d\u503c\u6ee4\u6ce2\u5904\u7406\u3002\u5fc5\u987b\u5148\u5c06\u63a9\u6a21\u5185\u6b32\u6c42\u7684\u50cf\u7d20\u53ca\u5176\u90bb\u57df\u7684\u50cf\u7d20\u503c\u6392\u5e8f\uff0c\u786e\u5b9a\u51fa\u4e2d\u503c\uff0c\u5e76\u5c06\u4e2d\u503c\u8d4b\u4e88\u8be5\u50cf\u7d20\u70b9</p> </li> </ul> <p>\u4e2d\u503c\\(\u03be\\) --\u6570\u503c\u96c6\u5408\u4e2d\uff0c\u6709\u4e00\u534a\u6570\u503c\u5c0f\u4e8e\u6216\u7b49\u4e8e\\(\u03be\\)\uff0c\u8fd8\u6709\u4e00\u534a\u5927\u4e8e\u6216\u7b49\u4e8e\\(\u03be\\)</p> <p>\u4e3a\u4e86\u5bf9\u4e00\u5e45\u56fe\u50cf\u4e0a\u7684\u67d0\u4e2a\u70b9\u4f5c\u4e2d\u503c\u6ee4\u6ce2\u5904\u7406,\u5fc5\u987b\u5148\u5c06\u63a9\u6a21\u5185\u6b32\u6c42\u7684\u50cf\u7d20\u53ca\u5176\u90bb\u57df\u7684\u50cf\u7d20\u503c\u6392\u5e8f\uff0c\u786e\u5b9a\u51fa\u4e2d\u503c\uff0c\u5e76\u5c06\u4e2d\u503c\u8d4b\u4e88\u8be5\u50cf\u7d20\u70b9</p> <ul> <li>\u5e38\u7528\\(n\\times n\\)\u7684\u4e2d\u503c\u6ee4\u6ce2\u5668\u53bb\u9664\u90a3\u4e9b\u76f8\u5bf9\u4e8e\u5176\u90bb\u57df\u50cf\u7d20\u66f4\u4eae\u6216\u66f4\u6697\uff0c\u5e76\u4e14\u5176\u533a\u57df\u5c0f\u4e8e\\(n^2/2\\)\uff08\u6ee4\u6ce2\u5668\u533a\u57df\u7684\u4e00\u534a\uff09\u7684\u5b64\u7acb\u50cf\u7d20\u96c6</li> </ul>"},{"location":"DIP/filter/filter/#sharpening-spatial-filter","title":"Sharpening spatial filter","text":"<p>\u62c9\u666e\u62c9\u65af\u9510\u5316\u662f\u4e00\u79cd\u56fe\u50cf\u5904\u7406\u6280\u672f\uff0c\u65e8\u5728\u7a81\u51fa\u56fe\u50cf\u4e2d\u7684\u8fb9\u7f18\u548c\u7ec6\u8282\uff0c\u4f7f\u56fe\u50cf\u770b\u8d77\u6765\u66f4\u52a0\u9510\u5229\u3002\u8fd9\u79cd\u6280\u672f\u4f7f\u7528\u62c9\u666e\u62c9\u65af\u7b97\u5b50\uff08Laplacian operator\uff09\u6216\u62c9\u666e\u62c9\u65af\u6ee4\u6ce2\u5668\u5bf9\u56fe\u50cf\u8fdb\u884c\u5377\u79ef\u64cd\u4f5c\uff0c\u4ee5\u589e\u5f3a\u56fe\u50cf\u4e2d\u7684\u9ad8\u9891\u4fe1\u606f\u3002</p>"},{"location":"DIP/filter/filter/#1","title":"(1)\u62c9\u666e\u62c9\u65af\u7b97\u5b50","text":"<p>\u4e00\u9636\u5fae\u5206\u7b97\u5b50:\\(\\frac{\\partial{f}}{\\partial{x}}\\)$= f(x + 1) \u2212 f(x) $</p> <p>\u4e8c\u9636\u5fae\u5206\u7b97\u5b50:\\(\\frac{\\partial^2{f}}{\\partial{x}^2}\\)\\(= f(x + 1) +f(x-1)\u2212 2f(x)\\)</p> <ul> <li>\u5bf9\u4e8e\u51fd\u6570f(x,y)\uff0c\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\u4e8c\u7ef4\u5217\u5411\u91cf\uff1a</li> </ul> <p></p> <ul> <li> <p>\u5bf9\u6574\u5e45\u56fe\u50cf\u8ba1\u7b97\u68af\u5ea6\u65f6\uff0c\u8fd0\u7b97\u91cf\u4f1a\u5f88\u5927\uff0c\u56e0\u6b64\uff0c\u5728\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u5e38\u7528\u7edd\u5bf9\u503c\u4ee3\u66ff\u5e73\u65b9\u4e0e\u5e73\u65b9\u6839\u8fd0\u7b97\u8fd1\u4f3c\u6c42\u68af\u5ea6\u7684\u6a21\u503c \\(\\triangledown f \\approx |G_x|+|G_y|\\)</p> </li> <li> <p>\u79bb\u6563\u5f62\u5f0f</p> </li> </ul> <p>\\(\\ \\ \\ \\triangledown^2f=f(x+1,y)+f(x-1,y)+f(x,y+1),F(x,y-1)-4f(x,y)\\)</p> <p></p> <ul> <li>Laplacian operator is defined as \\(\\triangledown^2 f=\\frac{\\partial^2f}{\\partial x ^2}+\\frac{\\partial^2f}{\\partial y ^2}\\)</li> <li>Along x axis \\(\\frac{\\partial^2{f}}{\\partial{x}^2}= f(x + 1,y) +f(x-1,y)\u2212 2f(x,y)\\)</li> <li>Along y axis  \\(\\frac{\\partial^2{f}}{\\partial{y}^2}= f(x,y+1) +f(x,y-1)\u2212 2f(x,y)\\)</li> <li>discrete Laplacian operator  \\(\\triangledown^2f=f(x+1,y)+f(x-1,y)+f(x,y+1),F(x,y-1)-4f(x,y)\\)</li> </ul>"},{"location":"DIP/filter/filter/#2","title":"(2)\u62c9\u666e\u62c9\u65af\u53d8\u6362\u56fe\u50cf\u9510\u5316","text":"<ul> <li>\u63a9\u6a21</li> </ul> <p>\u5982\u679c\u8003\u8651\u5bf9\u89d2\u7ebf\u5143\u7d20</p> <p></p> <ul> <li> <p>\u7531\u4e8e\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u662f\u4e00\u79cd\u5bfc\u6570\u7b97\u5b50\uff0c\u5b83\u7684\u4f7f\u7528\u4f1a\u7a81\u51fa\u663e\u793a\u56fe\u50cf\u4e2d\u7684\u5f3a\u5ea6\u4e0d\u8fde\u7eed\u6027\uff0c\u800c\u4e0d\u5f3a\u8c03\u5177\u6709\u7f13\u6162 \u53d8\u5316\u7684\u5f3a\u5ea6\u7ea7\u522b\u7684\u533a\u57df\u3002\u8fd9\u5c06\u503e\u5411\u4e8e\u751f\u6210\u5177\u6709\u7070\u8272\u8fb9\u7f18\u7ebf\u548c\u5176\u4ed6\u4e0d\u8fde\u7eed\u6027\u7684\u56fe\u50cf\uff0c\u6240\u6709\u8fd9\u4e9b\u56fe\u50cf\u90fd\u53e0\u52a0\u5728\u9ed1\u6697\u3001\u65e0\u7279\u5f81\u7684\u80cc\u666f\u4e0a\u3002\u53ea\u9700\u5c06\u62c9\u666e\u62c9\u65af\u56fe\u50cf\u6dfb\u52a0\u5230\u539f\u59cb\u56fe\u50cf\u4e2d\uff0c\u5373\u53ef\u201c\u6062\u590d\u201d\u80cc\u666f\u7279\u5f81\uff0c\u540c\u65f6\u4ecd\u4fdd\u6301\u62c9 \u666e\u62c9\u65af\u56fe\u50cf\u7684\u9510\u5316\u6548\u679c</p> </li> <li> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4f7f\u7528\u7684\u5b9a\u4e49\u5177\u6709\u8d1f\u4e2d\u5fc3\u7cfb\u6570\uff0c\u5219\u6211\u4eec\u51cf\u53bb\u800c\u4e0d\u662f\u6dfb\u52a0\u62c9\u666e\u62c9\u65af\u56fe\u50cf\u4ee5\u83b7\u5f97\u9510\u5316\u7ed3\u679c</p> </li> <li> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u4f7f\u7528\u62c9\u666e\u62c9\u65af\u51fd\u6570\u8fdb\u884c\u56fe\u50cf\u9510\u5316\u7684\u57fa\u672c\u65b9\u6cd5\u662f:</p> </li> </ul> <p>\\(g(x,y)=\\left\\{\\begin{array}{ll}f(x,y)-\\triangledown^2f(x,y)&amp; if\\ the\\ center\\ of\\ the\\ mask\\ is\\ negative \\\\ f(x,y)+\\triangledown^2f(x,y)&amp; if\\ the\\ center\\ of\\ the\\ mask\\ is\\ positive  \\end{array} \\right.\\)</p> <ul> <li>\u5c06\u539f\u59cb\u56fe\u50cf\u548c\u62c9\u666e\u62c9\u65af\u56fe\u50cf\u53e0\u52a0\u5728\u4e00\u8d77\u7684\u7b80\u5355\u65b9\u6cd5\u53ef\u4ee5\u4fdd\u62a4\u62c9\u666e\u62c9\u65af\u9510\u5316\u5904\u7406\u7684\u6548\u679c\uff0c\u540c\u65f6\u53c8\u80fd\u590d\u539f\u80cc\u666f\u4fe1\u606f\u3002  </li> </ul>"},{"location":"DIP/filter/filter/#_6","title":"\u9ad8\u65af\u6ee4\u6ce2","text":"<p>\u9ad8\u65af\u6ee4\u6ce2\u662f\u4e00\u79cd\u5e38\u7528\u7684\u56fe\u50cf\u5904\u7406\u6ee4\u6ce2\u5668\uff0c\u5176\u4e3b\u8981\u76ee\u7684\u662f\u5bf9\u56fe\u50cf\u8fdb\u884c\u5e73\u6ed1\u5904\u7406\u3002\u5b83\u7684\u540d\u79f0\u6765\u6e90\u4e8e\u6240\u4f7f\u7528\u7684\u6ee4\u6ce2\u6838\uff08\u5377\u79ef\u6838\uff09\u662f\u4e00\u4e2a\u4e8c\u7ef4\u9ad8\u65af\u51fd\u6570\u3002\u9ad8\u65af\u6ee4\u6ce2\u5728\u53bb\u9664\u56fe\u50cf\u4e2d\u7684\u566a\u58f0\u3001\u6a21\u7cca\u5904\u7406\u3001\u8fb9\u7f18\u68c0\u6d4b\u7b49\u65b9\u9762\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\u3002</p> <p>\u9ad8\u65af\u6ee4\u6ce2\u7684\u6838\u5fc3\u601d\u60f3\u662f\u5bf9\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u70b9\u8fdb\u884c\u52a0\u6743\u5e73\u5747\uff0c\u5176\u4e2d\u6743\u503c\u662f\u7531\u4e8c\u7ef4\u9ad8\u65af\u51fd\u6570\u786e\u5b9a\u7684\u3002\u8fd9\u610f\u5473\u7740\u79bb\u4e2d\u5fc3\u50cf\u7d20\u8d8a\u8fdc\u7684\u50cf\u7d20\u5bf9\u4e2d\u5fc3\u50cf\u7d20\u7684\u5f71\u54cd\u8d8a\u5c0f\uff0c\u8fd9\u79cd\u6743\u503c\u7684\u5206\u5e03\u7b26\u5408\u9ad8\u65af\u5206\u5e03\u3002\u901a\u8fc7\u8c03\u6574\u9ad8\u65af\u51fd\u6570\u7684\u6807\u51c6\u5dee\\(\u03c3\\)\uff0c\u53ef\u4ee5\u63a7\u5236\u6743\u503c\u7684\u5206\u5e03\u8303\u56f4\uff0c\u4ece\u800c\u8c03\u6574\u6ee4\u6ce2\u6548\u679c\u3002</p>"},{"location":"DIP/filter/filter/#1_1","title":"(1)\u6570\u5b66\u8868\u8fbe","text":"<ul> <li>\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e8c\u7ef4\u9ad8\u65af\u51fd\u6570\u8868\u793a\u4e3a\\(f(x,y)=\\frac{1}{\\sqrt{2\\pi}\\sigma_x}e^{-\\frac{(x-\\mu_x)^2}{2\\sigma_x^2}}\\cdot \\frac{1}{\\sqrt{2\\pi}\\sigma_y}e^{-\\frac{(y-\\mu_y)^2}{2\\sigma_y^2}}\\)</li> </ul> <p>\u5728\u56fe\u50cf\u6ee4\u6ce2\u4e2d,\u4e00\u822c\u60c5\u51b5\u4e0b\\(\u03bc_x = \u03bc_y = 0\\)\u56e0\u6b64\u4e8c\u7ef4\u9ad8\u65af\u51fd\u6570\u53ef\u8868\u793a\u4e3a\\(f(x,y)=\\frac{1}{2\\pi\\sigma^2}e^{-\\frac{x^2+y^2}{2\\sigma^2}}\\)</p> <p></p>"},{"location":"DIP/filter/filter/#2_1","title":"(2)\u6ee4\u6ce2\u8fc7\u7a0b","text":"<ul> <li>\u9ad8\u65af\u6838\u7684\u6c42\u89e3\uff1a</li> </ul> <p>\u5c06\u5404\u4e2a\u4f4d\u7f6e\u7684\u5750\u6807\u4ee3\u5165\u5230\u9ad8\u65af\u51fd\u6570\u4e2d,\u5f97\u5230\u7684\u503c\u5c31\u662f\u521d\u6b65\u7684\u9ad8\u65af\u6838</p> <ul> <li>\u5f52\u4e00\u5316\uff1a</li> </ul> <p></p>"},{"location":"DIP/filter/filter/#3","title":"(3) \u5206\u79bb\u5b9e\u73b0\u9ad8\u65af\u6ee4\u6ce2","text":"<p>\u5229\u7528\u9ad8\u65af\u51fd\u6570\u8fdb\u884c\u5377\u79ef(\u9ad8\u65af\u6ee4\u6ce2)\u7684\u8fc7\u7a0b\u5177\u6709\u53ef\u5206\u79bb\u6027\u3002</p> <p></p>"},{"location":"DIP/filter/filter/#_7","title":"\u53cc\u8fb9\u6ee4\u6ce2","text":"<p>\u53cc\u8fb9\u6ee4\u6ce2\uff08Bilateral filter\uff09\u662f\u4e00\u79cd\u975e\u7ebf\u6027\u7684\u6ee4\u6ce2\u65b9\u6cd5\uff0c\u662f\u7ed3\u5408\u56fe\u50cf\u7684\u7a7a\u95f4\u90bb\u8fd1\u5ea6\u548c\u50cf\u7d20\u503c\u76f8\u4f3c\u5ea6\u7684\u4e00\u79cd\u6298\u8877\u5904\u7406\uff0c\u540c\u65f6\u8003\u8651\u7a7a\u57df\u4fe1\u606f\u548c\u7070\u5ea6\u76f8\u4f3c\u6027\uff0c\u8fbe\u5230\u4fdd\u8fb9\u53bb\u566a\u7684\u76ee\u7684\u3002\u5177\u6709\u7b80\u5355\u3001\u975e\u8fed\u4ee3\u3001\u5c40\u90e8\u7684\u7279\u70b9</p> <ul> <li>\u53bb\u566a\uff0c\u5e73\u6ed1\uff0c\u4fdd\u7559\u8fb9\u7f18</li> </ul> <p>\u53cc\u8fb9\u6ee4\u6ce2\u5668\u7684\u597d\u5904\u662f\u53ef\u4ee5\u505a\u8fb9\u7f18\u4fdd\u5b58\uff08edge preserving\uff09\uff0c\u4e00\u822c\u7528\u9ad8\u65af\u6ee4\u6ce2\u53bb\u964d\u566a\uff0c\u4f1a\u8f83\u660e\u663e\u5730\u6a21\u7cca\u8fb9\u7f18\uff0c\u5bf9\u4e8e\u9ad8\u9891\u7ec6\u8282\u7684\u4fdd\u62a4\u6548\u679c\u5e76\u4e0d\u660e\u663e\u3002\u53cc\u8fb9\u6ee4\u6ce2\u5668\u987e\u540d\u601d\u4e49\u6bd4\u9ad8\u65af\u6ee4\u6ce2\u591a\u4e86\u4e00\u4e2a\u9ad8\u65af\u65b9\u5deesigma\uff0dd\uff0c\u5b83\u662f\u57fa\u4e8e\u7a7a\u95f4\u5206\u5e03\u7684\u9ad8\u65af\u6ee4\u6ce2\u51fd\u6570\uff0c\u6240\u4ee5\u5728\u8fb9\u7f18\u9644\u8fd1\uff0c\u79bb\u7684\u8f83\u8fdc\u7684\u50cf\u7d20\u4e0d\u4f1a\u592a\u591a\u5f71\u54cd\u5230\u8fb9\u7f18\u4e0a\u7684\u50cf\u7d20\u503c\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u8fb9\u7f18\u9644\u8fd1\u50cf\u7d20\u503c\u7684\u4fdd\u5b58\u3002\u4f46\u662f\u7531\u4e8e\u4fdd\u5b58\u4e86\u8fc7\u591a\u7684\u9ad8\u9891\u4fe1\u606f\uff0c\u5bf9\u4e8e\u5f69\u8272\u56fe\u50cf\u91cc\u7684\u9ad8\u9891\u566a\u58f0\uff0c\u53cc\u8fb9\u6ee4\u6ce2\u5668\u4e0d\u80fd\u591f\u5e72\u51c0\u7684\u6ee4\u6389\uff0c\u53ea\u80fd\u591f\u5bf9\u4e8e\u4f4e\u9891\u4fe1\u606f\u8fdb\u884c\u8f83\u597d\u7684\u6ee4\u6ce2</p> <ul> <li>\u5f15\u5165\u4e86\u5feb\u901f\u5085\u7acb\u53f6\u53d8\u6362\u624d\u5b9e\u73b0\u4e86\u52a0\u901f!</li> </ul>"},{"location":"DIP/filter/filter/#brute-force-implementation","title":"Brute-force Implementation","text":"<ul> <li> <p>Nonlinear </p> </li> <li> <p>Complex, spatially varying kernels</p> </li> <li> <p>Cannot be pre-computed</p> </li> <li> <p>Brute-force implementation is slow &gt; 10min</p> </li> </ul>"},{"location":"DIP/filter/filter/#1_2","title":"(1)\u6570\u5b66\u63a8\u5bfc","text":"<p>\\(h(x)=k_r^{\u22121}(x)\u222b^{+\u221e}_{\u2212\u221e}\u222b^{+\u221e}_{\u2212\u221e}f(\u03be)c(\u03be,x)s(f(\u03be),f(x))d\u03be\\)</p> <p>\\(c(\u03be,x)=\\frac{1}{2\\pi\\sigma_s^2}e^{-\\frac{||\u03be-x||^2}{2\\sigma_s^2}}\\)</p> <p>\\(s(f(\u03be),f(x))=\\frac{1}{2\\pi\\sigma_r^2}e^{-\\frac{||f(\u03be)-f(x)||^2}{2\\sigma_r^2}}\\)</p> <ul> <li> <p>\\(Which\\) \\(is\\) \\(BF[I]p=\\frac{1}{W_p}\\sum_{q\\in S}G_{\\sigma_s}(||p-q||)G_{\\sigma_r}(|O_p-I_q|)I_q\\)  !!!</p> </li> <li> <p>\\(\\frac{1}{W_p}\\)\u4e3a\u5f52\u4e00\u5316\u56e0\u5b50</p> </li> </ul>"},{"location":"DIP/filter/filter/#2_2","title":"(2)\u53c2\u6570\u8bbe\u7f6e","text":"<ul> <li>\\(\u03c3_s\\) \u8d8a\u5927\uff0c\u56fe\u50cf\u8d8a\u5e73\u6ed1\uff0c\u8d8b\u4e8e\u65e0\u7a77\u5927\u65f6\uff0c\u6bcf\u4e2a\u6743\u91cd\u90fd\u4e00\u6837\uff0c\u7c7b\u4f3c\u5747\u503c\u6ee4\u6ce2.</li> </ul> <p>\\(\u03c3_s\\) \u8d8a\u5c0f\uff0c\u4e2d\u5fc3\u70b9\u6743\u91cd\u8d8a\u5927\uff0c\u5468\u56f4\u70b9\u6743\u91cd\u8d8a\u5c0f\uff0c\u5bf9\u56fe\u50cf\u7684\u6ee4\u6ce2\u4f5c\u7528\u8d8a\u5c0f\uff0c\u8d8b\u4e8e\u96f6\u65f6\uff0c\u8f93\u51fa\u7b49\u540c\u4e8e\u539f\u56fe.</p> <ul> <li>\\(\u03c3_r\\) \u8d8a\u5927\uff0c\u8fb9\u7f18\u8d8a\u6a21\u7cca\uff0c\u6781\u9650\u60c5\u51b5\u4e3a\\(\u03c3_r\\) \u65e0\u7a77\u5927\uff0c\u503c\u57df\u7cfb\u6570\u8fd1\u4f3c\u76f8\u7b49(\u5ffd\u7565\u5e38\u6570\u65f6\uff0c\u5c06\u8fd1\u4e3a \\(e_0 = 1\\))\uff0c\u4e0e\u9ad8\u65af\u6a21\u677f(\u7a7a\u95f4\u57df\u6a21\u677f)\u76f8\u4e58\u540e\u53ef\u8ba4\u4e3a\u7b49\u6548\u4e8e\u9ad8\u65af\u6ee4\u6ce2.</li> </ul> <p>\\(\u03c3_r\\) \u8d8a\u5c0f\uff0c\u8fb9\u7f18\u8d8a\u6e05\u6670\uff0c\u6781\u9650\u60c5\u51b5\u4e3a \\(\u03c3_r\\) \u65e0\u9650\u63a5\u8fd1 0\uff0c\u503c\u57df\u7cfb\u6570\u9664\u4e86\u4e2d\u5fc3\u4f4d\u7f6e\uff0c\u5176\u4ed6\u8fd1\u4f3c\u4e3a 0(\u63a5\u8fd1 \\(e_\u221e = 0\\))\uff0c\u4e0e\u9ad8\u65af\u6a21\u677f(\u7a7a\u95f4\u57df\u6a21\u677f)\u76f8\u4e58\u8fdb\u884c\u6ee4\u6ce2\u7684\u7ed3\u679c\u7b49\u6548\u4e8e\u539f\u56fe\u50cf.</p>"},{"location":"DIP/filter/filter/#how-to-set-the-parameters","title":"How to Set the Parameters","text":"<p>Depends on the application. For instance:</p> <ul> <li>space parameter: proportional to image size </li> </ul> <p>e.g., 2% of image diagonal </p> <ul> <li>intensity parameter: proportional to edge amplitude</li> </ul> <p>e.g., mean or median of image gradients </p> <ul> <li> <p>independent of resolution and exposure</p> </li> <li> <p>Iterating the Bilateral Filter</p> </li> </ul>"},{"location":"DIP/filter/filter/#bilateral-filtering-color-images","title":"Bilateral Filtering Color Images","text":""},{"location":"DIP/filter/filter/#denoising","title":"Denoising","text":"<ul> <li> <p>Small spatial sigma (e.g. 7x7 window)</p> </li> <li> <p>Adapt intensity sigma to noise level </p> </li> <li>Maybe not best denoising method, but best simplicity/quality trade-off</li> <li>No need for acceleration (small kernel)But the denoising feature in e.g. Photoshop is better</li> </ul>"},{"location":"DIP/filter/filter/#tone-mapping","title":"Tone mapping","text":"<ul> <li>Match limited contrast of the medium</li> <li>Preserve details</li> </ul>"},{"location":"DIP/filter/filter/#disadvantages","title":"Disadvantages","text":"<ul> <li>Nonlinear</li> <li>Vompex spatially varying kernels</li> <li>Connot be pre-computed</li> <li>Brute-force implementation is slow</li> <li>\u68af\u5ea6\u7ffb\u8f6c</li> </ul>"},{"location":"DIP/filter/filter/#a-fast-approximation-of-the-bilateral-filter-using-a-signal-processing-approach","title":"A Fast Approximation of the bilateral filter using a signal processing approach","text":""},{"location":"DIP/filter/filter/#preknowledge","title":"PreKnowledge","text":"<p>\u5377\u79ef\u5b9a\u7406\u544a\u8bc9\u6211\u4eec\uff0c\u5728\u9891\u57df\u4e2d\uff0c\u5377\u79ef\u7b49\u4ef7\u4e8e\u76f8\u4e58\u3002\u6240\u4ee5\uff0c\u5728\u9891\u57df\u4e2d\uff0c\u56fe\u50cf F(u,v*) \u4e0e\u6ee4\u6ce2\u6838 Hb(u,v)\u7684\u5377\u79ef\u7ed3\u679c G(u,v)\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a</p> <p>\\(G(u,v)=F(u,v)\u22c5H_b(u,v)\\)</p> <p>\u53c2\u8003 https://blog.csdn.net/xijuezhu8128/article/details/111304006</p> <p>\u5176\u57fa\u672c\u601d\u60f3\u5c31\u662f\u5c06\u975e\u7ebf\u6027\u7684\u53cc\u8fb9\u6ee4\u6ce2\u6539\u6210\u53ef\u5206\u79bb\u7684\u7ebf\u6027\u64cd\u4f5c\u548c\u975e\u7ebf\u6027\u64cd\u4f5c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u539f\u6765\u7684\u53cc\u8fb9\u6ee4\u6ce2\u5728\u56fe\u50cf\u4e0d\u540c\u4f4d\u7f6e\u5e94\u7528\u4e0d\u540c\u7684\u6743\u91cd\uff0c\u4e5f\u5c31\u662f\u4f4d\u79fb\u6539\u53d8\u5377\u79ef\uff0c\u4ed6\u4eec\u901a\u8fc7\u589e\u52a0\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u4e5f\u5c31\u662f\u5c06\u7070\u5ea6\u503c\u4f5c\u4e3a\u4e00\u4e2a\u65b0\u7684\u7ef4\u5ea6\uff0c\u5c06\u53cc\u8fb9\u6ee4\u6ce2\u8868\u8fbe\u62103D\u7a7a\u95f4\u4e2d\u7684\u7ebf\u6027\u4f4d\u79fb\u4e0d\u53d8\u5377\u79ef\uff0c\u6700\u540e\u518d\u6267\u884c\u975e\u7ebf\u6027\u7684\u5f52\u4e00\u5316\u64cd\u4f5c\u3002</p> <p></p>"},{"location":"DIP/filter/filter/#derivation","title":"Derivation","text":"<p>(1\uff09 \u9996\u5148\u5c06\u539f\u59cb\u53cc\u8fb9\u6ee4\u6ce2\u516c\u5f0f\u7b49\u5f0f\u5de6\u53f3\u7686\u5de6\u4e58\\(W_p^b\\)\uff0c\u5e76\u5c06\u4e24\u4e2a\u516c\u5f0f\u901a\u8fc7\u4e8c\u7ef4\u5411\u91cf\u8868\u8fbe\u6210\u5355\u4e2a\u516c\u5f0f\uff1a</p> <p></p> <p>\uff082\uff09\u7b49\u5f0f\u53f3\u4fa7\u4e58\u4ee5\\(W_q\\)\uff0c\\(W_q\\)=1\uff1a</p> <p></p> <p>\u4e0a\u56fe\u4e2d\uff0c\u5982\u679c\u5ffd\u7565\u7b49\u5f0f\u53f3\u4fa7\u7684\\(G_{\\sigma_r}(|I_p-I_q|)\\)\u8fd9\u4e00\u9879\uff0c\u90a3\u4e48\u8be5\u7b49\u5f0f\u8868\u8fbe\u7684\u5c31\u662f\u7ecf\u5178\u7684\u9ad8\u65af\u6ee4\u6ce2</p> <p>\u53ef\u4ee5\u7b80\u5199\u4e3a\u4ee5\u4e0b\u5377\u79ef\u7684\u5f62\u5f0f\uff1a\\(\\begin{pmatrix}W^bI^b\\\\W^b\\end{pmatrix}=G_{\\sigma_r}*\\begin{pmatrix}WI\\\\W\\end{pmatrix}\\)</p> <p>\uff083\uff09\u589e\u7ef4\uff0c\u589e\u52a0\u5f3a\u5ea6\u7ef4\uff08\u4e5f\u5c31\u662f\u7070\u5ea6\u503c\uff09\uff1a</p> <p>\u4f7f\u7528\\(Kronecker\\)\u51fd\u6570\uff0c\\(\\delta\\)\u53ea\u5728\\(0\\)\u70b9\u4e3a\\(1\\)\uff0c\u5176\u4ed6\u4e3a0</p> <p></p> <p></p> <p></p> <p>THUS</p> <p></p> <p>\u4e0a\u5f0f\u53ef\u4ee5\u8868\u8fbe\u4e3a\u5728\u70b9\uff08\\(p\\), \\(I_p\\)\uff09\u4f4d\u7f6e\u5904\u4e09\u7ef4\u5377\u79ef\u7684\u5f62\u5f0f\uff1a</p> <p></p> <p>\uff085\uff09\u6574\u4e2a\u6d41\u7a0b\uff1a\u7ebf\u6027\u5377\u79ef+\u975e\u7ebf\u6027\u5f52\u4e00\u5316</p> <p></p> <p>\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u4e3b\u8981\u7684\u52a0\u901f\u6765\u81ea\u4e8e\u5728\u9891\u57df\u4e2d\u6267\u884c\u5377\u79ef\u64cd\u4f5c\u3002\u9891\u57df\u5377\u79ef\u901a\u5e38\u6bd4\u65f6\u57df\u5377\u79ef\u66f4\u5feb\uff0c\u5c24\u5176\u662f\u5728\u4f7f\u7528\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362\uff08FFT\uff09\u7b49\u9ad8\u6548\u7b97\u6cd5\u65f6\u3002</p>"},{"location":"DIP/filter/filter/#guided-filter","title":"Guided Filter","text":"<ul> <li>\u4fdd\u6301\u68af\u5ea6\u662fbilateral\uff08\u4fdd\u6301\u7684\u662f\u68af\u5ea6\u7684\u7edd\u5bf9\u503c\uff09\u505a\u4e0d\u5230\u7684\uff0c\u56e0\u4e3a\u4f1a\u6709\u68af\u5ea6\u7ffb\u8f6c\u73b0\u8c61\uff08Preserves edges, but not gradients\uff09\u800c\u5bfc\u5411\u6ee4\u6ce2\u53ef\u4ee5\u907f\u514d\u8fd9\u4e00\u7f3a\u70b9</li> </ul> <p>\u5f15\u5165 guided image \\(I\\)</p> <p></p> <ul> <li> <p>\u4fdd\u6301\u68af\u5ea6\uff0cso \\(q_i(output\\ image)=aI_i(guided\\ image)+b\\)</p> </li> <li> <p>Use Lagrange multiplier method , we can get \\(a=\\frac{cov(I,p)}{var(I)+\\epsilon} \\ \\ \\ b=\\bar{p}-a\\bar{I}\\)</p> </li> </ul> <p></p> <p></p> <p></p> <ul> <li>\\(\\epsilon\\) -- Degree of edge preserving !!</li> </ul> <p></p> <ul> <li>No Distortion</li> </ul> <p></p> <ul> <li>Limitation : LOCAL FILTER</li> </ul> <p>\u5bf9\u8fb9\u7f18\u7684\u5b9a\u4e49\u4e0d\u6e05\u6dc5\uff0c\u800c\u4e14\u8fb9\u7f18\u662f context-dependent \u7684\u3002\u8089\u773c\u4e2d\u7684\u8fb9\u754c\uff0c\u53ef\u80fd\u4e0d\u88ab\u8ba4\u4e3a\u662f\u8fb9\u754c\uff0c\u6700\u7ec8\u8fd8\u662f\u4f1a\u51fa\u73b0 halo \u7684\u73b0\u8c61\u3002</p> <p></p>"},{"location":"DIP/filter/filter/#sparse-norm-filter","title":"Sparse Norm Filter","text":"<p>https://note.hobbitqia.cc/dip/dip9/#core-algorithm</p> <p></p>"},{"location":"DIP/filter/filter/#p1","title":"p=1","text":"<p>\\(l^1\\) norm filter is the median filter(\u4e2d\u503c\u6ee4\u6ce2)</p> <ul> <li>Because the diffusion in SNF is non-local, it is less likely to be trapped as in gradient descent based algorithms.</li> </ul>"},{"location":"DIP/filter/filter/#p2","title":"p=2","text":"<p>\\(l^2\\) norm mean filter(\u5747\u503c\u6ee4\u6ce2)</p> <p></p>"},{"location":"DIP/morph/morph/","title":"Image morphing","text":"<p>"},{"location":"DIP/morph/morph/#morph","title":"Morph","text":"<p>Morph is not warp (geometric transformation)Morph is a kind of morphological changing, which makes an image change to another image gradually. Morph handles both the location and the intensity of a pixel.The beginning image and end image are two key frames. Other frames between the two key frames are generated automatically. </p> <ul> <li>\u5927\u5c0f\u76f8\u540c\u7684\u4e24\u5e45\u56fe\u7684\u8f6c\u6362\u4f5c\u9759\u6001\u53d8\u6362\u4ece\u4e00\u5e45\u56fea\u9010\u6e10\u53d8\u5316\u6210\u7b2c\u4e8c\u5e45\u56feb </li> <li>\u539f\u7406\uff1a\u8ba9\u56fea\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u7684\u989c\u8272\uff0c\u9010\u6e10\u53d8\u6210\u56feb\u76f8\u540c\u4f4d\u7f6e\u50cf\u7d20\u7684\u989c\u8272</li> <li>\u65b9\u6cd5\uff1a\u6839\u636e\u53d8\u6362\u7684\u5feb\u6162\uff0c\u8bbe\u7f6e\u76f8\u5e94\u7684\u6b65\u957f\uff0c\u5c06\u56fea\u6bcf\u4e00\u70b9\u7684RGB\u9010\u6e10\u53d8\u6210\u56feb\u76f8\u540c\u4f4d\u7f6e\u8c61\u7d20\u7684RGB,\u53ef\u4ee5\u9009\u62e9\u7b49\u6bd4\u6216\u7b49\u5dee\u7684\u65b9\u5f0f\uff0c\u6216\u5176\u5b83\u65b9\u5f0f\u8ba9\uff1a\\(ra--&gt;rb\\)</li> <li> <p>\u5bf9\u4e8e\u7070\u5ea6\u56fe\u50cf\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u7b49\u6bd4\u6216\u7b49\u5dee\u7ea7\u6570\u5b9a\u4e49\u6b65\u957f\uff0c\u4f7f\u989c\u8272\u4ece\u539f\u56fe\u53d8\u5230\u76ee\u6807\u56fe\u3002</p> </li> <li> <p>\u5bf9\u4e8e\u5f69\u8272\u56fe\u50cf\uff0cRGB\u4e09\u8272\u540c\u65f6\u4ece\u539f\u56fe\u53d8\u5230\u76ee\u6807\u56fe\u50cf\u3002\u53ef\u4ee5\u5206\u522b\u53d8\u5316\uff0c\u4e5f\u53ef\u8003\u8651RGB\u7684\u76f8\u5bf9\u6bd4\u4f8b\u5173\u7cfb\u540c\u65f6\u53d8\u5316\u3002</p> </li> <li> <p>\u9009\u62e9\u4e24\u5e45\u7ed3\u6784\u76f8\u4f3c\u3001\u5927\u5c0f\u76f8\u540c\u7684\u753b\u9762\u4f5c\u4e3a\u8d77\u59cb\u548c\u7ed3\u675f\u5173\u952e\u5e27\uff0c\u8fd9\u6837\u624d\u80fd\u6bd4\u8f83\u5bb9\u6613\u5730\u5b9e\u73b0\u81ea\u7136\u3001\u8fde\u7eed\u7684\u4e2d\u95f4\u53d8\u5f62\u8fc7\u7a0b\u3002</p> </li> <li> <p>\u5728\u8d77\u59cb\u548c\u7ed3\u675f\u753b\u9762\u4e0a\u786e\u5b9a\u548c\u52fe\u753b\u51fa\u5404\u90e8\u5206\uff08\u4e3b\u8981\u8f6e\u5ed3\uff09\u7684\u7ed3\u6784\u5bf9\u5e94\u5173\u7cfb\uff0c\u4e5f\u5373\u4ece\u8d77\u59cb\u753b\u9762\u4e0a\u7684\u4e00\u4e2a\u70b9\u53d8\u5230\u7ed3\u675f\u753b\u9762\u4e0a\u7684\u53e6\u4e00\u4e2a\u5bf9\u5e94\u70b9\u7684\u4f4d\u7f6e\uff0c\u8fd9\u662f\u53d8\u5f62\u8fd0\u7b97\u6240\u9700\u8981\u7684\u53c2\u6570</p> </li> </ul> <p>\u6839\u636e\u9700\u8981\uff0c\u5bf9\u5e94\u70b9\u7684\u4f4d\u7f6e\u53ef\u4ee5\u4efb\u610f\u79fb\u52a8\u3002\u8c03\u6574\u8d77\u59cb\u5e27\u7684\u5bf9\u5e94\u70b9\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u6a21\u62df\u6444\u50cf\u4e2d\u7684\u955c\u5934\u6e10\u53d8\u6548\u679c</p>"},{"location":"DIP/morph/morph/#morph-based-on-segment-two-points","title":"Morph based on segment (two points)","text":""},{"location":"DIP/morph/morph/#morph-based-on-grid","title":"Morph based on grid","text":"<ul> <li> <p>\u89c6\u70b9\u53d8\u6362\u5c31\u662f\u6c42\u5728\u89c6\u70b9\u79fb\u52a8\u540e\u539f\u59cb\u56fe\u50cf\u53d8\u6362\u751f\u6210\u7684\u65b0\u89c6\u56fe</p> </li> <li> <p>\u5728\u7528\u76f8\u673a\u62cd\u6444\u7269\u4f53\u65f6\uff0c\u4fdd\u6301\u7269\u4f53\u7684\u4f4d\u7f6e\u4e0d\u52a8\uff0c\u800c\u5c06\u76f8\u673a\u79fb\u79bb\u7269\u4f53\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u89c6\u70b9\u53d8\u6362</p> </li> <li> <p>\u5982\u679c\u6211\u4eec\u4fdd\u6301\u76f8\u673a\u56fa\u5b9a\u4f4d\u7f6e\uff0c\u5c06\u7269\u4f53\u79fb\u79bb\u76f8\u673a\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u6a21\u578b\u8f6c\u6362\u3002\u89c6\u70b9\u53d8\u5f62\u8981\u6c42\u5bf9\u7269\u4f53\u6709\u4e09\u7ef4\u5750\u6807\u77e5\u8bc6\u3002</p> </li> </ul>"},{"location":"DIP/morph/morph/#application","title":"Application","text":"<p>Expressive Expression Mapping with Ratio Images</p>"},{"location":"DIP/morph/morph/#lambertian-model","title":"Lambertian model","text":"<p>Assume there are m point light sources:</p> <p>\\(I=\\rho\\sum_{1\\le i\\le m}S_iI_in\u00b7l_i=\\rho E(n)\\) </p> <p>\\(S_i=\\left\\{\\begin{array}{ll}0 &amp; \\text{if the point cannot be seen from light i }\\\\1&amp; \\text{Otherwise}\\end{array}\\right.\\) </p> <ul> <li> <p>\u5176\u4e2d \\(l_i\\) \u7b2c i \u4e2a\u5149\u6e90\u7167\u8fc7\u6765\u7684\u89d2\u5ea6</p> </li> <li> <p>\\(n\\) \u8868\u793a\u5f53\u524d\u8fd9\u4e2a\u66f2\u9762\u7684\u6cd5\u5411\u91cf\uff0c\u6240\u4ee5\\(n\u00b7l_i\\)\u76f8\u5f53\u4e8e\u4f59\u5f26\u5173\u7cfb</p> </li> <li> <p>\\(I_i\\) \u8868\u793a\u7b2c i \u4e2a\u5149\u6e90\u7684\u4eae\u5ea6</p> </li> <li> <p>\\(S_i\\)\u8868\u793a\u66f2\u9762\u80fd\u4e0d\u80fd\u88ab\u7b2c i \u4e2a\u70b9\u5149\u6e90\u7167\u5230</p> </li> <li> <p>\\(\\rho\\) \u8868\u793a\u66f2\u9762\u7684\u6750\u8d28</p> </li> </ul>"},{"location":"DIP/morph/morph/#expression-ratio-image","title":"Expression ratio image","text":"<ul> <li>Before deformation \\(I=\\rho E(n)\\)</li> <li>After deformation \\(I'=\\rho E(n')\\)</li> <li>Expression ratio image \\(\\frac{I'}{I}=\\frac{E(n')}{E(n)}\\)</li> </ul>"},{"location":"DIP/morph/morph/#surface-deformation-mapping","title":"Surface deformation mapping","text":"<ul> <li>Assumption : HUman faces have approxiamtely the same normals</li> </ul>"},{"location":"DIP/morph/morph/#algorithm","title":"Algorithm","text":""},{"location":"DIP/morph/morph/#image-alignment","title":"Image alignment","text":"<ul> <li>Use image wraping to obtain pixel correspondence</li> </ul>"},{"location":"DL_CV/CNN/lec/","title":"Convolutional Neural Networks","text":"<p>"},{"location":"DL_CV/CNN/lec/#convolutional-networks","title":"Convolutional Networks","text":"<ul> <li>Fully connected layers.   https://zhuanlan.zhihu.com/p/33841176</li> <li>Refer to Slides</li> </ul>"},{"location":"DL_CV/CNN/lec/#pytorch","title":"Pytorch","text":"<pre><code>torch.nn.Conv1d(in_channels,out_channels,lernel_size,stride=1,padding=0,dilation =1,grounps=1,bias=True,padding_mode='zeros')\n</code></pre> <pre><code>torch.nn.Conv3d(in_channels,out_channels,kernel_size,stride=1,padding=0.dilation=1,groups=1,bias=True,padding_mode='zeros')\n</code></pre> <p>Problem: Deep Networks very hard to train!</p>"},{"location":"DL_CV/CNN/lec/#normalization","title":"Normalization","text":"<p>https://medium.com/techspace-usict/normalization-techniques-in-deep-neural-networks-9121bf100d8</p> <p>https://zhuanlan.zhihu.com/p/56542480</p>"},{"location":"DL_CV/CNN/lec/#batch-normalization","title":"Batch Normalization","text":"<ul> <li>Idea: \u201cNormalize\u201d the outputs of a layer so they have zero mean and unit variance</li> </ul> <p>Why? Helps reduce \u201cinternal covariate shift\u201d, improves optimization</p> <ul> <li>We can normalize a batch of activations like this:</li> </ul> <p></p> <p></p> <ul> <li>Problem: What if zero-mean, unit variance is too hard of a constraint?</li> </ul> <p>Learnable scale and shift parameters: \\(\\gamma\\ \\beta\\)\u200b</p> <p></p> <p>problem : If in two pics,one has a batch of a cat and the other has a batch of dog, we donot expect them to be in different classes,but the batch normalization will cause such problems</p> <p>Use constant \\(\\mu\\) and \\(\\sigma\\)\u200b  !</p> <ul> <li>During testing batchnorm becomes a linear operator! Can be fused with the previous fully-connected or conv layer</li> </ul> <p></p> <p></p>"},{"location":"DL_CV/CNN/lec/#layer-normalization","title":"Layer Normalization","text":""},{"location":"DL_CV/CNN/lec/#instance-normalization","title":"Instance Normalization","text":""},{"location":"DL_CV/CNN/lec/#group-normalization","title":"Group Normalization","text":""},{"location":"DL_CV/CNN/lec/#summary","title":"Summary","text":""},{"location":"DL_CV/CNN/lec/#cnn-architectures","title":"CNN Architectures","text":""},{"location":"DL_CV/Pytorch/lec/","title":"Hardware & Software","text":"<p>"},{"location":"DL_CV/Pytorch/lec/#deep-learning-hardware","title":"Deep Learning Hardware","text":"<ul> <li>Refer to Slides</li> </ul>"},{"location":"DL_CV/Pytorch/lec/#deep-learning-software","title":"Deep Learning Software","text":""},{"location":"DL_CV/Pytorch/lec/#pytorch","title":"Pytorch","text":""},{"location":"DL_CV/Pytorch/lec/#basic-concepts","title":"Basic Concepts","text":"<ul> <li> <p>Tensor</p> </li> <li> <p>Create</p> </li> </ul> <pre><code>x = torch.empty(3, 4)\nprint(type(x))\nprint(x)\n'''Out:\n&lt;class 'torch.Tensor'&gt;\ntensor([[0., 0., 0., 0.],\n        [0., 0., 0., 0.],\n        [0., 0., 0., 0.]])\n'''\nzeros = torch.zeros(2, 3)\nones = torch.ones(2, 3)\ntorch.manual_seed(1729)\nrandom = torch.rand(2, 3)\n</code></pre> <ul> <li><code>_like methods</code></li> </ul> <pre><code>x = torch.empty(2, 2, 3)\nprint(x.shape)\nprint(x)\n\nempty_like_x = torch.empty_like(x)\nprint(empty_like_x.shape)\nprint(empty_like_x)\n\nzeros_like_x = torch.zeros_like(x)\nprint(zeros_like_x.shape)\nprint(zeros_like_x)\n\nones_like_x = torch.ones_like(x)\nprint(ones_like_x.shape)\nprint(ones_like_x)\n\nrand_like_x = torch.rand_like(x)\nprint(rand_like_x.shape)\nprint(rand_like_x)\n</code></pre>"},{"location":"DL_CV/Pytorch/lec/#fundamental-concepts","title":"Fundamental Concepts","text":"<ul> <li>Tensor: Like a numpy array, but can run on GPU </li> </ul> <pre><code>import torch\ndevice = torch.device('cpu')\n#device = torch.device('cuda:0')\n#device = torch.device('mps')\nN,D_in,H,D_out = 64,1000,100,10\nx = torch.randn(N,D_in,device=device)\ny = torch.randn(N,D_out,device=device)\nw1 = torch.randn(D_in,H,device=device)\nw2 = torch.randn(H,D_out,device=device)\nlearning_rate=1e-6\nfor t in range(500):\n  h = x.mm(w1)\n  h_relu = h.clamp(min=0)\n  y_pred = h_relu.mm(w2)\n  loss = (y_pred-y).pow(2).sum\n\n  grad_y_pred = 2.0*(y_pred-y)\n  grad_w2 = h_relu.t().mm(grad_y_pred)\n  grad_h_relu = grad_y_pred.mm(w2.t())\n  grad_h = grad_h_relu.clone()\n  grad_h[h&lt;0]=0\n  grad_21 = x.t()mm(grad_h)\n\n  w1 -= learning_rate * grad_w1\n  w2 -= learning_rate * grad_w2\n</code></pre> <ul> <li>Data types : <code>a = torch.ones((2, 3), dtype=torch.int16)</code></li> <li>Tensor Broadcasting<ul> <li>Broadcasting is a way to perform an operation between tensors that have similarities in their shapes. In the example below, the one-row, four-column tensor is multiplied by both rows of the two-row, four-column tensor.</li> </ul> </li> </ul> <pre><code>rand = torch.rand(2, 4)\ndoubled = rand * (torch.ones(1, 4) * 2)\nprint(rand)\nprint(doubled)\n</code></pre> <ul> <li> <p>Moving to GPU</p> <pre><code>device = torch.device(\"mps\")\nmodel = ModelName(xxx).to(device)\ndata = torch.Tensor(dataset.x).to(device)\n</code></pre> </li> <li> <p>Changing dimensions</p> <pre><code>a = torch.rand(3, 226, 226)\nb = a.unsqueeze(0)\nprint(a.shape)\nprint(b.shape)\n</code></pre> </li> <li> <p>numpy</p> <pre><code>import numpy as np\n\nnumpy_array = np.ones((2, 3))\nprint(numpy_array)\n\npytorch_tensor = torch.from_numpy(numpy_array)\nprint(pytorch_tensor)\n</code></pre> </li> <li> <p>Autograd: Package for building computational graphs out of Tensors, and automatically computing gradients</p> </li> </ul> <pre><code>import torch\nN,D_in,H,D_out = 64,1000,100,10\nx = torch.randn(N,D_in)\ny = torch.randn(N,D_out)\nw1 = torch.randn(D_in, H ,requires_grad=True)\nw2 = torch.randn(H,D_out,requires_grad=True)\nlearning_rate=1e-6\nfor t in range(500):\n  y_pred = x.mm(w1).clamp(min=0).mm(w2)\n  loss = (y_pred-y).pow(2).sum()\n  loss.backward()\n  with torch.no_grad():\n  # Don't do computational graph in this stage [donnot do grad computation in this stage]\n    w1 -= learning_rate * w1.grad\n      w2 -= learning_rate * w2.grad\n    w1.grad.zero_()\n    w2.grad.zero_()\n</code></pre> <p></p> <ul> <li> <p>After backward finishes, gradients are accumulated into \\(w1.grad\\) and \\(w2.grad\\) and the graph is destroyed -- FORGET this is a common bug!</p> </li> <li> <p>Can define new operations using Python functions</p> </li> </ul> <pre><code>def sigmoid(x):\n  return 1.0/(1.0+(-x).exp())\n# y_pred = sigmoid(x.mm(w1)).mm(w2)\n</code></pre> <ul> <li>new functions</li> </ul> <pre><code>def sigmoid(x):\n  return 1.0/(1.0+(-x).exp())\nimport torch\nN,D_in,H,D_out = 64,1000,100,10\nx = torch.randn(N,D_in)\ny = torch.randn(N,D_out)\nw1 = torch.randn(D_in, H ,requires_grad=True)\nw2 = torch.randn(H,D_out,requires_grad=True)\nlearning_rate=1e-6\nfor t in range(500):\n  y_pred = sigmoid(x.mm(w1)).mm(w2)\n  loss = (y_pred-y).pow(2).sum()\n  loss.backward()\n  with torch.no_grad():\n  # Don't do computational graph in this stage [donnot do grad computation in this stage]\n    w1 -= learning_rate * w1.grad\n      w2 -= learning_rate * w2.grad\n    w1.grad.zero_()\n    w2.grad.zero_()\n</code></pre> <ul> <li> <p>Improvement</p> <pre><code>class Sigmoid(torch.autograd.Function):\n  @staticmethod\n  def forward(ctx,x):\n    y = 1.0/(1.0+(-x).exp())\n    ctx.save_for_backward(y)\n    return y\n    def backward(ctx,grad_y):\n    y,=ctx.saved_tensors\n    grad_x = grad_y*y*(1.0-y)\n    return grad_x\ndef sigmoid(x):\n  return SIgmoid.apply(x)\n</code></pre> <p></p> <ul> <li>In practice this is pretty rare \u2013 in most cases Python functions are good enough</li> </ul> </li> <li> <p>Module: A neural network layer ; may store state or learnable weights</p> </li> <li> <p>nn  : Higher-level wrapper for working with neural nets</p> </li> </ul> <pre><code>import torch\nN,D_in,H,D_out = 64,1000,100,10\n\nx = torch.randn(N,D_in)\ny = torch.randn(N,D_out)\n'''\nObject-oriented API: Define model object as sequence of layers objects, each of which holds weight tensors\n'''\nmodel = torch.nn.Sequential(\n  torch.nn.Linear(D_in,H),\n  torch.nn,ReLU(),\n  torch.nn.Linear(H,D_out)\n)\nlearning_rate = 1e-4\noptimizer = torch.optim.Adam(model.parameters(),lr=learning_rate)\nfor t in range(500):\n  y_pred = model(x)\n  loss = torch.nn.functional.mse_loss(y_pred,y)#torch.nn.functional has useful helpers like loss functions\n  loss.backward()\n  with torch.no_grad():\n    for param in model.parameters():\n      param -= learning_rate * param.grad\n   model.zero_grad( )\n</code></pre> <ul> <li>Use an optimizer for different update rules</li> </ul> <pre><code>import torch\nN,D_in,H,D_out = 64,1000,100,10\n\nx = torch.randn(N,D_in)\ny = torch.randn(N,D_out)\n'''\nObject-oriented API: Define model object as sequence of layers objects, each of which holds weight tensors\n'''\nmodel = torch.nn.Sequential(\n  torch.nn.Linear(D_in,H),\n  torch.nn,ReLU(),\n  torch.nn.Linear(H,D_out)\n)\nlearning_rate = 1e-4\noptimizer = torch.optim.Adam(model.parameters(),lr=learning_rate)\nfor t in range(500):\n  y_pred = model(x)\n  loss = torch.nn.functional.mse_loss(y_pred,y)#torch.nn.functional has useful helpers like loss functions\n  loss.backward()\n  optimizer.step()\n  optimizer.zero_grad()\n</code></pre> <ul> <li>nn Defining Modules</li> </ul> <pre><code>import torch \nclass TwoLayerNet(torch.nn.Module):\n  def __init__(self,D_in,H,D_out):\n    super(TwoLayerNet,self).__init__()\n    self.linear1 = torch.nn.Linear(D_in,H)\n    self.linear2 = torch.nn.Linear(H,D_out)\n  def forward(self,x):\n    h_relu = self.linear1(x).clamp(min=0)\n    y_ored = self.linear2(h_relu)\n    return y_pred\nN,D_in,H,D_out = 64,1000,100,10\nx = torch.randn(N,D_in)\ny = torch.randn(N,D_out)\nmodel = TwoLayerNet(D_in,H,D_out)\noptimizer = torch.optim.SGD(model.parameters(),lr=1e-4)\nfor t in range(500):\n  y_pred = model(x)\n  loss = torch.nn.functional.mse_loss(y_pred,y)\n  loss.backward()\n  optimizer.step()\n  optimizer.zero_grad()\n</code></pre> <ul> <li>Very common to mix and match custom Module subclasses and Sequential containers</li> <li>Very easy to quickly build complex network architectures!</li> </ul> <pre><code>import torch\nclass ParallelBlock(torch.nn.Module):\n  def __init__(self,D_in,D_out):\n    super(ParallelBlock,self)._init__()\n    self.linear1 = torch.nn.Linear(D_in,D_out)\n    self.linear2 = torch.nn.Linear(D_in,D_out)\n  def forward(self,x):\n    h1 = self.linear1(x)\n    h2 = self.linear2(x)\n    return (h1*h2).clamp(min = 0)\nN,D_in,H,D_out = 64,1000,100,10\nx = torch.randn(N,D_in)\ny = torch.randn(N,D_out)\nmodel = torch.nn.Sequential(\n  ParallelBlock(D_in,H),\n  ParallelBlock(H,H),\n  torch.nn.Linear(H,D_out)\n)\noptimizer = torch.optim.Adam(model.parameters(),lr = 1e-4)\nfor t in range(500):\n  y_pred = model(x)\n  loss = torch.nn.functional.mse_loss(y_pred,y)\n  loss.backward()\n  optimizer.step()\n  optimizer.zero_grad()\n</code></pre> <ul> <li>DataLoaders</li> </ul> <pre><code>import torch\nfrom torch.utils.data import TensorDataset,DataLoader\nN,D_in,H,D_out = 64,1000,100,10\nx = torch.randn(N,D_in)\ny = torch.randn(N,D_out)\nloader = DataLoader(TensorDataset(x,y),batch_size = 8)\nmodel = TwoLayerNet(D_in,H,D_out)\noptimizer = torch.optim.SGD(model.parameters(),lr= = 1e-2)\nfor epoch in range(20):\n  # Iterate over loader to form minibatches\n  for x_batch,y_batch in loader:\n    y_pred = model(x_batch)\n    loss = loss.nn.functional.mse_loss(y_pred,y_batch)\n    loss.backward()\n    optimizer.step()\n    optimizer.zero_grad()\n</code></pre> <ul> <li>Pretrained Models</li> </ul> <pre><code>import torch\nimport torchvision\nalexnet = torchvision.models.alexnet(pretrained = True)\nvgg16 = torchvision.models.vgg16(pretrained = True)\nresnet101 = torchvision.models.resnet101(pretrained = True)\n</code></pre> <ul> <li>Dynamic Computation Graphs</li> </ul> <p>Note : this model doesn\u2019t makes sense! Just a simple dynamic example</p> <pre><code>import torch\nN,D_in,H,D_out = 64,1000,100,10\nx = torch.randn(N,D_in)\ny = torch.randn(N,D_out)\nw1 = torch.randn(D_in,H,requires_grad = True)\nw2a = torch.randn(H,D_out,requires_grad = True)\nw2b = torch.randn(H,D_out,requires_grad = True)\nlearning_rate=1e-6\nfor t in range(500):\n  # Decide which one to use at each layer based on loss at previous iteration\n  w2 = w2a if prev_loss &lt;5.0 else w2b\n  y_pred = x.mm(w1).clamp(min=0).mm(w2)\n  loss = (y_pred - y).pow(2).sum\n  loss.backward()\n  prev_loss = loss.item()\n</code></pre> <ul> <li> <p>Static Computation Graphs</p> </li> <li> <p>Step 1: Build computational graph describing our computation (including finding paths for backprop)</p> </li> <li>Step 2: Reuse the same graph on every iteration</li> </ul> <pre><code>import torch \ndef model(x,y,w1,w2a,w2b,prev_loss):\n  w2 = w2a if prev_loss &lt;5.0 else w2b\n  y_pred = x.mm(w1).clamp(min=0).mm(w2)\n  loss = (y_pred - y).pow(2).sum\n  return loss\nN,D_in,H,D_out = 64,1000,100,10\nx = torch.randn(N,D_in)\ny = torch.randn(N,D_out)\nw1 = torch.randn(D_in,H,requires_grad = True)\nw2a = torch.randn(H,D_out,requires_grad = True)\nw2b = torch.randn(H,D_out,requires_grad = True)\n#Just-In-Time compilation: Introspect the source code of the function, compile it into a graph object.\ngraph = torch.jit.script(model)\nprev_loss = 5.0\nlearning_rate = 1e-6\nfor t in range(500):\n  loss = graph(x,y,w1,w2a,w2b,prev_loss)\n  loss.backward()\n  prev_loss = loss.item()\n</code></pre> <ul> <li>Even easier: add annotation to function, Python function compiled to a graph when it is defined</li> </ul> <pre><code>import torch\n@torch.jit.script\ndef model(x,y,w1,w2a,w2b,prev_loss):\n  w2 = w2a if prev_loss &lt;5.0 else w2b\n  y_pred = x.mm(w1).clamp(min=0).mm(w2)\n  loss = (y_pred - y).pow(2).sum\n  return loss\nN,D_in,H,D_out = 64,1000,100,10\nx = torch.randn(N,D_in)\ny = torch.randn(N,D_out)\nw1 = torch.randn(D_in,H,requires_grad = True)\nw2a = torch.randn(H,D_out,requires_grad = True)\nw2b = torch.randn(H,D_out,requires_grad = True)\nprev_loss = 5.0\nlearning_rate = 1e-6\nfor t in range(500):\n  loss = model(x,y,w1,e2a,w2b,prev_loss)\n  loss.backward()\n  prev_loss = loss.item()\n</code></pre> <ul> <li>Static vs Dynamic Graphs: Debugging</li> </ul> <p>Static</p> <ul> <li> <p>With static graphs, framework can optimize the graph for you before it runs!</p> </li> <li> <p>Once graph is built, can serialize it and run it without the code that built the graph!</p> <p>e.g. train model in Python, deploy in C++</p> </li> <li> <p>Lots of indirection between the code you write and the code that runs \u2013 can be hard to debug, benchmark, etc</p> </li> </ul> <p>Dynamic</p> <ul> <li> <p>Graph building and execution are intertwined, so always need to keep code around</p> </li> <li> <p>The code you write is the code that runs! Easy to reason about, debug, profile, etc</p> </li> <li> <p>Dynamic Graph Applications</p> </li> </ul> <p>Model structure depends on the input: </p> <ul> <li>Recurrent Networks </li> <li>Recursive Networks </li> <li>Modular Networks</li> </ul>"},{"location":"DL_CV/Pytorch/lec/#tensorflow","title":"TensorFLow","text":"<ul> <li> <p>TensorFlow 1.0 : Static Graphs</p> </li> <li> <p>First define computational graph</p> </li> <li> <p>Then run the graph many times</p> </li> </ul> <pre><code>import numpy as np\nimport tensorflow as tf\nN,D,H = 64,1000,100\nx = tf.placeholder(tf.float32,shape = (N,D))\ny = tf.placeholder(tf.float32,shape = (N,D))\nw1 = tf.placeholder(tf.float32,shape = (D,H))\nw2 = tf.placeholder(tf,float32,shape = (H,D))\n\nh = tf.maximum(tf.matmul(x,w1),0)\ny_pred = tf.matmul(h,w2)\ndiff = y_pred - y\nloss = tf.reduce_mean(tf.refuce_sum(diff ** 2,axis = 1))\ngrad_w1,grad_e2 = tf.grafients(loss,[w1,w2])\n\nwith tf.Session() as sess :\n  values = {\n    x:np.random.randn(N,D),\n    w1:np.random.randn(D,H),\n    w2:np.random.randn(H,D),\n    y:np.random.randn(N,D),\n  }\n  out = sess.run(\n    [loss,grad_w1,grad_w2],\n    feed_dict = values\n  )\n  loss_val,grad_w1_val,grad_w2_val = out\n</code></pre> <ul> <li> <p>TensorFlow 2.0: Dynamic Graphs</p> </li> <li> <p>Create TensorFlow Tensors for data and weights</p> </li> <li> <p>Weights need to be wrapped in tf.Variable so we can mutate them</p> </li> </ul> <pre><code>import tensorflow as tf\nN,Din,H,Dout = 16,1000,100,10\nx = tf.random.noraml((N,Din))\ny = tf.random,normal((N,Dout))\nw1 = tf.Variable(tf.random.normal(Din,H))\nw2 = tf.Variable(tf.random.normal(H,Dout))\nfor t in range(1000):\n  #Scope forward pass under a GradientTape to tell TensorFlow to start building a graph\n  with tf,GradientTape() as tape :\n    h = tf.maximum(tf.matmul(x,w1),0)\n    y_pred = tf.matmul(h,w2)\n    diff = y_pred - y\n    loss = tf.reduce_mean(tf.reduce_sum(diff **2 , axis = 1))\n    #Ask the tape to compute gradients\n      grad_w1,grad_e2 = tape.gradient(loss,[w1,w2])\n    # Gradient descent step, update weights\n      w1.assign(w1-learning_rate*grad_w1)\n    w2.assign(w2-learning-learning_rate*grad_w2)\nlearning_rate\n</code></pre> <ul> <li>TensorFlow 2.0: Static Graphs</li> </ul> <pre><code>@tf.function\ndef step(x,y,w1,w2):\n with tf,GradientTape() as tape :\n    h = tf.maximum(tf.matmul(x,w1),0)\n    y_pred = tf.matmul(h,w2)\n    diff = y_pred - y\n    loss = tf.reduce_mean(tf.reduce_sum(diff **2 , axis = 1))\n    #Ask the tape to compute gradients\n  grad_w1,grad_e2 = tape.gradient(loss,[w1,w2])\n  w1.assign(w1-learning_rate*grad_w1)\n  w2.assign(w2-learning-learning_rate*grad_w2)\n  return loss\nN,Din,H,Dout = 16,1000,100,10\nx = tf.random.noraml((N,Din))\ny = tf.random,normal((N,Dout))\nw1 = tf.Variable(tf.random.normal(Din,H))\nw2 = tf.Variable(tf.random.normal(H,Dout))\nlearning_rate = 1e-6\nfor t in range(1000):\n  loss = step(x,y,w1,w2)\n</code></pre> <ul> <li>Keras: High-level API</li> </ul> <pre><code>import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import InputLayer,Dense\nN,Din,H,Dout = 16,1000,100,10\n\nmodel = Sequential()\nmodel.add(InputLayer(input_shape=(Din,)))\nmodel.add(Dense(units = H,activation = 'relu'))\nmodel.add(Dense(units = Dout))\n\nparams = model.trainable_variables\nloss_fn = tf.keras.losses.MeanSquaredError()\nopt = tf.kears.optimizers.SGD(learning_rate = 1e-6)\nx = tf.random.normal((N,Din))\ny = tf.random.noraml((N,Dout))\ndef step():\n  y_pred = model(x)\n  loss = loss_fn(y_pred,y)\n  return loss\nfor t in range(1000):\n  opt.minimize(step,params)\n</code></pre> <p></p> <p></p>"},{"location":"DL_CV/Recognition/lec10/","title":"Recognision","text":"<p>"},{"location":"DL_CV/Recognition/lec10/#object-detection","title":"Object Detection","text":"<p>Input: Single RGB Image</p> <p>Output: A set of detected objects:</p> <ul> <li>Category label (from fixed, known set of categories)</li> <li>Boundingbox (four numbers: \\(x, y, width, height\\)\u200b)</li> </ul> <p>Challenges</p> <ul> <li>Multiple outputs: Need to output variable numbers of objects per image</li> <li>Multiple types of output: Need to predict what (category label) as well as where (bounding box)</li> <li>Large images: Classification works at 224x224; need higher resolution for detection, often ~800x600</li> </ul> <p></p> <ul> <li>Refer to Slides</li> </ul>"},{"location":"DL_CV/Recognition/lec10/#detecting-a-single-object","title":"Detecting a single object","text":""},{"location":"DL_CV/Recognition/lec10/#detecting-multiple-objects","title":"Detecting Multiple Objects","text":""},{"location":"DL_CV/Recognition/lec10/#sliding-window","title":"Sliding Window","text":"<ul> <li> <p>Apply a CNN to many different crops of the image, CNN classifies each crop as object or background</p> </li> <li> <p>We should consider all possible sizes and possible positions</p> </li> </ul> <p></p> <ul> <li>Really Bad!!</li> </ul> <p>Solutions</p> <p>Region Proposals</p> <ul> <li>Find a small set of boxes that are likely to cover all objects </li> <li>Often based on heuristics: e.g. look for \u201cblob-like\u201d image regions</li> <li>Relatively fast to run; e.g. Selective Search gives 2000 region proposals in a few seconds on CPU</li> </ul>"},{"location":"DL_CV/Recognition/lec10/#r-cnn","title":"R-CNN","text":"<ul> <li> <p>Use MultiTask Loss</p> </li> <li> <p>Bbox : Modify the Region Proposals</p> </li> </ul>"},{"location":"DL_CV/Recognition/lec10/#overlapping-boxes","title":"Overlapping Boxes","text":"<ul> <li>When transform is 0, output = proposal </li> </ul> <p>\\(L_2\\) regularization encourages leaving proposal unchanged.</p> <ul> <li>Scale / Translation invariance: </li> </ul> <p>Transform encodes relative difference between proposal and output; important since \\(CNN\\) doesn\u2019t see absolute size or position after cropping</p> <p></p>"},{"location":"DL_CV/Recognition/lec10/#r-cnn-training","title":"R-CNN Training","text":"<ul> <li>Categorize each region proposal as positive, negative, or neutral based on overlap with ground-truth boxes:</li> </ul> <p>Positive: &gt; 0.5 IoU with a GT box</p> <p>Negative: &lt; 0.3 IoU with all GT boxes</p> <p>Neutral: between 0.3 and 0.5 IoU with GT boxes</p> <ul> <li>Crop pixels from each positive and negative proposal, resize to 224 x 224</li> </ul> <p></p>"},{"location":"DL_CV/Recognition/lec10/#r-cnn-test-time","title":"R-CNN Test-Time","text":"<ul> <li>Run proposal method.</li> <li>Run CNN on each proposal to get class scores, transforms.</li> <li>Threshold class scores to get a set of detections.</li> </ul>"},{"location":"DL_CV/Recognition/lec10/#comparing-boxes","title":"Comparing Boxes","text":""},{"location":"DL_CV/Recognition/lec10/#overlapping-boxes_1","title":"Overlapping Boxes","text":"<p>Problem: Object detectors often output many overlapping detections:</p> <p>Solution: Post-process raw detections using Non-Max Suppression (NMS)</p> <p>Select next highest-scoring box</p> <p>Eliminate lower-scoring boxes with  IoU &gt; threshold (e.g. 0.7)</p> <p>If any boxes remain, GOTO 1</p> <p>Problem: NMS may eliminate \u201dgood\u201d boxes when objects are highly overlapping... </p> <p>no good solution =(</p> <ul> <li>Difficult to Tell From vey close objects / same object  overlapping</li> </ul>"},{"location":"DL_CV/Recognition/lec10/#evaluating-object-detectors","title":"Evaluating Object Detectors","text":"<ul> <li>Precision : Frcation of our detections that are actually True</li> <li>Recall : Fraction of the Ground Truths that we hit .</li> </ul>"},{"location":"DL_CV/Recognition/lec10/#fast-r-cnn","title":"Fast R-CNN","text":"<p>R-CNN Problem: Very slow! Need to do 2000 forward passes through CNN per image</p> <p>Idea: Overlapping proposals cause a lot of repeated work: same pixels processed many times. Can we avoid this?</p> <p></p> <ul> <li> <p>Per-Region network is relatively lightweight</p> </li> <li> <p>Most of the computation happens in backbone network; </p> </li> </ul> <p>this saves work for overlapping region proposals.</p> <ul> <li>Refer to Slides (Example)</li> </ul> <p>How to crop features?</p>"},{"location":"DL_CV/Recognition/lec10/#cropping-features-roi-pool","title":"Cropping Features: RoI Pool","text":"<ul> <li>Problem: Slight misalignment due to snapping; different-sized subregions is weird</li> </ul>"},{"location":"DL_CV/Recognition/lec10/#cropping-features-roi-align","title":"Cropping Features: RoI Align","text":"<ul> <li>Refer To Slides [Object Detectors]</li> </ul>"},{"location":"DL_CV/Recognition/lec10/#region-proposal-network-rpn","title":"Region Proposal Network (RPN)","text":"<ul> <li>For positive anchors, also predict a transform that converting the anchor to the GT box (like R-CNN) Predict transforms with conv</li> </ul> <ul> <li>Positive anchors: &gt;= 0.7 IoU with some GT box (plus highest IoU to each GT)</li> <li>Negative anchors: &lt; 0.3 IoU with all GT boxes. Don\u2019t supervised transforms for negative boxes.</li> <li>Neutral anchors: between 0.3 and 0.7 IoU with all GT boxes; ignored during training</li> <li>At test-time, sort all K56 boxes by their positive score, take top 300 as our region proposals</li> </ul>"},{"location":"DL_CV/Recognition/lec10/#dealing-with-scale","title":"Dealing With Scale","text":"<ul> <li>We need to detect objects of many different scales. How to improve scale invariance of the detector?</li> </ul> <p>Classic idea: build an image pyramid by resizing the image to different scales, then process each image scale independently.</p> <p></p> <p>Problem: Expensive! Don\u2019t share any computation between scales.</p> <ul> <li>Multiscale Features</li> </ul> <p></p> <ul> <li>Feature Pyramid Network</li> </ul> <p></p>"},{"location":"DL_CV/Recognition/lec10/#single-stage-detectors-retinanet","title":"Single-Stage Detectors: RetinaNet","text":"<ul> <li>Refer to Slides</li> <li>Refer to Lec16</li> </ul>"},{"location":"DL_CV/Recognition/lec10/#segmentation","title":"Segmentation","text":""},{"location":"DL_CV/Recognition/lec10/#semantic-segmentation","title":"Semantic Segmentation","text":"<ul> <li>Label each pixel in the image with a category label</li> <li>Don\u2019t differentiate instances, only care about pixels</li> </ul> <p>Simple Idea : Sliding Window</p> <p>Use Fully Convolutional Network</p> <ul> <li>Design a network as a bunch of convolutional layers to make predictions for pixels all at once!</li> </ul> <p>Dose not have any pooling layers or fully connected layers.</p> <p></p> <p>Problem #1: Effective receptive field size is linear in number of conv layers: </p> <ul> <li>With L \\(3\\times3\\) conv layers, receptive field is \\(1+2L\\)\u200b</li> </ul> <p>Let's say we have L 3x3 convolutional layers. In a CNN, each neuron in a convolutional layer is connected to a small region of neurons from the previous layer, which is its receptive field. For a 3x3 convolutional kernel, the receptive field size is 3x3.</p> <p>Now, consider L 3x3 convolutional layers. In the first layer, the receptive field of each neuron is 3x3. In the second layer, the receptive field of each neuron relative to the input image will cover a larger area, which is the combination of receptive fields from the previous layer. Similarly, in the third layer, the receptive field relative to the input image will be even larger.</p> <p>Therefore, as the number of layers increases, the influence of each layer on the input image gradually expands. Assuming each convolutional layer has a stride of 1, and there are no pooling layers or padding, after L 3x3 convolutional layers, the receptive field size relative to the input image for each neuron will be 1 plus twice the number of convolutional layers, denoted as 1+2L.</p> <p>Problem #2: Convolution on high res images is expensive! Recall ResNet stem aggressively downsamples</p> <p></p>"},{"location":"DL_CV/Recognition/lec10/#in-network-upsampling-unpooling","title":"In-Network Upsampling: \u201cUnpooling\u201d","text":"<ul> <li>Simple Idea</li> </ul> <ul> <li>Bilinear Interpolation</li> </ul> <p>Refer to Slides</p> <ul> <li>Max Unpooling</li> </ul> <p>Refer to Slides</p> <ul> <li> <p>Learnable Upsampling: Transposed Convolution</p> </li> <li> <p>Convolution with stride &gt; 1 is \u201cLearnable Downsampling\u201d</p> </li> <li>Can we use stride &lt; 1 for \u201cLearnable Upsampling\u201d?</li> </ul> <p></p> <ul> <li>1D Example - Refer to Slides</li> <li>Convolution as Matrix Multiplication (1D Example)</li> </ul> <p></p>"},{"location":"DL_CV/Recognition/lec10/#instance-segmentation","title":"Instance Segmentation","text":"<ul> <li> <p>Detect all objects in the image, and identify the pixels that belong to each object (Only things!)</p> </li> <li> <p>Approach: Perform object detection, then predict a segmentation mask for each object!</p> </li> </ul> <p></p> <ul> <li>Refer to Slides</li> </ul>"},{"location":"DL_CV/Recognition/lec10/#mask-r-cnn","title":"Mask R-CNN","text":""},{"location":"DL_CV/TN/lec/","title":"Traning Neural Networks","text":"<p>"},{"location":"DL_CV/TN/lec/#training-neural-networks","title":"Training Neural Networks","text":""},{"location":"DL_CV/TN/lec/#one-time-setup","title":"One time setup","text":""},{"location":"DL_CV/TN/lec/#activation-functions","title":"Activation Functions","text":""},{"location":"DL_CV/TN/lec/#sigmoid","title":"Sigmoid","text":"<p>\\(\\sigma(x)=\\frac{1}{1+e^{-x}}\\)</p> <p>3 problems</p> <ul> <li>Saturated neurons \u201ckill\u201d the gradients &gt; Zero gradients</li> </ul> <p></p> <ul> <li>Sigmoid outputs are not zero-centered &gt; Always positive</li> </ul> <p>What can we say about the gradients on w?</p> <ul> <li>Always all positive or all negative :(</li> <li>For a single element! Minibatches help</li> </ul> <ul> <li>\\(exp()\\) is a bit compute expensive</li> </ul>"},{"location":"DL_CV/TN/lec/#tanh","title":"Tanh","text":""},{"location":"DL_CV/TN/lec/#relu","title":"Relu","text":"<p>\\(f(x) = max(0,x)\\)\u200b</p> <p>-  Does not saturate (in +region)</p> <p>-  Very computationally efficient</p> <p>-  Converges much faster than sigmoid/tanh in practice (e.g. 6x)</p> <p>Not zero-centered output</p> <p>what is the gradient when x &lt; 0?</p> <p></p>"},{"location":"DL_CV/TN/lec/#leaky-relu","title":"Leaky ReLU","text":""},{"location":"DL_CV/TN/lec/#exponential-linear-unit-elu","title":"Exponential Linear Unit (ELU)","text":""},{"location":"DL_CV/TN/lec/#scaled-exponential-linear-unit-selu","title":"Scaled Exponential Linear Unit (SELU)","text":"<ul> <li>Scaled version of ELU that works better for deep networks</li> <li>\u201cSelf-Normalizing\u201d property; can train deep SELU networks without BatchNorm</li> </ul> <p>Derivation takes 91 pages of math in appendix...</p>"},{"location":"DL_CV/TN/lec/#activation-functions-summary","title":"Activation Functions: Summary","text":"<ul> <li>Don\u2019t think too hard. Just use ReLU</li> <li>Try out Leaky ReLU / ELU / SELU / GELU if you need to squeeze that last 0.1%</li> <li>Don\u2019t use sigmoid or tanh</li> </ul>"},{"location":"DL_CV/TN/lec/#data-preprocessing","title":"Data Preprocessing","text":"<ul> <li>Refer to Slides (lec 10)</li> </ul>"},{"location":"DL_CV/TN/lec/#weight-initialization","title":"Weight Initialization","text":"<p>Q: What happens if we initialize all W=0, b=0?</p> <p>A: All outputs are 0, all gradients are the same! No \u201csymmetry breaking\u201d</p> <ul> <li>Next idea: small random numbers (Gaussian with zero mean, std=0.01)</li> </ul> <pre><code>w = 0.01 * np.random.randn(Din,Dout)\n</code></pre> <p>Works ~okay for small networks, but problems with deeper networks.</p> <ul> <li>Example</li> </ul> <p></p> <p>All activations tend to zero for deeper network layers</p> <p>Q: What do the gradients \\(dL/dW\\) look like? -- All zero, no learning </p> <ul> <li>Activation Statistics</li> </ul> <p></p> <ul> <li>Xavier Initialization</li> </ul> <p>For CNN : Din will be \\(input\\_channels*kernel\\_size*kernel\\_size\\)\u200b</p> <p>Remeber?</p> <p></p> <p></p> <p>Derivation: </p> <p></p> <ul> <li>What about ReLU? </li> </ul> <p></p> <ul> <li>Kaiming / MSRA Initialization</li> </ul> <p></p> <ul> <li>Residual Networks</li> </ul> <p></p>"},{"location":"DL_CV/TN/lec/#regularization","title":"Regularization","text":""},{"location":"DL_CV/TN/lec/#add-term-to-the-loss","title":"Add term to the loss","text":""},{"location":"DL_CV/TN/lec/#dropout","title":"Dropout","text":"<ul> <li>In each forward pass, randomly set some neurons to zero Probability of dropping is a hyperparameter; 0.5 is common</li> </ul> <pre><code>p = 0.5\nimport numpy as np\ndef train_step(X):\n  H1 = np.maximum(0,np.dot(W1,X)+b1)\n  U1 = np.random.rand(*H1.shape)&lt;p \n  H1 *=U1\n  H2 = np.maximum(0,np.dot(W2,H1)+b2)\n  U2 = np.random.rand(*H2.shape)&lt;p\n  H2* = U2\n  out = np.dot(W3,H2)+b3\n</code></pre> <p>Dropout makes our output random! -- Want to \u201caverage out\u201d the randomness at test-time</p> <p>\\(y = f(x) = E_z[f(x,z)]=\\int p(z)f(x,z)dz\\)\u200b</p> <p>But this integral is actually a bit hard</p> <p>Consider a single neuron</p> <ul> <li>During Traning</li> </ul> <p>\\(E[a]=\\frac{1}{4}(w_1x+w_2y)+\\frac{1}{4}(w_1x+0y)+\\frac{1}{4}(0x+0y)+\\frac{1}{4}(0x+w_2y)\\\\=\\frac{1}{2}(w_1x+w_2y)\\)</p> <ul> <li>During Testing</li> </ul> <p>\\(E[a]=w_1x+w_2y\\)</p> <ul> <li>At test time, drop nothing and multiply by dropout probability</li> </ul> <pre><code>def predict(x):\n  H1 = np.maximum(0,np.dot(W1,X)+b1)*p\n  H2 = np.maximum(0,np.dot(W2,H1)+b2)*p\n  out = np.dot(W3,H2)+b3\n</code></pre> <ul> <li> <p>At test time all neurons are active always.</p> </li> <li> <p>We must scale the activations so that for each neuron: output at test time = expected output at training time</p> </li> </ul> <pre><code>p = 0.5\ndef train_step(X):\n  H1 = np.maximum(0,np.dot(W1,X)+b1)\n  U1 = np.random.rand(*H1.shape)&lt;p \n  H1 *=U1\n  H2 = np.maximum(0,np.dot(W2,H1)+b2)\n  U2 = np.random.rand(*H2.shape)&lt;p\n  H2* = U2\n  out = np.dot(W3,H2)+b3\ndef predict(x):\n  H1 = np.maximum(0,np.dot(W1,X)+b1)*p\n  H2 = np.maximum(0,np.dot(W2,H1)+b2)*p\n  out = np.dot(W3,H2)+b3\n</code></pre> <p>More common: \u201cInverted dropout\u201d</p> <pre><code>p = 0.5\ndef train_step(X):\n  H1 = np.maximum(0,np.dot(W1,X)+b1)\n  U1 = np.random.rand(*H1.shape)&lt;p /p\n  H1 *=U1\n  H2 = np.maximum(0,np.dot(W2,H1)+b2)\n  U2 = np.random.rand(*H2.shape)&lt;p /p\n  H2* = U2\n  out = np.dot(W3,H2)+b3\ndef predict(x):\n  H1 = np.maximum(0,np.dot(W1,X)+b1)\n  H2 = np.maximum(0,np.dot(W2,H1)+b2)\n  out = np.dot(W3,H2)+b3\n</code></pre> <p></p>"},{"location":"DL_CV/TN/lec/#data-augmentation","title":"Data Augmentation","text":""},{"location":"DL_CV/TN/lec/#dropconnect","title":"DropConnect","text":""},{"location":"DL_CV/TN/lec/#fractional-pooling","title":"Fractional Pooling","text":""},{"location":"DL_CV/TN/lec/#stochastic-depth","title":"Stochastic Depth","text":""},{"location":"DL_CV/TN/lec/#mixup","title":"Mixup","text":"<ul> <li>All above refer to slides</li> </ul>"},{"location":"DL_CV/TN/lec/#training-dynamics","title":"Training dynamics","text":""},{"location":"DL_CV/TN/lec/#learning-rate-schedule","title":"Learning rate schedule","text":""},{"location":"DL_CV/TN/lec/#hyperparameter-optimization","title":"hyperparameter optimization","text":""},{"location":"DL_CV/TN/lec/#after-training","title":"After training","text":""},{"location":"DL_CV/TN/lec/#model-ensemble","title":"Model ensemble","text":""},{"location":"DL_CV/TN/lec/#transfer-learning","title":"transfer learning","text":""},{"location":"DL_CV/TN/lec/#large-batch-training","title":"large-batch training","text":""},{"location":"DL_CV/class/lec/","title":"Classification","text":"<p>"},{"location":"DL_CV/class/lec/#image-classifications","title":"Image Classifications","text":"<p>Challenges : </p> <ul> <li> <p>Fine-Grained Categories(eg.different kinds of cats)</p> </li> <li> <p>Background Clutter</p> </li> </ul> <p></p> <ul> <li> <p>illumination Changes</p> </li> <li> <p>Deformation</p> </li> <li> <p>Occlusion</p> </li> </ul> <p>Machine Learning: Data-Driven Approach</p> <ul> <li>Collect a dataset of images and labels</li> <li>Use Machine Learning to train a classifier</li> <li>Evaluate the classifier on new images</li> </ul>"},{"location":"DL_CV/class/lec/#image-classification-datasets","title":"Image Classification Datasets","text":"<ul> <li>MNIST</li> </ul> <p>10 classes: Digits 0 to 9  28x28 grayscale images  50k training images  10k test images Results from MNIST often do not hold on more complex datasets!</p> <ul> <li>CIFAR10</li> </ul> <p>10 classes</p> <p>50k training images (5k per class) </p> <p>10k testing images (1k per class) </p> <p>32x32 RGB images</p> <ul> <li>CIFAR100</li> </ul> <p>100 classes</p> <p>50k training images (500 per class) </p> <p>10k testing images (100 per class) </p> <p>32x32 RGB image</p> <p>20 superclasses with 5 classes each:</p> <p>Aquatic mammals: beaver, dolphin, otter, seal, whale</p> <p>Trees: Maple, oak, palm, pine, willow</p> <ul> <li>ImageNet</li> </ul> <p>1000 classes</p> <p>\\(\\approx\\) 1.3M training images (~1.3K per class) </p> <p>50K validation images (50 per class) </p> <p>100K test images (100 per class)</p> <p>Performance metric: Top 5 accuracy Algorithm predicts 5 labels for each image</p> <p>one of them needs to be right </p> <p>test labels are secret!</p> <p>Images have variable size, but often resized to 256x256 for training</p> <p>There is also a 22k category version of ImageNet, but less commonly used</p> <ul> <li>MIT Places</li> </ul> <p>365 classes of different scene types</p> <p>\\(\\approx\\) 8M training images</p> <p>18.25K val images (50 per class) </p> <p>328.5K test images (900 per class)</p> <p>Images have variable size, often resize to 256x256 for training</p> <ul> <li>Omniglot</li> </ul> <p>1623 categories: characters from 50 different alphabets</p> <p>20 images per category</p> <p>Meant to test few shot learning</p>"},{"location":"DL_CV/class/lec/#first-classifier-nearest-neighbor","title":"First classifier: Nearest Neighbor","text":"<pre><code>def train(imgaes,labels):\n  #Machine learning!\n  return model\ndef predict(model,test_images):\n  #Use model to predict labels\n  return test_labels\n</code></pre>"},{"location":"DL_CV/class/lec/#distance","title":"Distance","text":"<ul> <li>\\(L_1 \\ distance\\)\u200b \\(d_1(I_1,I_2)=\\sum_p|I_1^p-I_2^p|\\)</li> </ul> <pre><code>import numpy as np\nclass NearestNeightbor:\n  def __init__(self):\n    pass\n  def train(self,X,y):\n    '''X is NxD where each row is an example;y is a 1-dimension f size N'''\n    self.Xtr = X\n    self.ytr = y\n  def predict(self,X):\n    '''X is NxD where each row is an example we wish to predict label for'''\n    num_test = X.shape[0]\n    Ypred = np.zeros(num_test,dtype = self.ytr.dtype)\n    for i in xrange(num_test):\n      distances = np.sum(np.abs(Self.Xtr - X[i,:]),axis = 1)\n      min_index = np.argmin(distances)\n      Ypred[i]=self.ytr[min_index]\n      return Ypred\n</code></pre> <p>\u8865\uff1anumpy</p> <pre><code>import numpy as np\n# \u751f\u6210\u793a\u4f8b\u6570\u636e\nN, D = 5, 3\na = np.random.rand(N, D)  # \u751f\u6210\u4e00\u4e2a\u5f62\u72b6\u4e3a (N, D) \u7684\u968f\u673a\u6570\u7ec4\nb = np.random.rand(D)     # \u751f\u6210\u4e00\u4e2a\u5f62\u72b6\u4e3a (D,) \u7684\u968f\u673a\u6570\u7ec4\n# \u4f7f\u7528\u5e7f\u64ad\u8fdb\u884c\u51cf\u6cd5\nresult = a - b\n# \u5bf9\u6bcf\u4e00\u884c\u6c42\u548c\uff0c\u5f97\u5230\u5f62\u72b6\u4e3a (N, 1) \u7684\u6570\u7ec4\nsum_result = np.sum(result, axis=1, keepdims=True)\nprint(sum_result)\n</code></pre> <ul> <li>With N examples, how fast is training?  A: O(1)</li> <li>With N examples, how fast is testing? A: O(N) BAD!!</li> </ul> <p></p>"},{"location":"DL_CV/class/lec/#k-nearest-neighbors","title":"K-Nearest Neighbors","text":"<ul> <li>Instead of copying label from nearest neighbor, take majority vote from K closest points</li> <li>Using more neighbors helps smooth out rough decision boundaries</li> <li>Using more neighbors helps reduce the effect of outliers</li> </ul> <p>\u200b   </p> <ul> <li>When \\(K &gt; 1\\) there can be ties between classes. Need to break somehow!</li> </ul> <p>\u200b   </p> <p>Distance Metric</p> <ul> <li>\\(L_1\\) (Manhattan) distance</li> <li> <p>\\(L_2\\) (Euclidean) distance : \\(d_2(I_1,I_2)=\\sqrt{\\sum_p(I_1^p-I_2^p)^2}\\)\u200b</p> </li> <li> <p>With the right choice of distance metric, we can apply K-Nearest Neighbor to any type of data!</p> </li> </ul>"},{"location":"DL_CV/class/lec/#hyperparameters","title":"Hyperparameters","text":"<p>hyperparameters: choices about our learning algorithm that we don\u2019t learn from the training data; instead we set them at the start of the learning process</p> <ul> <li>Very problem-dependent. In general need to try them all and see what works best for our data / task.</li> </ul> <p>Setting Hyperparameters</p> <p></p> <p></p> <p></p>"},{"location":"DL_CV/class/lec/#k-nearest-neighbor-universal-approximation","title":"K-Nearest Neighbor: Universal Approximation","text":"<ul> <li>As the number of training samples goes to infinity, nearest neighbor can represent any(*) function!</li> </ul> <p>Example :  Refer to PPT</p> <ul> <li>Problem: Curse of Dimensionality</li> </ul> <p>Curse of dimensionality: For uniform coverage of space, number of training points needed grows exponentially with dimension</p> <p>Original image is CC0 public domain</p> <p>K-Nearest Neighbor on raw pixels is seldom used</p> <ul> <li>-  Very slow at test time</li> <li>-  Distance metrics on pixels are not informative</li> </ul> <p></p> <ul> <li>Nearest Neighbor with ConvNet features works well!</li> </ul>"},{"location":"DL_CV/class/lec/#linear-classifiers","title":"Linear Classifiers","text":""},{"location":"DL_CV/class/lec/#bias-trick","title":"Bias Trick","text":"<ul> <li>Less commonly used in computer vision</li> </ul>"},{"location":"DL_CV/class/lec/#predictions-are-linear","title":"Predictions are Linear!","text":"<pre><code>f(x, W) = Wx (ignore bias)\nf(cx, W) = W(cx) = c * f(x, W)\n</code></pre> <ul> <li>A single template cannot capture multiple modes of the data !</li> </ul> <ul> <li>Explain : \u8fd9\u91cc\u662f\u7b80\u5316\u6210\u4e3a\u4e8c\u7ef4\u7684\u5f62\u5f0f\u6765\u7406\u89e3\u7684(eg.pixel -- (x,y))</li> </ul> <p>\u6cbf\u7740\u68af\u5ea6\u65b9\u5411 z(which is the score) \u589e\u957f\u6700\u5feb</p> <ul> <li>Hard Cases for a Linear Classifier</li> </ul> <p></p> <ul> <li>Perceptron couldn\u2019t learn XOR</li> </ul> <p></p>"},{"location":"DL_CV/class/lec/#loss-function","title":"Loss Function","text":"<ul> <li>Use a loss function to quantify how good a value of W is</li> <li>Find a W that minimizes the loss function (optimization)</li> </ul> <p>A loss function(Also called: objective function; cost function) tells how good our current classifier is</p> <p>Low loss = good classifier </p> <p>High loss = bad classifier</p> <ul> <li>Negative loss function sometimes called reward function, profit function, utility function, fitness function, etc</li> </ul> <p>Given a dataset of examples \\(\\{(x_i,y_i)\\}_{i=1}^N\\) where \\(x_i\\) is image and \\(y_i\\) is (integer) label</p> <p>Loss for a single example is \\(L_i(f(x_i,W),y_i)\\)</p> <p>Loss for the dataset is average of per-example losses : \\(L=\\frac{1}{N}\\sum_iL_i(f(x_i,W),y_i)\\)\u200b</p> <ul> <li>Multiclass SVM Loss</li> </ul> <p></p> <ul> <li>Example</li> </ul> <p></p> <p>\\(L=(2.9+0+12.9)/3\\)\u200b</p> <ul> <li>What are the min and max possible loss?</li> </ul> <p>min - 0</p> <p>max - infinity</p> <ul> <li>If all the scores were random, what loss would we expect?</li> </ul> <p>May achieve a \\(L = 1\\)  (all are small scores randomly)</p> <ul> <li>What would happen if the sum were over all classes? (including \\(i = y_i\\))</li> </ul> <p>All scores be inflatted by a constant one</p> <ul> <li> <p>What if the loss used a mean instead of a sum?</p> </li> <li> <p>What if we used this loss instead? \\(L_i = \\sum_{j\\ne y_i}max(0,s_y-s_{y_i}+1)^2\\)\u200b</p> </li> <li> <p>Suppose we found some W with L = 0. Is it unique?</p> </li> </ul> <p>No! 2W is also has L = 0 !</p> <p>How to Address this problem ? -- Regularization!</p>"},{"location":"DL_CV/class/lec/#regularization-beyond-training-error","title":"Regularization: Beyond Training Error","text":"<p>\\(L(W) = \\frac{1}{N}\\sum_{i=1}^NL_i(f(x_i,W),y_i)+\\lambda R(W)\\)\u200b</p> <p>$\\lambda = $\u200b  regularization strength (hyperparameter)</p> <p></p> <p>Purpose of Regularization:</p> <ul> <li> <p>Express preferences in among models beyond \u201dminimize training error\u201d</p> </li> <li> <p>Avoid overfitting: Prefer simple models that generalize better</p> </li> <li>Improve optimization by adding curvature</li> </ul> <p></p>"},{"location":"DL_CV/class/lec/#cross-entropy-loss-multinomial-logistic-regression","title":"Cross-Entropy Loss (Multinomial Logistic Regression)","text":"<ul> <li> <p>What is the \\(min / max\\) possible loss \\(L_i\\)?  A: Min - 0, max - +infinity</p> </li> <li> <p>If all scores are small random values, what is the loss? A: -log(C) (near log(10) \u2248 2.3 at the beginning stage)</p> </li> </ul> <p>\u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u6709\u4e00\u4e2a\u5206\u7c7b\u4efb\u52a1\uff0c\u6a21\u578b\u8f93\u51fa\u7684\u5206\u6570\u7ecf\u8fc7softmax\u51fd\u6570\u8f6c\u6362\u6210\u6982\u7387\u5206\u5e03\u3002\u7531\u4e8e\u6240\u6709\u7684\u5206\u6570\u90fd\u662f\u5c0f\u968f\u673a\u503c\uff0c\u8fd9\u610f\u5473\u7740\u6a21\u578b\u5bf9\u6bcf\u4e2a\u7c7b\u522b\u7684\u9884\u6d4b\u6982\u7387\u90fd\u4f1a\u63a5\u8fd1\u4e8e\u5747\u5300\u5206\u5e03\uff0c\u5373\u6bcf\u4e2a\u7c7b\u522b\u88ab\u9884\u6d4b\u4e3a\u6b63\u7c7b\u7684\u6982\u7387\u90fd\u63a5\u8fd1\u4e8e1/\u7c7b\u522b\u6570\u3002</p> <p>\u5047\u8bbe\u6709C\u4e2a\u7c7b\u522b\uff0c\u90a3\u4e48\u6bcf\u4e2a\u7c7b\u522b\u88ab\u9884\u6d4b\u4e3a\u6b63\u7c7b\u7684\u6982\u7387\u5927\u7ea6\u662f1/C\u3002\u6839\u636e\u4ea4\u53c9\u71b5\u7684\u5b9a\u4e49\uff0c\u5f53\u771f\u5b9e\u6807\u7b7e\u7684\u6982\u7387\u5206\u5e03\u63a5\u8fd1\u4e8e\u5747\u5300\u5206\u5e03\u65f6\uff0c\u4ea4\u53c9\u71b5\u7684\u503c\u5927\u7ea6\u662f-log(1/C)\u3002\u7531\u4e8e-log(1/C) = log(C)\uff0c\u6240\u4ee5\u4ea4\u53c9\u71b5\u7684\u503c\u5927\u7ea6\u662flog(C)\u3002</p> <p>log(10)\u662f\u4ee510\u4e3a\u5e95\u7684\u5bf9\u6570\uff0c\u7ea6\u7b49\u4e8e2.3\u3002\u6240\u4ee5\u5f53\u6240\u6709\u5206\u6570\u90fd\u662f\u5c0f\u968f\u673a\u503c\u65f6\uff0c\u4ea4\u53c9\u71b5\u7684\u503c\u5927\u7ea6\u662f2.3\u3002\u8fd9\u610f\u5473\u7740\u6a21\u578b\u7684\u9884\u6d4b\u4e0e\u771f\u5b9e\u6807\u7b7e\u4e4b\u95f4\u7684\u5dee\u5f02\u6027\u6bd4\u8f83\u5927\uff0c\u56e0\u4e3a\u9884\u6d4b\u7684\u6982\u7387\u5206\u5e03\u63a5\u8fd1\u4e8e\u5747\u5300\u5206\u5e03\uff0c\u800c\u771f\u5b9e\u6807\u7b7e\u7684\u6982\u7387\u5206\u5e03\u662f\u975e\u5747\u5300\u7684\u3002</p>"},{"location":"DL_CV/class/lec/#compare","title":"Compare","text":"<p>Q: What happens to each loss if I slightly change the scores of the last datapoint?</p> <p>A: Cross-entropy loss will change; SVM loss will stay the same</p> <p>Q: What happens to each loss if I double the score of the correct class from 10 to 20?</p> <p>A: Cross-entropy loss will decrease, SVM loss still 0</p> <p></p>"},{"location":"DL_CV/class/lec/#optimization","title":"Optimization","text":"<p>\\(w^* = argmin_wL(w)\\)\u200b</p>"},{"location":"DL_CV/class/lec/#idea","title":"idea","text":""},{"location":"DL_CV/class/lec/#1-random-search-bad-idea","title":"#1: Random Search (bad idea!)","text":"<ul> <li>15.5% accuracy! not bad!</li> </ul> <pre><code>bestloss = float(\"inf\")\nfor num in xrange(1000):\n  W = np.random.randn(10,3073)*0.0001\n  loss = L(X_train,Y_train,W )\n  if loss &lt; bestloss:\n    bestloss = loss\n    bestW = W\n   print 'in attemp %d the loss was %f , best %f' %(num,loss,bestloss)\n\n# Assume X_test is [3073 x 10000], Y_test [10000 x 1]\nscores =  Wbest.dot(Xte_cols)  \n# 10X10000,the class scores for all test examples\nYte_predict = np.argmax(scores,axis=0) \n# and calculate accuracy (fraction of predictions that are correst)\nnp.mean(Yte_predict == Yte)\n# returns 0.1555\n</code></pre>"},{"location":"DL_CV/class/lec/#2-follow-the-slope","title":"#2: Follow the slope","text":""},{"location":"DL_CV/class/lec/#computing-gradients","title":"Computing Gradients","text":"<p>- Numeric gradient: approximate, slow, easy to write</p> <p>\\(\\frac{df(x)}{dx}=lim_{h\\to 0}\\frac{f(x+h)-f(x)}{h}\\)</p> <p>- Analytic gradient: exact, fast, error-prone</p> <ul> <li>Loss is a function of W : Use calculus to compute an analytic gradient</li> </ul> <p>In practice: Always use analytic gradient, but check implementation with numerical gradient. This is called a gradient check.</p> <pre><code>def grad_check_sparse(f,x,analytic_grad,num_checks = 10,h=1e-7):\n  '''\n  sample a few random elements and only return numerical in this dimensions\n  '''\n</code></pre> <pre><code>from pytorch import torch\ntorch.autograd.gradcheck(func,inputs,eps=1e-06,atol = 1e-05,rtol = 0.001,raise_exception = True,check_sparse_nnz=False,nodet_tol = 0.0)\n</code></pre>"},{"location":"DL_CV/class/lec/#gradient-descent","title":"Gradient Descent","text":"<pre><code>w = initialize_wights()\nfor t in range(num_steps):\n  dw = compute_gradient(loss_fn,data,w)\n  w-=learning_rate*dw\n</code></pre> <p>Hyperparameters:</p> <p>- Weight initialization method - Numberofsteps  - Learningrate</p> <p>Stochastic Gradient Descent</p> <p></p> <ul> <li>Think of loss as an expectation over the full data distribution \\(p_{data}\\)</li> <li>Approximate expectation via sampling</li> </ul> <p>\\(L(W)=E_{(x,y)-p_{data}}[L(x,y,W)]+\\lambda R(W) \\approx \\frac{1}{N}\\sum_{i=1}^NL(x_i,y_i,W)+\\lambda R(W)\\)\u200b</p> <p>\\(\\triangledown L(W)=\\triangledown_W E_{(x,y)-p_{data}}[L(x,y,W)]+\\lambda \\triangledown _WR(W)\\)\u200b</p> <p>Problems with SGD</p> <p></p> <ul> <li> <p>What if the loss function has a local minimum or saddle point? : Zero gradient, gradient descent.</p> </li> <li> <p>Our gradients come from minibatches so they can be noisy!</p> </li> </ul> <p></p> <p>- Build up \u201cvelocity\u201d as a running mean of gradients</p> <p>- Rho gives \u201cfriction\u201d  typically rho=0.9 or 0.99</p> <p>You may see SGD+Momentum formulated different ways, but they are equivalent - give same sequence of x</p> <p>Nesterov Momentum</p> <p>\\(v_{t+1} = \\rho v_t -\\alpha \\triangledown f(x_t +\\rho v_t)\\)\u200b</p> <p>\\(x_{t+1}=x_t + v_{t+1}\\)</p> <p></p> <ul> <li>However the \\(x_t + \\rho v_t\\) term is really annoying because we want to update in terms of \\(x_t \\ \\triangledown f(x_t)\\) </li> </ul> <p>Change of variables \\(\\tilde{x_t}=x+t +\\rho v_t\\)\u200b and we get :</p> <p>$ v_{t+1} = \\rho v_t -\\alpha \\triangledown f(\\tilde{x_t})$\u200b</p> <p>\\(\\tilde x_{t+1} =\\rho v_t +(1+\\rho )v_{t+1}=\\tilde{x_t}+v_{t+1}+\\rho(v_{t+1}-v_t)\\)\u200b</p> <pre><code>v = 0\nfor t in range(num_steps):\n  dw = compute_gradient(w)\n  old_v = v\n  v = rho*v -learning_rate*dw\n  w -= rho* old_v -(1+rho)*v\n</code></pre> <p>AdaGrad</p> <ul> <li>Added element-wise scaling of the gradient based on the historical sum of squares in each dimension.</li> <li>\u201cPer-parameter learning rates\u201d or \u201cadaptive learning rates\u201d</li> </ul> <pre><code>grad_squared = 0\nfor t in range(num_steps):\n  dw = compute_gradient(w)\n  grad_square += dw*dw\n  w -= learning_rate * dw / (frad_square.sqrt()+1e-7)\n</code></pre> <p>Q: What happens with AdaGrad?</p> <p>Progress along \u201csteep\u201d directions is damped; progress along \u201cflat\u201d directions is accelerated !</p> <ul> <li>Problem : slow down step eventually</li> </ul> <p></p> <p>Adam(almost):RMSProp + Momentum</p> <pre><code># Adam &amp; Momentum\nmoment1 = 0\nmoment2 = 0\nfor t in range(num_steps):\n  dw = compute_gradient(w)\n  moment1 = beta1*moment1 + (1-beta1)*dw\n  moment2 = beta2*moment2+(1-beta2)*dw*dw\n  w -= learning_rate*moment1 / (moment2.sqrt()+ 1e-7)\n</code></pre> <p>Q: What happens at t=0? (Assume \\(beta_2\\) = 0.999)</p> <ul> <li>At the very beginning, may dividing a num close to ZERO</li> </ul> <p>Bias correction</p> <pre><code>moment1 = 0\nmoment2 = 0\nfor t in range(num_steps):\n  dw = compute_gradient(w)\n  moment1 = beta1*moment1 + (1-beta1)*dw\n  moment2 = beta2*moment2+(1-beta2)*dw*dw\n  moment1_unbias = moment1 / (1-beta1 ** t)\n  moment2_unbias = moment2 / (1-beta2 ** t)\n  w -= learning_rate*moment1 / (moment2.sqrt()+ 1e-7)\n</code></pre> <p></p>"},{"location":"DL_CV/class/lec/#second-order-optimization","title":"Second-Order Optimization","text":""},{"location":"DL_CV/class/lec/#first-order-optimization","title":"First-Order Optimization","text":"<ol> <li>Use gradient to make linear approximation </li> <li>Step to minimize the approximation</li> </ol>"},{"location":"DL_CV/class/lec/#second-order-optimization_1","title":"Second-Order Optimization","text":"<ol> <li>Use gradient and Hessian to make quadratic approximation </li> <li>Step to minimize the approximation</li> </ol> <p>Second-Order Taylor Expansion:</p> <p>\\(L(w)\\approx L(w_0)+(w-w_0)^T\\triangledown _wL(w_0)+\\frac{1}{2}^TH_wL(w_0)(w-w_0)\\)\u200b</p> <p>Solving for the critical point we obtain the Newton parameter update:</p> <p>\\(w^* = w_0 -H_wL(w_0)^{-1}\\triangledown_wL(w_0)\\)</p> <p>Q: Why is this impractical?  Hessian has \\(O(N^2)\\) elements Inverting takes \\(O(N^3)\\) with $N = $\u200b(Tens or Hundreds of) Millions</p> <p>In practice:</p> <ul> <li>-  Adam is a good default choice in many cases SGD+Momentum can outperform Adam but may require more tuning</li> <li>-  If you can afford to do full batch updates then try out L-BFGS (and don\u2019t forget to disable all sources of noise)</li> </ul> <p></p>"},{"location":"DL_CV/neural/lec/","title":"Neural Networks","text":"<p>"},{"location":"DL_CV/neural/lec/#neural-networks","title":"Neural Networks","text":"<p>Problem: Linear Classifiers aren\u2019t that powerful</p> <p></p> <ul> <li>Image Features: Color Histogram (Neglect space information)</li> <li>Image Features: Histogram of Oriented Gradients (HoG)</li> </ul> <p></p> <ul> <li>Image Features: Bag of Words (Data-Driven!)</li> </ul> <p></p> <ul> <li>To show how much does each visual words appear in the image </li> </ul> <p></p>"},{"location":"DL_CV/neural/lec/#neural-networks_1","title":"Neural Networks","text":"<ul> <li>2-layer Neural Network</li> </ul> <p>\\(f = W_2 max(0,W_1x)\\) \\(W_2 \\in R^{C\\times H}\\) \\(W_1 \\in R^{H\\times D}\\) \\(x\\in R^D\\)\u200b\u200b</p> <ul> <li>Fully connected network \\((NLP)\\)</li> </ul> <p></p> <ul> <li>3-layer Neural Network</li> </ul> <p>\\(f = W_3 max(0,W_2 max(0,W_1 x))\\)\u200b \\(W_3 \\in E^{C\\times H_2}\\) \\(W_2 \\in R^{H_2\\times H_1}\\) \\(x\\in R^D\\)</p> <p></p>"},{"location":"DL_CV/neural/lec/#activation-functions","title":"Activation Functions","text":"<p>Remeber the two-head horse ? (now we can recongnize them !)</p> <p></p> <pre><code>import numpy as np\nfrom numpy.random import randn\n# initialize weights and data\nN,Din,H Dout = 64,1000,100,10\nx,y = randn(N,Din),randn(N,Dout)\nw1,w2 = randn(Din,H),randn(H,Dout)\n# compute loss(sigmoid activation)\nfor t in range(10000):\n  h = 1.0/(1.0+np.exp(-x.dot(w1)))\n  y_pred = h.dot(w2)\n  loss = np.square(y_pred-y).sum()\n#Compute gradients\n  dy_pred = 2.0 * (y_pred - y)\n  dw2 = h.T.dot(dy_pred)\n  dh = dy_pred.dot(w2.T)\n  dw1 = x.T.dot(dh*h*(1-h))\n#SGD step\n  w1 -= 1e-4 * dw1\n  w2 -= 1e-4 *dw2\n</code></pre> <p></p>"},{"location":"DL_CV/neural/lec/#space-warping","title":"Space Warping","text":""},{"location":"DL_CV/neural/lec/#universal-approximation","title":"Universal Approximation","text":"<ul> <li> <p>A neural network with one hidden layer can approximate any function \\(f: R_N \\to R_M\\) with arbitrary precision</p> </li> <li> <p>Output is a sum of shifted, scaled ReLUs</p> </li> </ul> <p></p> <ul> <li> <p>With 4K hidden units we can build a sum of K bumps</p> </li> <li> <p>Reality check: Networks don\u2019t really learn bumps!</p> </li> </ul> <p>Universal approximation tells us: Neural nets can represent any function</p> <p>Universal approximation DOES NOT tell us:</p> <ul> <li> <p>Whether we can actually learn any function with SGD</p> </li> <li> <p>How much data we need to learn a function</p> </li> </ul> <p>Remember: kNN is also a universal approximator!</p>"},{"location":"DL_CV/neural/lec/#convex-functions","title":"Convex Functions","text":""},{"location":"DL_CV/neural/lec/#backpropagation","title":"Backpropagation","text":"<ul> <li>Please Refer To PPT</li> </ul> <ul> <li>Good porperties for sigmoid</li> </ul> <p>For the input that is actually the \"max\" the local gradient is 1</p> <p>the gradient of the other is 0</p> <ul> <li>code</li> </ul> <p></p> <ul> <li>Backprop Implementation: Modular API</li> </ul> <p></p> <p></p>"},{"location":"DL_CV/neural/lec/#backprop-with-vectors","title":"Backprop with Vectors","text":"<ul> <li>Example one</li> </ul>"},{"location":"DL_CV/neural/lec/#backprop-with-matrices-or-tensors","title":"Backprop with Matrices (or Tensors)","text":"<ul> <li>Explicitly demonstrate the matrices is demanding! Work Implicitly!!</li> </ul> <ul> <li>Find the correlation</li> </ul> <p>\\(y_{1,1}=x_{1,1}w_{1,1}+x_{1,2}w_{1,2}+x_{1,3}w_{1,3}\\)</p> <p>\\(\\frac{dy_{1,1}}{dx_{1,1}}=w_{1,1}\\)\u200b</p> <ul> <li>Similarly \\(\\frac{dy_{1,2}}{dx_{1,1}}=w_{1,2}\\)\u200b  </li> </ul> <p>\\(\\frac{dy_{2,1}}{dx_{1,1}}=0\\)\u200b </p> <ul> <li>Thus </li> </ul> <p></p> <p>\\(\\frac{dL}{dx_{1,1}}=(\\frac{dy}{dx_{1,1}})\u00b7(\\frac{dL}{dy})=(w1,;)\u00b7(\\frac{dL}{dy_1,;})=3*2 + 2*3 +1*(-3)+(-1)*9\\) \u200b</p> <p></p> <p>\\(\\frac{dL}{dx_{2,3}}=(\\frac{dy}{dx_{2,3}})\u00b7(\\frac{dL}{dy})=(w3,;)\u00b7(\\frac{dL}{dy_2,;})=3*(-8)+2*1+1*4+(-2)*6\\)\u200b</p>"},{"location":"DL_CV/neural/lec/#summary","title":"Summary","text":""},{"location":"DL_CV/neural/lec/#higher-order-derivatives","title":"Higher-Order Derivatives","text":""},{"location":"GP/AMAS/AMAS/","title":"Angular Momentum and Spin","text":"<p> <ul> <li>Question \\(p_x=i\\bar{h}\\frac{\\partial}{\\partial x}\\)</li> </ul> <p>?(12-17\u8bfe\u7a0b\u7ed3\u675f)</p> <p>The wave function of a particular quantum state of the hydrogen atom can be labeled by a set of quantum numbers \\((n, l, m_l)\\).</p> <ul> <li> <p>The corresponding energy only depends on the principal quantum number \\(n = 1,2,3,....\\)</p> </li> <li> <p>The orbital quantum number \\(l = 0, 1, 2, . . . , n \u2212 1\\) is a measure of the magnitude of the angular momentum of the quantum state. States with \\(l = 0, 1, 2, 3\\) are called \\(s, p, d, f\\) . </p> </li> <li> <p>The orbital magnetic quantum number</p> </li> </ul> <p>\\(ml =\u2212l,\u2212l+1,...,l\u22121,l\\)  is related to the space orientation of this angular momentum vector.</p>"},{"location":"GP/AMAS/AMAS/#classical-loop-model-for-electron-orbits","title":"Classical Loop Model for Electron Orbits","text":"<ul> <li>Heuristically,\\(\u2206L_x,\u2206L_y\\) involves \\(\u2206_z,\u2206p_z\\), therefore cannot vanish due to the uncertainty principle. In other words, one cannot simultaneously measure any two components of \\(L\\). However, one can simultaneously measure \\(L^2\\) and \\(L_z\\) .</li> </ul> <ul> <li> <p>Quantized by \\(\\bar{h}\\)</p> </li> <li> <p>We can measure definite values of a component \\(L_z\\) along a chosen measurement axis(usally taken to be a z axis) as given by \\(L_z=m_l\\bar{h}\\) for \\(m_l=0,\u00b11,\u00b12,\u2026\u2026\u00b1l\\)</p> </li> <li> <p>In general , if the electron has a definite value of \\(L_z\\) it may not have definite values of \\(L_x\\) and \\(L_y\\)</p> </li> <li> <p>This is a manifestation of Heisenberg's uncertainty principle.</p> </li> <li> <p>Therefore, the orbital magnetic dipole moment is also quantized</p> </li> </ul> <p>\\(\\mu_{orb}=|\\gamma|L=\\frac{e}{2m}\\sqrt{l(l+1)}\\bar{h}\\)</p> <p>\\(\\mu_{orb},z=\\gamma L_z=-m_l\\frac{e\\bar{h}}{2m}=-m_l\\mu_B\\)</p> <p>\u200b   Define the Bohr magneton \\(\\mu_B=\\frac{eh}{4\\pi m}=\\frac{e\\bar{h}}{2m}=9.274*10^{-24}J/T\\)</p>"},{"location":"GP/AMAS/AMAS/#dynamics-in-a-uniform-magnetic-field","title":"Dynamics in a Uniform Magnetic Field","text":"<p>An external magnetic field B\u20d7 will rotate a magnetic dipole moment \u03bc\u20d7 with a total torque \\(\\vec{\\tau}=\\vec{\\mu}\\times\\vec{B}\\) , or, for an electron with orbital angular momentum \\(\\vec{L}\\) , \\(\\vec{\\tau}=\\frac{d\\vec{L}}{dt}=\\gamma\\vec{L}\\times\\vec{B}\\)</p> <p></p> <p></p>"},{"location":"GP/AMAS/AMAS/#dipole-in-a-nonuniform-magnetic-field","title":"Dipole in a Nonuniform Magnetic Field","text":"<p>\u300cdiphole parallel to the magnetic field.\u300d</p> <p></p>"},{"location":"GP/AMAS/AMAS/#the-stern-gerlach-experiment","title":"The Stern-Gerlach Experiment","text":"<p>In the Stern-Gerlach experiment, a narrow beam of silver atoms passes through an electromagnet (with a nonuniform magnetic field) and then lands on a glass detector plate.</p> <ul> <li>Classical View</li> </ul> <p></p> <ul> <li>In the old quantum theory by Bohr (and Sommerfeld)</li> </ul> <p>An atom in a state with angular momentum equal to one \\((L = 1)\\) would have a magnetic moment with two components relative to the direction of the magnetic field.</p> <p>In this case the spot on the receiving plate will therefore be split into two, each of them having the same size but half the intensity of the original spot.</p> <ul> <li>In (Then) New Quantum Theory</li> </ul> <p>The later, or new, quantum theory developed by Heisenberg, Schroedinger, and others, predicted that for an \\(L = 1\\) state the beam should split into three components.</p> <p></p> <p>In fact, we now know that a silver atom consists of many electrons ([Kr]4d105s1).</p> <p>We also know that all those magnetic moments vectorially cancel out except for a single electron \\((5s1)\\), and the orbital dipole moment of that electron is zero.</p> <p>Therefore, the Stern-Gerlach result posed a serious problem for the new quantum theory.</p> <p>This was solved when Uhlenbeck and Goudsmit (1925, 1926) proposed that the electron had an intrinsic angular momentum, not associated with its orbital motion. </p>"},{"location":"GP/AMAS/AMAS/#spin","title":"Spin","text":"<p>The Stern-Gerlach experiment belongs to a class of quantum phenomena involving a quantum degree of freedom called spin, which has no classical counterpart.</p> <p>Fortunately, one can describe spin and its dynamics without appealing to any mechanical model (such as that of a spinning top), starting with just the observed fact that it is a form of angular momentum.</p>"},{"location":"GP/AMAS/AMAS/#electron-spin","title":"Electron Spin","text":"<p>Every electron, whether trapped in an atom or free, has a spin angular momentum and a spin magnetic dipole moment that are as intrinsic as its mass and charge. The existence of electron spin was postulated on experimental evidence by George Uhlenbeck and Samuel Goudsmit from their studies of atomic spectra.</p> <p>For every electron, \\(spin s = 1/2\\) and the electron is said to be a \\(spin-1/2\\) particle. (Protons and neutrons are also \\(spin-1/2\\) particles.)</p> <p>As with the angular momentum associated with motion, spin angular momentum can have a definite magnitude but does not have a definite direction.</p> <p>The best we can do is to measure its component along the \\(z\\) axis (or along any axis), and that component can have only the definite values given by \\(S_z =m_s\\bar{h}, for\\ m_s =\u00b1s=\u00b11/2\\).</p> <p>Here \\(m_s\\) is the spin magnetic quantum number, which can have only two values: \\(m_s = +s = +1/2\\) (the electron is said to be spin up) and \\(m_s = \u2212s = \u22121/2\\) (the electron is said to be spin down).</p> <ul> <li>The electron is not spinning</li> <li>As with the orbital angular momentum, a magnetic dipole moment is associated with the spin angular momentum. Let us write \\(\\vec{\\mu}_s = g \u03b3\\vec{S}\\) where \\(\u03b3 = \u2212e/(2m)\\) and the constant g is referred to as the \\(g-factor\\).</li> <li>It turns out that the spin angular momentum generates a magnetic moment twice as large as the orbital angular momentum does, i.e. g = 2.</li> </ul> <p></p>"},{"location":"GP/AMAS/AMAS/#nuclear-spin-and-magnetic-resonance","title":"Nuclear Spin and Magnetic Resonance","text":"<ul> <li>Such absorption is called magnetic resonance or, as originally, nuclear magnetic resonance (NMR).</li> <li>In practice, the photons required for magnetic resonance have an associated frequency in the radio-frequency (RF)range.</li> <li>NMR is usually detected by sweeping the magnitude \\(B_{ext}\\) through a range of values while the frequency \\(\u03c9\\) of the RF source is kept at a predetermined value and the energy loss of the RF source is monitored.</li> </ul> <p>Proton NMR, which studies the precession of the proton spin in the magnetic field, is a practical medical imaging technique.</p> <ul> <li>A strong magnetic field produces partial polarization of the protons (hydrogen nuclei) in a human body.</li> <li>A strong RF field is also imposed to excite some of the nuclear spins into their higher energy state.</li> <li>When this strong RF signal is switched off, the spins tend to return to their lower state, producing a small amount of radiation at the Larmor frequency associated with that field.</li> <li>The emission of radiation is associated with the \u201cspin relaxation\u201d of the protons from their excited state.</li> <li>It induces a radio frequency (RF) signal in a detector coil which is amplified to display the NMR signal.</li> </ul> <p>Since the Larmor frequency depends on the applied magnetic field, placing a magnetic field gradient across the human body allows you to locate the source of the MRI signal (hence the name Magnetic Resonance Imaging).</p>"},{"location":"GP/AMAS/AMAS/#spin-orbit-coupling","title":"Spin-Orbit Coupling","text":"<ul> <li>Crudely speaking, to the electron the nucleus appears to rotate around it and the moving nuclear charge or current creates a magnetic field \\(B^\u2217 \u221d L\\).</li> </ul> <p>Orbital motion cause relative motion of the nucleus to the electron ,creating a magnetic filed(connected with spin)</p> <ul> <li> <p>The spin\u2013orbit interaction Hamiltonian is given by \\(H_{SO}=\\epsilon_{nl}\\vec{L}\\vec{S}\\)  where the spin-orbit coupling constant \\(\u03be_{nl}\\), which is positive, is essentially the averaged gradient of the Coulomb interaction.</p> </li> <li> <p>To solve the Hamiltonian with such an interaction, we need to introduce the total angular momentum \\(\\vec{J}=\\vec{L}+\\vec{S}\\) and and use the expression \\(\\vec{J}\u00b7\\vec{J}=(\\vec{L}+\\vec{S})\u00b7(\\vec{L}+\\vec{S})=\\vec{S}\u00b7\\vec{S}+2\\vec{L}\u00b7\\vec{S}+\\vec{L}\u00b7\\vec{L}\\)</p> </li> <li> <p>\\(S^2 =s(s+1)\\bar{h} \\\\ L^2 =l(l+1)\\bar{h}^2\\\\J^2=j(j+1)\\bar{h}^2\\)</p> </li> <li> <p>\\(\\vec{L}\\vec{S}=\\frac{\\bar{h}^2}{2}[j(j+1)-l(l+1)-s(s+1)]\\)</p> </li> </ul>"},{"location":"GP/AMAS/AMAS/#the-pauli-exclusion-principle","title":"The Pauli Exclusion Principle","text":"<p>For multiple electrons in the same trap, we must consider the Pauli exclusion principle, named after \\(Wolfgang\\ Pauli\\).</p> <p>The Pauli principle states that no two electrons confined to the same trap can have the same set of values for their quantum numbers.In other words, there can be two electrons at most at any energy level; they have opposite spins.</p> <p>This principle applies not only to electrons but also to protons and neutrons, all of which have \\(s = 1/2\\); they are known as fermions.</p> <p>A remark on fermions and bosons</p> <p>More generally, fermions are particles with half-integer spin s \\((i.e., s = 1/2, 3/2, etc.)\\). On the other hand, particles with integer s \\((i.e., s = 0, 1, 2, etc.)\\) are called bosons. </p> <p>Fermions follow the Pauli principle, but bosons do not. </p> <p>Many particles consisting of matter, such as electrons, protons, and neutrons (s = \u00bd for either of them) are fermions. On the other hand, photons(s = 1) are bosons. </p> <p>Regarding composite particles consisting of multiple fermions (such as atoms), those with odd number of fermions can behave as fermions while those with even number of fermions as bosons. (\\(^3He\\): \\(2p + 1n + 2e \u2192\\) fermion; \\(^4He: 2p + 2n + 2e\\) \u2192 boson) </p> <p></p>"},{"location":"GP/AMAS/AMAS/#the-helium-atom","title":"The Helium Atom","text":"<p>The second simplest atom is the heliuxim atom, which has two 1s electrons (spin up and spin down) in the Coulomb potential of the charge 2e nucleus that obey time-independent Schroedinger\u2019s equation of the form  \\((H_1+H_2+V_{12})\u03a8(\\vec{r_1},\\vec{r_2})=E\u03a8(\\vec{r_1},\\vec{r_2})\\) where \\(H_i=-\\frac{\\bar{h^2}}{2m}\\triangledown_i^2\uff08Kinetic\uff09-\\frac{2e^2}{4\\pi\\epsilon_0r_i}\uff08Potential\uff09\\ and\\ V_{12}=\\frac{e^2}{4\\pi\\epsilon_0|\\vec{r_1}-\\vec{r_2}|}\\)</p> <ul> <li> <p>An approximation starts from throwing away the interaction term, which we have not learned to deal with, i.e.,\\((H_1 + H_2) \u03a8_0 = E_0\u03a8_0\\), </p> </li> <li> <p>The ground state of either \\(H_1\\) or \\(H_2\\) has an energy \\(\u22124E_R\\) (Because of two protons so raidus gets smaller)</p> </li> <li> <p>and a wave function \\(\u03c8_{100}(\\vec{r})=\\frac{1}{\\pi}(\\frac{2}{a_B})^{3/2}e^{-2r/a_B}\\)</p> </li> <li> <p>One may verify that \\(\u03a8_0(\\vec{r}_1,\\vec{r}_2)=\u03c8_{100}(\\vec{r_1})\u03c8_{100}(\\vec{r_2})\\)  is an exact solution.</p> </li> <li> <p>The corresponding energy is \\(E_0=-8E_R\\approx -109eV\\)</p> </li> </ul> <p>Others pleae refer to the related PPT</p>"},{"location":"GP/AMAS/AMAS/#shells-and-subshells","title":"Shells and Subshells","text":""},{"location":"GP/HA/HA/","title":"The Hydrogen Atom","text":"<p>"},{"location":"GP/HA/HA/#the-hydrogen-atom","title":"The Hydrogen Atom","text":"<p>https://www.youtube.com/watch?v=-Y0XL-K0jy0</p> <p>https://youtube.com/watch?v=acN7E7AUHPk</p>"},{"location":"GP/HA/HA/#quiz","title":"Quiz","text":"<p>https://www.youtube.com/watch?v=9GOuZAh9Wg0</p>"},{"location":"GP/HA/HA/#mystery-of-the-hydrogen-atom","title":"Mystery of the Hydrogen Atom","text":"<p>Because the proton\u2019s mass is much greater than the electron\u2019s mass, we shall assume that the proton is fixed in place. So, the atom is a fixed potential trap with the electron moving around inside it.</p> <p>A hydrogen atom contains an electron that is trapped by the Coulomb force it experiences from the proton, which is the nucleus of the atom.</p> <p>Under Newtonian laws, the electron would move around the proton, like planets around the Sun, i.e. \\(\\frac{1}{4\\pi\\epsilon_0}\\frac{e^2}{r^2}=m\\frac{v^2}{r}\\)</p> <p>Multiplying by \u2212r, we obtain \\(E_c=-\\frac{e^2}{4\\pi \\epsilon _0 r}=-mv^2=-2E_k\\)</p> <p>Alternatively, the total energy of the electron is\\(E=E_k+E_c=\\frac{E_c}{2}=-E_k\\)</p> <p>However, any charged particle which moves in a curved path will emit electromagnetic radiation, hence losing energy continuously. Why doesn\u2019t the electrical attraction between the electron and the positive charge simply cause the two to collapse together?</p> <ul> <li>One clue lies in the experimental fact that a hydrogen atom can emit and absorb only four wavelengths in the visible spectrum (656 nm, 486 nm, 434 nm, and 410 nm).</li> </ul>"},{"location":"GP/HA/HA/#the-bohr-model-of-hydrogen-1913","title":"The Bohr Model of Hydrogen (1913)","text":"<p>Bohr made two bold (and completely unjustified) assumptions:</p> <ul> <li>The electron in a hydrogen atom orbits the nucleus in a circlemuch like Earth orbits the Sun.</li> <li>The magnitude of the angular momentum \\(\\vec{L}\\) of the electron in its orbit is restricted (quantized) to the values \\(L = n\\bar{h}\\), for \\(n = 1,2,3,....\\)</li> </ul> <p>However, as successful as his theory was on the four visible wavelengths and on why the atom did not simply collapse, it turned out to be quite wrong in almost every other aspect of the atom.</p>"},{"location":"GP/HA/HA/#physical-meaning-of-the-assumption","title":"Physical meaning of the assumption","text":"<p>The de Broglie wavelength \\(\u03bb\\) of a free particle with momentum p is \\(\u03bb = h/p = h/mv\\).For an electron in a hydrogen atom whose orbital radius \\(r\\), the above equation leads to \\(\u03bb/r = h/rmv = h/L\\). Therefore, we obtain \\(2\u03c0r/\u03bb = L/\\bar{h}\\).</p> <p>\\(L=n\\bar{h}\\) means that the length of the orbit is an integer multiple of \\(\u03bb\\). Namely, the phase of the electron wave function returns to the initial value by moving for one cycle of the orbit.</p>"},{"location":"GP/HA/HA/#analysis-based-on-bohrs-model","title":"Analysis based on Bohr\u2019s model","text":"<ul> <li>Bohr to quantize the electron orbit \\(L=rmv=n\\bar{h} \\Rightarrow v=\\frac{n\\bar{h}}{mr}\\)</li> <li>Combining with the Newtonian result \\(\\frac{e^2}{4\\pi\\epsilon_0r^2}=m\\frac{v^2}{r}\\) we find \\(r_n =n^2a_B\\). where the characteristic length \\(a_B=\\frac{\\bar{h}^2}{me^2/(4\\pi\\epsilon_0)}=0.529 A\u030a\\)</li> </ul> <p>In the Bohr model of the hydrogen atom, the electron\u2019s orbital radius r is quantized and the smallest possible orbital radius (for \\(n = 1\\)) is \\(a_B\\), which is called the Bohr radius.</p> <ul> <li> <p>Can you obtain the length scale, alternatively, from dimension analysis?sIn order that the attraction between electron and nucleus does not simply collapse them together in the Bohr model, the electron should not get any closer to the nucleus than orbital radius aB by taking </p> </li> <li> <p>The energy of the hydrogen atom, according to the Bohr model, is then \\(E_n=\\frac{1}{2}mv^2-\\frac{1}{4\\pi\\epsilon_0}\\frac{e^2}{r}=-\\frac{E_R}{n^2}\\) where \\(E_R=\\frac{me^4/(4\\pi\\epsilon_0)^2}{2\\bar{h}^2}=13.6eV\\)</p> </li> <li>We still have, for each orbit  \\(E=E_k+E_c=\\frac{E_c}{2}=-E_k\\)</li> </ul>"},{"location":"GP/HA/HA/#the-hydrogen-spectrum","title":"The Hydrogen Spectrum","text":"<p>The energy of a hydrogen atom (or, equivalently, of its electron) changes when the atom emits or absorbs light. Emission and absorption involve a quantum of light according to \\(\\bar{h}\u03c9_{nm} =E_R(\\frac{1}{n^2} \u2212\\frac{1}{m^2})\\)  for integers \\(m &gt; n\\).</p> <p>The wavelengths of the emitted or absorbed light are given by $ \\frac{1}{\\lambda}=\\frac{E_R}{hc}(\\frac{1}{n^2}-\\frac{1}{m^2})$</p> <p></p> <ul> <li>\\(1\\ \u00c5ngstr\u00f6m - 1\u00d710^{\u221210}m\\)</li> </ul>"},{"location":"GP/HA/HA/#combinations-of-physical-constants","title":"Combinations of Physical Constants","text":""},{"location":"GP/HA/HA/#gs-energy-from-uncertainty-principleground-state","title":"GS Energy from Uncertainty Principle[Ground State]","text":"<p>The ground-state energy is the lowest energy allowed by Heisenberg\u2019s uncertainty principle.</p> <ul> <li>For a hydrogen atom, the size of the wave function, \\(\u2206r\\), is the uncertainty in position.</li> <li>The uncertainty in momentum is, roughly speaking, \\(\u2206p \u223c \\bar{h}/\u2206r\\), by the uncertainty principle.</li> <li>The energy of the electron can be estimated to be \\(E \u223c \\frac{(\\triangle p)^2}{2m}-\\frac{e^2}{4\\pi\\epsilon_0\\triangle r}=\\frac{\\bar{h}^2}{2m(\\triangle r)^2}-\\frac{e^2}{4\\pi\\epsilon_0\\triangle r}\\)\\((Mean(p)=0\\ Thus\\ use\\ \\triangle p\\ to\\ approximate\\ p)\\)</li> </ul> <p>To find the minimal energy, we solve for \\(\\triangle r\\) \\(\\Rightarrow\\frac{dE}{d(\\triangle r)}=0 \\Rightarrow \\triangle r = \\frac{\\bar{h}^2}{me^2/(4\\pi\\epsilon_0)}=a_B\\) and \\(E=-\\frac{me^4/(4\\pi\\epsilon_0)^2}{2\\bar{h}^2}=-E_R\\)</p> <p>The energy of the ground state (or any stationary state) is uniquely determined. \u300cThough the uncertainty of \\(t\\ \\&amp;\\ x\\)\u300d</p> <p>This is because of the energy-time uncertainty principle, \\(\u2206t \u00b7 \u2206E \u2265 \\bar{h}/2\\).</p> <ul> <li>In the extreme case of a stationary state, \\(\u2206t = \u221e\\), so we have \\(\u2206E = 0\\).</li> </ul> <p>Note, however, both kinetic energy and potential energy have uncertainties, due to the uncertainties of position and momentum.</p> <p>Hydrogen is a three-dimensional, finite electron trap, with walls that vary in depth with distance.</p>"},{"location":"GP/HA/HA/#schroedingers-equation-for-the-h-atom","title":"Schroedinger's Equation for the H-atom","text":""},{"location":"GP/HA/HA/#derive","title":"Derive","text":""},{"location":"GP/HA/HA/#ground-state-wave-function","title":"Ground State Wave Function","text":"<p>\\(\u03c8_{100}(\\vec{r})=R_{10}(r)=\\frac{1}{\\sqrt{\\pi}a_B^{3/2}}e^{\\frac{r}{a_B}}\\)</p> <p>Note that the hydrogen atom in its ground state has zero angular momentum (\\(l = 0\\) more details will be discussed in the next lecture), which is not predicted in the Bohr model.)</p> <p>The probability that the electron can be detected in any given (infinitesimal) volume element \\(dV\\) located at radius \\(r\\) from the center of the atom is \\(|\u03c8_{100}(\\vec{r})|^2dV.\\)</p> <ul> <li>Define radial Probability density \\(P(r)\\) such that \\(P(r)dr=|\u03c8_{100}(\\vec{r})|^2dV\\ (dV=4\\pi r^2)\\) </li> <li>\\(P(r)\\) takes a  maximum at \\(r=a_B\\)</li> <li>All we can ever know abount the location of the electron in the ground state of the hydrogen atom is the radial probability density</li> <li>Dot Plot</li> </ul>"},{"location":"GP/HA/HA/#excited-states-of-the-hydrogen-atom","title":"Excited States of the Hydrogen Atom","text":""},{"location":"GP/HA/HA/#bohrs-correspondence-principle","title":"Bohr\u2019s Correspondence Principle","text":""},{"location":"GP/Polar/Polarization/","title":"Polarization","text":"<p>"},{"location":"GP/Polar/Polarization/#preknowledge","title":"PreKnowledge","text":"<ul> <li>consider \\(cos(kx+wt)\\) and \\(cos(kx-wt)\\)</li> <li>\\(cos(kx+wt)\\)  propagate along -x axis</li> <li>\\(cos(kx-wt)\\) propogate along +x axis</li> <li>Linear Waves</li> </ul>"},{"location":"GP/Polar/Polarization/#polarization","title":"Polarization","text":"<p>To observe interference of the two waves</p> <ul> <li>two beams must have (nearly) the same frequency \u03c9</li> <li>interfering waves have comparable amplitude</li> <li>the phase difference between sources must remains constant.</li> </ul> <p>In this lecture we consider the direction of \\(\\vec{E}\\)</p> <p>Light is a transverse electromagnetic wave. Thus far we have considered only light for which the orientation of the electric field is constant, although its magnitude and sign vary in time.</p> <p>In general, we can consider two such harmonic lightwaves of the same frequency, moving through the same region of space, in the same direction \\(\\hat{z}\\)</p> <p>\\(\\vec{E}_x(z,t)=\\hat{i}E_{0x}cos(kz\u2212\u03c9t)\\)</p> <p>\\(\\vec{E}_y(z,t)=\\hat{j}E_{0y}cos(kz\u2212\u03c9t+\\epsilon)\\)</p>"},{"location":"GP/Polar/Polarization/#polarization-and-its-mathematical-description","title":"Polarization and Its Mathematical Description","text":""},{"location":"GP/Polar/Polarization/#linear-polarization","title":"Linear polarization","text":"<p>If \\(\u03b5\\) is zero or an integral multiple of \\(\u00b12\u03c0\\), the resultant wave is \\(\\vec{E}=(\\hat{i}E_{0x}+\\hat{j}E_{0y})cos(kz-wt)\\)</p> <p></p>"},{"location":"GP/Polar/Polarization/#circular-polarization","title":"Circular polarization","text":"<p>When both constituent waves have equal amplitudes and \\(\\epsilon=-\\pi/2+2m\\pi\\)(m is an integer) the resultant wave is \\(\\vec{E}=E_0(\\hat{i}cos(kz-wt)+\\hat{j}sin(kz-wt))\\)</p> <p></p> <p></p> <p>When both constituent waves have equal amplitudes and \\(\\epsilon=\\pi/2+2m\\pi\\)(m is an integer) the resultant wave is \\(\\vec{E}=E_0(\\hat{i}cos(kz-wt)-\\hat{j}sin(kz-wt))\\)</p> <p>The amplitude is unaffected, but \\(\\vec{E}\\) at a fixed z now rotates counterclockwise, and the wave is left-circularly polarized.</p> <p>A linearly polarized wave can be synthesized from two oppositely polarized circular waves of equal amplitude.</p>"},{"location":"GP/Polar/Polarization/#a-math-description-of-polarization","title":"A Math Description of Polarization","text":"<ul> <li>Jones vector</li> </ul> <ul> <li>Horizontal and vertical linearly polarized are thus given by</li> </ul> <p>\\(|H\u27e9=\\begin{pmatrix}1\\\\0\\end{pmatrix}\\\\|V\u27e9=  \\begin{pmatrix}0\\\\1\\end{pmatrix}\\)</p> <ul> <li>Linearly polarized at +45\u25e6 from the x-axis (diagonal) and at \u221245\u25e6 from the x-axis (anti-diagonal) are given by </li> </ul> <p>\\(|D\u27e9=\\frac{1}{\\sqrt{2}}(|H\u27e9+|V\u27e9)=\\frac{1}{\\sqrt{2}}\\begin{pmatrix}1\\\\1\\end{pmatrix}\\)</p> <p>\\(|A\u27e9=\\frac{1}{\\sqrt{2}}(|H\u27e9\u2212|V\u27e9)=\\frac{1}{\\sqrt{2}}\\begin{pmatrix}1\\\\-1\\end{pmatrix}\\)</p> <p>Note that we are only interested in polarization, so the vectors are normalized, or in one unit length</p> <ul> <li>Right-circular light is given by</li> </ul> <p>\\(|R\u27e9=\\frac{1}{\\sqrt{2}}(|H\u27e9\u2212i|V\u27e9)=\\frac{1}{\\sqrt{2}}\\begin{pmatrix}1\\\\-i\\end{pmatrix}\\)</p> <ul> <li>Left-circular light is given by</li> </ul> <p>\\(|L\u27e9=\\frac{1}{\\sqrt{2}}(|H\u27e9+i|V\u27e9)=\\frac{1}{\\sqrt{2}}\\begin{pmatrix}1\\\\i\\end{pmatrix}\\)</p>"},{"location":"GP/Polar/Polarization/#orthogonal","title":"Orthogonal","text":"<p>Note that in the lecture on interference, we discussed the addition in a two-dimensional real space \\(R_2\\).  The space is also equivalent to a one-dimensional complex space \\(C_1\\), or a two-component real vector space.</p> <p>Now, with polarization, we have generalized the one-dimensional complex space \\(C_1\\) to a two-dimensional complex space \\(C2 = C1 \u2297 C1\\), or a two-component complex vector space (in Jones\u2019 vector representation). The additional \\(C_1\\) space is spanned by the two orthogonal, linearly polarized states \\(|H\u27e9\\) and \\(|V\u27e9\\).</p> <ul> <li>Two vectors A\u20d7 and B\u20d7 are said to be orthogonal whenA\u20d7 \u00b7 B\u20d7 = 0.</li> </ul> <p>similarly, two complex vectors A\u20d7 and B\u20d7 are said to be orthogonal when \\(\u27e8A|B\u27e9 \u2261 \\vec{A}^{*} \u00b7 \\vec{B} = 0\\).</p> <ul> <li>Any polarization state will have a corresponding orthogonal state. </li> </ul> <p>Notice that\\(\u27e8H|V\u27e9 = \u27e8D|A\u27e9 = \u27e8L|R\u27e9 = 0\\).</p> <p>As we have seen, any polarization state can be described by a linear combination of the vectors in either one of the orthogonal sets. </p> <p>These same ideas are of considerable importance in quantum mechanics, where one deals with orthonormal wave functions.</p>"},{"location":"GP/Polar/Polarization/#monochromatic-light-and-natural-light","title":"Monochromatic Light and Natural Light","text":""},{"location":"GP/Polar/Polarization/#light-trains-and-monochromatic-light","title":"Light Trains and Monochromatic Light","text":"<p>In reality, a non-laser source emits, to the best, quasimonochromatic light trains, whose frequency can be represented by a bell-shaped Gaussian function.</p> <p>\"\u51c6\u5355\u8272\"\uff08quasi-monochromatic\uff09\u662f\u6307\u5149\u6ce2\u5728\u9891\u7387\u4e0a\u7684\u5206\u5e03\u76f8\u5bf9\u72ed\u7a84\uff0c\u4f46\u5e76\u975e\u5b8c\u5168\u5355\u4e00\u9891\u7387\u7684\u5149\u3002\u51c6\u5355\u8272\u5149\u901a\u5e38\u5177\u6709\u4e00\u4e2a\u4e3b\u5bfc\u7684\u4e2d\u5fc3\u9891\u7387\uff0c\u800c\u5728\u8be5\u4e2d\u5fc3\u9891\u7387\u5468\u56f4\u6709\u4e00\u5b9a\u7684\u9891\u7387\u5bbd\u5ea6\u3002\u8fd9\u79cd\u5149\u7684\u9891\u8c31\u5f62\u72b6\u53ef\u80fd\u7c7b\u4f3c\u4e8e\u9ad8\u65af\u5206\u5e03\u6216\u5176\u4ed6\u8fd1\u4f3c\u5355\u5cf0\u7684\u5206\u5e03\u3002</p> <p>That is, the irradiance (hence its square root, the amplitude) versus frequency is found to be Gaussian with a width \\(\u2206\u03c9 = 2\u03c0\u2206\u03bd.\\)</p> <p></p> <p>Quasimonochromatic light resembles a series of randomly phased finite wave trains.Such a disturbance is nearly sinusoidal,although the frequence dose vary slowly  about some mean value.</p> <p>Moreover,the amplitude fluctuates as well,but this too is a comparatively slow variation.</p> <p>The average constittuent wavetrain exists roughly for the coherence time \\(\\triangle t_c=\\frac{1}{\\triangle v}\\)</p> <p>\u4e24\u5217\u6ce2\u80fd\u53d1\u751f\u5e72\u6d89\u7684\u6700\u5927\u5149\u7a0b\u5dee\u53eb\u76f8\u5e72\u957f\u5ea6\\(\\delta_M=\\frac{\\lambda^2}{\\triangle\\lambda}\\) \\(\\lambda\\)\u4e3a\u4e2d\u5fc3\u6ce2\u957f</p> <p>\u5149\u901a\u8fc7\u76f8\u5e72\u957f\u5ea6\u6240\u9700\u65f6\u95f4\u53eb\u76f8\u5e72\u65f6\u95f4</p> <p>\u76f8\u5e72\u65f6\u95f4\u7684\u5b9a\u4e49\u662f\u57fa\u4e8e\u5149\u7684\u6ce2\u52a8\u6027\u548c\u5e72\u6d89\u6027\u7684\u3002\u5f53\u4e24\u675f\u5149\u540c\u65f6\u7167\u5c04\u5728\u540c\u4e00\u70b9\uff0c\u5982\u679c\u5b83\u4eec\u7684\u76f8\u4f4d\u5173\u7cfb\u4fdd\u6301\u4e0d\u53d8\uff0c\u90a3\u4e48\u5b83\u4eec\u5c31\u4f1a\u53d1\u751f\u5e72\u6d89\u3002\u76f8\u5e72\u65f6\u95f4\u5c31\u662f\u63cf\u8ff0\u8fd9\u79cd\u76f8\u4f4d\u5173\u7cfb\u4fdd\u6301\u4e0d\u53d8\u7684\u65f6\u95f4\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5982\u679c\u5149\u7684\u7535\u78c1\u573a\u5728\u4e00\u4e2a\u76f8\u5e72\u65f6\u95f4\u5185\u7684\u5e73\u5747\u503c\u4e0d\u53d8\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8bf4\u8fd9\u675f\u5149\u5728\u8fd9\u4e2a\u65f6\u95f4\u5185\u662f\u76f8\u5e72\u7684\u3002\u76f8\u5e72\u65f6\u95f4\u7684\u8ba1\u7b97\u516c\u5f0f\u4e3a\\(T_c=1/\u0394\u03bd\\)\uff0c\u5176\u4e2d\u0394\u03bd\u4e3a\u5149\u7684\u9891\u7387\u5bbd\u5ea6</p> <p></p> <p>\u5149\u7684\u5355\u8272\u6027\u597d\uff0c\u76f8\u5e72\u957f\u5ea6\u548c\u76f8\u5e72\u65f6\u95f4\u5c31\u957f\uff0c\u65f6\u95f4\u76f8\u5e72\u6027\u4e5f\u5c31\u597d</p> <p>An idealized monochromatic plane wave must be depicted as an infinite wavetrain. If this disturbance is resolved into two orthogonal components perpendicular to the direction of propagation, they, in turn, must have the same frequency, be infinite in extent, and therefore be mutually coherent (i.e., \\(\u03b5 = constant\\)).</p> <p>\\(\\vec{E}_x(z,t)=\\hat{i}E_{0x}cos(kz\u2212\u03c9t)\\)</p> <p>\\(\\vec{E}_y(z,t)=\\hat{j}E_{0y}cos(kz\u2212\u03c9t+\\epsilon)\\)</p> <p>A perfectly monochromatic plane wave is always polarized.</p> <p>The most spectacular of all present-day sources is the laser. Under optimum conditions, with temperature variations and vibrations meticulously suppressed, a laser was actually operated at quite close to its theoretical limit of frequency constancy.</p> <p>For example, a short-term frequency stability of about 8 parts per \\(10^{14}\\) was attained with a He\u2013Ne continuous gas laser at \\(\u03bb0 = 1153 nm\\) [Jaseja et al., Phys. Rev. Lett. 10, 165 (1963)]. </p> <p>That corresponds to a remarkably narrow bandwidth of about \\(\u2206\u03bd = 20 Hz\\).</p>"},{"location":"GP/Polar/Polarization/#natural-light","title":"Natural Light","text":"<p>Natural light is composed of a rapidly varying succession (~\\(10^{\u22128}\\) s) of the different polarization states. It is also known as unpolarized or randomly polarized light.</p> <p>We can mathematically represent natural light in terms of two arbitrary, incoherent, orthogonal, linearly polarized waves of equal amplitude (i.e., waves for which the relative phase difference varies rapidly and randomly).</p>"},{"location":"GP/Polar/Polarization/#coherence","title":"Coherence","text":"<p>Coherence is a measure of the correlation between the phases measured at different (temporal and spatial) points on a wave.</p> <p>Temporal coherence is a measure of the correlation of light wave\u2019s phase at different points along the direction of propagation \u2013 it tells us how monochromatic a source is. (Think about the description of quasimonochromatic light.) </p> <p>Spatial coherence is a measure of the correlation of light wave\u2019s phase at different points transverse to the direction of propagation \u2013 it tells us how uniform the phase of the wavefront is. (Think about Young\u2019s interference experiment.)</p> <p></p> <p>The figure illustrates how to prepare a monochromatic wave that is both temporally and spatially coherent from incoherent natural light.</p> <p>In reality, light is generally neither completely polarized nor completely unpolarized.</p> <p>More often, the electric-field vector varies in a way that is neither totally regular nor totally irregular, and such an optical disturbance is partially polarized. </p> <p>One useful way of describing this behavior is to envision it as the result of the superposition of specific amounts of natural and polarized light.</p>"},{"location":"GP/Polar/Polarization/#polarizing-sheets","title":"Polarizing Sheets","text":"<p>Unpolarized visible light can be transformed into polarized light by sending it through a polarizing sheet,or a Polaroid sheet.</p> <p></p> <ul> <li>A polarizing sheet consists of certain long molecules embedded in plastic.</li> <li>When light is then sent through the sheet,the electric field component parallel to the polarizing direction is passed(transmitted);the component perpendicular to it is absorbed.</li> </ul> <p></p> <p>Electric field oscillations of unpolarized light can resolve into two components with equal intensity</p> <ul> <li>Therefore, the intensity I of the polarized light emerging from a polarizing sheet is then half the intensity \\(I_0\\) of the original light \\(I=I_0/2\\)</li> </ul> <p>For polarized light,obly the component \\(E_y\\)=\\(Ecos\\theta\\) parallel to the polarizing direction of the sheet can be transmitted.Therefore,the intensity of the emerging wave is \\(I_0=I_0cos^2\\theta\\)</p> <ul> <li>Initially unpolarized light is sent through two polarizing sheets P1 (polarizer) and P (analyzer). In general, some of the light transmitted by P1 will be transmitted by P2.</li> <li>If their polarizing directions are parallel,all the light passed through P1 is transmitted by P2</li> <li>If perpendicular, no light is passed by the second sheet</li> </ul>"},{"location":"GP/Polar/Polarization/#quiz-23-1-polarizing-sheets","title":"Quiz 23-1: Polarizing Sheets","text":""},{"location":"GP/Polar/Polarization/#polarization-by-reflection","title":"Polarization by Reflection","text":"<p>One of the most common sources of polarized light is the ubiquitous process of reflection from dielectric media. </p> <p>Consider a ray of unpolarized light incident on a glass surface. The field \\(\\vec{E}\\) of the incident light can be decomposed into two components of equal magnitude, one perpendicular and another parallel to the plane of incidence. </p> <p>In general, the reflected light is partially polarized.</p> <p></p> <p>When the light is incident at a particular incident angle, called the Brewster angle \\(\u03b8_B\\) , the reflected light is fully polarized.</p> <p>One finds experimentally that at the incident angle \\(\u03b8_B\\), the reflected and refracted rays are perpendicular to each other: \\(\\theta_B+\\theta_r=\\frac{2}{\\pi}\\)</p> <p>According to Snell\u2019s law \\(n_i sin\u03b8_B = n_r sin\u03b8_r\\)</p> <p>we have \\(n_i sin\u03b8_B =n_r sin\u03b8_r =n_r sin(\\frac{\\pi}{2}\u2212\u03b8_B)=n_r cos\u03b8_B\\) or \\(\\theta_B=tan^{-1}\\frac{n_r}{n_i}\\)</p> <p>If the incident and reflected rays travel in air, we can approximate \\(n_i\\) as unity, so \\(n_r\\)=\\(tan\\theta_B\\)</p> <p></p>"},{"location":"GP/QW/QW/","title":"Quantum Wells","text":"<p>"},{"location":"GP/QW/QW/#quantum-wells","title":"Quantum Wells","text":"<p>On a stretched string, we can set up both traveling waves and standing waves.</p> <ul> <li>A traveling wave, on a long string, can have any frequency.</li> <li>A standing wave, set up on a string with a finite length, can have only discrete frequencies. </li> </ul> <p>In other words, confining the wave to a finite region of space leads to quantization of the motion \u2014 to the existence of discrete states for the wave, each state with a sharply defined frequency.</p> <p>This observation applies to waves of all kinds, including matter waves. For matter waves, however, it is more convenient to deal with the energy E of the associated particle than with the frequency f of the wave. </p> <p>Consider the matter wave associated with an electron moving in the positive x direction and subject to no net force \u2014 a so-called free particle. The energy of such an electron can have any reasonable value, just as a wave traveling along a stretched string of infinite length can have any reasonable frequency.</p> <p>Consider next the matter wave associated with an atomic electron, perhaps the valence (least tightly bound) electron. </p> <p>The electron \u2014 held within the atom by the attractive Coulomb force between it and the positively charged nucleus \u2014 is a bound particle. It can exist only in a set of discrete states, each having a discrete energy E. This sounds much like the discrete states and quantized frequencies that apply to a stretched string of finite length. </p> <p>For matter waves, then, as for all other kinds of waves, we may state a confinement principle: Confinement of a wave leads to quantization \u2014 that is, to the existence of discrete states with discrete energies.</p>"},{"location":"GP/QW/QW/#one-dimensional-infinite-potential-well","title":"One-Dimensional Infinite Potential Well","text":"<p>Consider a nonrelativistic electron confined to a one-dimensional electron trap (or a limited region of space).</p> <p></p>"},{"location":"GP/QW/QW/#standing-waves-in-a-1d-trap","title":"Standing Waves in a 1D Trap","text":"<p>We examine by analogy with standing waves on a string of finite length, stretched along an x axis and confined between rigid supports.</p> <ul> <li> <p>Because the supports are rigid, the two ends of the string are nodes, or points at which the string is always at rest. The states, or discrete standing wave patterns in which the string can oscillate, are those for which the length L of the string is equal to an integer number of half-wavelengths</p> </li> <li> <p>That is, the string can occupy only states for which \\(L=\\frac{n\\lambda}{2}\\)</p> </li> </ul> <p>Each value of the integer n identifies a state of the oscillating string. For a given n, the transverse displacement of the string at any position x \\((0 \u2264 x \u2264 L)\\) along the string is given by \\(y_n(x)=Asin(\\frac{n\\pi}{L}x)\\)where A is the amplitude of the standing wave</p> <p>For the n state \\(\\lambda_n=\\frac{2L}{n}\\) Thus \\(sinkx=sin\\frac{2\\pi}{\\lambda_n}x=sin(\\frac{n\\pi}{L}x)\\)</p> <p>For the electron in the trap, we promote the transverse displacement to wave function \\(\u03c8_n(x)\\).</p>"},{"location":"GP/QW/QW/#probability-of-detection","title":"Probability of Detection","text":"<p>Classically, we expect to detect the electron anywhere in the infinite well with a constant probability density.</p> <p>Quantum mechanically, we find the probability density \\(p_n(x) = |\u03c8_n(x)|^2 = |A|^2 sin^2(\\frac{n\\pi}{L}x)\\) for given n</p> <p>If don't satisfy \\(L=\\frac{n\\lambda}{2}\\) no stable wave formation!</p> <p>The constant A (up to a phase) can be determined by the normalization condition</p> <p>\\(\\int_{-\u221e}^{+\u221e}|\u03c8_n(x)|^2dx =\\int_0^L|\u03c8_n(x)|^2dx = 1\\),  so \\(A=\\sqrt{2/L}\\)</p>"},{"location":"GP/QW/QW/#energies-of-the-trapped-electron","title":"Energies of the Trapped Electron","text":"<p>The de Broglie wavelength \u03bb of the electron is defined as \\(\u03bb=\\frac{h}{p}=\\frac{h}{\\sqrt{2mk}}\\),where \\(K=\\frac{p^2}{2m}\\)is the kinetic enerrgy of the nonrelativistic electron</p> <p>For an electron moving within the central cylinder, where U = 0, the total (mechanical) energy E is equal to the kinetic energy K.</p> <ul> <li>Therefore , total energy for an electron moving in the central cylinder is \\(E_n=(\\frac{h}{\\lambda})^2/2m=\\frac{h^2}{8mL^2}n^2 \u221d n^2\\)  (\\(\\lambda_n=\\frac{2L}{n}\\))</li> <li> <p>Narrower well \\((smaller\\ L)\\) \\(\u21d2 E_n \u2197\\).</p> </li> <li> <p>The positive integer n is the quantum number of the electron's quantum state in the trap</p> </li> </ul> <p></p> <ul> <li> <p>The quantum state with the lowest possible energy level \\(E_1\\) with quantum number n = 1 is called the ground state of the electron.</p> </li> <li> <p>Why is \\(n = 0\\) not allowed? </p> </li> </ul> <p>Choosing n = 0 would indeed yield a lower energy of zero. However, as we will see below, the corresponding probability density is \\(|\u03c8|^2 = 0\\), which we can interpret only to mean that there is no electron in the well</p> <p>so \\(n = 0\\) is not a possible quantum number.</p> <ul> <li> <p>It is an important conclusion of quantum physics that confined systems must always have a certain non-zero minimum energy called the zero-point energy.</p> </li> <li> <p>Electrons can be excited or de-excided bynthe absorption or emission of a photon with energy \\(\\bar{h}w=\\frac{hc}{\\lambda}=\\triangle E=E_{High}-E_{Low}\\)</p> </li> </ul>"},{"location":"GP/QW/QW/#wave-functions-of-the-trapped-electron","title":"Wave Functions of the Trapped Electron","text":"<p>If we solve time-independent Schroedinger\u2019s equation, as in the previous lecture, for an electron trapped in the 1D infinite well of width L, we could write the solutions as \\(\u03c8_n(x)=exp (i\\frac{n\\pi}{L}x)\\)or\\(\u03c8_n(x)=exp(-i\\frac{n\\pi}{L}x)\\).</p> <ul> <li>However, the above traveling waves do not satisfy the boundary conditions \\(\u03c8_n(0) = \u03c8_n(L) = 0.\\)</li> </ul> <p>The appropriate solutions can only be certain linear combinations of the traveling wave functions, given by \\(\u03c8_n(x)=Asin(\\frac{n\\pi}{L}x)\\) The constant A is to be determined.</p> <ul> <li>Note that the wave functions \\(\u03c8_n(x)\\) have the same form as the displacement functions \\(y_n(x)\\) for a standing wave on a string stretched between rigid supports.</li> </ul> <p>For sufficiently large \\(n\\), the probability of detection becomes more and more uniform across the well in the coarse-grained scale. This result is an instance of a general principle called the correspondence principle: At large enough quantum numbers, the predictions of quantum physics merge smoothly with those of classical physics.</p>"},{"location":"GP/QW/QW/#an-electron-in-a-finite-well","title":"An Electron in a Finite Well","text":"<p>We can picture an electron trapped in a one-dimensional well between infinite-potential walls as being a standing matter wave. The solutions must be zero at the infinite walls.</p> <p>For finite walls, however, the analogy between waves on a stretched string and matter waves fails. Matter wave nodes no longer exist at \\(x = 0\\) and at \\(x = L\\).</p> <p>wave function can penetrate the walls into classically forbidden regions.</p> <p></p> <p>Constraints</p> <p>(1)\\(\u03a8(-\\infty)\\rightarrow0\\)</p> <p>(2)\\(\u03a8(+\\infty)\\rightarrow0\\)</p> <p>(3)\\(\u03a8(0-)=\u03a8(0+)\\)</p> <p>(4)\\(\u03a8(L-0)=\u03a8(L+0)\\)</p> <p>(5)\\(\u03a8'(-0) = \u03a8'(+0)\\)</p> <p>(6)\\(\u03a8'(L-0) = \u03a8'(L+0)\\)</p> <p></p>"},{"location":"GP/QW/QW/#energies-of-the-trapped-electron_1","title":"Energies of the Trapped Electron","text":"<p>Thus, the corresponding energy E \u2248 \\((h/\u03bb)^2/(2m)\\) for an electron in any given state is less in the finite well than in the infinite well.\uff08From what is mentioned above\uff09</p> <p></p> <p>An electrons with an energy greater than the well depth\\((E &gt; U_0)\\) has too much energy to be trapped in the finite well.</p> <p>Thus, there is a continuum of energies beyond the top of potential well ; a high-energy electron is not confined,and its energy is not quantized</p>"},{"location":"GP/QW/QW/#semiconductor-quantum-wells","title":"Semiconductor Quantum Wells","text":"<p>Semiconductor similar to finite wells</p> <p></p>"},{"location":"GP/QW/QW/#schroedingers-equation-in-high-dimensions","title":"Schroedinger\u2019s Equation in High Dimensions","text":"<p>This has the form \\(E = F(x) + G(y)\\), which can only be satisfied when \\(F(x) = E_1\\) and \\(G(y) = E \u2212 E_1\\), i.e., each function must separately be a constant.</p> <p>As a consequence, separation of variables breaks the multivariate partial differential equation into a set of independent ordinary differential equations \\((ODEs)\\).</p> <p>We can solve the \\(ODEs\\) for \\(X(x)\\) and \\(Y(y)\\). The wave function for the original equation is simply their product \\(X(x)Y(y)\\). </p> <p>[In which case \\(\u03a8(x,y)\\) can be written in the form of \\(\u03a8(x,y) = X(x)Y(y\\)), and in which case cannot be?]</p> <ul> <li>Separation of variables was first used by L\u2019Hospital in 1750. </li> </ul> <p>It is especially useful in solving equations arising in mathematical physics, such as Laplace\u2019s equation, Helmholtz\u2019s equation, and Schroedinger\u2019s equation. </p> <ul> <li>Success requires choice of an appropriate coordinate system and may not be attainable at all depending on the equation. In particular, it works when</li> </ul> <p>\\(U (x , y ) = Ux (x ) + Uy (y )\\),or, in a central potential in spherical coordinates,\\(U(r,\u03b8,\u03c6) = V(r).\\)</p>"},{"location":"GP/QW/QW/#2d-3d-infinite-potential-wells","title":"2D &amp; 3D Infinite Potential Wells","text":""},{"location":"GP/QW/QW/#dirac-delta-function-potential-well","title":"Dirac Delta Function Potential Well","text":""},{"location":"GP/com/com/","title":"Electromagnetic Integration","text":"<p>"},{"location":"GP/com/com/#electromagnetic-integration","title":"Electromagnetic Integration","text":""},{"location":"GP/com/com/#faradays-law-of-induction","title":"Faraday\u2019s Law of Induction","text":"<p>\\(\\Phi_B=\\int\\vec{B}\\cdot d\\vec{A}\\)</p> <p>\\(\\epsilon = -N\\frac{d\\Phi_B}{dt}\\)</p> <p>When you move the magnet toward or away from the loop, a magnetic force resists the motion, so Lenz\u2019s law requires your applied force to do positive work.</p> <p>At the same time, thermal energy is produced in the material of the loop because of the material\u2019s electrical resistance to the induced current.</p> <p>The energy you transfer to the closed loop-magnet system via your applied force ends up in this thermal energy. (For now, we neglect energy that is radiated away from the loop as electromagnetic waves during the induction.)</p> <p></p> <p>\\(\\epsilon= N\\frac{d\\Phi_B}{dt}=BLv\\)</p> <p>\\(F=F_1=iLB=B^2L^2v/R\\)</p> <p>\\(P_1=Fv=B^2L^2v^2/R\\)</p> <p>\\(P_{thermal}=i^2R=(\\frac{BLv}{R})^2R=B^2L^2v^2/R\\)</p>"},{"location":"GP/com/com/#a-reformulation-of-faradays-law","title":"A Reformulation of Faraday\u2019s Law","text":"<p>We find that an induced emf can be defined without the need of a current or particle: An induced emf is the sum\u2014via integration\u2014of quantities \\(\\vec{E} \u00b7 d\\vec{s}\\) around a closed path, where \\(\\vec{E}\\) is the electric field induced by a changing magnetic flux and \\(d\\vec{s}\\) is a differential length vector along the path.</p> <ul> <li> <p>Rewrite Faraday's Law as \\(\\oint \\vec{E}\\cdot d\\vec{s}=-N\\frac{d\\Phi_B}{dt}=-\\frac{d}{dt}\\int\\vec{B}\\cdot d\\vec{A}\\)</p> </li> <li> <p>We can convert it to differential form by applying the Stokes\u2019 theorem (or the fundamental theorem for curls)</p> </li> </ul> <p>\\(\\oint\\vec{E}\\cdot d\\vec{s}=\\int_S(\\triangledown \\times \\vec{E})\\cdot d\\vec{A}\\)</p> <ul> <li> <p>Thus, we get : \\(\\triangledown \\times\\vec{E}=-\\frac{\\partial \\vec{B}}{\\partial t}\\)</p> </li> <li> <p>Electric potential has no meaning for electric fields that are produced by induction</p> </li> </ul>"},{"location":"GP/com/com/#inductors-and-inductance","title":"Inductors and Inductance","text":""},{"location":"GP/com/com/#revisiting-solenoid","title":"Revisiting Solenoid","text":"<p>\\(B=\\mu_0in\\)</p> <p>\\(\\Phi_B=BA=\\mu_0inA\\)</p> <p>\\(Inductance \\ L \\ =N\\Phi_B/i=\\mu_0n^2lA\\)</p> <ul> <li>If the length \\(l\\) of a solenoid is very much longer than its radius, then, to a good approximation, its inductance is \\(L = \u03bc_0n^2lA = N^2(\u03bc_0A/l)\\)(By \\(nl=N\\))</li> </ul>"},{"location":"GP/com/com/#rl-circuits","title":"RL Circuits","text":"<ul> <li> <p>L is like a voltage source</p> </li> <li> <p>\\(E_L = \u2212\\frac{d(N\u03a6_B)}{dt} = \u2212L\\frac{di }{dt}\\)</p> </li> </ul> <p>\\(\\begin{align*}&amp;\\epsilon= iR-(-L\\frac{di}{dt})\\\\ &amp;\\dot{i}+\\frac{R}{L}i-\\frac{\\epsilon}{L}=0\\end{align*}\\)</p> <p>\\(i=\\frac{\\epsilon}{R}(1-e^{-t/\\tau_L}) \\ \\ \\ (\\tau_L=\\frac{L}{R})\\)</p>"},{"location":"GP/com/com/#energy","title":"Energy","text":""},{"location":"GP/com/com/#energy-stored-in-a-magnetic-field","title":"Energy Stored in a Magnetic Field","text":"<p>\\(\\epsilon i = Li\\frac{di}{dt} + i^2R.\\)</p> <p>\\(\\Rightarrow U_B=\\frac{1}{2}Li^2\\)</p>"},{"location":"GP/com/com/#energy-density-of-a-magnetic-field","title":"Energy Density of a Magnetic Field","text":"<ul> <li>The energy stored per unit volume of the field is</li> </ul> <p>\\(\\mu_B=\\frac{U_B}{Ah}=\\frac{Li^2}{2Ah}=\\frac{L}{h}\\frac{i^2}{2A}=\\frac{i^2n^2\\mu_0}{2}=\\frac{B^2}{2\\mu_0}\\)</p> <p>resembles that in an electric file \\(\\mu_E=\\frac{1}{2}\\epsilon_0E^2\\)</p>"},{"location":"GP/com/com/#mutual-inductance-of-two-parallel-coils","title":"Mutual Inductance of Two Parallel Coils","text":"<p>\\(M_{21}=\\frac{N_2\\Phi_{21}}{i_1}\\\\M_{12}=\\frac{N_1\\Phi_{12}}{i_2}\\)</p> <p>\\(\\epsilon_{21}=-M_{21}\\frac{di_1}{dt}\\\\\\epsilon_{12}=-M_{12}\\frac{di_2}{dt}\\)</p> <p>\\(\\epsilon_1=\\epsilon_{1}+\\epsilon_{12}=-L_{1}\\frac{di_{1}}{dt}-M_{12}\\frac{di_2}{dt}\\)</p> <p>\\(\\epsilon_2=\\epsilon_{22}+\\epsilon_{21}=-L_{2}\\frac{di_{2}}{dt}-M_{21}\\frac{di_1}{dt}\\)</p> <p>\\(\\Rightarrow-\\begin{pmatrix}L_1&amp;M_{12}\\\\M_{21}&amp;L_2\\end{pmatrix}\\frac{d}{dt}\\begin{pmatrix}i_1\\\\i_2\\end{pmatrix}=\\begin{pmatrix}\\epsilon_1\\\\\\epsilon_2\\end{pmatrix}\\)</p> <p></p> <p></p> <p></p>"},{"location":"GP/com/com/#alternating-current-circuits","title":"Alternating-Current Circuits","text":""},{"location":"GP/com/com/#lc-oscillations","title":"LC Oscillations","text":"<p>\\(L\\frac{di}{dt}+\\frac{q}{C}=0\\)</p> <p>\\(\\ddot{q}+\\frac{1}{LC}q=0\\)</p> <p>\\(\\Rightarrow q =Acos(w_0t+\\phi)=Qcos(\\frac{1}{\\sqrt{LC}}t+\\phi)\\)</p> <p>\\(\\Rightarrow Qcos\\phi=0 \\\\-w_0Qsin\\phi=0\\)</p> <p></p>"},{"location":"GP/com/com/#the-complex-formalism","title":"The Complex Formalism","text":""},{"location":"GP/com/com/#damped-oscillations-in-an-rlc-circuit","title":"Damped Oscillations in an RLC Circuit","text":"<ul> <li>With Resistance R</li> </ul> <p>\\(\\ddot{q}+\\frac{R}{L}\\dot{q}+\\frac{1}{LC}q=0\\)</p> <p>\\(\\Rightarrow q=Qe^{-\\frac{t}{\\tau}}cos(wt+\\phi) \\ where\\ \\tau=2L/R \\ and  \\ w=\\sqrt{w_0^2-(1/\\tau)^2} \\ and \\ w_0=\\frac{1}{\\sqrt{LC}}\\) </p> <p>Note Use ODEs or the method of the below picture</p> <p></p> <ul> <li>When \\(1/\u03c4 &lt; \u03c9_0\\), a real \\(\u03c9\\) can be found and the system still oscillates, but with decreasing amplitude as its energy is converted to heat. The circuit is said to be underdamped. Over time the system should come to rest at equilibrium. </li> <li> <p>When \\(1/\u03c4 &gt; \u03c9_0\\), one can only find imaginary \u03c9, which means the frictional force is so great that the system cannot oscillate. The circuit is said to be overdamped.</p> </li> <li> <p>In between, when \\(1/\u03c4 = \u03c9_0\\), the circuit is said to be critically damped. It is worth noting that the critical damping gives the fastest return of the system to its equilibrium position. In engineering design this is often a desirable property.</p> </li> </ul>"},{"location":"GP/com/com/#ac-circuits-and-forced-oscillations","title":"AC Circuits and Forced Oscillations","text":"<ul> <li>The oscillations in an RLC circuit will not damp out if an external emf device supplies enough energy to make up for the energy dissipated as thermal energy in the resistance R.</li> <li>The energy is supplied via oscillating emfs and currents \u2014 the current is said to be an alternating current, or ac for short. These oscillating emfs and currents vary sinusoidally with time, reversing direction 100 times per second and thus having frequency f = 50 Hz.</li> <li>When the external alternating emf is connected, the oscillations of charge, potential difference, and current are said to be driven oscillations or forced oscillations. These oscillations always occur at the driving angular frequency.</li> </ul>"},{"location":"GP/com/com/#three-simple-circuits","title":"Three Simple Circuits","text":"<ul> <li>For L :</li> </ul> <p>\\(i(t)=\\tilde{i}e^{iwt}\\)</p> <p>\\(V(t)=L\\frac{di}{dt}=L(iw)e^{iwt}\\tilde{i}\\)</p> <p>\\(\\tilde{Z}=iwL\\)</p> <ul> <li>For C:</li> </ul> <p>\\(Q(t)=\\tilde{Q}e^{iwt}\\)</p> <p>\\(\\tilde{V}(t)=\\tilde{Q}/C\\cdot e^{iwt}\\)</p> <p>\\(\\tilde{i}=\\frac{d\\tilde{Q}}{dt}=iw\\tilde{\\tilde{Q}e^{iwt}}\\)</p> <p>\\(\\tilde{Z}=\\frac{1}{iwC}=-\\frac{i}{wC}\\)</p>"},{"location":"GP/com/com/#the-series-rlc-circuit","title":"The Series RLC Circuit","text":""},{"location":"GP/com/com/#resonance","title":"Resonance","text":"<p>When \\(\u03c9_d\\) equals \\(\u03c9_0\\), the circuit is in resonance.</p> <ul> <li>The circuit is equally capacitive and inductive \\((|Z_C | = |Z_L|)\\). </li> <li>The current amplitude \\(I = E_m/R\\) is maximum.</li> <li>Current and emf are in phase (\u03c6 = 0).</li> </ul> <p></p>"},{"location":"GP/com/com/#maxwells-equations-and-em-waves","title":"Maxwell\u2019s Equations and EM Waves","text":"<ul> <li> <p>Applying Divergence to Faraday's Law ,we get:\\(\\triangledown\\cdot(\\triangledown \\times \\vec{E})=\\triangledown \\cdot(-\\frac{\\partial\\vec{B}}{\\partial t})=-\\frac{\\partial}{\\partial t}(\\triangledown\\cdot\\vec{B})=0 (Consistency)\\)</p> </li> <li> <p>However,when applying Divergence to Ampere's Law,we get\\(\\triangledown\\cdot(\\triangledown \\times \\vec{B})=\\triangledown\\cdot(\\mu_0\\vec{J})=\\mu_0(\\triangledown\\cdot\\vec{J})\\)</p> </li> </ul> <p>While \\(\\triangledown \\cdot \\vec{J} = -\\frac{\\partial\\rho}{\\partial t}=-\\frac{\\partial{(\\epsilon_0\\triangledown\\cdot E)}}{\\partial t} =-\\triangledown\\cdot(\\epsilon_0\\frac{\\partial\\vec{E}}{\\partial t}) \\ Which \\ is\\ not\\ necessarily\\  ZERO\\)</p> <ul> <li>Maxwell pointed out that the extra divergence can be removed by fixing Ampere\u2019s law to be:</li> </ul> <p>\\(\\triangledown\\times\\vec{B}=\\mu_0\\vec{J}+\\mu_0\\vec{J_d}=\\mu_0\\vec{J}+\\mu_0\\epsilon_0\\frac{\\partial\\vec{E}}{\\partial t}\\)</p>"},{"location":"GP/com/com/#apply","title":"Apply","text":"<p>\\(E=\\frac{\\sigma}{\\epsilon_0}=\\frac{Q}{\\epsilon_0A}\\\\ \\frac{\\partial{E}}{\\partial t}=\\frac{J_d}{\\epsilon_0}=\\frac{I}{\\epsilon_0A}\\)</p> <ul> <li> <p>Choose surface 1 to integral : \\(E=0\\ I_{enc}=I\\)</p> </li> <li> <p>Choose surface 2 to integral:</p> </li> </ul> <p>\\(I_{enc}=0\\\\\\mu_0\\epsilon_0\\frac{\\partial{E}}{\\partial t}=\\mu_0I/A \\ \\iint \\mu_0\\epsilon_0\\frac{\\partial{E}}{\\partial t}\\cdot d\\vec{A}=\\mu_0I\\)</p>"},{"location":"GP/com/com/#maxwells-equations","title":"Maxwell\u2019s Equations","text":""},{"location":"GP/com/com/#electromagnetic-waves","title":"Electromagnetic Waves","text":""},{"location":"GP/com/com/#derivation-of-the-wave-equation","title":"Derivation of the Wave Equation","text":"<p>1.Decouple </p> <p>\\(\\triangledown\\times(\\triangledown\\times\\vec{E})=\\triangledown\\times(-\\frac{\\partial\\vec{B}}{\\partial t})=-\\frac{\\partial}{\\partial t}(\\triangledown\\times\\vec{B})=-\\mu_0\\epsilon_0\\frac{\\partial^2\\vec{E}}{\\partial t^2}\\)</p> <p>\\(\\triangledown\\times(\\triangledown\\times\\vec{B})=\\triangledown\\times(\\mu_0\\epsilon_0\\frac{\\partial\\vec{E}}{\\partial t})=\\mu_0\\epsilon_0\\frac{\\partial}{\\partial t}(\\triangledown\\times\\vec{E})=-\\mu_0\\epsilon_0\\frac{\\partial^2\\vec{B}}{\\partial t^2}\\)</p> <p>Another way to solution :</p> <p>\\(\\vec{A}\\times(\\vec{B}\\times\\vec{C})=\\vec{B}\\cdot(\\vec{A}\\cdot \\vec{C})-\\vec{C}\\cdot(\\vec{A}\\cdot \\vec{B})\\)</p> <p>\\(\\triangledown\\times(\\triangledown\\times\\vec{C})=\\triangledown\\cdot(\\triangledown\\cdot \\vec{C})-\\triangledown^2\\vec{C}\\)</p> <p>Thus:</p> <p>\\(\\triangledown^2\\vec{B}=\\mu_0\\epsilon_0\\frac{\\partial^2\\vec{B}}{\\partial t^2}\\\\ \\triangledown^2\\vec{E}=\\mu_0\\epsilon_0\\frac{\\partial^2\\vec{E}}{\\partial t^2}\\)</p> <p></p> <p></p> <p>\\(\\lambda=\\frac{2\\pi}{k}\\\\ v=\\lambda f=\\lambda/T \\\\w=\\frac{2\\pi}{T}\\)</p> <p></p> <ul> <li>For \\(\\triangledown\\cdot \\vec{E}=0\\\\\\triangledown\\cdot \\vec{B}=0\\)</li> </ul> <p>We have \\(E_m(x)=B_m(x)=0\\)</p> <ul> <li>For \\(\\triangledown\\times\\vec{E}=-\\frac{\\partial{B}}{\\partial t}\\)</li> </ul> <p>\\(-k\\hat{x}\\times\\vec{E_m}=-w\\vec{B_m}\\)</p> <ul> <li>Therefore \\(\\vec{B}=\\frac{1}{c}(\\hat{x}(unit\\ vector)\\times\\vec{E})\\)</li> </ul> <p></p>"},{"location":"GP/com/com/#energy-transport","title":"Energy Transport","text":"<ul> <li>For \\(\\vec{B}=\\frac{1}{c}(\\hat{x}(unit\\ vector)\\times\\vec{E})\\) We have \\(\\mu_E=\\frac{\\epsilon_0 E^2}{2}=\\frac{B^2}{2\\mu_0}=\\mu_B\\)</li> <li>The rate of energy transport per unit area in a plane wave is the product of total energy density and the speed of the electromagnetic wave, i.e \\(S=(u_E +u_B)c.\\)</li> <li>\\(I = S_{avg}= \\frac{\\epsilon_0 E_m^2}{2}c=\\frac{B_m^2}{2\\mu_0}c.\\)</li> </ul>"},{"location":"GP/com/com/#variation-of-intensity-with-distance","title":"Variation of Intensity with Distance","text":"<p>When spherical wavefronts spread from an isotropic point source S with power Ps, the energy of the waves is conserved.</p> <p>The intensity I at the sphere must decrease with r as \\(I=\\frac{P_S}{4\\pi r^2}\\)</p> <p></p>"},{"location":"GP/current/current/","title":"Current","text":"<p>"},{"location":"GP/current/current/#current","title":"Current","text":""},{"location":"GP/current/current/#resistance-and-capacitance","title":"Resistance and Capacitance","text":"<ul> <li>\\(q=(nAL)e\\)</li> <li>\\(i=\\frac{q}{\\triangle t}=nAe\\vec{v_d}\\)</li> <li>\\(\\vec{J}=ne\\vec{v_d}\\)</li> </ul>"},{"location":"GP/current/current/#resistance-and-resistivity","title":"Resistance and Resistivity","text":"<p>The resistivity \u03c1 and conductivity \u03c3 of a material are related by \\(\u03c1 = 1/\u03c3 = E/J\\), where \\(E\\) is the magnitude of the applied electric field and \\(J\\) is the magnitude of the current density.</p> <ul> <li>Resistance is a property of an object, while resistivity is a property of a material. </li> <li>The \\(SI\\) unit for resistance is the ohm (\\(\u03a9\\)). The SI unit for resistivity is the ohm-meter (\\(\u03a9\\)\u00b7\\(m\\)).</li> </ul>"},{"location":"GP/current/current/#ohms-law","title":"Ohm\u2019s Law","text":"<ul> <li>An electron of mass m and charge (\u2212e) experiences an acceleration in an electric field \\(\\vec{E}\\) :</li> </ul> <p>\\(\\vec{a}=-\\frac{e\\vec{E}}{m}\\)</p> <ul> <li> <p>After a typical collision, each electron will \u201close its memory\u201d of its previous drift velocity, starting fresh and moving off in a random direction.</p> </li> <li> <p>In the average time \\(\u03c4\\) (or mean free time) between collisions, the electron will, on average, acquire a drift velocity</p> </li> </ul> <p>\\(\\vec{v_d}=-\\frac{e\\vec{E}}{m}\\tau \\ \\ \\ Combining \\ with \\vec{J}=-ne\\vec{v_d} \\ We  \\ get :\\)</p> <p>\\(-\\frac{\\vec{J}}{ne}=-\\frac{e\\vec{E}}{m}\\tau \\ \\ \\ which \\ implies \\vec{E}=\\rho\\vec{J} \\ \\ where\\  \\rho=\\frac{m}{ne^2\\tau}\\) </p> <ul> <li> <p>For metals under normal circumstances, both n and \u03c4 can be considered to be a constant. Thus, metals obey Ohm\u2019s law.</p> </li> <li> <p>Thus,\\(V/I=E\\cdot d/J\\cdot S = \\rho d /S\\)</p> </li> </ul>"},{"location":"GP/current/current/#estimate-the-mean-free-timecopper","title":"estimate the mean free time(Copper)","text":"<ul> <li>The free electron density in \\(Cu\\) is \\(n = 8.47 \u00d7 10^{28} m^{\u22123}\\). </li> <li>Cu has a resistivity \\(\u03c1 = 1.56 \u03bc\u03a9\u00b7cm\\).</li> <li>The mean free time can be estimated by \\(\\rho=\\frac{m}{ne^2\\tau}\\)</li> <li>In the classical picture, the mean velocity of an electron at room temperature can be estimated by \\((1/2)mv^2 = (3/2)k_BT.\\)</li> </ul>"},{"location":"GP/current/current/#equation-of-continuity","title":"Equation of Continuity","text":"<p>We have implicitly used the (local) conservation of charge here. Namely, if the total charge in some volume changes, the exactly same amount of charge must have passed in or out through the surface. Otherwise, charge accumulation occurs in the volume enclosed by the surface.</p> <ul> <li>Formally, we have</li> <li> <p>\\(\\frac{d}{dt}\\int_V\\rho(\\vec{r},t)dV = \\int_V \\frac{\\partial{\\rho(\\vec{r},t)}}{\\partial{t}}dV=-\\oint_S\\vec{J}(\\vec{r},t)d\\vec{A}\\)</p> </li> <li> <p>To be able to move the derivative under the integral sign this way requires that \\(\u2202\u03c1/\u2202t\\) be continuous.</p> </li> <li> <p>With the divergence theorem, we can rewrite it in the derivative form (note V is arbitrary)\\(\\frac{\\partial \\rho}{\\partial t}=-\\triangledown\\cdot\\vec{J}\\)\uff08By Gauss's Law\uff09</p> </li> </ul> <p>Such an equation of continuity plays an important role in hydrodynamics, hear flow, and diffusion theory, besides electromagnetic theory. It is simply a mathematical expression of a conservation law. </p>"},{"location":"GP/current/current/#capacitor-and-capacitance","title":"Capacitor and Capacitance","text":"<p>\\(C=\\frac{Q}{U}\\)</p>"},{"location":"GP/current/current/#capacitance-of-a-parallel-plate-capacitor","title":"Capacitance of a Parallel-Plate Capacitor","text":""},{"location":"GP/current/current/#capacitance-of-a-cylindrical-capacitor","title":"Capacitance of a Cylindrical Capacitor","text":"<ul> <li>Apparently, the capacitance is proportional to the length of the cylindrical capacitor, just like the resistance of a cylindrical conductor (R = \u03c1L/A).</li> </ul>"},{"location":"GP/current/current/#energy-stored-in-a-capacitor","title":"Energy stored in a capacitor","text":"<p>\\(dW=V'dq'=(\\frac{q'}{C})dq'\\)</p> <p>\\(W=\\int_0^q(q'/C)dq'=\\frac{q^2}{2C}\\)</p> <p>\\(U=\\frac{q^2}{2C}=\\frac{CV^2}{2}\\)</p>"},{"location":"GP/current/current/#dc-circuits","title":"DC Circuits","text":""},{"location":"GP/current/current/#rc-circuits","title":"RC circuits","text":""},{"location":"GP/current/current/#charging-switch-to-a","title":"Charging (switch to a )","text":"<p>\\(\\frac{q}{C}\\frac{dq}{dt}+i^2R=i\\epsilon\\)</p> <p>\\(\\Rightarrow \\dot{q}+\\frac{q}{RC}=\\frac{\\epsilon}{R}\\)</p> <p>\\(\\Rightarrow q=C\\epsilon(1-e^{-t/RC})\\)</p> <ul> <li> <p>Note : Derivation see Appendix : ODEs</p> </li> <li> <p>The equilibrium (final) charge on the then fully charged capacitor is equal to \\(q_0 = CE\\).</p> </li> </ul> <p>\\(\\Rightarrow i = \\frac{dq}{dt}=(\\frac{\\epsilon}{R}e^{-t/RC})\\)</p> <p>\\(\\Rightarrow V_c = \\frac{q}{C}=\\epsilon(1-e^{-t/RC})\\)</p>"},{"location":"GP/current/current/#dischargingswitch-to-b-from-a","title":"Discharging(switch to b from a)","text":"<p>\\(\\dot{q}+\\frac{q}{RC}=0\\)</p> <p>\\(\\Rightarrow q=q_0e^{-t/RC}\\)</p> <p>\\(\\Rightarrow i = (\\frac{\\epsilon}{R})e^{-t/RC}\\)</p>"},{"location":"GP/current/current/#energy-density","title":"Energy Density","text":"<p>parallel-plate capacitor:</p> <p>\\(U=\\frac{1}{2}CV^2=\\frac{1}{2}\\epsilon_0E^2(Ad)\\)</p> <ul> <li>The energy density u, i.e., the potential energy per unit volume between the plates, is thus uniform:\\(u=\\frac{1}{2}\\epsilon_0E^2\\)</li> </ul>"},{"location":"GP/current/current/#capacitor-with-a-dielectric","title":"Capacitor with a Dielectric","text":""},{"location":"GP/current/current/#appendix","title":"Appendix","text":""},{"location":"GP/current/current/#odes","title":"ODEs","text":"<ul> <li>\\(\\dot{y}+p(x)y=q(x) \\Rightarrow y=e^{-\\int pdx}(C+\\int q\\cdot e^{\\int pdx}dx)\\)</li> </ul>"},{"location":"GP/lec1-3/lec1/","title":"Electrci Charge & Field & Potential","text":"<p>"},{"location":"GP/lec1-3/lec1/#coulombs-law-and-the-electric-field","title":"Coulomb's Law and the Electric Field","text":""},{"location":"GP/lec1-3/lec1/#coulombs-law","title":"Coulomb\u2018s Law","text":"<p>\\(\\vec{F}=k\\frac{q_1q_2}{r^2}\\)</p> <p>\\(k = 8.99 * 10^{-12} N*m^2/C^2=\\frac{1}{4\\pi\\epsilon_0}\\\\\\) </p> <p>\\(\\epsilon_0=8.85*10^{-12}C^2/N*m^2\\)</p>"},{"location":"GP/lec1-3/lec1/#diphole","title":"Diphole","text":"<ul> <li>The product \\(\\vec{q}d\\) is known as the electric dipole moment \\(\\vec{p}\\) of the dipole.</li> </ul> <ul> <li>Derivation</li> </ul> <p>\u200b   \\(\\begin{align*}E&amp;=\\frac{q}{4\\pi\\epsilon_0(z-\\frac{d}{2})^2}- \\frac{q}{4\\pi\\epsilon_0(z+\\frac{d}{2})^2}\\\\ &amp;=\\frac{q\\vec{d}}{2\\pi\\epsilon_0}*\\frac{z}{(z-\\frac{d}{2})^2(z+\\frac{d}{2})^2}\\\\ &amp;=\\frac{\\vec{p}}{2\\pi\\epsilon_0z^3}*\\frac{1}{(1-\\frac{d}{2z})^2(1+\\frac{d}{2z})^2}\\\\ &amp;=\\frac{1}{2\\pi\\epsilon_0}\\frac{p}{z^3} \\ \\ when (z&gt;&gt;d)\\end{align*}\\)</p>"},{"location":"GP/lec1-3/lec1/#a-diphole-in-a-uniform-electric-filed","title":"A diphole in a uniform electric filed","text":"<p>Note:\\(\\tau=p\\times E\\)</p>"},{"location":"GP/lec1-3/lec1/#the-electric-field-due-to-a-ring-of-charge","title":"The Electric Field Due to a Ring of Charge","text":"<ul> <li>When \\(z&gt;&gt;R\\) \\(E=\\frac{qz}{4\\pi\\epsilon_0z^3(1+(\\frac{R}{z})^2)^{\\frac{3}{2}}}=\\frac{q}{4\\pi\\epsilon_0z^2}\\)</li> </ul>"},{"location":"GP/lec1-3/lec1/#the-electric-field-due-to-a-charged-disk","title":"The Electric Field Due to a Charged Disk","text":"<p>\\(\\begin{align*}dE_z &amp;= \\int \\frac{\\sigma(2\u03c0rdr)}{4\\pi\\epsilon_0(z^2+r^2)}\\frac{z}{\\sqrt{z^2+r^2}}=\\frac{\\sigma z}{2\\epsilon_0}\\int_0^R\\frac{rdr}{(z^2+r^2)^\\frac{3}{2}}\\\\ &amp;= \\frac{\\sigma}{2\\epsilon_0}(1-\\frac{z}{\\sqrt{z^2+R^2}})\\end{align*}\\)</p>"},{"location":"GP/lec1-3/lec1/#gausss-law","title":"Gauss's Law","text":""},{"location":"GP/lec1-3/lec1/#electric-flux","title":"Electric Flux","text":"<p>\\(\u2206\u03a6 = (E cos\u03b8)\u2206A=\\vec{E}\\cdot{\\vec{A}}\\)</p> <p>\\(\u03a6=\\int\\vec{E}\\cdot{d\\vec{A}}\\)</p>"},{"location":"GP/lec1-3/lec1/#gausss-law_1","title":"Gauss's Law","text":"<p>\\(\\epsilon_0 \\oint\\vec{E}\\cdot d\\vec{A}=q_{encore}\\)</p>"},{"location":"GP/lec1-3/lec1/#applications","title":"Applications","text":""},{"location":"GP/lec1-3/lec1/#1spherical-symmetry","title":"1.Spherical Symmetry","text":"<p>\\(4\\pi r^2\\cdot E = \\frac{q{(\\frac{r}{R})^3}}{\\epsilon_0}\\)</p> <p>\\(\\Rightarrow \\ \\vec{E}=\\frac{q}{4\\pi\\epsilon_0R^3}\\cdot \\vec{r}\\)</p>"},{"location":"GP/lec1-3/lec1/#2planar-symmetry","title":"2.Planar Symmetry","text":""},{"location":"GP/lec1-3/lec1/#3cylindrical-symmetry","title":"3.Cylindrical Symmetry","text":"<ul> <li> <p>\\(\u03b5_0 \u03a6 = \u03bbh\\)</p> </li> <li> <p>\\(E=\\frac{\\lambda}{2\\pi r\\epsilon_0}\\)</p> </li> </ul>"},{"location":"GP/lec1-3/lec1/#the-electrostatic-potential","title":"The Electrostatic Potential","text":""},{"location":"GP/lec1-3/lec1/#potential-due-to-an-electric-diphole","title":"Potential due to an electric diphole","text":"<ul> <li>For points that are relatively far from the the two lines to P as being parallel and their length dif- dipole \\((r \u226b d)\\), we can approximate the leg of a right triangle with hypotenuse d .Thus</li> </ul> <p>\\(r_--r_+\\approx dcos\\theta\\)</p> <p>\\(r_-\\cdot r_+\\approx r^2\\)</p> <p>\\(V=\\frac{\\vec{p}\\cdot\\vec{r}}{4\\pi\\epsilon_0r^3}\\)</p>"},{"location":"GP/lec1-3/lec1/#systems-of-charged-particles","title":"Systems of Charged Particles","text":"<ul> <li>The lesson here is this: If you are given an assembly of charged particles, you can find the potential energy of the assembly by finding the potential of every possible pair of the particles and then summing the results.</li> </ul>"},{"location":"GP/lec1-3/lec1/#continuous-charge-distribution-rod","title":"Continuous Charge Distribution: Rod","text":"<p>\\(\\begin{align*} V &amp;= \\int dV = \\int _0^L \\frac{\\lambda dx}{4\\pi\\epsilon_0\\sqrt{x^2+d^2}}\\\\ &amp;=\\int \\frac{\\lambda}{4\\pi\\epsilon_0}\\int_0^L\\frac{dx}{\\sqrt{x^2+d^2}}\\\\ &amp;=\\frac{\\lambda}{4\\pi\\epsilon_0}ln\\frac{L+\\sqrt{L^2+d^2}}{d} \\end{align*}\\)</p>"},{"location":"GP/lec1-3/lec1/#continuous-charge-distribution-disk","title":"Continuous Charge Distribution: Disk","text":"<p>\\(\\begin{align*}V &amp;= \\int_0^R \\frac{\\sigma(2\u03c0rdr)}{4\\pi\\epsilon_0\\sqrt{z^2+r^2}}\\\\ &amp;= \\frac{\u03c3}{2\\epsilon_0}(\\sqrt{z^2+R^2}\u2212z)\\end{align*}\\)</p> <p>\\(\\Rightarrow Ez=-\\frac{dV}{dz}\\)</p>"},{"location":"GP/lec1-3/lec1/#the-triangle-of-electrostatics","title":"The Triangle of Electrostatics","text":""},{"location":"GP/lec1-3/lec1/#preknowledge","title":"PreKnowledge","text":""},{"location":"GP/lec1-3/lec1/#gradient","title":"gradient","text":"<p>\\(\u2207V=\\frac{\\partial{V}}{\\partial{x}}\\hat{x}+\\frac{\\partial{V}}{\\partial{y}}\\hat{y}+\\frac{\\partial{V}}{\\partial{z}}\\hat{z}\\)</p>"},{"location":"GP/lec1-3/lec1/#curl","title":"curl","text":"<p>\\(\u2207 \\times V = \\begin{bmatrix}\\hat{x}&amp;\\hat{y}&amp;\\hat{z}\\\\\\frac{\\partial{}}{\\partial{x}}&amp;\\frac{\\partial{}}{\\partial{y}}&amp;\\frac{\\partial{}}{\\partial{z}}\\\\ V_x&amp;V_y&amp;V_z\\end{bmatrix}\\)</p> <ul> <li>The curl of a gradient is always \\(ZERO\\)</li> </ul>"},{"location":"GP/lec1-3/lec1/#divergence","title":"divergence","text":"<p>\\(\u2207 \\cdot V\\)</p> <p>\\(\\frac{\\partial E_x}{\\partial x}+\\frac{\\partial E_y}{\\partial y}+\\frac{\\partial E_z}{\\partial z}=\\triangledown \\cdot \\vec{E}\\)</p>"},{"location":"GP/lec1-3/lec1/#e-leftrightarrow-rho","title":"\\(E \\Leftrightarrow \\ \\rho\\)","text":"<ul> <li> <p>\\(\\oint\\vec{E}\\cdot d\\vec{l}=\\int\\int(\\triangledown\\times \\vec{E})dS = 0\\) \\(By \\ Stokes\\)  -- independent of \\(PATHS\\)</p> </li> <li> <p>Choose a Gaussian surface to enclose a small cube centered at \\(\\vec{r}\\) with side \\(\\triangledown x\\triangledown y\\triangledown z\\) such that \\(\\triangle V = \\triangle x \\triangle y \\triangle z\\)</p> </li> <li>In the small \\(\\triangledown V\\) ,We have :<ul> <li>\\(\\frac{\\rho(\\vec{r})}{\\epsilon_0}=lim_{\\triangle V \\rightarrow0}\\frac{q_{enc}}{\\triangle V\\epsilon_0}=lim_{\\triangle V \\rightarrow0}\\frac{1}{\\triangle V}\\oint \\vec{E}\\cdot d\\vec{S}\\)</li> <li>\\(\\oint \\vec{E_x}\\cdot d\\vec{S}=\\vec{E}(x + \\frac{\u2206x}{2} ,y,z)\\hat{x}\u2206y\u2206z+\\vec{E}(x - \\frac{\u2206x}{2} ,y,z)(-\\hat{x})\u2206y\u2206z = \\frac{\\partial E_x}{\\partial x}\\triangledown V\\)</li> <li>\\(\\frac{\\rho(\\vec{r})}{\\epsilon_0}=\\frac{\\partial E_x}{\\partial x}+\\frac{\\partial E_y}{\\partial y}+\\frac{\\partial E_z}{\\partial z}=\\triangledown \\cdot \\vec{E}\\)</li> </ul> </li> <li>According to Gauss\u2019 law, the only places at which the divergence of the electric field is not zero are those locations at which charge is present. So the divergence is a measure of the tendency of the field to flow away from a (charged) point.</li> <li>\\(\\oiint\\vec{E}\\cdot d\\vec{A} = \\iiint(\\triangledown \\cdot \\vec{E})dV\\) \\(Gauss's\\ Law\\)</li> </ul> <p></p>"},{"location":"GP/lec1-3/lec1/#example","title":"Example","text":""},{"location":"GP/lec1-3/lec1/#the-electrical-properties-of-conductors","title":"The Electrical Properties of Conductors","text":""},{"location":"GP/lec1-3/lec1/#a-charged-isolated-conductor","title":"A Charged Isolated Conductor","text":"<ul> <li>Consider an isolated conductor with excess charge. In electrostatic equilibrium, the electric field \\(\\vec{E}\\) inside the isolated conductor must be zero. Otherwise, the field would exert forces on the conduction electrons, and thus generate perpetual current in an isolated conductor.</li> <li>Gauss\u2019 law then tells us that the net charge inside the Gaussian surface must also be zero; the excess charge must lie on the actual surface of the conductor.</li> </ul> <p>For the same conductor with a cavity, is there excess charge on the cavity wall?</p> <ul> <li>We draw a Gaussian surface surrounding the cavity, close to its surface but inside the conducting body.</li> <li>Because \\(\\vec{E} = 0\\) inside the conductor,there can be no flux through  this new Gaussian surface</li> <li>No charge on the cavity wall</li> <li>The cavity can be enlarged until it consumes the entire conductor, leaving only the charges. The electric field would not change at all; so the electric field is set up by the charges and not by the conductor.</li> </ul>"},{"location":"GP/lec1-3/lec1/#electric-field-outside-spherical-conductors","title":"Electric Field Outside Spherical Conductors","text":"<ul> <li>Shell Therom https://en.m.wikipedia.org/wiki/Shell_theorem</li> </ul> <p>If we enclose the conductor in a concentric Gaussian sphere, Gauss\u2019 law tells us that the electric field outside the surface of the conductor looks as if all the excess charge on the shell were concentrated at its center.</p>"},{"location":"GP/lec1-3/lec1/#electric-field-outside-isolated-conductors","title":"Electric Field Outside Isolated Conductors","text":"<ul> <li>the electric field just outside the surface of a conductor can be determined using Gauss\u2019 law.</li> <li>The electric field \\(\\vec{E}\\) at and just outside the conductor\u2019s surface must also be perpendicular to that surface.</li> </ul>"},{"location":"GP/lec1-3/lec1/#flat-surface","title":"Flat surface","text":""},{"location":"GP/lec1-3/lec1/#parallel-plates","title":"Parallel Plates","text":""},{"location":"GP/lec1-3/lec1/#charge-inside-a-spherical-metal-shell","title":"Charge Inside a Spherical Metal Shell","text":"<ul> <li>Therefore, a total charge Q must lie on the inner wall of the shell in order that the net enclosed charge be zero.</li> <li>Because the shell is electrically neutral,a total charge -Q leave the inner wall and move to the outer wall.</li> <li>They must spread out uniformly.(This would be true no matter where inside the shell the particle happened to be located)</li> </ul>"},{"location":"GP/lec1-3/lec1/#quantify-charge-distributionthe-method-of-images","title":"Quantify Charge Distribution(The Method of Images)","text":""},{"location":"GP/lec1-3/lec1/#asimple-analysis","title":"A.Simple Analysis","text":"<p>There is a charge +q outside a spherical metal shell at a distance\\(r+R\\) from its center,how to decide the image?</p> <ul> <li>Note:at the center C,all charges on the spherical shell exerts \\(ZERO\\) potentials on the point so \\(V_c=\\frac{kq}{(R+r)^2}\\)</li> </ul>"},{"location":"GP/lec1-3/lec1/#b-a-single-grounded-pallete-with-a-charge-q-at-a-distance-d","title":"B. A single grounded pallete with a charge q at a distance d","text":"<ul> <li> <p>In this way \\(V(x,y,z)=\\frac{\\frac{q}{ 4\\pi\\epsilon_0}}{\\sqrt{x^2+y^2+(z-d)^2}}- \\frac{\\frac{q}{ 4\\pi\\epsilon_0}}{\\sqrt{x^2+y^2+(z+d)^2}}\\)</p> </li> <li> <p>We assert this is the solution for the upper half region.</p> </li> <li> <p>We can check that\\(V(x,y,z=0)=0\\),and\\(V \u21920\\)for\\(x^2 +y^2 +z^2 \u226bd2.\\)</p> </li> <li>At z = 0, \\(\\vec{E}\\) = \u2212\u2207V is perpendicular to the xy plane, just as it would need to be with the grounded plane.</li> <li> <p>The only charge in the region z &gt; 0 is q at (0,0,d).</p> </li> <li> <p>According to Gauss\u2019 law, the surface charge density \u03c3 induced on the conductor is:</p> </li> </ul> <p>\\(E=-\\epsilon_0\\frac{\\partial V}{\\partial z}|_{z=0}=\\frac{-qd}{2\\pi\\epsilon_0(x^2+y^2+d^2)^\\frac{3}{2}}\\hat{z}\\)</p> <p>\\(\\sigma=\\epsilon_0\\cdot E =\\frac{-qd}{2\\pi(x^2+y^2+d^2)^\\frac{3}{2}}\\)</p> <ul> <li>Bringing q from infinity needs ? W</li> </ul> <p>Derive as little circles</p> <p>\\(V=\\int_0^\\infty\\frac{qd\\cdot 2\\pi r dr}{2\\pi(r^2+d^2)^{3/2}}\\cdot\\frac{q}{4\\pi\\epsilon_0(r^2+d^2)^{1/2}}=\\frac{q^2d}{8\\pi\\epsilon_0}\\int_0^{\\infty}\\frac{d(r^2)}{r^2+d^2}=-\\frac{q^2}{8\\pi\\epsilon_od}\\)</p> <p>which is half of the energy for bringing two point charges to a distance 2d with no conductor. </p>"},{"location":"GP/lec1-3/lec1/#positive-charge-q-and-a-conducting-sphere","title":"positive charge +Q  and a conducting sphere","text":"<p>Solve the electro-static potential function \\(V(x,y,z)\\) and the electrostatic field \\(E(x,y,z)\\) in space, with a positive charge \\(+Q\\) located at \\((\u2212D, 0, 0)\\)and a conducting sphere of radius R (not grounded) at origin \\((R&lt;D)\\).</p> <p>Pre - knowledge : </p> <ul> <li>the grounded case with a charge outside(pictures below)</li> </ul> <p>Image : \\(r'=\\frac{R^2}{D}\\) \\(q'=-qR/D\\)</p> <p>Derivation :</p> <p>\\(\\begin{align*}V(\\theta)&amp;=\\frac{q'}{4\\pi\\epsilon_0}\\cdot\\frac{1}{\\sqrt{R^2+r'^2-2Rr'cos\\theta}}+\\frac{Q}{4\\pi\\epsilon_0}\\cdot\\frac{1}{\\sqrt{R^2+D^2-2RDcos\\theta}}=0\\end{align*}\\)</p> <p>\\(\\Rightarrow \\frac{1}{4\\pi\\epsilon_0}[\\frac{\\frac{q'}{\\sqrt{Rr'}}}{\\sqrt{R/r'+r'/R-2cos\\theta}}+\\frac{\\frac{Q}{\\sqrt{RD}}}{\\sqrt{R/D+D/R-2cos\\theta}}]=0\\)</p> <p>\\(\\begin{align*}\\Rightarrow &amp;\\frac{q'}{\\sqrt{Rr'}}+\\frac{Q}{\\sqrt{RD}}=0\\\\ &amp;\\frac{R}{r'}+\\frac{r'}{R}=\\frac{R}{D}+\\frac{D}{R}\\end{align*}\\)</p> <p>\\(\\Rightarrow R/r'=D/R \\Rightarrow r'=R^2/D \\Rightarrow q'=-\\frac{qR}{D}\\)</p> <ul> <li>the grounded case with a charge inside(Actually it's bascially the same thing)</li> </ul> <p></p> <p> * Also See https://galileoandeinstein.phys.virginia.edu/Elec_Mag/2022_Lectures/EM_08_Images.html</p>"},{"location":"GP/lec1-3/lec1/#appendix","title":"Appendix \uff1a","text":""},{"location":"GP/lec1-3/lec1/#cross-product","title":"Cross product","text":"<ul> <li>\\(\\vec{A} \u00d7(\\vec{B} +\\vec{C})=\\vec{A} \u00d7\\vec{B} +\\vec{A} \u00d7\\vec{C}\\)</li> </ul>"},{"location":"GP/lec1-3/lec1/#_1","title":"\u7acb\u4f53\u89d2","text":"<p>\\(dA=r^2sin\\theta d\\theta d\\Phi\\)</p> <p>\\(Solid \\ Angle\\  d\\Omega = \\frac{dA}{r^2}=sin\\theta d\\theta d\\Phi\\)</p> <p>\\(dV=r^2sin\\theta d\\theta d\\Phi dr\\)</p> <p></p>"},{"location":"GP/light/inteference/","title":"interference & refraction","text":"<p>"},{"location":"GP/light/inteference/#interference","title":"Interference","text":""},{"location":"GP/light/inteference/#the-superposition-of-waves","title":"The Superposition of Waves","text":""},{"location":"GP/light/inteference/#wave-equation","title":"Wave Equation","text":"<p>Recall that each field component of an electromagnetic wave$ (Ex, Ey, Ez, Bx, By, and Bz) $satisfies the scalar 3D differential wave equation</p> <p>\\(\\frac{1}{v^2}\\frac{\\partial^2{\\phi}}{\\partial t^2}=\\frac{\\partial^2{\\phi}}{\\partial x^2}+\\frac{\\partial^2{\\phi}}{\\partial y^2}+\\frac{\\partial^2{\\phi}}{\\partial z^2}\\)</p> <p>This equation is linear \\(\\vec{\\phi}(r,t)\\) and its derivatives appear only to the first power.</p> <p>Consequently, if \\(\\vec{\\phi}(r,t)\\) are solutions, any linear combination of them \\(\\vec{\\phi}(r,t)=\\sum_{i=1}^nC_i\\vec{\\phi}_i(r,t)\\) will be a solution as well.</p> <ul> <li>Examples </li> </ul> <p></p> <p></p> <p></p>"},{"location":"GP/light/inteference/#trigonometry-formulas","title":"Trigonometry Formulas","text":"<p>\\(cos(\u03b1 + \u03b2) = cos \u03b1 cos \u03b2 \u2212 sin \u03b1 sin \u03b2\\)</p> <p>\\(cos(\u03b1 \u2212 \u03b2) = cos \u03b1 cos \u03b2 + sin \u03b1 sin \u03b2\\)</p> <p>\\(cos \u03b1 + cos \u03b2 = 2 cos \\frac{(\u03b1 + \u03b2)}{2} cos\\frac{(\u03b1 - \u03b2)}{2}\\)</p> <p>\\(cos \u03b1 \u2212 cos \u03b2 = -2 sin \\frac{(\u03b1 + \u03b2)}{2} sin\\frac{(\u03b1 - \u03b2)}{2}\\)</p>"},{"location":"GP/light/inteference/#the-algebraic-method-of-adding-waves","title":"The Algebraic Method of Adding Waves","text":"<p>\\(E_1 = E_{01}cos(\u03b1_1 \u2212 \u03c9t)\\)</p> <p>\\(E_2 = E_{02}cos(\u03b1_2 \u2212 \u03c9t)\\)</p> <p>\\(\u03b1_i = kx_i + \u03c6_i\\)  with \\(x_i\\) being the distance from the source \\(s_i\\) of the waveto the point of observation.</p> <p>The linear combination of the waves is \\(E \u2261 E_0 cos(\u03b1 \u2212 \u03c9t) = E_1 + E_2\\)</p> <p>We get :</p> <p>\\(E_0cos\u03b1=E_{01}cos\u03b1_1 +E_{02}cos\u03b1_2\\)</p> <p>\\(E_0sin\u03b1=E_{01}sin\u03b1_1 +E_{02}sin\u03b1_2\\)</p> <p>\\(\\Rightarrow \\vec{E_0}=\\vec{E_{01}}+\\vec{E_{02}}\\)</p> <p>\\(E_0^2=E_{01}^2+E_{02}^2+2E_{01}E_{02}cos(\\alpha_2-\\alpha_1)\\)</p> <p>The resultant intensity is not simply the sum of the component intensity</p> <p>there is an additional contribution \\(2E_{01}E_{02}cos(\u03b1_2 \u2212 \u03b1_1)\\), known as the interference term.</p> <p>The phase difference may arise from a difference in path length traversed by the two waves, as well as a difference in the initial phase angle \\(\u03b4 =\\alpha_2-\\alpha_1= \\frac{2\u03c0}{\\lambda}(x_2 \u2212x_1)+(\u03c6_2 \u2212\u03c6_1).\\)</p> <p></p>"},{"location":"GP/light/inteference/#the-complex-method","title":"The Complex Method","text":"<p>It is often mathematically convenient to make use of the complex representation when dealing with the superposition of harmonic waves.</p> <p>We now redo the calculation of adding two waves. </p> <p>The wave function \\(E_1 =E_{01}cos(\u03b1_1 \u2212\u03c9t)=E_{01}cos(kx_1 \u2212\u03c9t+\u03c6_1)\\) can be written as \\(\\tilde{E}_1 = E_{01}e^{i(\u03b1_1\u2212\u03c9t)} = E_{01}e^{i\u03b1_1}e^{\u2212i\u03c9t}\\)  if we are interested only in the real part.</p> <p></p> <ul> <li>erratum \\(E_0^2=(E_0e^{i\\alpha})(E_0e^{-i\\alpha})\\)</li> </ul>"},{"location":"GP/light/inteference/#phasor-addition","title":"Phasor Addition","text":"<p>Now we discuss a graphical technique that uses vector additions instead of trigonometric additions.</p> <p>We can map a wave, which has an amplitude and a phase, to a vector, known as a phasor, in a two-dimensional plane, such that</p> <p></p> <p></p>"},{"location":"GP/light/inteference/#summary","title":"Summary","text":"<ul> <li>The three methods all deal with addition in a two-dimensional space.</li> <li>The phasor addition adds vectors (with x component and y component) in a two-dimensional real space.</li> <li>The complex method is an addition of complex numbers (with real part and imaginary part) in a complex plane. </li> <li>The algebraic or trigonometric method is most complex. In fact, it is an addition of functions (linear combination of \\(cos \u03c9t\\) and \\(sin \u03c9t\\)) in a two-dimensional Hilbert space, spanned by cos \u03c9t and sin \u03c9t.</li> </ul>"},{"location":"GP/light/inteference/#natural-light","title":"Natural Light","text":"<ul> <li>Now, one may think that light from two fine incandescent wires would interfere.</li> <li>This does not occur, because the light is emitted by vast numbers of atoms in the wires, acting randomly and independently for extremely short times \u2014 of the order of nanoseconds. The light is said to be incoherent.</li> <li>As a result, at any given point on the viewing screen, the interference between the waves from the two sources varies rapidly and randomly between fully constructive and fully destructive. The screen is seen as being uniformly illuminated (over the time scale of our observation).</li> </ul>"},{"location":"GP/light/inteference/#conditions-for-interference","title":"Conditions for Interference","text":"<ul> <li>To observe the interference of the two waves describedabove, we need the following conditions.</li> <li>Two beams must have (nearly) the same frequency \u03c9. Otherwise, the phase difference is time-dependent. During the detection interval, the interference pattern will be averaged away.</li> <li>The clearest pattern (with maximum contrast) exists when interfering waves have (nearly) equal amplitude. Why?</li> <li> <p>Initial phase difference can exist between sources, as long as it remains constant; the two sources are said to be coherent.</p> </li> <li> <p>Until the advant of laser, no two individual sources can maintain a constant relative phase long enough for an observable interference pattern.</p> </li> </ul>"},{"location":"GP/light/inteference/#huygens-principle","title":"Huygens\u2019 Principle","text":"<p>Each point on a wavefront may be regarded as a source of waves expanding from that point.</p> <p>If waves strike a barrier with a small opening, the waves may be seen to expand from the opening. Notice the wavelength is larger than the opening in this case.</p>"},{"location":"GP/light/inteference/#youngs-interference-experiment","title":"Young\u2019s Interference Experiment","text":"<ul> <li>The slit \\(S_0\\) in screen A creates a spatially coherent beam that could identically illuminate slits \\(S_1\\) and \\(S_2\\) in screen B. </li> <li>NOTE\uff1aSpatial incoherence arises from the fact that a realistic source (like a lightbulb) contains widely spaced point sources that changes phase rapidly and randomly (due to the granular nature of the emission process).</li> <li>Nowadays screen A is no longer needed, and plane waves from a laser can provide the spatial coherence the experiment needs.</li> <li>Light waves produce fringes in a Young\u2019s double-slit interference experiment, but what exactly determines the locations of the fringes?</li> </ul> <p>In other words, the light leaving the slits is in phase. </p> <p>However, the electric field components of these waves at point P are not in phase and vary with time as</p> <p>\\(E_1 =E_0cos(kr_1 \u2212\u03c9t)=E_0cos(kL+\u03b2\u2212\u03c9t)\\)</p> <p>\\(E_2 =E_0cos(kr_2 \u2212\u03c9t)=E_0cos(kL\u2212\u03b2\u2212\u03c9t)\\)</p> <p>Where the phase difference \\([L = (r_1 + r_2)/2 = \\sqrt{D^2+y^2}]\\) \\([\u03b4_2 = 2\u03b2 = k\u2206L = \\frac{2\u03c0d}{\\lambda} sin\u03b8.]\\)</p> <ul> <li>The total intensity is thus given by \\(I \u221d 2E_{0}^2[1 + cos(2\u03b2)] \\ or\\ I = I_{max }cos^2\u03b2.\\)</li> </ul> <p>Therefore, a bright fringe appears when \\(\u2206L = d sin \u03b8 = m\u03bb\\) where m is an integer.</p> <p>On the other hand, a dark fringe appears when \\(\u2206L=dsin\u03b8= (m+\\frac{1}{2}) \u03bb\\) where m is an integer.</p> <p>We can then find the angle \u03b8 to any fringe and thus use the values of m to label the fringes.</p> <ul> <li>For \\(\\triangle \\theta\\) \\(d(sin\\theta_1-sin\\theta_2)=\\frac{\\lambda}{2} \\Rightarrow dcos(\\frac{\\theta_1+\\theta_2}{2})\\triangle \\theta=\\frac{\\lambda}{2}.  \\Rightarrow  \\triangle \\theta = \\frac{\\lambda}{2dcos\\theta}\\) </li> </ul>"},{"location":"GP/light/inteference/#interference-from-thin-films","title":"Interference from Thin Films","text":"<p>So, reflecting off higher index, ray \\(r_1\\) has an additionalreflection phase shift 0.5 wavelength. There is no such shift for \\(r_2\\)</p> <p>In addition, the light waves of rays \\(r_1\\) and \\(r_2\\) has a path difference \\(2L\\), which occurs in index \\(n_2\\).Notice that the wavelength in the medium is \\(\u03bb_2=\\frac{v_2}{f}=\\frac{c}{n_2}\\frac{1}{f}=\\frac{\\lambda}{n_2}\\)</p> <p>Therefore, rays are in phase if \\(2L=(m+\\frac{1}{2})\\frac{\\lambda}{n_2}\\) , for integer m.</p> <p>They produce an interference maximum and the nearby region on the film is bright to observers.</p> <p>Similarly, if they are exactly out of phase \\(2L=m\\frac{\\lambda}{n_2}\\) they produce an interference minimum and the nearby region is dark, even though it is illuminated. </p>"},{"location":"GP/light/inteference/#negligible-film-thickness","title":"Negligible Film Thickness","text":"<ul> <li>See at the top BLACK AREA which is because that the film is just so thin </li> </ul>"},{"location":"GP/light/inteference/#newtons-rings","title":"Newton\u2019s Rings","text":"<p>Newton\u2019s rings are interference patterns formed by light incident on the thin film of air between a convex lens and a flat (or between two suitable lenses).</p> <p></p>"},{"location":"GP/light/light/","title":"Light Waves","text":"<p>"},{"location":"GP/light/light/#light","title":"Light","text":""},{"location":"GP/light/light/#light-as-electromagnetic-waves","title":"Light as Electromagnetic Waves","text":""},{"location":"GP/light/light/#plane-wave","title":"Plane Wave","text":""},{"location":"GP/light/light/#transmission-of-light-in-matter","title":"Transmission of Light in Matter","text":"<ul> <li> <p>In dielectric materials, the electric field is altered by a factor \\(\u03b5_r\\) , the relative permittivity (also called the dielectric constant \\(\u03ba\\)).</p> </li> <li> <p>In magnetic materials (therefore, not in glass or plastic), the magnetic field is altered by a factor \\(\u03bc_r\\) , the relative permeability.</p> </li> </ul> <p>Therefore, a light wave propagating through any substantive medium travels at a speed \\(v=\\frac{c}{n}=\\frac{1}{\\sqrt{\\epsilon_r\\mu_r}}\\frac{1}{\\sqrt{\\epsilon_o\\mu_o}}\\)  where the index of refraction \\(n=\\sqrt{\\epsilon_r\\mu_r}\\)</p> <ul> <li>The dispersion relation becomes \\(w=vk=ck/n\\) hence\\(k=nk_0\\ where\\ k_0 \\ is\\ the\\ wave\\ number\\ in\\ vaccum\\)</li> </ul>"},{"location":"GP/light/light/#reflection-and-refraction","title":"Reflection and Refraction","text":"<ul> <li>Law of reflection: A reflected ray lies in the plane of incidence and has an angle of reflection equal to the angle of incidence (both relative to the normal)</li> <li>Law of refraction: A refracted ray lies in the plane of incidence and has an angle of refraction \\(\u03b8_2\\) that is related to the angle of incidence \\(\u03b8_1\\) by \\(n_2sin\\theta_2=n_1sin\\theta_1\\)  (Snell\u2019s law.)</li> </ul>"},{"location":"GP/light/light/#total-internal-reflection","title":"Total Internal Reflection","text":""},{"location":"GP/light/light/#fermats-principle","title":"Fermat\u2019s Principle","text":"<ul> <li>The actual path between two points taken by a beam of light is the one that is traversed in the least time.</li> <li>For a homogeneous medium the principle reduces to the law of the rectilinearity of a ray of light (in accordance with the axiom of geometry that a straight line is the shortest distance between two points).</li> </ul> <p>\\(Derivation\\)</p> <ul> <li>Reflection(simple ignore)</li> <li>Refraction</li> </ul> <p></p> <p>\\(t(x)=\\frac{\\bar{SO}}{v_i}+\\frac{\\bar{OP}}{v_t}=\\frac{\\sqrt{x^2+h^2}}{\\frac{c}{n_i}}+\\frac{\\sqrt{(a-x)^2+b^2}}{\\frac{c}{n_t}}\\)</p> <ul> <li>To minimize \\(t(x)\\) with respect to variations in x, we set \\(dt/dx = 0\\)</li> </ul> <p>\\(\\frac{dt}{dx}=\\frac{n_i}{c}\\frac{x}{\\bar{SO}}-\\frac{n_t}{c}\\frac{a-x}{\\bar{OP}}=0\\)</p> <p>Thus \\(n_isin\\theta_i=n_tsin\\theta_t\\)</p>"},{"location":"GP/light/light/#huygens-principle","title":"Huygens\u2019 Principle","text":"<p>Huygens\u2019 principle is: All points on a wavefront serve as point sources of spherical secondary wavelets. After a time \\(t\\), the new position of the wavefront will be that of a surface tangent to these secondary wavelets.</p> <ul> <li>Reflection</li> </ul> <p></p> <p>Thus , We get Law of reflection.</p> <ul> <li>Refraction</li> </ul> <p></p> <p>\\(\\triangle t = \\frac{\\triangle l\\ tan\\theta_1}{v_1}\\)</p> <p>\\(R=v_2 \\cdot \\triangle t\\)</p> <p>\\(v_i=\\frac{c}{n_i}\\)</p> <p>\\(\\Rightarrow R=\\frac{n_1}{n_2}\\triangle l \\cdot tan\\theta_1\\)</p> <p>\\(sin\\theta_2=\\frac{R}{\\frac{\\triangle l}{cons\\theta_1}}\\)</p> <p>\\(\\Rightarrow n_1sin\\theta_1=n_2sin\\theta_2\\)</p> <p>Thus We get Law of refraction. </p>"},{"location":"GP/light/light/#the-electromagnetic-approach","title":"The Electromagnetic Approach","text":"<p>\\(\\vec{E}_i = \\vec{E}_{0i}cos(\\vec{k}_i \\cdot\\vec{r}\u2212\u03c9_it)\\)</p> <p>\\(\\vec{E}_r = \\vec{E}_{0r}cos(\\vec{k}_r \\cdot\\vec{r}\u2212\u03c9_rt+\\phi_r)\\)</p> <p>\\(\\vec{E}_t = \\vec{E}_{0t}cos(\\vec{k}_t \\cdot\\vec{r}\u2212\u03c9_tt+\\phi_t)\\)</p> <ul> <li>Above the surface : \\(\\vec{E}=\\vec{E_i}+\\vec{E_r}\\)</li> <li>Below the surface \\(\\vec{E}=\\vec{E_t}\\)</li> <li>For simplicity, we consider the case that \\(\\vec{E_{0i}}\\)\\(\\vec{E_{0r}}\\ \\vec{E_{0t}}\\)  are constant in time </li> </ul> <p>\\(Boundary\\ conditions\\)</p> <ul> <li>Draw a narrow closed path C that runs parallel to the interface inside bot media. According to the Faraday's Induction Law,we have \\(\\oint\\vec{E}\\cdot d\\vec{s}=-\\frac{d\\Phi_B}{dt}\\)</li> </ul> <p></p> <ul> <li>The loop can be made so narrow such that there is no flux through C.</li> <li>Define \\(\\hat{u}_n\\)to be the unit vector normal to the interface</li> <li>The boundary condition leads to :\\((\\vec{E}_i+\\vec{E}_r-\\vec{E}_t)\\)perpendicular to \\(\\vec{l}\\)  thus parallel to  \\(\\vec{u_n}\\) </li> </ul> <p>\\(\\hat{u}_n \\times (\\vec{E}_i+\\vec{E}_r)-\\hat{u}_n \\times \\vec{E}_t=0\\)  which is satisfied for all values of time and at any point on the interface.</p> <p>Thus, we have :</p> <p>\\(\\begin{align*}&amp;\\hat{u}_n \\times \\vec{E}_{0i}cos(\\vec{k}_i \\cdot\\vec{r}\u2212\u03c9_it)+\\hat{u}_n \\times \\vec{E}_{0r}cos(\\vec{k}_r \\cdot\\vec{r}\u2212\u03c9_rt+\\phi_r)\\\\ &amp;= \\hat{u}_n \\times  \\vec{E}_{0t}cos(\\vec{k}_t \\cdot\\vec{r}\u2212\u03c9_tt+\\phi_t) \\end{align*}\\)</p> <ul> <li>This can only be satisfied if \\(\u03c9_i = \u03c9_r = \u03c9_t\\), which means the charged particles within the media are undergoing forced oscillations at the frequency of the incident wave.</li> <li>Furthermore, for any  \\(\\vec{r}\\) terminating on the interface</li> </ul> <p>\\((\\vec{k_i}\\cdot \\vec{r})|_{y=b}=(\\vec{k_r}\\cdot \\vec{r}+\\phi_r)|_{y=b}=(\\vec{k_t}\\cdot \\vec{r}+\\phi_t)|_{y=b}\\)</p> <p>Thus,We have \\((\\vec{k_i}-\\vec{k_r})|_{y=b}=\\phi_r\\) or \\((\\vec{k}_i-\\vec{k_r})\\cdot(\\vec{r_1}-\\vec{r_2})=0\\) for any pair of \\(\\vec{r_1}\\) and \\(\\vec{r_2}\\) terminating on the interface.</p> <p>For $\\hat{u_n}\\cdot (\\vec{r_1}-\\vec{r_2})=0 $,we know \\((\\vec{k_i}-\\vec{k_r})\\) is parallel to \\(\\hat{u_n}\\) or \\(k_isin\\theta_i=k_rsin\\theta_r\\)\u300cREFLECTION LAW\u300d</p> <p>Since the incident and reflected waves are in the same medium, \\(k_i = k_r\\) , so, finally, \\(\u03b8_i = \u03b8_r\\) (the law of reflection).</p> <ul> <li>Similarly \\((\\vec{k_i}-\\vec{k_t})\\) is also parallel to \\(\\hat{u_n}\\)  we have:</li> </ul> <p>\\(\\vec{k_i}\\times\\hat{u_n}=\\vec{k_t}\\times\\hat{u_n}\\)</p> <p>Or.  \\(n_i(\\hat{k_i}\\times\\hat{u_n})=n_t(\\hat{k_t}\\times\\hat{u_n})\\)\u300cREFRACTION LAW\u300d</p> <ul> <li> <p>Note that the law of reflection and the law of refraction only rely on the phase relationship that exists among the phases of \\(\\vec{E}_{0i}\\), \\(\\vec{E}_{0r}\\) and \\(\\vec{E}_{0t}\\)  at the boundary.</p> </li> <li> <p>There is still an interdependence shared by the amplitudes \\(\\vec{E}_{0i}\\), \\(\\vec{E}_{0r}\\) and \\(\\vec{E}_{0t}\\). The additional constraint can be used to calculate the amplitude of the reflected wave and the transmitted wave (the Fresnel equations). This will lead to the phenomenon of polarization by reflection (to be discussed in the lecture on polarization).</p> </li> </ul>"},{"location":"GP/light/light/#geometrical-optics","title":"Geometrical Optics","text":""},{"location":"GP/light/light/#spherical-mirrors","title":"Spherical Mirrors","text":"<ul> <li>Store surveillance mirrors are usually convex to take advantage of the increase in the field of view \u2014 more of the store can then be seen with a single mirror.</li> <li>Makeup mirrors and shaving mirrors are concave \u2014 they produce a larger image of a face.</li> <li>For mirrors of both types, the focal length f is related to the radius of curvature r of the mirror by \\(f=r/2\\) where r is positive for a concave mirror and negative for a convex mirror.</li> </ul>"},{"location":"GP/light/light/#focal-points-of-spherical-mirrors","title":"Focal Points of Spherical Mirrors","text":"<p>\\(Proof\\)</p> <p></p>"},{"location":"GP/light/light/#images-from-spherical-mirrors","title":"Images from Spherical Mirrors","text":"<p>\\(\\frac{1}{p}+\\frac{1}{i}=\\frac{1}{f}\\)</p> <p>\\(Proof\\)</p> <ul> <li>We assume small angles (but for clarity the rays are drawn with exaggerated angles). </li> </ul> <p></p> <ul> <li>Clearly, When \\(p&gt;f\\) \\(i\\) is positive, indictaing a real image.</li> </ul> <p>When \\(p&lt;f\\) \\(i\\) is negative,indicating an imaginary image.</p> <ul> <li>\\(-\\frac{i}{p}\\) -- scaling factor</li> </ul> <p>When \\(i\\) &gt; 0 : an upsidedown real image</p> <p>When  \\(i\\) &lt;0 : an erect imaginary image</p> <p>\\(Proof\\)</p> <p></p>"},{"location":"GP/light/light/#spherical-refraction","title":"Spherical Refraction","text":"<p>\\(Proof\\)</p> <p></p> <ul> <li>Quite the same when convex(only \\(i\\) &amp; \\(r_0\\) Are negative)</li> </ul> <p></p> <p>Thus \\(f\\) for convex lens is positive , for concave lens is negative</p> <p></p> <p>\\(Proof\\)</p> <p></p> <p> </p> <p>It can also be applied for any number of lenses. </p> <p>The overall (or net) lateral magnification M of a system of lenses (or lenses and a mirror) is the product of the individual lateral magnifications as given by \\(m = \u2212i/p\\).</p>"},{"location":"GP/light/light/#application","title":"Application","text":"<p>The normal human eye can focus a sharp image of an object on the retina if the object is located beyond the near point (\u223c 25 cm from the eye).</p> <p>To see better, we want to generate an magnified image of an object at the near point, instead of putting the object there.</p> <p></p> <p></p> <ul> <li> <p>Explain eg \\(p2\\) : \\(\\frac{1}{p_2}+\\frac{1}{i_2}=\\frac{1}{f}\\) but \\(i_2&lt;0\\),Thus if we want \\(|i_2|\\)to be large ,\\(p_2\\) has to be relatively large, but also \\(p_2\\)has to be smaller than \\(f_{ey}\\) , thus \\(p2 &lt;\\approx f_{ey}\\).</p> </li> <li> <p>This leaves the distance between the two lenses \\(f_{ob} + s + f_{ey}\\) the only parameter to tune. The longer the distance, the larger the magnification</p> </li> </ul> <p>\\(M = m_1m_2 \\approx -\\frac{f_{ob}+s}{f_{ob}}\\frac{25}{f_{ey}}\\) </p> <ul> <li>We can make \\(s \u226b fob\\), so \\(M \u2248 \u2212(s/f_{ob})(25 cm/f_{ey})\\)  (s still limited by the practical sizes of microscope)</li> </ul> <p></p> <p></p>"},{"location":"GP/light/df/diffraction/","title":"Diffraction &amp; Interference","text":""},{"location":"GP/light/df/diffraction/#plane-wave","title":"plane wave","text":"<p>A plane wave is a type of wave whose wavefronts are flat, or nearly flat. This means that the wave crests and troughs are aligned along parallel lines. Plane waves are an important concept in physics and are often used to describe various types of waves, including electromagnetic waves and sound waves.</p> <p>Key characteristics of a plane wave include:</p> <ol> <li> <p>Constant Phase Front: In a plane wave, all points on a wavefront have the same phase. The phase of a wave is a measure of the position of a point in its cycle relative to a reference point.</p> </li> <li> <p>Parallel Propagation: The wavefronts of a plane wave propagate in parallel lines. This is in contrast to spherical waves, where the wavefronts are spheres centered around the source.</p> </li> <li> <p>Mathematical Representation: Mathematically, a one-dimensional plane wave can be represented as a function of the form:</p> </li> </ol> <p>\\(Acos\u2061(kx\u2212\u03c9t+\u03d5)\\)</p> <p>where:</p> <ul> <li>A is the amplitude of the wave,</li> <li>k is the wave number (related to the wavelength),</li> <li>x is the spatial coordinate,</li> <li>\u03c9 is the angular frequency,</li> <li>t is time, and</li> <li>\u03d5 is the phase angle.</li> </ul> <ol> <li>Infinite Extent: In theoretical discussions, plane waves are often assumed to have infinite extent, meaning they continue indefinitely in space.</li> </ol> <p>Plane waves are useful in physics because they simplify the mathematical description of wave phenomena, making it easier to analyze and solve problems. They are often used as a starting point for understanding more complex wave behavior. In the context of electromagnetic waves, for example, plane waves are fundamental to the study of optics and electromagnetic field theory.</p>"},{"location":"GP/light/df/diffraction/#single-slit-diffraction","title":"Single-Slit Diffraction","text":""},{"location":"GP/light/df/diffraction/#electric-field-and-intensity","title":"Electric Field and Intensity","text":"<p>To find an expression for the intensity at an arbitrary point P on the viewing screen, corresponding to a particular small angle \u03b8, we need to divide the slit into N zones of equal widths \\(\u2206x = a/N\\) small enough that we can assume each zone acts as a source of Huygens wavelets.</p> <p>We then add the phasors for the wavelets, which form a geometric series(notice.   \\(r_{i+1}\u2212r_i =\u2206xsin\u03b8\\)):</p> <p>\\(\\widetilde{E}_\\theta =\\frac{E_0}{N}e^{-iwt}e^{ikr+1}\\times [1+e^{ik(r_2-r_1)}+e^{ik(r_3-r_1)}+\u2026+e^{ik(r_N-r_1)}]\\)</p> <p></p> <p>note \\(\\Phi\\)=\\(\\frac{asin\\theta}{\\lambda}\\times2\\pi\\)</p> <p>Summary</p> <ul> <li>When \\(\\alpha=0 (\\theta=0)\\),the intensity reaches the maximum</li> <li>When \\(\\alpha =n\\pi(n\\ne0)\\),which is   \\(asin\\theta=n\\lambda\\)    the intensity is ZERO</li> <li>When a is approximately large \\(\\theta\\) is rather small ,meaning that there is no diffraction</li> </ul> <p></p> <p></p>"},{"location":"GP/light/df/diffraction/#from-sum-to-integral","title":"From Sum to Integral","text":"<p>\\(\\begin{align*}\\widetilde{E}_\\theta &amp;=\\frac{E_0}{N}e^{-iwt}e^{ikr+1}\\times [1+e^{ik(r_2-r_1)}+e^{ik(r_3-r_1)}+\u2026+e^{ik(r_N-r_1)}]\\\\&amp;=\\frac{E_0 \\triangle x}{a}e^{-iwt}[e^{ikr_1}+e^{ikr_2}+\u2026+e^{ikr_N}]\\end{align*}\\)</p> <p>\\(\\Rightarrow_{N\\to+\\infty} \\widetilde{E}_\\theta = \\frac{E_0}{a} e^{-iwt}\\int_0^ae^{ik\uff08sin\\theta x+r_1\uff09}dx\\) ~ \\(\\int_{-a/2}^{a/2}e^{ik_xx}dx\\) \\((k_x=ksin\\theta)\\)</p>"},{"location":"GP/light/df/diffraction/#fourier-transform","title":"Fourier Transform","text":"<p>Thus \\(\\widetilde{E}_{sq}(k_x)= E_0a\\frac{2sin(k_xa/2)}{k_x}=E_0a\\frac{sin\\alpha}{\\alpha}(\\alpha=k_xa/2=\\frac{sin\\theta a}{2})\\)</p> <p>The key message is that the field distribution in the Fraunhofer diffraction pattern is the Fourier transform of the field distribution across the aperture.</p>"},{"location":"GP/light/df/diffraction/#diffraction-by-a-circular-aperture","title":"Diffraction by a Circular Aperture","text":"<p>We are essentially collecting only a fraction of the incident wavefront and therefore cannot hope to form a perfect image.  The image is related to the Fourier transform of a disk and is known as the Airy pattern.</p> <p>The analysis of such patterns shows that the first minimum for the diffraction pattern of a circular aperture of diameter a is located by \\(sin\\theta = 1.22\\frac{\\lambda}{a}\\)    in contrast to \\(sin \u03b8 = \u03bb/a\\) in the slit case.</p>"},{"location":"GP/light/df/diffraction/#resolvability","title":"Resolvability","text":"<p>Two objects cannot be distinguished from a single point object, if their diffraction patterns (mainly their central maxima) overlap.  Rayleigh\u2019s criterion for resolvability states that the two point objects are barely resolved if their angular separation is such that the central maximum of the diffraction pattern of one source is centered on the first minimum of the diffraction pattern of the other, i.e.\\(\u03b8_R = sin^{\u22121} \\frac{1.22\u03bb}{a} \u2248 1.22\\frac{\\lambda}{a}\\)</p> <ul> <li>Quesiton\uff1f QUIZ</li> </ul>"},{"location":"GP/light/df/diffraction/#grating-and-spectra","title":"Grating and Spectra","text":""},{"location":"GP/light/df/diffraction/#diffraction-by-a-double-slit","title":"Diffraction by a Double Slit","text":"<p>Formally, with diffraction effects taken into account, the intensity of a double-slit interference pattern (shown later with the Fourier method) is</p> <p>\\(I(\\theta)=I_{max}(\\frac{sin\\alpha}{\\alpha})^2cos^2\\beta\\)  where \\(\\beta = \\frac{\\delta_2}{2}=\\frac{\\pi}{\\lambda}dsin\\theta\\) \\(\\alpha = \\frac{\\pi}{\\lambda}asin\\theta\\)</p> <ul> <li>The first minimum occurs where the phase difference between the two slits (N = 2) is \\(\u03b4_2 =(2\u03c0/\u03bb)dsin\u03b8=\u03c0.\\)</li> <li>The first minimum of the envelope occurs where the phase difference between one edge and the center of a single slit is \\(\u03b1 = (2\u03c0/\u03bb)(a/2) sin \u03b8 = \u03c0.\\)</li> <li>One can, therefore, determine (d/a) by counting fringes.</li> <li>In both cases, the larger the length (d or a) is, the smaller the \\(\u03b8\\)  (or \\(k_x =ksin\u03b8\\)  ) is.</li> </ul>"},{"location":"GP/light/df/diffraction/#derivation","title":"Derivation","text":"<p>The interference pattern can be understood by a convolution theorem for the Fourier transformation: The transform\uff08Fourier\uff09 of the convolution of two functions \\((f*g)\\) is the product of their transforms.</p> <p>\\(Proof\\)</p> <p>\\((f*g)(x)=\\int dx\\int dx'f(x')g(x-x')e^{ikx}\\\\=\\int f(x')e^{ikx'}d x'\\int dx\\ g(x-x')e^{ik(x-x')}\\)</p> <p>Thus</p> <ul> <li> <p>The single-slit aperture function :\\(F[E_{sq}(x)]=\\widetilde{E}_{sq}(k_x)=\\int_{-a/2}^{a/2}E_0e^{ikx}dx= E_0a\\frac{2sin(k_xa/2)}{k_x}=E_0a\\frac{sin\\alpha}{\\alpha}(\\alpha=k_xa/2=\\frac{sin\\theta a}{2})\\)</p> </li> <li> <p>Young\u2019s double-slit interference result\uff1a</p> </li> </ul> <p>Young's double-slit interference result is related to the interference pattern formed by two narrow slits. The function h(x) describes the distribution of intensity along the screen where the interference pattern is observed. In this case, h(x) is represented as a sum of two delta functions:</p> <p>\u200b   \\(h(x) = \u03b4(x + d/2) + \u03b4(x \u2212 d/2)\\)</p> <p>Here, d is the separation between the two slits, and \u03b4(x) is the Dirac delta function. The Dirac delta function is a mathematical concept often used in physics to model idealized distributions. It is not a traditional function but rather a distribution that satisfies certain properties. In this context, \u03b4(x) can be thought of as an infinitely tall and narrow spike located at x=0.</p> <p>\u200b   \\(F[h(x)]=\\int_{-\\infty}^{+\\infty} h(x)e^{ik_xx}dx= e^{-ik_xd/2}+e^{ik_xd/2}=2cos(k_xd/2)\\)</p>"},{"location":"GP/light/df/diffraction/#interference-vs-diffraction","title":"Interference vs Diffraction","text":"<p>If we let \\(a\u21920\\), then \\(\u03b1\u21920\\) and\\(\\frac{sin\\alpha}{\\alpha}\u21921\\). Our result then reduces, as it must, to an equation describing the interference pattern for a pair of vanishingly narrow slits with slit separation d. </p> <p>Similarly, putting \\(d \u2192 0\\) is equivalent physically to causing the two slits to merge into a single slit of width a. Then we have \\(\u03b2\u21920\\)  and \\(cos2\u03b2\u21921\\). Our result reduces,as it must,to an equation describing the diffraction pattern for a single slit of width a.</p> <p>If the combining waves originate from a small number of elementary coherent sources \u2014 as in a double-slit experiment with a \u226a \u03bb \u2014 we call the process interference.</p> <p>If the combining waves originate in a single wavefront \u2014 as in a single-slit experiment \u2014 we call the process diffraction.</p> <p>Note that both are superposition effects and usually both are present simultaneously.</p>"},{"location":"GP/light/df/diffraction/#diffraction-gratings","title":"Diffraction Gratings","text":"<p>In double-slit interference with a \u226a \u03bb  \\(I(\u03b8) = I_{max}cos^2 [\\frac{\u03c0d}{\\lambda} sin\u03b8]\\)</p> <p>The bright fringes due to different wavelengths overlap too much to be distinguished.</p> <p>A useful tool in the study of light and of objects that emit and absorb light is the diffraction grating, which has a much greater number N of slits, often called rulings, perhaps as many as several thousand per millimeter.</p> <p></p>"},{"location":"GP/light/df/diffraction/#multiple-slits-with-monochromatic-light","title":"Multiple Slits with Monochromatic Light","text":"<ul> <li>When N=3</li> </ul> <p>Figure below shows the simplest case of multiple-slit interference, with three slits, or \ud835\udc41=3. The spacing between slits is d, and the path length difference between adjacent slits is \ud835\udc51sin\ud835\udf03, same as the case for the double slit. What is new is that the path length difference for the first and the third slits is 2\ud835\udc51sin\ud835\udf03. The condition for constructive interference is the same as for the double slit, that is \\(dsin\\theta=m\\lambda\\)</p> <p>When this condition is met, 2\ud835\udc51sin\ud835\udf03 is automatically a multiple of \ud835\udf06, so all three rays combine constructively, and the bright fringes that occur here are called principal maxima. But what happens when the path length difference between adjacent slits is only \ud835\udf06/2? We can think of the first and second rays as interfering destructively, but the third ray remains unaltered. Instead of obtaining a dark fringe, or a minimum, as we did for the double slit, we see a secondary maximum with intensity lower than the principal maxima.</p> <p></p> <ul> <li>In general</li> </ul> <p>In general, for N slits, these secondary maxima occur whenever an unpaired ray is present that does not go away due to destructive interference. This occurs at (\ud835\udc41\u22122) evenly spaced positions between the principal maxima. </p> <p>The amplitude of the electromagnetic wave is correspondingly diminished to 1/\ud835\udc41 of the wave at the principal maxima, and the light intensity, being proportional to the square of the wave amplitude, is diminished to \\(\\frac{1}{N^2}\\) of the intensity compared to the principal maxima. </p> <p>As figure below shows, a dark fringe is located between every maximum (principal or secondary). As N grows larger and the number of bright and dark fringes increase, the widths of the maxima become narrower due to the closely located neighboring dark fringes. Because the total amount of light energy remains unaltered, narrower maxima require that each maximum reaches a correspondingly higher intensity.</p> <p></p> <p></p> <p>\\(Phase\\ difference\\) </p> <p>\\(\\delta_N=\\frac{2\\pi}{\\lambda}dsin\\theta\\)</p> <p>Consider the example below when N equals 4</p> <p></p> <ul> <li>With monochromatic (red) light incident on a diffraction grating (with a large number N), you would see on a viewing screen very narrow(and so are called lines) ,separated by relatively wide dark regions</li> </ul>"},{"location":"GP/light/df/diffraction/#width-of-the-lines","title":"Width of the Lines","text":"<p>A grating\u2019s ability to resolve (separate) lines of different wavelengths depends on the linewidth.  The half-width of the central line \\(\u2206\u03b8_{hw}\\) is determined by the first minimum in intensity, at which the N rays from the N slits of the grating cancel one another.</p> <p>The first minimum occurs where the phase difference between the adjacent slits is (from the path length difference between the top and bottom rays) </p> <p>\\(\\delta_N=\\frac{2\\pi}{\\lambda}dsin\\triangle\\theta_{hw}=\\frac{2\\pi}{N}\\)</p> <p>Or \\(\\triangle\\theta_{hw}\\approx sin\\triangle\\theta_{hw}=\\frac{\\lambda}{Nd}\\)</p> <p></p>"},{"location":"GP/light/df/diffraction/#atomic-grating","title":"Atomic Grating","text":"<p>A crystalline solid, which consists of a regular array of atoms, resembles a diffraction grating with separation d on the atomic scale (\u223c \\(10^{\u221210}\\) m).</p> <p>Waves can be diffracted as if they were reflected by a family of parallel planes, with angles measured relative to the planes (not to a normal as in optics).</p> <p></p> <p>NOTE : The distance difference is now approximately \\(2dsin\\theta\\)</p> <p>Suppose we would like to use the visible light \\((\u03bb \u2243 5.5 \u00d7 10^{\u22127} m)\\) to study the diffraction. The first-order maximum (m = 1) would occur at \\(sin \u03b8 = \\frac{m\u03bb}{2d} = 2750 \u226b 1.\\)</p> <p>This means that we would not observe the first-order maxima.  Therefore, we need waves with much shorter wavelength \\((\u03bb \u2248 d)\\), that is, X rays.</p>"},{"location":"GP/light/df/diffraction/#x-ray-diffraction","title":"X-Ray Diffraction","text":"<p>Wilhelm Roentgen discovered X rays in 1895. He realized that these rays could be used to pass through, e.g., his wife\u2019s hand and to create an image of internal bones.</p> <p>The invention of X rays helped revolutionize modern medicine, evolving into what we use today, called the digital X-ray.</p> <p></p> <p>The maxima turns out to be in directions as if the x rays were reflected by a family of crystal planes that extend through the atoms within the crystal and that contain regular arrays of the atoms.</p> <p>Bragg\u2019s law states that the intensity maxima for X-ray diffraction is \\(2d sin\u03b8 = m\u03bb\\)  where \\(m = 1,2,3,...\\) is the order number of an intensity maximum.  A monochromatic X-ray beam can be used to determine the geometrical structure of a crystal.</p>"},{"location":"GP/light/df/diffraction/#crystallography-miller-indices","title":"Crystallography: Miller Indices","text":"<p>Miller Indices are a symbolic vector representation for the orientation of an atomic plane in a crystal lattice and are defined as the reciprocals of the fractional intercepts which the plane makes with the crystallographic axes.</p> <p>The method by which indices are determined is best shown by example. Recall, that there are three axes in crystallographic systems (except sometimes in the hexagonal system adopts a convention where there are four axes). Miller indices are represented by a set of 3 integer numbers.</p> <p></p> <ul> <li>Diffraction patterns are analyzed by a curve fitting procedure, with least-squares minimization between observed data and calculated pattern.</li> </ul> <p></p> <p>(2,0,0) half of (1,0,0) Thus,\\(\\theta\\) is different</p>"},{"location":"GP/light/df/diffraction/#applications","title":"Applications","text":"<ul> <li>The Discovery of the DNA Structure</li> </ul> <p>X-ray diffraction from fibrous DNA (by Rosalind Franklin and her student R. G. Gosling) tipped off Watson and Crick to double helix. Watson and Crick also knew from the work of Erwin Chargaff that adenine and thymine bases and guanine and cytosine bases were always present in approximately equal amounts. </p> <p></p>"},{"location":"GP/light/quantum%20light/quantum/","title":"The Quantum Nature of Light","text":""},{"location":"GP/light/quantum%20light/quantum/#the-photoelectric-effect","title":"The Photoelectric Effect","text":"<p>Experiments show that if you direct a beam of light of short enough wavelength onto a clean metal surface, the light will eject the electrons from the surface.</p> <p>We adjust the potential difference V by moving the sliding contact so that the potential of collector C is slightly negative with respect to target T. </p> <p>At the stopping potential \\(V = V_{stop}\\), the reading of meter A has just dropped to zero, the most energetic ejected electrons are turned back just before reaching the collector.</p>"},{"location":"GP/light/quantum%20light/quantum/#puzzle-1-for-classical-physics","title":"Puzzle 1 for Classical Physics","text":"<p>Measurements show that for light of a given frequency, \\(K_{max}\\) does not depend on the intensity of the light source.</p> <p>However,in the classical theory, however, if we increase the amplitude of the wave and its oscillating electric field, the electron should get a more energetic \u201ckick\u201d.</p> Why Strange? <ol> <li> <p>The incident light is a sinusoidally oscillating electromagnetic wave. </p> <p>An electron in the target should oscillate sinusoidally due to the oscillating electric force on it from the wave\u2019s electric field.</p> <p>If the amplitude of the electron\u2019s oscillation is great enough, the electron should break free of the target\u2019s surface \u2013 that is, be ejected from the target.</p> </li> </ol>"},{"location":"GP/light/quantum%20light/quantum/#puzzle-2-for-classical-physics","title":"Puzzle 2 for Classical Physics","text":"<p>Experiments show that the photoelectric effect does not occur if the frequency is below a certain cutoff value \\(f_0\\) ,no matter how intense the incident light is.</p>"},{"location":"GP/light/quantum%20light/quantum/#sum","title":"Sum","text":"<p>In the classical theory, light is viewed as an electromagnetic wave.</p> <p>One expects that no matter how low the frequency, electrons can always be ejected by light if they are supplied with enough energy \u2014 that is, if one uses a light source that is bright enough.</p> <p>In experiments, however, electrons can escape only if the light frequency exceeds a certain value, and the escaping electron\u2019s kinetic energy is greater for a greater light frequency.</p> <p>Einstein proposed that electromagnetic radiation (or simply light) is quantized and exists in elementary amounts (quanta) that we now call photons.  According to his proposal, the quantum of a light wave of frequency f has the energy \\(E = hf = \\bar{h}\u03c9\\), where \\(h = 2\u03c0\\bar{h} = 6.63 \u00d7 10^{\u221234} J\u00b7s\\) is the Planck constant, and \u03c9 is the angular frequency.  The total energy of a light wave of frequency f must be an integer multiple of \\(hf\\) , with the smallest amount being \\(hf\\) ,the energy of a single photon.</p> <p>Einstein further proposed that when light is absorbed or emitted by an object (matter), the absorption or emission event occurs in the atoms of the object.</p> <p>In the absorption event, the energy \\(hf\\) of one photon is transferred from the light to the atom; the photon vanishes and the atom is said to absorb it.</p> <p>For an object consisting of many atoms, there can be many photon absorptions (such as with sunglasses) or photon emissions (such as with lamps). </p> <p>In classical physics, such events involve so much light that we had no need of quantum physics.</p>"},{"location":"GP/light/quantum%20light/quantum/#photon-the-quantum-of-light","title":"Photon, the Quantum of Light","text":"<p>Back to the Photoelectric Effect\uff0cthe electrons within the target are held by electric forces. To just escape from the target, an electron must pick up a certain minimum energy \\(W\\) , where \\(W\\) is a property of the target material called its work function.</p> <p>The energy that can be transferred from the incident light to an electron in the target is that of a single photon \\(hf\\) . According the conservation of energy, the kinetic energy K acquired by the electron satisfies. \\(hf = K + W\\) .</p> <p>In the most favorable circumstance, the electron can escape through the surface without losing any of this kinetic energy in the process. (i.e. \\(K_{max} = hf \u2212 W\\) ).</p> <p>Increasing the light intensity increases the number of photons in the light, not the photon energy, so the energy transferred to the kinetic energy of an electron is also unchanged. This solves puzzle #1.</p> <p>If the energy hf transferred to an electron by a photon exceeds the work function of the material (if \\(hf &gt; W\\) ), the electron can escape the target. If the energy transferred does not exceed the work function (that is, if \\(hf &lt; W\\) ), the electron cannot escape. This solves puzzle #2.</p>"},{"location":"GP/light/quantum%20light/quantum/#photon-momentum-and-compton-scattering","title":"Photon Momentum and Compton Scattering","text":"<p>A photon, or a light quantum, is a particle with energy \\(E = hf\\) . It has a velocity of the speed of light c, but no mass (m = 0). In 1916, Einstein extended his concept of photons by proposing that a quantum of light has linear momentum. </p> <p>According to the theory of relativity, \\(E^2 \u2212 c^2p^2 = m^2c^4 = 0\\)  the magnitude of the photon momentum is. \\(p = \\frac{hf}{c} = \\frac{h}{\\lambda} = \\bar{h}k\\)</p>"},{"location":"GP/light/quantum%20light/quantum/#compton-scattering","title":"Compton Scattering","text":"<p>When a photon interacts with matter, energy and momentum are transferred, as if there were a collision between the photon and matter in the classical sense.</p> <p>To demonstrate, Arthur Compton measured the wavelengths and intensities of a beam of X rays that were scattered  in various directions from a carbon target.</p> <p></p> <p></p> <p>Compton found that although there is only a single wavelength \\((\u03bb = 71.1 pm)\\) in the incident X-ray beam, the scattered X rays contain a range of wavelengths with two prominent intensity peaks.</p> <ul> <li>One peak is centered about the incident wavelength \\(\u03bb\\).</li> <li>The other is centered about a wavelength \\(\u03bb^\u2032\\) that is longer than \\(\u03bb\\) by an amount \\(\u2206\u03bb\\), the Compton shift.</li> <li>The value of the Compton shift varies with the angle at which the scattered X rays are detected and is greater for a greater angle</li> </ul> <p>In classical physics, an electron in the carbon target undergoes forced oscillations in the sinusoidally oscillating electromagnetic wave. Hence, the electron should send out scattered waves at the same frequency. </p> <p></p> <p>With quantum physics and relativity, the energy and momentum conservation becomes \u300cImportant\u300d</p> <p>\\(\\begin{align*} \\frac{hc}{\\lambda}+mc^2&amp;=\\frac{hc}{\\lambda^{'}}+\\gamma mc^2 \\ (energy) \\\\ \\frac{h}{\\lambda}&amp;=\\frac{h}{\\lambda'}cos\\phi+\\gamma mvcos\\theta\\ (momentun\\ in\\ x) \\\\ 0&amp;=\\frac{h}{\\lambda'}sin\\phi-\\gamma mvcos\\theta\\ (momentun\\ in\\ y)\\end{align*}\\)</p> <p>where \\(\\gamma =\\sqrt{\\frac{1}{1-\\frac{v^2}{c^2}}}\\)</p> <p></p> <p>The quantity \\(h/mc\\) is a constant called the Compton wavelength. Its value depends on the mass m of the particle from which the X rays scatter.</p> <ul> <li>The Compton wavelength of a particle corresponds to the wavelength of a photon whose energy is the same as the rest mass energy of the particle.</li> </ul> <p>Strictly speaking, the particle can be a loosely boundelectron, or a carbon atom (with tightly bound electrons). </p> <ul> <li> <p>For an electron, the Compton wavelength is \\(\\frac{h}{mc}= \\frac{hc}{mc^2} =\\frac{12400eV\u00b7A\u030a}{511000eV}=2.426pm\\)</p> </li> <li> <p>For a carbon atom, the Compton wavelength is \\(12 \u00d7 m_u /m_e \u2248 12 \u00d7 1836 \u2248 22, 000\\) times smaller and, hence, can be neglected. Therefore, there is a peak at the incident wavelength at any angle.</p> </li> </ul>"},{"location":"GP/light/quantum%20light/quantum/#appendix-ex","title":"Appendix ex","text":"<ul> <li>We can derive that \uff1a\\(tan\\theta=\\frac{sin\\phi}{\\frac{\\lambda}{\\lambda^{'}}-cos\\phi}\\) where \\(\\theta\\) is the scattering angle of the say, electrons.</li> </ul>"},{"location":"GP/light/quantum%20light/quantum/#angular-momentum-of-photons-and-polarization","title":"Angular Momentum of Photons and Polarization","text":"<p>According to the quantum-mechanical description, a photon also has an intrinsic spin angular momentum, which is either \\(\u2212\\bar{h}\\) or \\(+\\bar{h}\\), where the signs indicate right- or left-handedness, respectively.</p> <p>Whenever a charged particle emits or absorbs electromagnetic radiation, along with changes in its energy and linear momentum, it will undergo a change of \\(\u00b1\\bar{h}\\)  in its angular momentum.</p> <p>The energy transferred to a target by an incident monochromatic electromagnetic wave can be envisaged as being transported in the form of a stream of identical photons.</p> <p></p> <p>A beam of linearly polarized light will interact with matter as if it were composed, at that instant, of equal numbers of right- and left-handed photons.  There is a subtle point. Strictly speaking, we cannot say that the beam is actually made up of precisely equal amounts of well-defined right- and left-handed photons; the photons are all identical.</p> <p>Rather, each individual photon exists in either spin state with equal likelihood.</p> <p>\\(|H\u27e9 =\\frac{|R\u27e9+|L\u27e9}{\\sqrt{2}} = \\frac{1}{\\sqrt{2}}[\\frac{1}{\\sqrt{2}}\\begin{pmatrix}1\\\\-i\\end{pmatrix} +\\frac{1}{\\sqrt{2}}\\begin{pmatrix}1\\\\i\\end{pmatrix}]\\)</p> <p></p>"},{"location":"GP/light/quantum%20light/quantum/#appendix-21a-quantum-key-distribution","title":"Appendix 21A: Quantum Key Distribution","text":"<p>Goal: To send encrypted messages that cannot be understood by anyone but the designated recipient. </p> <p>Message is a whole number \\(m\\) (e.g., represented by the dots and dashes of Morse code as ones and zeros.)</p> <p>An encryption is a function \\(f : m \u2192 f (m)\\), agreed on between Alice (sender) and Bob (recipient) but unknown to Eve (a possible eavesdropper).</p> <p>Problem: If the same encryption is used many times, Eve can usually deduce the nature of the encryption and read the messages (by, e.g., frequency analysis).</p> <p>Classical solution: Let the encryption depend on a frequently changed key, which can be regarded as another whole number \\(k\\). The encrypted message is now \\(f (m, k)\\).  New problem: Alice and Bob must frequently exchange messages to establish new keys, and these new messages too may be intercepted by Eve. Quantum solution: It is not possible to measure any quantity without changing an unknown state vector to one in which that quantity has some definite value.</p>"},{"location":"GP/light/quantum%20light/quantum/#the-bb84-protocol-bennet-brassard-1984","title":"The BB84 Protocol (Bennet &amp; Brassard, 1984)","text":"<p>A protocol to establish a secured communication channel. More concretely, a scheme to enables us to detect the presence of an eavesdropper using polarized photons.</p> <ul> <li>Alice sends the key to Bob as a sequence of linearly polarized photons with polarization vectors of the form \\(\\vec{e} = (cos \u03b6 , sin \u03b6 )\\), where \\(\u03b6\\) are various angles.</li> <li>Alice represents ones and zeros by values of \u03b6 in either one of the two modes.</li> <li>Finally, Alice and Bob communicate over a classical, possibly public channel to compare their choices of basis for each bit. The bits for which Alice and Bob have used different bases are discarded.</li> </ul> <p></p> <p>What Can Eve Do?</p> <p>What Eve really wants is that Alice and Bob should establish a key that Eve knows, so that she can secretly read the messages sent from Alice to Bob.</p> <p>So Eve can intercept the photons sent by Alice, measure their polarizations, and then send substitute photons with these polarizations on to Bob.</p> <p>But Eve, like Bob, does not know the mode that Alice is using in choosing each photon polarization. So there is only a 50% chance that the substitute photon sent by Eve to Bob will have the same polarization that it had when it was sent by Alice.</p> <p>Can Alice and Bob Detect Eve?</p> <p>When Alice and Bob compare notes, they identity the photons that had been sent when Alice and Bob had by chance being used the same modes.</p> <p>Eve too may learn this information, but by then it is too late. There is only a 50% chance that Eve had used the same mode that Alice (and Bob) had used.\u300c\u6d4b\u4e0d\u51c6\u300d</p> <p>If Eve had used a different mode, there is still a 50% chance that Bob would have observed the same polarization that had been sent by Alice.</p> <p>Overall, Alice and Bob had 25% of the binary digits in the key that do not match; thus, they can detect Eve\u2019s intervention by comparing a part of the key.</p> <ol> <li>25%\u7684\u4e0d\u5339\u914d\u6982\u7387\uff1a \u5f53Eve\u4f7f\u7528\u4e86\u4e0d\u540c\u7684\u6a21\u5f0f\u8fdb\u884c\u6d4b\u91cf\u65f6\uff0c\u670950%\u7684\u6982\u7387Bob\u4f1a\u89c2\u5bdf\u5230\u4e0eAlice\u53d1\u9001\u65f6\u76f8\u540c\u7684\u504f\u632f\u3002\u56e0\u6b64\uff0c\u603b\u4f53\u4e0a\uff0cAlice\u548cBob\u7684\u5bc6\u94a5\u4e2d\u670925%\u7684\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u5339\u914d\uff0c\u56e0\u4e3a\u5728\u4e00\u534a\u7684\u60c5\u51b5\u4e0bEve\u53ef\u80fd\u622a\u83b7\u4e86\u76f8\u540c\u7684\u6a21\u5f0f\uff0c\u4f46\u53e6\u4e00\u534a\u7684\u60c5\u51b5\u4e0bBob\u89c2\u5bdf\u5230\u7684\u504f\u632f\u4e0eAlice\u53d1\u9001\u7684\u4e0d\u540c\u3002</li> </ol> <ul> <li>Why do we call this scheme quantum key distribution? </li> </ul> <p>After all, polarization is a classical concept. Which part of the BB84 depends crucially on the quantum concept and can be defeated in the classical world?</p> <p>Quantum no-cloning theorem: It is impossible to create an identical copy of an arbitrary unknown quantum state. Where is it needed?</p> <ul> <li>Take-home message: Eve will have success in preventing the construction of a key, but not in secretly learning a key that will be used by Alice and Bob. </li> <li>\u6d4b\u91cf\u7684\u4e0d\u786e\u5b9a\u6027\u4f7f\u5f97Eve\u65e0\u6cd5\u83b7\u53d6\u5b8c\u6574\u7684\u5bc6\u94a5\u4fe1\u606f\uff0c\u800c\u4e14\u4efb\u4f55\u5979\u7684\u5e72\u6270\u90fd\u4f1a\u88abAlice\u548cBob\u5bdf\u89c9\u5230\u3002</li> </ul>"},{"location":"GP/light/quantum%20light/quantum/#_1","title":"Quantum","text":""},{"location":"GP/mag/mag/","title":"The Magnetic Field","text":"<p>"},{"location":"GP/mag/mag/#the-magnetic-field","title":"The Magnetic Field","text":"<ul> <li>\\(\\vec{F}=q\\vec{v}\\times \\vec{B}\\)</li> <li>Right-hand rule </li> </ul>"},{"location":"GP/mag/mag/#circulating-charges","title":"Circulating Charges","text":"<p>If the velocity of a charged particle has a component parallel to the uniform magnetic field, such that : </p> <p>\\(v_{||}=vcos\\phi\\)</p> <p>\\(v_{\u22a5}=vsin\\phi\\)</p> <ul> <li>The perpendicular component \\(v_{\u22a5}\\) determines the radius of the helix \\(r=\\frac{mv_{\u22a5}}{|q|B}\\)</li> <li>The parallel component \\(v_{||}\\)determines the pitch p of the helix ,that is,the distance between adjacent turns.</li> </ul>"},{"location":"GP/mag/mag/#the-hall-effect","title":"The Hall Effect","text":""},{"location":"GP/mag/mag/#current-carrying-wire","title":"Current-Carrying Wire","text":"<ul> <li>If a wire is not straight or the field is not uniform, we can imagine the wire broken up into small straight segments and, in the differential limit, we can write \\(d\\vec{F}=id\\vec{L}\\times\\vec{B}\\)</li> </ul>"},{"location":"GP/mag/mag/#torque-on-a-current-loop","title":"Torque on a Current Loop","text":""},{"location":"GP/mag/mag/#magnetic-field-of-a-current","title":"Magnetic Field of a Current","text":""},{"location":"GP/mag/mag/#biot-savart-law","title":"Biot-Savart-law","text":"<p>\\(d\\vec{B}= \\frac{\\mu_0}{4\\pi}\\frac{id\\vec{s}\\times\\vec{r}}{r^3}\\)</p> <p>Where the constant \\(\\mu_0=4\\pi \\cdot 10^{-7(T\\cdot m/A)}\\)is called the permeability constant</p>"},{"location":"GP/mag/mag/#example","title":"Example","text":""},{"location":"GP/mag/mag/#a-long-straight-wire","title":"A Long Straight Wire","text":"<ul> <li>Derivation</li> </ul> <p>\\(\\begin{align*}d\\vec{B}&amp;=\\frac{\\mu_0}{4\\pi}\\frac{id\\vec{s}\\times\\vec{r}}{r^3}\\\\ &amp;=\\frac{\\mu_0}{4\\pi}\\frac{id\\vec{s}\\times\\vec{R}}{r^3} \\\\B&amp;=\\frac{\\mu_0i}{4\\pi R}\\int_{-\\infty}^{+\\infty}\\frac{R^2dS}{r^3} (sin\\theta=R/r \\ cos\\theta=-s/r \\ dr/ds=s/r)\\\\ &amp;=\\frac{\\mu_0i}{4\\pi R}\\int_{0}^{\\pi}sin\\theta d\\theta \\ (cos\\theta d\\theta = d(sin\\theta)=-\\frac{R^2dr}{r^2ds}ds=-\\frac{R^2s}{r^2r}ds=cos\\theta \\frac{Rds}{r^2})\\\\ &amp;= \\frac{\\mu_0 i}{2\\pi R}\\end{align*}\\)</p>"},{"location":"GP/mag/mag/#force-between-two-parallel-wires","title":"Force Between Two Parallel Wires","text":""},{"location":"GP/mag/mag/#magnetic-field-circulation","title":"Magnetic Field Circulation","text":"<p>\\(Circulation =\\oint \\vec{B}\\cdot d\\vec{s} = \\mu_0 i_{enc}\\)  (Amperian Loop)</p> <ul> <li>For a concentric Amperian loop inside the wire \\(i_{enc}=i\\frac{\\pi r^2}{\\pi R^2}\\)  Thus, \\(B=\\frac{\\mu_0ir}{2\\pi R^2}\\)</li> </ul>"},{"location":"GP/mag/mag/#a-sheet-of-moving-charge","title":"A Sheet of Moving Charge","text":""},{"location":"GP/mag/mag/#magnetic-field-of-a-solenoid","title":"Magnetic Field of a Solenoid","text":"<p>In the limiting case of an ideal solenoid, which is infinitely long and consists of tightly packed (close-packed) turns of square wire, the field inside the coil is uniform and parallel to the solenoid axis. The magnetic field outside the solenoid is zero.</p> <p>The direction of the magnetic field along the solenoid axis is given by a curled-straight right-hand rule: Grasp the solenoid with your right hand so that your fingers follow the direction of the current in the windings; your extended right thumb then points in the direction of the axial magnetic field.</p> <ul> <li>From Ampere's Law : \\(Bh=\\mu_0inh \\Rightarrow B=\\mu_0in\\)</li> </ul> <p>A solenoid thus provides a practical way to set up a known</p> <p>uniform magnetic field for experimentation, just as a parallel-plate capacitor provides a practical way to set up a known uniform electric field.</p>"},{"location":"GP/mag/mag/#magnetic-field-of-a-toroid","title":"Magnetic Field of a Toroid","text":"<p>In contrast to the situation for a solenoid, B is not constant over the cross section of a toroid.</p> <p>One can show, with Ampere\u2019s law, that B = 0 for points outside an ideal toroid (as if the toroid were made from an ideal solenoid).</p>"},{"location":"GP/mag/mag/#the-curl-of-vecb","title":"The Curl of \\(\\vec{B}\\)","text":"<ul> <li>By Stokes's theorem : \\(\\oint\\vec{B}\\cdot d\\vec{s} = \\iint(\\triangledown \\times \\vec{B})\\cdot d\\vec{A}=\\mu_0i_{enc}=\\mu_0\\iint_S\\vec{J}\\cdot d\\vec{A}\\)</li> <li>Thus \\(\\triangledown \\times \\vec{B}(\\vec{r}) = \\mu_0\\vec{J}(\\vec{r})\\)</li> </ul>"},{"location":"GP/mag/mag/#the-divergence-of-vecb","title":"The Divergence of \\(\\vec{B}\\)","text":"<p>For volume currents, the Biot-Savart law becomes</p> <p>\\(\\vec{B}(x,y,z)=\\frac{\\mu_0}{4\\pi}\\iiint\\frac{\\vec{J}(x',y',z')\\times \\vec{r}}{r^3}dx'dy'dz'\\)</p> <ul> <li> <p>The length element \\(id\\vec{s}\\) is replace by the volume element \\(JdV'= \\vec{J}(x',y',z')dx'dy'dz'\\) and \\(r =(x \u2212 x' ) \\hat{x} + ( y \u2212 y' )\\hat{y} + ( z \u2212 z') \\hat{z}\\) </p> </li> <li> <p>Applying the divergence, we obtain:</p> </li> </ul> <p>\\(\\triangledown \\cdot \\vec{B}=\\frac{\\mu_0}{4\\pi}\\int \\triangledown (\\frac{\\vec{J}\\times \\vec{r}}{r^3})dV'=-\\frac{\\mu_0}{4\\pi}\\int \\vec{J} (\\triangledown \\times \\frac{\\vec{r}}{r^3})dV'\\)</p> <ul> <li>Note that \\(\\frac{\\vec{r}}{r^3}= \u2212\\triangledown(1/\\vec{r} )\\) is nothing but the electric field of a point charge (q = 4\u03c0\u03b50)</li> <li> <p>It does not twists around; it only spreads out. Its curl is zero (as known in electrostatics).</p> </li> <li> <p>Thus \\(\\triangledown \\cdot \\vec{B} = 0\\)</p> </li> <li> <p>Constructing a closed Gaussian surface,we have:</p> </li> </ul> <p>\\(\\oint\\vec{B}\\cdot d\\vec{A}=\\int(\\triangledown\\cdot\\vec{B})dV=0\\)</p> <ul> <li> <p>The law asserts that the net magnetic flux \\(\\Phi _B\\) through any closed Gaussian surface is zero. </p> </li> <li> <p>This is a formal way of saying that magnetic monopoles do not exist. The simplest magnetic structure that can exist is a magnetic dipole.</p> </li> </ul>"},{"location":"GP/mag/mag/#magnetic-properties-of-materials","title":"Magnetic Properties of Materials","text":""},{"location":"GP/mag/mag/#the-magnetic-dipole","title":"The Magnetic Dipole","text":"<p>\\(\\vec{\\mu}=Ni\\vec{A}\\)</p> <p>\\(\\tau = \\vec{\\mu} \\times \\vec{B}=-\\mu Bsin\\theta=-\\frac{\\partial}{\\partial \\theta}(-\\mu Bcos\\theta)\\)</p> <p>\\(U_B=-\\vec{\\mu}\\cdot\\vec{B} = -\\mu Bcos\\theta\\)</p> <p></p>"},{"location":"GP/mag/mag/#magnetic-field-of-a-circular-arc-of-wire","title":"Magnetic Field of a Circular Arc of Wire","text":""},{"location":"GP/mag/mag/#at-the-center","title":"At the center","text":"<ul> <li>Thus , at the center of a single-loop coil, we have \\(B=\\frac{\\mu_0i}{2R}=\\frac{\\mu_0\\mu}{2\\pi R^3}\\)</li> </ul>"},{"location":"GP/mag/mag/#at-axial-points-far-from-the-loopz-r","title":"at axial points far from the loop\\((z \u226b R)\\)","text":"<p>Which means \\(B(z)=\\frac{\\mu_0}{2\\pi}\\frac{\\mu}{r^3}\\) Just like the  electric dipole</p>"},{"location":"GP/mag/mag/#magnetic-materials","title":"Magnetic Materials","text":""},{"location":"GP/mag/mag/#paramagnetism","title":"Paramagnetism","text":"<p>Paramagnetism occurs in materials whose atoms have permanent magnetic dipole moments \\(\\vec{\\mu}\\)</p> <ul> <li>Curie\u2019s law : \\(M=C\\frac{B_{ext}}{T}\\)</li> <li>The law is actually an approximation that is valid only when the ratio \\(B_{ext}/T\\) is not too large.</li> <li>With sufficient strong \\(\\vec{B}_{ext}\\) all dipoles in a sample of N atoms and a volume V line up with \\(\\vec{B}\\) hence M saturates at \\(M_{max}=N\\mu/V\\)</li> </ul> <p>Explain:</p> <p></p>"},{"location":"GP/mag/mag/#diamagnetism","title":"Diamagnetism","text":"<p>Diamagnetism occurs in all materials, but the weak effect is only observable in materials having atomic dipole moments of zero.</p> <p>Such a material can be modeled by equal numbers of electrons orbiting counterclockwise or clockwise. An external magnetic field will either accelerate or decelerate these electrons, leading to a net magnetic dipole moment</p> <p></p>"},{"location":"GP/mag/mag/#ferromagnetism","title":"Ferromagnetism","text":"<p>A ferromagnet has strong, permanent magnetism. What distinguishes ferromagnets from paramagnets is that there is a strong interaction between neighboring atoms.</p> <p>The interaction keeps the dipole moments of atoms aligned even when the magnetic field is removed.</p> <p></p> <p></p>"},{"location":"GP/matter%20wave/matter/","title":"matter wave","text":"<p>"},{"location":"GP/matter%20wave/matter/#matter-waves","title":"Matter Waves","text":""},{"location":"GP/matter%20wave/matter/#two-versions-of-interference","title":"Two Versions of Interference","text":""},{"location":"GP/matter%20wave/matter/#standard-version-of-the-double-slit-experiment","title":"standard version of the double-slit experiment","text":"<p>In the standard version of the double-slit experiment(Thomas Young, 1801), light shines on screen B, which contains two narrow parallel slits.</p> <p>The light waves emerging from the two slits spread out by diffraction and overlap on screen C where, by interference, they form a pattern of alternating intensity maxima and minima. </p> <ul> <li>Let us place a tiny photon detector D at one point in the plane of screen C.</li> <li>Let the detector be a photoelectric device that clicks when it absorbs a photon.</li> <li>We would find that the detector produces a series of clicks, randomly spaced in time, each click signaling the transfer of energy from the light wave to the screen via a photon absorption.</li> <li>If we moved the detector very slowly up or down as indicated by the black arrow, we would find that the click rate increases and decreases, passing through alternate maxima and minima that correspond exactly to the maxima and minima of the interference fringes.</li> </ul> <p>The point of this thought experiment is as follows.</p> <ul> <li>We cannot predict when a photon will be detected at any particular point on screen C</li> <li>photons are detected at individual points at random times.</li> <li>We can, however, predict that the relative probability that a single photon will be detected at a particular point in a specified time interval is proportional to the light intensity at that point.</li> </ul> <p>We know that the intensity \\(I\\) of a light wave at any point is proportional to the square of \\(E_m\\). Thus, the probability(per unit time interval) that a photon will be detected in any small volume centered on a given point in a light wave is proportional to the square of the amplitude of the wave\u2019s electric field vector at that point.</p>"},{"location":"GP/matter%20wave/matter/#single-photon-version","title":"single-photon version","text":"<p>The light source is so extremely feeble that it emits only one photon at a time, at random intervals. Astonishingly, interference fringes still build up on screen C if the experiment runs long enough</p> <ul> <li>If the photons move through the apparatus one at a time, through which of the two slits in screen B does a given photon pass?</li> <li>How does a given photon even \u201cknow\u201d that there is another slit present so that interference is a possibility?</li> <li>Can a single photon somehow pass through both slits and interfere with itself?</li> </ul> <p>Because an interference pattern eventually builds up on the screen, we can only speculate that each photon travels from source to screen as a wave that fills up the space between source and screen.</p> <p>We can predict the probability that an energy transfer will occur at any given point on the screen.</p> <ul> <li>Transfers will tend to occur (and thus photons will tend to be absorbed) in the regions of the bright fringes in the interference pattern that builds up on the screen.</li> <li>Transfers will tend not to occur (and thus photons will tend not to be absorbed) in the regions of the dark fringes in the pattern.</li> </ul> <p>Thus, we can say that the wave traveling from the source is a probability wave, which produces a pattern of \u201cprobability fringes\u201d on the screen.</p>"},{"location":"GP/matter%20wave/matter/#light-as-a-probability-wave","title":"Light as a Probability wave","text":"<p>We see that the double-slit experiments tell us that</p> <ul> <li>light is generated in the source as photons</li> <li>absorbed in the detector as photons</li> <li>travels between source and detector as a probability wave.</li> </ul> <p>The probability density of detecting a photon at some point \\(P\\) in space depends on the irradiance \\(I \u221d E_0^2\\) at that point. Thus, the net \\(E_0\\) at \\(P\\) can be interpreted as the probability amplitude. (Probability amplitude is a quantity whose square gives the probability density.)</p> <p>To go further, one will need quantum electrodynamics (QED), the quantum theory of the interaction of light and matter.</p>"},{"location":"GP/matter%20wave/matter/#extendtions-to-not-only-light","title":"Extendtions to not only light","text":""},{"location":"GP/matter%20wave/matter/#de-broglie-hypothesis","title":"De Broglie Hypothesis","text":"<p>A beam of light is a wave, but it transfers energy and momentum to matter only at points, via photons. Electron is a particle with energy and momentum. Why can\u2019t we think of a beam of moving electron \u2014 or any other particle \u2014 as a matter wave?</p> <p>In 1924, Louis de Broglie proposed that one could assign a wavelength \\(\u03bb\\) to a particle with momentum of magnitude \\(p\\). Like that of photons, we define. \\(\u03bb = h/p\\), which is known as the de Broglie wavelength of the moving particle.</p>"},{"location":"GP/matter%20wave/matter/#electron-diffraction","title":"Electron Diffraction","text":"<p>Electron diffraction and neutron diffraction are used to study the atomic structures of solids and liquids, and electron diffraction is often used to study the atomic.</p> <p></p>"},{"location":"GP/matter%20wave/matter/#the-interference-of-electrons","title":"The Interference of Electrons","text":"<p>In a more recent experiment, an interference pattern was built up when electrons were sent, one by one, through a double-slit apparatus. When an electron hit the viewing screen, it caused a flash of light whose position was recorded.</p> <p></p> <ul> <li>Similar interference has been demonstrated with protons, neutrons, and various atoms. It was further demonstrated with iodine molecules \\(I_2\\) in 1994 and with fullerenes (or buckyballs) \\(C_{60}\\) and \\(C_{70}\\) in 1999.</li> </ul> <p>Do particles interfere with each other?</p> <p>Perhaps they collide . . . .</p> <ul> <li>Repeat at low intensity that at any given time there is only one particle in the inteference region.</li> </ul> <p></p>"},{"location":"GP/matter%20wave/matter/#matter-wave","title":"Matter Wave","text":"<p>In Newtonian physics: a particle is only aware of the slit through which it goes, it has no idea how many other slits are open or closed or even exist. Therefore, when both slits are open, \\(P_{12} = P_1 + P_2\\).</p> <p></p> <ul> <li>Clearly, there is no fringes(Newtonian physics)</li> </ul> <p>Consider matter waves:The electrons arrive in lumps, like particles, and the probability of arrival of these lumps is distributed like the distribution of intensity of a wave.</p> <p></p> <p>Introduce:</p> <ul> <li> <p>Add Amplitude \\(A\\)</p> </li> <li> <p>Introduce the probability amplitude \\(\u03c8\\) which is a complex number. </p> </li> </ul> <p>The probability of an event in an ideal experiment is then given by \\(|\u03c8|^2 = \u03c8^\u2217\\times\u03c8\\).</p> <p>When an event can occur in several alternative ways, the probability amplitude for the event is the sum of the probability amplitudes for each way considered separately</p> <ul> <li> <p>\\(\u03c8 = \u03c8_1 + \u03c8_2 + \u00b7 \u00b7 \u00b7\\).</p> </li> <li> <p>The probability for the event is, then,\\(P=|\u03c8|^2 =|\u03c81|^2+|\u03c82|^2+2R(\u03c81^\u2217\u03c82)+\u00b7\u00b7\u00b7.\\)\uff08note:\u6a21\uff09</p> </li> <li> <p>The interference term \\(2R(\u03c8_1^\u2217\u03c8_2)\\) is responsible for the rapid oscillations of \\(P\\) observed in the experiment.</p> </li> </ul>"},{"location":"GP/matter%20wave/matter/#the-which-way-experiment","title":"The Which-Way Experiment","text":"<p>If an experiment is performed which is capable of determining whether one or another alternative is actually taken, the interference is lost.</p> <p></p> <p>The experiment tells us that the probability of the event in the which-way experiment is the sum of the probabilities for each alternative, \\(P = |\u03c8|^2 = |\u03c8_1|^2 + |\u03c8_2|^2\\),just as what happens in the classical case.</p> <p>Thus an electron acts like it went through one particular slit if we see it doing that, and acts like it did not have a specific path (through a specific slit) when it is not seen. </p> <ul> <li>Why seeing makes a difference?</li> </ul> <p>To see an electron with a resolution comparable to slit separation \\(d\\), (so we know which slit it took) requires light with \\(\u03bb &lt; d\\), this is just standard wave theory. </p> <p>But, the light is made of photons each with momentum \\(p&gt;\\frac{h}{d}\\). So, measuring the position of the electron has made us disturb its momentum. </p> <p>The amount of momentum transferred to the electron in the act of observation is indefinite.</p> <p>This is a manifestation of Heisenberg\u2019s uncertainty principle, which says you cannot measure the momentum and coordinate of a particle simultaneously to arbitrary accuracy.</p>"},{"location":"GP/matter%20wave/matter/#heisenbergs-uncertainty-principle","title":"Heisenberg\u2019s Uncertainty Principle","text":"<p>Heisenberg\u2019s uncertainty principle is not an effect caused by the measurement but a consequence of intrinsic wave nature of matter.</p> <p>The probabilistic nature of quantum physics places an important limitation on detecting a particle\u2019s position and momentum. That is, it is not possible to measure the position \\(\\vec{r}\\) and the momentum \\(\\vec{p}\\) of a particle simultaneously with unlimited precision. </p> <p>The uncertainties in the components of these quantities are given by (Werner Heisenberg, 1927)</p> <p>\\(\u2206x\u00b7\u2206p_x \u2265\\bar{h}\\) </p> <p>\\(\u2206y\u00b7\u2206p_y \u2265\\bar{h}\\)</p> <p>\\(\u2206z\u00b7\u2206p_z \u2265\\bar{h}\\)</p> <p>They are due to the fact that electrons and other particles are matter waves and that repeated measurements of their positions and momenta involve probabilities, not certainties.</p> <p>In the statistics of such measurements, we can view, say, \\(\u2206x\\) and \\(\u2206p_x\\) as the spread (actually, the standard deviations) in the measurements. Couldn\u2019t we very precisely measure \\(p_x\\) and then next very precisely measure x wherever the electron happens to show up? </p> <p>Doesn\u2019t that mean that we have measured both \\(p_x\\) and \\(x\\) simultaneously and very precisely?</p> <ul> <li> <p>No, the flaw is that although the first measurement can give us a precise value for \\(p_x\\) , the second measurement necessarily alters that value. Puzzled?</p> </li> <li> <p>Consider an electron with a certain value of \\(k\\), which, by the de Broglie relationship, means a certain momentum \\(p_x = \\bar{h}k\\). Thus, \\(\u2206p_x = 0\\). By Heisenberg\u2019s uncertainty principle, that means that \\(\u2206x \u2192 \u221e\\).</p> </li> <li> <p>What form does the electron wave function have? The naive guess could be \\(sinkx\\), or \\(coskx\\).</p> </li> </ul> <p>But they have spatial variance that is inconsistent with our intuition.</p> <p>To represent the electron by a wave, we need a function, which is called wave function, with a wavelength  \\(\u03bb = 2\u03c0/k\\), but its square should not show any variation in x\u300cNote: Definite Momentum\u300di.e. \\(\u03c8(x,t) = e^{i(kx\u2212\u03c9t)}\\). </p> <p>To calculate the square of the wave function \\(\u2223\u03c8\u2223^2\\), we obtain \\(\u2223\u03c8\u2223^2=e^{i(kx\u2212\u03c9t)}\u22c5e^{\u2212i(kx\u2212\u03c9t)}\\).</p> <p>we then have \\(\u2223\u03c8\u2223^2=1\\). </p> <p>This implies that at a given time t, the square of the wave function is a constant in the x direction, with no variation concerning x.</p> <p>Now, where is the electron? Why complex?</p> <ul> <li>If we measure \\(p_x\\) now, we obtain \\(p_x = \\bar{h}k\\) without uncertainty</li> </ul> <p>but the particle exists anywhere with the same probability, so \\(\u2206x = \u221e\\).     ?Question</p> <p>Heisenberg\u2019s uncertainty principle is not violated.</p> <ul> <li>If we measure x then, we will find the electron somewhere at \\(x_0\\). Once we find it, it cannot be elsewhere. So the wave function suddenly collapses to \\(\u03c8(x) = \u03b4(x \u2212 x0)\\). </li> </ul> <p>Now, is the momentum still \\(p_x = \\bar{h}k\\)?</p> <p>The Fourier transform of the \u03b4-function tells us \\(\u03c8 \u0304(p) = F(\u03c8(x)) = constant\\).</p> <p>In this case, \\(\u2206x = 0\\) but \\(\u2206p = \u221e\\). Again, Heisenberg\u2019s uncertainty principle is not violated.</p> <p></p>"},{"location":"GP/matter%20wave/matter/#fourier-transform","title":"Fourier Transform","text":"<p>https://www.youtube.com/watch?v=spUNpyF58BY&amp;list=RDCMUCYO_jab_esuFRV4b17AJtAw&amp;index=3</p> <p>https://youtube.com/watch?v=MBnnXbOM5S4</p> <p></p>"},{"location":"GP/sch/sch/","title":"Schroedinger's Equation","text":"<p>"},{"location":"GP/sch/sch/#motivation","title":"Motivation","text":"<p>A classical wave \\(\u03c8(x, y, z, t)\\) satisfies the wave equation \\(\\frac{1}{v^2}\\frac{\\partial^2\u03c8}{\\partial^2t}=\\triangledown^2\u03c8\\) \\(v \\ is\\ speed\\)</p> <p>In the quantum theory, a microscopic particle is described by a probability amplitude \\(\u03c8(x, y, z, t)\\), and the probability of finding it is proportional to \\(P(x, y, z, t) = |\u03c8(x, y, z, t)|^2\\).</p> <ul> <li>What is, then, the wave equation that governs the motion of the quantum particle?</li> </ul>"},{"location":"GP/sch/sch/#schroedingers-equation","title":"Schroedinger\u2019s Equation","text":""},{"location":"GP/sch/sch/#classical-particle","title":"Classical Particle","text":"<p>Find the equation that governs the quantum behavior of a free particle of mass \\(m\\) represented by a wave \\(\u03c8(x,t) = e^{i(kx\u2212\u03c9t)}\\).</p> <p>\\(E=\\frac{p^2}{2m}\\)</p> <p>According to the de Broglie\u2019s hypothesis</p> <p>\\(p=\\frac{h}{\\lambda}=\\bar{h}k=\u2212i\\bar{h}\\frac{1}{\u03c8(x,t)} \\frac{\u2202\u03c8(x,t)}{\\partial x}\\)</p> <p>d\\(p^2=\\bar{h}^2k^2=-\\bar{h}^2\\frac{1}{\u03c8(x,t)} \\frac{\u2202^2\u03c8(x,t)}{\\partial^2 x}\\)</p> <p>\\(E=hv=\\bar{h}w=\\frac{1}{\u03c8(x,t)} \\frac{\u2202\u03c8(x,t)}{\\partial t}\\)</p> <p>using wave function, the energy-momentum relation is</p> <p></p> <p>In the presence of potential, e.g. a harmonic potential   \\(U(x) = ax^2/2\\) , the classical relation is modified to \\(E=\\frac{p^2}{2m} +U(x)\\)  where \\(E\\) is a constant of motion, but \\(p\\) is not. In other words, a plane wave is not a solution any more.</p> <p>In this expression, p is the momentum of the particle, m is the mass of the particle, \\(U(x)\\) is the potential energy associated with the position x, and E is the total energy of the system, which remains constant.</p> <p>In the conventional case where there is no potential energy in the system, momentum p would be a conserved quantity, implying the total momentum of the system remains constant. However, in the presence of potential energy, the interaction between kinetic and potential energy leads to a non-conservation of momentum. In such cases, simple waveforms like plane waves are no longer solutions, as the interaction between kinetic and potential energy requires a more complex description.</p> <p></p> <p>Schroedinger's equation is both homogenous and linear!!!</p> <p>Linear Partial Differential Equation (PDE):</p> <p>A partial differential equation is termed linear if it is linear in terms of the unknown function and its partial derivatives. It can be expressed in the form:</p> <p>\\(L(u)=a_n(x,y)u_{xx}+a_{n\u22121}(x,y)u_x+\u2026+a_1(x,y)u_y+a_0(x,y)u+F(x,y)=0\\)</p> <p>Here, \\(u\\) is the unknown function, \\(u_x, u_y, u_{xx}\\), and so on represent the corresponding partial derivatives</p> <p>Crucially, all coefficients \\(a_n(x,y), a_{n\u22121}(x,y), \u2026\u2026, a_0(x,y)\\)as well as \\(F(x,y)\\), do not depend on the values of the unknown function \\(u\\) or its derivatives.</p> <p>Homogeneous Partial Differential Equation (PDE):</p> <p>A partial differential equation is considered homogeneous if all terms in the equation are homogeneous polynomials of the unknown function and its partial derivatives. </p> <p>NOTE\uff1ahomogeneous without \u201dconstant term\u201d</p>"},{"location":"GP/sch/sch/#time-independent-schroedingers-equation","title":"time-independent Schroedinger\u2019s equation","text":"<p>In most cases we discuss, the potential energy \\(U = U(x)\\) is independent of time. </p> <p>We can solve the stationary solution of the Schroedinger equation by an ansatz: \\(\u03c8(x, t) = \\Phi(x)e^{\\frac{-iEt}{\\bar{h}}}\\).</p> <p>Substituting the above ansatz of \\(\u03c8(x,t)\\), we obtain the following equation for \\(\u03c6(x)\\) \\(\\frac{\\partial^2\\phi(x)}{\\partial^2x}+\\frac{2m}{\\bar{h}^2}[E-U(x)]\\phi(x)=0\\)</p> <p>By solving this equation, we can obtain the stationary solution \u03c6\\((x)\\) under the time-independent external potential \\(U(x)\\).</p> <p>In free space, \\(U(x) = 0\\). </p> <ul> <li>The general solution is \u03c6\\((x)=Ae^{ikx} +Be^{\u2212ikx}\\) where A and B are constants and k = \\(\\sqrt{2mE} /\\bar{h}\\).</li> </ul> <p>The general form of a second-order homogeneous linear ordinary differential equation (ODE) with constant coefficients is given by:</p> <p>\\(a\\frac{d^y}{dx^2}+b\\frac{dy}{dx}+cy=0\\)</p> <p>The general solution for such equations can be found by assuming the solution has the form \\(y=e^{rx}\\) where r is a constant to be determined. Substituting this form into the equation yields the characteristic equation:\\(ar^2+br+c=0\\)</p> <p>Solving this quadratic equation for rr determines the values for r, which in turn determine the form of the general solution. There are typically three cases:</p> <ol> <li>Two distinct real roots r1 and r2</li> </ol> <p>The general solution is: \\(y=C_1e^{r_1x}+C_2e^{r_2x}\\)</p> <ol> <li>One real root r repeated twice:</li> </ol> <p>The general solution is: \\(y=(C_1+C_2x)e^{rx}\\)</p> <ol> <li>Two complex conjugate roots r=\u03b1\u00b1\u03b2i:</li> </ol> <p>The general solution is: \\(y=e^{\u03b1x}(C_1cos\u2061(\u03b2x)+C_2sin\u2061(\u03b2x))\\)</p>"},{"location":"GP/sch/sch/#the-complete-time-dependent-wave-function","title":"The complete time-dependent wave function","text":"<p>\\(\u03c8(x,t)=Ae^{i(kx\u2212\u03c9t)} +Be^{\u2212i(kx+\u03c9t)}\\)  where \\(w=\\frac{E}{\\bar{h}}\\) </p> <ul> <li>The two terms correspond to right- and left-moving waves, respectively.</li> </ul> <p>Consider the right-moving wave \\(\u03c8(x,t) = Ae^{i(kx\u2212\u03c9t)}\\), the probability density is uniform:\\(|\u03c8(x, t)|^2 = \u03c8^\u2217(x, t)\u03c8(x, t) = |A|^2\\).  That means that if we make a measurement to locate the particle, the location could turn out to be at any x value.</p>"},{"location":"GP/sch/sch/#wave-packets","title":"Wave Packets","text":"<p>What is the speed of a free quantum mechanical particle?</p> <p>\\(\u03c8(x,t)=Ae^{i(kx\u2212\\frac{\\bar{h}k^2}{2m}t)} +Be^{\u2212i(kx+\\frac{\\bar{h}k^2}{2m}t)}\\)  where \\(w=\\frac{E}{\\bar{h}}\\)     and  \\(\\sqrt{2mE} /\\bar{h}\\)</p> <p>\\(\\Rightarrow v_{ph}=\\frac{\\bar{h}k}{2m}=\\sqrt{\\frac{E}{2m}}\\)</p> <p>On the other hand, the classical speed of a free particle with energy E is given by \\(v_{cl} = \\sqrt{\\frac{2E}{m}}= 2v_{ph}\\).</p> <p>Problem #1: </p> <p>The quantum mechanical wave function travels at half the speed of the particle it is supposed to represent!</p> <p>Problem #2: </p> <p>How to normalize the wave function of the free particle, say, represented by \\(Ae^{ikx}\\) ?</p> <p>\\(\\int_{-\\infty}^{+\\infty}|\u03c8(x)|^2dx=|A|^2\\int_{-\\infty}^{+\\infty}1dx=|A|^2\\infty\\)</p> <p>This wave function is not normalizable!</p> <p>In fact, the stationary (separable) solutions do not represent physically realizable states for a free particle; there is no such thing as a free particle with a definite energy.</p>"},{"location":"GP/sch/sch/#the-realistic-solution-to-the-schroedinger-equation-for-a-free-particle","title":"the realistic solution to the Schroedinger equation for a free particle","text":"<p>In quantum theory, a localized particle is modeled by a linear superposition of these stationary free-particle (or plane-wave) states.</p> <p>In general, we can construct a linear combination (integral over continuous \\(k\\))</p> <p>\\(\u03a8(x,t)=\\frac{1}{\\sqrt{2\\pi}}\\int_{-\\infty}^{+\\infty}\\)\u03c6\\((k)e^{i(kx\u2212\\frac{\\bar{h}k^2}{2m}t)}dk\\)</p> <p>This wave function can be normalized for appropriate \u03c6\\((k)\\), typically Gaussian. We call it a wave packet, which carries a range of k and, hence, a range of energies and speeds. In a general quantum problem, we are given \\(\u03a8(x, 0)\\) and needed to find \\(\u03a8(x, t)\\).</p> <p>The particle can be better localized (\u2206x can be decreased) if more plane-wave states of different wavelengths or momenta are added together in the right way (\u2206p is increased).</p> <p></p> <p>According to Heisenberg, these uncertainties obey \\(\u2206x\u2206p \u2265 \\bar{h}/2\\).</p> <p></p> <p>It turns out that the group velocity of the wave packet, not the phase velocity of the stationary states, matches the classical particle velocity.</p>"},{"location":"GP/sch/sch/#some-exercises","title":"Some Exercises","text":""},{"location":"GP/sch/sch/#reflection-from-a-potential-step","title":"Reflection from a Potential Step","text":"<p>Consider a beam of nonrelativistic electrons, each of total energy E, along an x axis through a narrow tube. They experience a negative electric potential step of height \\(V_b &lt;0\\) at \\(x=0\\).(Note that the charge q of the electron is negative)</p>"},{"location":"GP/sch/sch/#e-qv_b","title":"\\(E &gt; qV_b\\).","text":"<p>Classically, electrons should all pass through the boundary. Their total energy should be conserved, so their kinetic energy, hence speed, decreases when their potential energy increases.</p> <ul> <li>What happens quantum mechanically?</li> </ul> <p>(at a given time?)</p> <p></p> <ul> <li> <p>We can first set \\(D = 0\\), because there is no electron source off to the right, and there can be no electrons moving to the left in region 2.</p> </li> <li> <p>We now consider boundary conditions at \\(x = 0\\):</p> </li> </ul> <p>\\(A + B = C\\) (matching of values) </p> <p>\\(Ak \u2212 Bk = Ck_b\\) (matching of slopes) \u300cfirst derivation\u300d</p> <p>We should be able to solve \\(B/A\\) and \\(C/A\\), but not \\(A\\), \\(B\\), and \\(C\\). </p> <p>Note that the absolute values are not important for our purpose (it can be related to the beam intensities, though).</p> <ul> <li>Indeed, to find the probability that electrons reflect from the step, we need to relate the probability density of the reflected wave \\(Be^{\u2212ikx}\\) to that of the incident wave \\(Ae^{ikx}\\). We thus define a reflection coefficient R:</li> </ul> <p>\\(R_{reflected}=\\frac{|A|^2}{|B|^2}=|\\frac{k-k_b}{k+k_b}|^2\\)</p> <p>\\(T_{transmition}=1-R=\\frac{4kR(k_b)}{|k+k_b|^2}\\)</p> <p>Quantum mechanically, electrons are reflected from the boundary, but only with a probability.</p> <p>What inspires us to define T in this way?</p> <p>Well, one can consider an alternative quantity \\(\\frac{|C|^2}{|A|^2}=\\frac{4k^2}{|k+k_b|^2}=\\frac{k}{R(k_b)}T=\\frac{k}{k_b}T for\\ real\\ k_b\\)(which means\\(E &gt; qV_b\\). )</p> <p>Why coefficient?</p> <ul> <li>Recall current density J = nqv. Not surprisingly, one finds</li> </ul> <p>\\(T = \\frac{|C|^2k_b}{|A|^2k} = \\frac{|C|^2q(\\bar{h}k_b/m)}{|A|^2q(\\bar{h}k/m)} =\\frac{n_1qv_1}{n_2qv_2}= \\frac{J_{transmitted}}{J_{incident}}\\).</p> <p>One can also write</p> <p>\\(R=\\frac{J_{reflected}}{J_{incident}}\\)</p> <p>Therefore, \\(T = 1 \u2212 R\\) is nothing but the conservation of current \\(J_{transmitted} = J_{incident} \u2212 J_{reflected}.\\)</p>"},{"location":"GP/sch/sch/#e-qv_b_1","title":"\\(E &lt; qV_b\\).","text":"<ul> <li>Just Reflection</li> </ul>"},{"location":"GP/sch/sch/#tunneling-through-a-potential-barrier","title":"Tunneling through a Potential Barrier","text":"<p>Now consider a potential energy barrier, which is a region of thickness L where the electric potential is \\(V_b(&lt;0)\\) and the barrier height is \\(U_b=qV_b\\)</p> <p></p> <ul> <li>Consider \\(E &lt; qV_b\\)</li> </ul> <p>Separate the space into three regions and solve Schroedinger's equation in each region \\((3\\times2-1=5\\ unknowns)\\)</p> <p>Apply boundary conditions at the two boundaries\\((2\\times2=4)\\)</p> <p>Calculate the tunneling coefficient.</p>"},{"location":"GP/sch/sch/#general-results","title":"General Results","text":"<ul> <li>The oscillating curve to the left of the barrier (for x &lt; 0) is a combination of the incident matter wave and the  reflected matter wave (which has a smaller amplitude than the incident wave). </li> </ul> <p>The oscillations occur because these two waves, traveling in opposite directions, interfere with each other, setting up a standing wave pattern.</p> <ul> <li> <p>Within the barrier \\((for\\ 0 &lt; x &lt; L)\\) the probability density decreases exponentially with x. However, if L is small, the probability density is not quite zero at x = L..</p> </li> <li> <p>To the right of the barrier (for x &gt; L), the probability density plot describes a transmitted wave (through the barrier) with low but constant amplitude.</p> </li> </ul> <p>We can assign a transmission coeffient T to the incident matter wave and the barrier. The transmission coefficient T is approximately \\(T\\approx e^{-2kL}\\) where \\(k=\\frac{\\sqrt{2m(qV_b-E)}}{\\bar{h}}\\) Try Derive (imaginary k' actually) \\(T\\) is sensitive to L,m and \\(U_b-E\\) </p> <p></p>"},{"location":"GP/sch/sch/#scanning-tunneling-microscope-stm","title":"Scanning Tunneling Microscope (STM)","text":"<p>The size of details that can be seen in an optical microscope is limited by the wavelength of the light the microscope uses (about 300 nm for ultraviolet light). We use electron matter waves (tunneling through potential  barriers) to create images on the atomic scale.</p> <p>The piezoelectric effect refers to the phenomenon where certain crystals exhibit charge separation when subjected to mechanical stress, resulting in the generation of voltage, or conversely, when an electric field is applied, causing the crystal to undergo mechanical deformation. This phenomenon is known as the piezoelectric effect, and the crystals that exhibit it are referred to as piezoelectric crystals.</p> <p>Specifically, the piezoelectric effect can be categorized into two main types:</p> <ol> <li>Direct Piezoelectric Effect:    - When a piezoelectric crystal is subjected to external mechanical pressure, there is a redistribution of charges within the crystal, leading to charge separation on the crystal's surface and the generation of voltage. This effect finds widespread applications in devices such as piezoelectric sensors and transducers.</li> <li>Inverse Piezoelectric Effect:    - The inverse piezoelectric effect occurs when a mechanical deformation is induced in a crystal by applying an electric field. In this case, the electric field can control the shape and size of the crystal, causing mechanical vibrations. This effect is utilized in applications like piezoelectric ceramics in drivers and Surface Acoustic Wave (SAW) devices.</li> </ol> <p></p> <p>A fine metallic tip, mounted on quartz rods, is placed close to the surface to be examined. The space between the surface and the tip forms a potential energy barrier.</p> <ul> <li> <p>Quartz shows the piezoelectricity.</p> </li> <li> <p>The position of the tip can be controlled by applying the electric field on the quartz. The horizontal location of the tip is controlled by the electric field in x- and y-directions. The vertical distance between the surface and the tip is controlled by the electric field in z-direction.</p> </li> <li> <p>Transmission coefficient \\(T\\) ~ \\(e^{-2kL}\\) is sensitive to the barrier width.</p> </li> </ul> <p>\\(\u2192\\) Tunneling current is sensitive to the distance between the surface and the tip.</p> <ul> <li>The vertical position of the tip is adjusted to keep the tunneling current constant as the tip is scanned over the surface. Imaging of the atomic scale is possible.</li> </ul> <p></p> <p>An STM not only can provide an image of a static surface, it can also be used to manipulate atoms and molecules on a surface.</p> <p></p> <p></p>"},{"location":"GP/sch/sch/#s-matrix","title":"S-Matrix","text":"<p>The expression \\(|r|^2+|t|^2=1\\) is a consequence of probability conservation in quantum mechanics. Let's break down the meaning of this expression in the context of quantum mechanics and scattering theory.</p> <p>In quantum mechanics, when a particle encounters a potential barrier or undergoes scattering, the probabilities of reflection\\(|r|^2\\) and transmission\\(t|^2\\)must add up to unity. Here's why:</p> <ol> <li>Probability Conservation: The total probability of finding the particle must be conserved. When a particle encounters a potential barrier, it can either be reflected back or transmitted through the barrier. The sum of the probabilities of these two outcomes must be equal to 1.</li> </ol> <p>Mathematically, this is expressed as \\(|r|^2+|t|^2=1\\)</p> <ol> <li>Normalization Condition: The probability amplitude is related to the wave function, and the square of the amplitude gives the probability density. For the wave function to represent a physically meaningful probability density, it must be normalized.</li> </ol> <p>The normalization condition for probability amplitudes requires that the sum of the probabilities over all possible outcomes is equal to 1.</p> <p>Mathematically, this normalization condition is expressed as \\(\u222b\u2223\u03a8(x)\u2223^2\u2009dx=1\\), where \\(\u03a8(x)\\) is the wave function.</p>"},{"location":"GP/sch/sch/#example","title":"Example","text":"<p>\\(Explain\\ for\\ the\\ below\\ Pic\\)</p> <ul> <li> <p>\\(t_1\\) and \\(t_2\\): These are the transmission coefficients at the first and second barriers, respectively. They represent the fraction of the wave that gets transmitted through the barriers.</p> </li> <li> <p>\\(r_1\\) and \\(r_2\\): These are the reflection coefficients at the first and second barriers, respectively. They represent the fraction of the wave that gets reflected at the barriers.</p> </li> <li> <p>\\(e^{i\u03b8}\\): This term introduces a phase shift (\u03b8) to the wave. </p> </li> </ul> <p>The term is a complex exponential that represents a phase change in the wave. It's common in wave optics and quantum mechanics to introduce phase factors.</p> <p>Now, let's interpret the terms in the sum:</p> <ol> <li> <p>The first term \\(t_1e^{i\u03b8}t_2\\) represents the wave being transmitted through the first barrier (\\(t_1\\)), undergoing a phase change (\\(e^{i\\theta}\\)), and then being transmitted through the second barrier \\((t_2)\\)</p> </li> <li> <p>The second term \\(t_1e^{i\\theta}r_2e^{i\\theta}r_1e^{i\\theta}t_2\\) represents a more complex scenario. </p> </li> </ol> <p>The wave is transmitted through the first barrier (\\(t_1\\)), undergoes a phase change (\\(e^{i\\theta}\\)), gets partially reflected \\(r_2\\), undergoes another phase change\\(e^{i\\theta}\\), gets reflected again\\((r_1)\\), undergoes yet another phase change\\((e^{i\\theta})\\), and finally gets transmitted through the second barrier \\(t_2\\).</p> <p></p> <p></p> <ul> <li>Question? </li> </ul> <p>\\(b_4b_4^\u2217=\\frac{t_{1}^2t_2^2}{1\u22122r_1r_2cos\u2061(2\u03b8)+r_1^2r_2^2}\\)</p>"},{"location":"GP/sch/sch/#two-particle-system","title":"Two Particle System","text":"<p>https://www.youtube.com/watch?v=M7VJa5eim5o</p> <p>https://phys.libretexts.org/Bookshelves/Quantum_Mechanics/Introductory_Quantum_Mechanics_(Fitzpatrick)/05%3A_Multi-Particle_Systems/5.03%3A_Two-Particle_Systems</p> <p>\\(i\\bar{h}\\frac{\\partial}{\\partial t}\u03c8(x_1,x_2,t)=[-\\frac{\\bar{h}^2}{2m_1}\\frac{\\partial^2}{\\partial x_1^2}-\\frac{\\bar{h}^2}{2m_2}\\frac{\\partial^2}{\\partial x_2^2}+V(x_1,x_2)]\u03c8(x_1,x_2,t)\\)</p> <p></p>"},{"location":"NA/Chap1/Chap1/","title":"Mathematical Preliminaries","text":""},{"location":"NA/Chap1/Chap1/#roundoff-errors-and-computer-arithmetic","title":"Roundoff Errors and Computer Arithmetic","text":"<ul> <li> <p>Truncation Error: the error involved in using a truncated, or finite, summation to approximate the sum of an infinite series.</p> </li> <li> <p>Roundoff Error: the error produced when performing real number calculations.  It occurs because the arithmetic performed in a machine involves numbers with only a finite number of digits.</p> </li> </ul> <p>If \\(p^*\\) is an approximation to p, the absolute error is | \\(p\\) \u2013 \\(p^*\\) |, and the relative error is | \\(p\\) \u2013 \\(p^*\\) | / | p |, provided that p \\(\\ne\\) 0.</p> <p>The number \\(p^*\\) is said to approximate \\(p\\) to t significant digits (or figures) if \\(t\\) is the largest nonnegative integer for which \\(\\frac{|p-p^*|}{|p|}&lt;5\\times10^{-t}\\)</p> <p></p> <p>To achieve \\(To\\ t\\ significant\\ digits\\) Both Chopping &amp; Rounding has to approximate at \\(k = t\\)</p> <ul> <li>How will roundoff error affect our results?</li> </ul> <p>Subtraction of nearly equal numbers will cause a cancellation of significant digits.</p> <p></p>"},{"location":"NA/Chap1/Chap1/#algorithms-and-convergence","title":"Algorithms and Convergence","text":"<p>An algorithm that satisfies that small changes in the initial data produce correspondingly small changes in the final results is called stable; otherwise it is unstable.  </p> <p>An algorithm is called conditionally stable if it is stable only for certain choices of initial data.</p> <p>Suppose that \\(E_0 &gt; 0\\)  denotes an initial error and \\(E_n\\) represents the magnitude of an error after n subsequent operations.  If \\(E_n \\approx CnE_0\\), where C is a constant independent of n, then the growth of error is said to be linear.  If \\(E_n \\approx C^n E_0\\), for some C &gt; 1, then the growth of error is called exponential.</p> <p></p> <p></p>"},{"location":"NA/Chap2/Chap2/","title":"Solutions of Equations in one variable","text":""},{"location":"NA/Chap2/Chap2/#the-bisection-method","title":"The Bisection Method","text":"<pre><code>Algorithm: Bisection\nTo find a solution to f (x) = 0 given the continuous function f on the interval [ a, b ], where f (a) and f (b) have opposite signs.\nInput: endpoints a, b; tolerance TOL; maximum number of iterations Nmax.\nOutput: approximate solution p or message of failure.\n\nStep 1  Set  i = 1;\n             FA = f (a) ;\nStep 2  While( i&lt;=Nmax)  do  steps 3-6\n    Step 3  Set  p = a + ( b \u2013 a ) / 2 ; /* compute pi */\n               FP = f (p) ; \n    Step 4  If ( FP == 0 ) or ( b - a ) / 2 &lt; TOL  then  Output (p); \n                 STOP; /* successful */\n    Step 5  Set  i ++;\n    Step 6  If  sign(FA) \u00b7 sign(FP) &gt; 0 then set a = p ; FA = FP ;\n                           Else set b = p ; /* update ai, bi */  \nStep 7  Output (Method failed after Nmax iterations); /* unsuccessful */\n        STOP.\n</code></pre> <p>Other Stopping Procedures</p> <p>\\(|p_N-p_{N-1}|&lt;\\epsilon\\)</p> <p>\\(\\frac{|p_N-p_{N-1}|}{|p_N|}&lt;\\epsilon\\)</p> <p>\\(|f(p_N)|&lt;\\epsilon\\)</p>"},{"location":"NA/Chap2/Chap2/#therom","title":"Therom","text":"<p>Suppose that \\(f\\in C[a,b]\\) and \\(f(a)f(b)&lt;0\\) The Bisection method generates a seqence \\(\\{p_n\\}_{n=1}^{\\infty}\\) approximating a zero p of f with \\(|p_n-p|\\le\\frac{b-a}{2^n}\\) when \\(n \\ge1\\)</p>"},{"location":"NA/Chap2/Chap2/#fixed-point-iteration","title":"Fixed-Point Iteration","text":""},{"location":"NA/Chap2/Chap2/#theorem-fixed-point-theorem","title":"Theorem: (Fixed-Point Theorem)","text":"<p>Let  \\(g \\in C[a, b]\\) be such that \\(g(x) \\in [a, b]\\), for all x in \\([a, b]\\).  </p> <ul> <li> <p>\\(g\\) has a fixed point in \\([a,b]\\)</p> </li> <li> <p>Suppose, in addition, that \\(g\u2019\\) exists on \\((a, b)\\) and that a constant \\(0 &lt; k &lt; 1\\) exists with\\(|g\u2019(x)| \\le k\\)  for all x in (a, b).  Then:</p> </li> </ul> <p>(1) The fixed point is unique \\(Proof \\ P57\\)  (By Contradiction)</p> <p>(2)For any number \\(p_0\\) in [a, b], the sequence defined by \\(p_n = g( p_{n \u2013 1} )\\), \\(n \\ge 1\\), converges to the unique fixed point \\(p\\) in \\([a, b]\\).  \\(Proof \\ P61-62\\) </p> <p></p>"},{"location":"NA/Chap2/Chap2/#corollary","title":"Corollary","text":"<p>If  \\(g\\) satisfies the hypotheses of the Fixed-Point Theorem, then bounds for the error involved in using \\(p_n\\) to approximate \\(p\\) are given by (for all n \\(\\ge\\) 1) </p> <p>\\(|p_n-p|\\le k^n max\\{p_0-a,b-p_0\\}\\)</p> <p>\\(|p_n-p|\\le\\frac{1}{1-k}|p_{n+1}-p_n|\\)</p> <p>\\(|p_n-p|\\le \\frac{k^n}{1-k}|p_1-p_0|\\)</p> <p>\\(Proof\\ P62\\)</p> <pre><code>Algorithm: Fixed-Point Iteration\nFind a solution to p = g(p) given an initial approximation p0.\nInput: initial approximation p0; tolerance TOL; maximum number of iterations Nmax.\nOutput: approximate solution p or message of failure.\nStep 1  Set  i = 1;\nStep 2  While ( i &lt;= Nmax)  do  steps 3-6\n        Step 3  Set  p = g(p0);  /* compute pi */\n        Step 4  If  | p - p0 | &lt; TOL  then  Output (p);  /* successful */\n            STOP;\n        Step 5  Set  i ++;\n        Step 6  Set  p0 = p ;   /* update p0 */\nStep 7  Output (The method failed after Nmax iterations);  /* unsuccessful */\n                STOP.\n</code></pre>"},{"location":"NA/Chap2/Chap2/#newtons-problem","title":"Newton's Problem","text":"<p>Linearize a nonlinear function using Taylor\u2019s expansion.</p> <p></p>"},{"location":"NA/Chap2/Chap2/#therom_1","title":"Therom","text":""},{"location":"NA/Chap2/Chap2/#secant-method","title":"Secant Method","text":""},{"location":"NA/Chap2/Chap2/#method-of-false-position","title":"Method of False Position","text":"<p>P73 Just Modify to always bracket the root.</p>"},{"location":"NA/Chap2/Chap2/#error-analysis-for-iterative-methods","title":"Error Analysis for Iterative Methods","text":""},{"location":"NA/Chap2/Chap2/#therom-27","title":"Therom 2.7","text":"<p>Let \\(g \\in C[a,b]\\) be such that \\(g(x)\\in [a,b]\\) for all \\(x\\in [a,b]\\).Suppose, in addition,that is continuous on \\((a,b)\\) and a positive constant \\(k&lt;1\\) exists with \\(|g'(x)|\\le k\\) for all \\(x\\in (a,b)\\)</p> <ul> <li>If \\(g'(p)\\ne 0\\) then for any number \\(p_0\\) in \\([a,b]\\) ,the sequence \\(p_n=g(p_{n-1})\\) converges only linearly to the unique fixed point \\(p\\ in\\ [a,b]\\)</li> </ul> <p>\\(p_{n+1}-p=g(p_n)-g(p)=g'(\\epsilon_n)(p_n-p)\\)</p> <p></p>"},{"location":"NA/Chap2/Chap2/#therom_2","title":"Therom","text":"<p>\\(f\\in C[a,b]\\) has a simple zero at \\(p\\) in \\((a,b)\\) if and only if \\(f(p)=0\\) but \\(f'(p)\\ne 0\\)</p> <p>\\(f\\in C^m[a,b]\\) has a  zero of multiplicity m  at \\(p\\) in \\((a,b)\\) if and only if \\(0=f(p)=f'(p)=\u2026\u2026=f^{m-1}(p)\\) but \\(f^m(p)\\ne 0\\)</p> <p></p> <p></p>"},{"location":"NA/Chap2/Chap2/#accelarating-convergence","title":"Accelarating Convergence","text":"<pre><code>Algorithm: Steffensen\u2019s Acceleration\nFind a solution to x = g(x) given an initial approximation p0.\nInput: initial approximation p0; tolerance TOL; maximum number of iterations Nmax.\nOutput: approximate solution x or message of failure.\nStep 1  Set  i = 1;\nStep 2  While ( i &lt;= Nmax)  do  steps 3-6\n    Step 3  Set  p1 = g(p0) ; \n          p2 = g(p1) ; \n          p = p0 -( p1 - p0 )2 / ( p2 -2 p1 + p0 ) ;\n    Step 4  If  | p - p0 | &lt; TOL  then  Output (p);  /* successful */\n                    STOP;\n    Step 5  Set  i ++;\n    Step 6  Set  p0 = p ;   /* update p0 */\nStep 7  Output (The method failed after Nmax iterations);  /* unsuccessful */\n                STOP.\n</code></pre>"},{"location":"NA/Chap3/Chap3/","title":"Interpolation and Polynomial Approximation","text":""},{"location":"NA/Chap3/Chap3/#interpolation-and-the-lagrange-polynomial","title":"Interpolation and the Lagrange Polynomial","text":""},{"location":"NA/Chap3/Chap3/#therom-32","title":"Therom 3.2","text":"<ul> <li>Proof of Uniqueness</li> </ul>"},{"location":"NA/Chap3/Chap3/#remainder","title":"Remainder","text":"<p>\\(Specific\\ Proof\\ P112\\)</p>"},{"location":"NA/Chap3/Chap3/#def","title":"Def","text":"<p>Let \\(f\\) be a function defined at $x_0, x_1 \u2026\u2026 x_n $ and suppose that  $m_0, m_1 \u2026\u2026 m_n $ are k distince integers . The Lagrange polynomial that agrees with \\(f(x)\\) at k points \\(x_{m1},x_{m2}\u2026\u2026 x_{m_k}\\) is denoted by \\(P_{m_1,m_2\u2026\u2026,m_n}(x)\\)</p>"},{"location":"NA/Chap3/Chap3/#nevilles-method","title":"Neville\u2019s Method","text":""},{"location":"NA/Chap3/Chap3/#therom-35","title":"Therom 3.5","text":""},{"location":"NA/Chap3/Chap3/#peseudo-code","title":"Peseudo code","text":""},{"location":"NA/Chap3/Chap3/#divided-difference","title":"Divided Difference","text":""},{"location":"NA/Chap3/Chap3/#newtons-interpolation","title":"Newton\u2019s Interpolation","text":"<p>\\(P_n(x)=f[x_0]+\\sum_{k=1}^nf[x_0,x_1,\u2026\u2026x_k](x-x_0)\u2026\u2026(x-x_{k-1})\\)</p> <ul> <li>https://www.youtube.com/watch?v=S7QIU0i1qLE</li> </ul> <p>Newton's Forward Difference Interpolation and Newton's Backward Difference Interpolation are both methods for constructing polynomial interpolants, but they differ in terms of the direction in which they compute the differences.</p> <ol> <li>Newton's Forward Difference Interpolation:  - Differences: Forward interpolation starts with the given data point closest to the beginning (usually the lowest x-value) and moves forward.  - Formula: The forward difference formula is given by: \\(f[x_0]+f[x_0,x_1](x\u2212x_0)+f[x_0,x_1,x_2](x\u2212x_0)(x\u2212x_1)+\u2026\\)</li> <li>Newton's Backward Difference Interpolation:  - Differences: Backward interpolation starts with the given data point closest to the end (usually the highest x-value) and moves backward.  - Formula: The backward difference formula is given by: \\(f[x_n]+f[x_n,x_{n\u22121}](x\u2212x_n)+f[x_n,x_{n\u22121},x_{n\u22122}](x\u2212x_n)(x\u2212x_{n\u22121})+\u2026\\)</li> </ol> <p>In both cases, the differences \\(f[x_i,x_{i\u22121},\u2026,x_0]\\) are computed using the divided difference approach. The primary difference between the two methods lies in the direction in which these differences are calculated.</p> <p>Key Points:</p> <ul> <li>Newton's Forward Difference Interpolation works from the initial data point towards the desired point.</li> <li>Newton's Backward Difference Interpolation works from the final data point towards the desired point.</li> <li>Both methods use divided differences to calculate the coefficients of the interpolation polynomial.</li> <li>The choice between forward and backward interpolation may depend on the specific problem and the nature of the available data</li> </ul> <p></p> <p>\\(Pseudocode\\ P124-125\\)</p> <ul> <li>Refer to P126 - 128!</li> </ul>"},{"location":"NA/Chap3/Chap3/#hermites-method","title":"Hermite's Method","text":"<ul> <li>Persuadocode</li> </ul>"},{"location":"NA/Chap3/Chap3/#cubic-spline-interpolation","title":"Cubic Spline INterpolation","text":"<p>How can we make a smooth interpolation without asking too much from \\(f\\) ?Headache \u2026</p> <p></p>"},{"location":"NA/Chap3/Chap3/#further","title":"Further","text":"<p>Suppose \\(S_j(x)=a_j+b_j(x-x_j)+c_j(x-x_j)^2+d_j(x-x_j)^3\\)</p> <ul> <li>\\(a_{j+1}=S_j(x_{j+1})S_j(x_{j+1})=a_j+b_j(x_{j+1}-x_j)+c_j(x_{j+1}-x_j)^2+d_j(x_{j+1-x_j})^3\\)</li> </ul> <p>For notation \\(h_j=x_{j+1}-x_j\\) \\(a_{j+1}=a_j+b_jh_j+c_jh_j^2+d_jh_j^3\\) \\((1)\\)</p> <ul> <li>\\(S'_j(x_j)=b_j\\) Applying condition \uff08d\uff09</li> </ul> <p>\\(b_{j+1}=b_j+2c_jh_j+3d_jh_j^2\\) \\((2)\\)</p> <ul> <li>\\(c_j=S''_j(x_j)/2\\) and applying condition (e). </li> </ul> <p>\\(c_{j+1}=c_j+3d_jh_j\\) \\((3)\\)</p> <p>\\(\\Rightarrow h_{j-1}c_{j-1}+2(h_{j-1}+h_j)c_j+h_jc_{j+1}=\\frac{3}{h_j}(a_{j+1}-a_j)-\\frac{3}{h_{j-1}}(a_{j+1}-a_j)\\)</p>"},{"location":"NA/Chap3/Chap3/#natural-cubic-spline","title":"Natural Cubic Spline","text":""},{"location":"NA/Chap3/Chap3/#clamped-boundary","title":"Clamped Boundary","text":""},{"location":"NA/Chap4/Chap4/","title":"Numerical Differentiation and Integration","text":"<p>Refer to the Book .\uff08This page LACKS many contents\uff09</p>"},{"location":"NA/Chap4/Chap4/#numerical-differentiation","title":"Numerical Differentiation","text":""},{"location":"NA/Chap4/Chap4/#richardsons-extrapolation","title":"Richardson\u2019s Extrapolation","text":""},{"location":"NA/Chap4/Chap4/#elements-of-numerical-integration","title":"Elements of Numerical Integration","text":"<p>Approximate \\(I=\\int_a^b f(x)dx\\)</p> <ul> <li>Integrate the Lagrange interpolating polynomial of  \\(f (x)\\) instead.</li> </ul>"},{"location":"NA/Chap4/Chap4/#composite-numerical-integration","title":"Composite Numerical Integration","text":""},{"location":"NA/Chap4/Chap4/#composite-trapezoidal-rule","title":"Composite Trapezoidal Rule","text":""},{"location":"NA/Chap4/Chap4/#composite-simpsons-rule","title":"Composite Simpson\u2019s Rule","text":""},{"location":"NA/Chap4/Chap4/#romberg-integration","title":"Romberg Integration","text":""},{"location":"NA/Chap4/Chap4/#adaptive-quadrature-methods","title":"Adaptive Quadrature Methods","text":""},{"location":"NA/Chap4/Chap4/#gaussian-quadrature","title":"Gaussian Quadrature","text":"<ul> <li>Precision of degree 3(produces exact result for every polynomial of degree 3 or less)</li> </ul>"},{"location":"NA/Chap5/Chap5/","title":"Chap5","text":""},{"location":"NA/Chap5/Chap5/#preknowledge","title":"Preknowledge","text":""},{"location":"NA/Chap5/Chap5/#eulers-method","title":"Euler's method\uff1a","text":"<p>all step size, the accuracy of approximation increases.</p> <p></p> <p></p>"},{"location":"NA/Chap5/Chap5/#error-analysis","title":"Error Analysis","text":"<p>Refer to the BOOK</p>"},{"location":"NA/Chap5/Chap5/#other-euler-methods","title":"Other Euler Methods","text":""},{"location":"NA/Chap5/Chap5/#implicit-euler-method","title":"Implicit Euler Method","text":"<p>\\(y'(t_0)\\approx\\frac{t(t_0)-y(t_0-h)}{h}\\Rightarrow y(t_1)\\approx y(t_0)+hy'(t_1)=\\alpha+hf(t_1,y(t_1))\\)</p> <p>\\(w_0=\\alpha ; w_{i+1}=w_i+hf(t_{i+1},w_{i+1})(i=0,\u2026\u2026\uff0cn-1)\\)</p> <p>\\(\\tau_{i+1}=\\frac{y_{i+1}-w_{i+1}}{h}==\\frac{h}{2}y''(\\epsilon_i)=o(h)\\)</p>"},{"location":"NA/Chap5/Chap5/#trapezoidal-method","title":"Trapezoidal Method","text":"<p>\\(w_{i+1}=w_i+\\frac{h}{2}[f(t_i,w_i)+f(t_{i+1},w_{i+1})]\\)</p> <ul> <li>Error \\(O(h^2)\\) but implict!! so has to be solved iteratively(LOW!)</li> </ul>"},{"location":"NA/Chap5/Chap5/#double-step-method","title":"Double-step Method","text":"<p>\\(y'(t_0)=\\frac{1}{2h}[y(t_0+h)-y(t_0-h)]-\\frac{h^2}{6}y^{(3)}(\\epsilon_1)\\)</p> <p>\\(\\Rightarrow y(t_2)\\approx y(t_0)+2hf(t_1,y(t_1))\\)</p> <p>\\(w_0=\\alpha\\\\ w_{i+1}=w_{i-1}+2hf(t_i,w_i)\\)</p> <ul> <li>Two initial points are required to start moving forward .</li> </ul>"},{"location":"NA/Chap5/Chap5/#modified-eulers-methodtrapezoidal-method","title":"modified Euler\u2019s method:Trapezoidal Method","text":"<p>Modified Euler's method, also known as the Improved Euler method or Heun's method, is a numerical technique used for approximating solutions to ordinary differential equations (ODEs). It is an extension of the basic Euler's method and provides better accuracy by incorporating a simple correction.</p> <p>The standard Euler's method is a first-order numerical method that uses a linear approximation to update the solution from one time step to the next. However, it can have limited accuracy, especially for ODEs with rapidly changing behavior.</p> <p>The Modified Euler's method improves upon this by using a two-step process:</p> <ol> <li>Prediction Step:</li> </ol> <p>Use the current information to make a preliminary estimate of the solution at the next time step.</p> <p>Predicted Value \\((P)\\):\\(\\tilde{y}_{i+1}=y_{i}+h\u22c5f(t_i,y_i)\\)</p> <p>Here, \\(y_i\\)  is the current approximation, h is the step size, and \\(f(t_i,y_i)\\)represents the derivative of yy with respect to \\(t\\) at the current point.</p> <ol> <li>Correction Step:</li> </ol> <p>Use the predicted value to compute a more accurate estimate by incorporating the derivative at the predicted point.</p> <p>Corrected Value \\((C)\\):\\(y_{i+1}=y_i+\\frac{h}{2}[f(t_i,y_i)+f(t_{i+1},\\tilde{y}_{i+1})]\\)</p> <p>In this step, \\(f(t_i,y_i)\\)represents the derivative at the initial point, and \\(f(t_{i+1},y_{i+1})\\) represents the derivative at the predicted point.</p> <p>Modified Euler's method has a local truncation error of \\(O(h^3)\\), which is an improvement over the \\(O(h^2)\\) local truncation error of the basic Euler method. This makes it more accurate for a wide range of ODEs, and it is still relatively simple to implement.</p>"},{"location":"NA/Chap5/Chap5/#higher-order-taylor-methods","title":"Higher-order Taylor Methods","text":""},{"location":"NA/Chap5/Chap5/#runge-kutta-methods","title":"Runge-Kutta Methods","text":"<p>Runge-Kutta methods are a family of iterative numerical techniques used for solving ordinary differential equations (ODEs) or systems of ODEs. These methods provide an approximation of the solution at discrete points in the domain by iteratively updating the solution from one point to the next.</p> <p>Single-Step Method: </p> <p>In a single-step method, the solution at the next time step \\((t_{i+1},w_{i+1})\\)  is determined based on the information available at the current time step  \\((t_{i},w_{i})\\). This implies that we calculate the next point of the solution through one iteration rather than computing the entire solution curve at once.</p> <p>We can improve the result by finding a better slope.</p> <p>Generalize the modified Euler\u2019s method</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"NA/Chap5/Chap5/#multistep-methods","title":"Multistep Methods","text":"<p>Use a linear combination of y and y at several mesh points to better approximate \\(y(t_{i+1})\\)</p> <p>\\(w_{i+1}=a_{m-1}w_i+a_{m-2}w_{i-1}+\u2026\u2026+h[b_mf_{i+1}+b_{m-1}f_i+\u2026\u2026+b_0f_{i+1-m}]\\)</p> <p>Newton's Forward Difference Interpolation and Newton's Backward Difference Interpolation are both methods for constructing polynomial interpolants, but they differ in terms of the direction in which they compute the differences.</p> <ol> <li>Newton's Forward Difference Interpolation:   - Differences: Forward interpolation starts with the given data point closest to the beginning (usually the lowest x-value) and moves forward.   - Formula: The forward difference formula is given by: \\(f[x_0]+f[x_0,x_1](x\u2212x_0)+f[x_0,x_1,x_2](x\u2212x_0)(x\u2212x_1)+\u2026\\)</li> <li>Newton's Backward Difference Interpolation:   - Differences: Backward interpolation starts with the given data point closest to the end (usually the highest x-value) and moves backward.   - Formula: The backward difference formula is given by: \\(f[x_n]+f[x_n,x_{n\u22121}](x\u2212x_n)+f[x_n,x_{n\u22121},x_{n\u22122}](x\u2212x_n)(x\u2212x_{n\u22121})+\u2026\\)</li> </ol> <p>In both cases, the differences \\(f[x_i,x_{i\u22121},\u2026,x_0]\\) are computed using the divided difference approach. The primary difference between the two methods lies in the direction in which these differences are calculated.</p> <p>Key Points:</p> <ul> <li>Newton's Forward Difference Interpolation works from the initial data point towards the desired point.</li> <li>Newton's Backward Difference Interpolation works from the final data point towards the desired point.</li> <li>Both methods use divided differences to calculate the coefficients of the interpolation polynomial.</li> <li>The choice between forward and backward interpolation may depend on the specific problem and the nature of the available data.</li> </ul>"},{"location":"NA/Chap5/Chap5/#adams-bashforth-explicit-m-step-technique","title":"Adams-Bashforth explicit m-step technique","text":"<p>Derive from integration</p> <ul> <li>Adams-Bashforth explicit m-step technique</li> </ul> <p>1.Use the Newton backward-difference formula to interpolate f  on \\((t_i,f_i),(t_{i-1},f_{i-1})\u2026\u2026(t_{i+1-m},f_{i+1-m})\\) and obtain \\(P_{m-1}(t)\\) </p> <p>2.Or Let \\(t=t_i+sh\\ s\\in[0,1]\\) we have</p> <p>\\(\\int_{t_{i}}^{t_{i+1}}f(t,y(t))dt=h\\int_0^1P_{m-1}(t_i+sh)ds+h\\int_0^1R_{m-1(t_i+sh)}ds\\)</p> <p>\\(\\Rightarrow w_{i+1}=w_i+h\\int_0^1P_{m-1}(t_i+sh)ds\\)</p> <p>3.  The local truncation error for a multistep method is \\(\\tau_{i+1}(h)=y_{i+1}-(a_{m-1}y_i+\u2026\u2026+a_0y_{i+1-m})/h-[b_mf_{i+1}+\u2026\u2026+b_0f_{i+1-m}]\\) for each \\(i=m-1,m\u2026\u2026,n-1\\)</p> <p>Example</p> <p>derive the Adams-Bashforth two-step explicit method.</p> <p>Note \uff1a \\(h\\) is step length \\(h=\\triangle x/n\\)</p> <p></p> <p></p> <ul> <li>Use the Newton forward-difference formula to interpolate f </li> <li>Note: Include\\((t_{i+1},f_{i+1})\\) to interpolate So it is implicit</li> </ul> <p></p>"},{"location":"NA/Chap5/Chap5/#adams-predictor-corrector-system","title":"Adams predictor-corrector system","text":"<ul> <li> <p>Step 1  Compute the first m initial values by Runge-Kutta method.</p> </li> <li> <p>Step 2 Predict by Adams-Bashforth explicit method.</p> </li> <li> <p>Step 3 Correct by Adams-Moulton implicit method.</p> </li> </ul>"},{"location":"NA/Chap5/Chap5/#example","title":"EXAMPLE","text":"<p>Consider a simple first-order ordinary differential equation given by:</p> <p>\\(dy/dt=\u2212y\\)</p> <p>We will use the Adams predictor-corrector method to numerically solve this equation.</p>"},{"location":"NA/Chap5/Chap5/#step-1-compute-the-first-m-initial-values-by-runge-kutta-method","title":"Step 1: Compute the First m Initial Values by Runge-Kutta Method","text":"<p>First, we use the Runge-Kutta method to calculate the initial values. For the given equation, the Runge-Kutta scheme is:</p> <p>\\(k_1=\u2212y_n\\)</p> <p>\\(k_2=\u2212(y_n+0.5hk_1)\\)</p> <p>\\(y_{n+1}=y_n+hk_2\\)</p> <p>Here, \\(h\\) is the time step.</p>"},{"location":"NA/Chap5/Chap5/#step-2-predict-by-adams-bashforth-explicit-method","title":"Step 2: Predict by Adams-Bashforth Explicit Method","text":"<p>The Adams-Bashforth method for a second-order equation is:</p> <p>\\(y_{n+1}^{(p)}=y_n+h(\u2212y_n+\\frac{3}{2}y_{n\u22121})\\)</p>"},{"location":"NA/Chap5/Chap5/#step-3-correct-by-adams-moulton-implicit-method","title":"Step 3: Correct by Adams-Moulton Implicit Method","text":"<p>The Adams-Moulton method for a second-order equation is:</p> \\[y_{n+1}=y_n+h(\u2212\\frac{1}{2}y_{n+1}+\\frac{3}{2}y_{n})\\] <p>This equation needs to be solved iteratively as \\(y_{n+1}\\) appears on both sides of the equation.</p> <p>This is a simple example, and in practice, the Adams predictor-corrector method can be applied to higher-order differential equations. The specific steps and coefficients will vary based on the chosen order. In real-world applications, computational tools or programming languages may be used to perform these calculations.</p> <ul> <li>All the formulae used in the three steps must have the same order of local truncation error.</li> </ul> <p>The most popularly used system is based on the 4<sup>th</sup>-order Adams-Bashforth method as predictor and one iteration of the Adams-Moulton method as corrector, with the starting values obtained from the 4<sup>th</sup>-order Runge-Kutta method.</p>"},{"location":"NA/Chap5/Chap5/#derive-from-taylor-expansion","title":"Derive from Taylor expansion","text":"<ul> <li>derive a formula of order 4 with the form  </li> </ul>"},{"location":"NA/Chap5/Chap5/#higher-order-equations-and-systems-of-differential-equations","title":"Higher-Order Equations and Systems of Differential Equations","text":""},{"location":"NA/Chap5/Chap5/#stability","title":"Stability","text":""},{"location":"NA/Chap5/Chap5/#def","title":"Def","text":"<ul> <li>Def one : A one-step difference equation method with local trucation error \\(\\tau_i(h)\\) is said to be consistent with the differential equation it approximates if \\(lim_{h\\rightarrow 0}|\\tau_i(h)|=0\\)</li> </ul> <p>For multistep methods it is also required that for \\(i=1,2,\u2026\u2026m-1\\)</p> <p>\u200b   \\(lim_{h\\rightarrow 0}|w_i-y_i|=0\\)</p> <ul> <li> <p>A one-step difference equation method is said to be convergent with respect to the differential equation it approximates if \\(lim_{h\\rightarrow 0}max_{1\\le i\\le n}|w_i-y_i|=0\\)</p> </li> <li> <p>Apply a particular method to a simple test equation,y\u2018 =\u03bby, y(0) =\u03b1, where Re(\u03bb ) &lt; 0.Assume that roundoff error is introduced only at the initial point. If this initial error will decrease for a certain step size h, then this</p> </li> </ul> <p>method is said to be absolutely stable with respect to H =\u03bbh. The set of all such H forms the region of absolute stability.</p> <p>Method A is said to be more stable than method B if the region of</p> <p>absolute stability of A is larger than that of B.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"NA/Chap5/Chap5/#def_1","title":"Def","text":""},{"location":"NA/Chap6/Chap6/","title":"Direct Methods for Solving Linear Systems","text":""},{"location":"NA/Chap6/Chap6/#pivoting-strategies","title":"Pivoting Strategies","text":"<ul> <li>Small pivot element may cause trouble.</li> <li>Partial Pivoting (or maximal column pivoting)</li> </ul> <p>Place the element in the pivot position that is largest relative to the entries in its row.</p> <ul> <li> <p>Step 1: define a scale factor \\(s_i\\) for each row as \\(s_i=max_{1\\le j\\le n}|a_{ij}|\\)</p> </li> <li> <p>Step 2:Determine the smallest \\(p\\ge k\\) such that \\(\\frac{|a_{pk}^{(k)}|}{s_p}=max_{k\\le i\\le n}\\frac{|a_{ik}^{(k)}|}{s_i}\\)  (If already at the kth row)</p> </li> </ul>"},{"location":"NA/Chap6/Chap6/#lu-factorization","title":"LU Factorization","text":"<ul> <li>With forward substituion and then backward substitution easily solve the equation.</li> </ul>"},{"location":"NA/Chap6/Chap6/#special-types-of-matrices","title":"Special Types of Matrices","text":"<ul> <li> <p>A strictly diagonally dominant matrix A is nonsingular.  Moreover, Gaussian elimination can be performed without row or column interchanges, and the computations will be stable with respect to the growth of roundoff errors.</p> </li> <li> <p>A matrix A is positive definite if it is symmetric and if \\(\\vec{x^t}A\\vec{x}\\) &gt; 0 for every n-dimensional vector\\(\\vec{x}\\ne 0\\).</p> </li> </ul> <p></p> <ul> <li>Also \\(A^{-1}\\) is positive definite as well and \\(a_{ii}&gt;0\\)</li> <li>\\(max|a_{ij}|\\le max|a_{kk}|;(a_{ij}^2)&lt;a_{ii}a_{jj}\\)</li> <li>Each of A\u2019s leading principal submatrices Ak has a positive determinant.</li> </ul>"},{"location":"NA/Chap6/Chap6/#lu-factorization-of-a-positive-definite-a","title":"LU factorization of a positive definite A","text":""},{"location":"NA/Chap6/Chap6/#crount-reduction-for-tridiagonal-linear-system","title":"Crount Reduction For Tridiagonal Linear System","text":""},{"location":"NA/Chap7/Chap7/","title":"Chap7","text":""},{"location":"NA/Chap7/Chap7/#vector-norms","title":"Vector Norms","text":""},{"location":"NA/Chap7/Chap7/#properties","title":"Properties","text":"<ul> <li>\\(||\\vec{x}||\\ge 0\\) (\\(||\\vec{x}||=0 \\Leftrightarrow \\vec{x}=0\\))</li> <li>\\(||\\alpha \\vec{x}||=|\\alpha|\u00b7||\\vec{x}||\\)</li> <li>\\(||\\vec{x}+\\vec{y}||\\le ||\\vec{x}||+||\\vec{y}||\\)</li> </ul> <p>Matrix Norms </p> <p></p> <p></p> <p></p>"},{"location":"NA/Chap7/Chap7/#eigenvalues-and-eigenvectors","title":"Eigenvalues and Eigenvectors","text":""},{"location":"NA/Chap8/Chap8/","title":"Chap8","text":"<p>a</p>"},{"location":"OS/Summary/Summary/","title":"Summary","text":""},{"location":"OS/Summary/Summary/#interrupt","title":"Interrupt","text":"<ul> <li>x86-32 : int 0x80</li> <li>x86-64 : syscall</li> <li>ARM : svc</li> <li>RIsc-V : ecall</li> </ul>"},{"location":"OS/Summary/Summary/#system-call","title":"System Call","text":""},{"location":"OS/Summary/Summary/#system-call-table","title":"System Call Table","text":"<ul> <li>System call number : index in system call table</li> <li>Approx 300 system calls in Linux</li> </ul>"},{"location":"OS/lec1/lec1/","title":"Lecture 1 - Introduction","text":"<p>"},{"location":"OS/lec1/lec1/#lecture-1-introduction-to-operating-systems","title":"Lecture 1 - Introduction to Operating Systems","text":""},{"location":"OS/lec1/lec1/#10-a-bit-of-history","title":"1.0 A bit of history","text":"<ul> <li>Father of Linux - Linus Torvalds (at age 21)</li> <li>LLVM - Low Level Virtual Machine by Chris Lattner</li> <li>Ubuntu - Linux Core Plus GNU</li> <li>Unix - Multitasking, multi-user OS</li> </ul>"},{"location":"OS/lec1/lec1/#11-what-is-an-operating-system","title":"1.1 What is an Operating System?","text":"<p>An operating system is a software that acts as an intermediary between the computer hardware and the user.  It provides an environment in which a user can execute programs conveniently and efficiently.</p> <ul> <li>Resource Abstractor and Allocator</li> </ul>"},{"location":"OS/lec1/lec1/#starting-an-os","title":"Starting an OS","text":"<ul> <li>The first program that runs when a computer starts up is the bootloader -- the  bootstrap program initializes the computer.</li> <li>Locates and loads the OS kernel into memory</li> <li>Wait for 'event' to occur</li> </ul>"},{"location":"OS/lec1/lec1/#multi-programming","title":"Multi-programming","text":""},{"location":"OS/lec1/lec1/#time-sharing","title":"Time-sharing","text":"<ul> <li>Multi-programming with rapid context switching -- Actually not working all the same time.</li> <li>jobs are called processes</li> </ul>"},{"location":"OS/lec1/lec1/#the-running-os","title":"The running OS","text":"<ul> <li>The kernel is not a running job -- It's code that resides in memory and is ready to be executed at any moment</li> <li>OS be executed on behalf of a job whenever requested</li> <li>OS do special/dangerous things that user programs can't do</li> <li>When designing a kernel : Lean and Mean</li> <li>Lean - Only the necessary features</li> <li>Mean - single minded, focused on the job</li> <li>Size of Linux Kernel when loaded in memory is about x MBs to xx MBs</li> <li>No memory protection with the kernel</li> <li>The kernel's the one saying to a process \"segmentation fault\"</li> <li>Nobody's watching over the kernel</li> </ul>"},{"location":"OS/lec1/lec1/#designing-an-os","title":"Designing an OS","text":"<ul> <li>Design CPU to support OS</li> <li>User / Kernel mode -- add a 'mode bit'</li> <li>User mode - restricted mode</li> <li>Kernel mode - unrestricted mode</li> </ul> <pre><code>------------------------------------\n| APP --&gt; Unprivileged instructions |\n------------------------------------\n| OS --&gt; Privileged instructions    |\n------------------------------------\n|  Hardware                         |\n------------------------------------\n</code></pre>"},{"location":"OS/lec1/lec1/#os-events","title":"OS Events","text":"<p>An event stops execution, changes mode, and changes context</p> <ul> <li>System Call - Request to the OS</li> </ul>"},{"location":"OS/lec1/lec1/#system-calls","title":"System Calls","text":"<p>When a user program need sto do something privileged, it makes a system call</p> <ul> <li>A special kind of trap</li> <li>Every ISA provides a system call instruction that </li> <li>Causes a trap,which maps to a kernel handler</li> </ul>"},{"location":"OS/lec1/lec1/#timers","title":"Timers","text":"<p>The timer interrupts the computer regularly</p> <ul> <li>The OS always makes sure the timer is set before turning over control to user code</li> </ul>"},{"location":"OS/lec1/lec1/#a-process-is-a-program-in-execution","title":"A process is a program in execution","text":"<ul> <li>Program: passive entity</li> <li>Process: active entity</li> </ul> <p>The OS is responsible for :</p> <ul> <li>Creating and deleting processes</li> <li>Suspending and resuming processes</li> <li>Providing mechanisms for process synchronization</li> <li>Providing mechanisms for process communication</li> <li>Providing mechanisms for deadlock handling </li> </ul>"},{"location":"OS/lec2/lec2/","title":"Lecture 2 - OS Structure","text":"<p>"},{"location":"OS/lec2/lec2/#lecture-2-os-structure","title":"Lecture 2 - OS Structure","text":""},{"location":"OS/lec2/lec2/#system-calls","title":"System Calls","text":"<ul> <li>An interface which kernel provides to the user space to interact with the kernel. </li> <li>Syscall : proviledged instruction </li> </ul>"},{"location":"OS/lec2/lec2/#example-ilustration-write","title":"Example Ilustration -- Write()","text":"<ul> <li>First <code>printf()</code> function is called, then <code>write()</code> function is called. In the <code>write()</code> function, there is a system call to the kernel. [with syscall number $0x1]</li> <li>Then, go into kernel space, and the kernel will do the actual writing to the file descriptor.   1) <code>kernel_entry code</code> will be called -- Saved all user space registers   2) calls <code>write syscall handler</code> -- Get from syscall_table, which is an array</li> </ul> <pre><code>SYSCALL_DEFINE3(write, unsigned int, fd, const char __user *, buf, size_t, count)\n{\n    return ksys_write(fd, buf, count);\n}\n</code></pre> <ul> <li>After write finish, call <code>ret_to_user</code> </li> <li>Restore all saved user space registers</li> <li>Transfer control flow to user space</li> </ul>"},{"location":"OS/lec2/lec2/#system-call-implementation","title":"System Call Implementation","text":"<p><code>System-call interface</code> maintains a table indexed according to numbers assigned to each system call. Each entry in the table points to the entry point of the system call.</p> <ul> <li>The system call interface invokes the intended system call in OS kernel and returns status of the system call and any return values</li> <li>The caller needs to know nothing about how the system call is implemented</li> </ul> <p></p>"},{"location":"OS/lec2/lec2/#example-copy-a-file","title":"Example : Copy a file","text":"<ul> <li>Use <code>strace</code> to trace system calls</li> <li><code>strace cp file1 file2</code></li> <li><code>strace -c cp file1 file2</code> -- Count the number of system calls</li> </ul> <pre><code>strace cp main.c main.copy 2&gt;&amp;1 |wc -l #175 lines\n</code></pre> <ul> <li><code>2&gt;&amp;1</code> -- Redirect stderr to stdout</li> <li><code>|wc -l</code> -- Count the number of lines</li> </ul>"},{"location":"OS/lec2/lec2/#time-spent-in-system-calls","title":"Time spent in system calls","text":"<ul> <li><code>time ap start_kernel</code> -- Time spent in system calls</li> </ul> <ul> <li> <p><code>time</code> count multiple pid and sum them up, so it seems that the time spent in system calls is more than the actual time spent in the system calls.</p> </li> <li> <p><code>time grep -Rn start_kernel</code></p> </li> </ul> <p></p>"},{"location":"OS/lec2/lec2/#system-call-parameter-passing","title":"System Call Parameter Passing","text":"<p>Three general methods used to pass parameters to the OS</p> <ul> <li>Simplest: pass the parameters in registers</li> <li>In some cases, may be more parameters than registers</li> <li>Parameters stored in a block, or table, in memory, and address of block passed as a parameter in a register </li> <li>This approach taken by Linux and Solaris</li> <li>Parameters placed, or pushed, onto the stack by the program and popped off the stack by the operating system</li> <li>Block and stack methods do not limit the number or length of parameters being passed</li> </ul>"},{"location":"OS/lec2/lec2/#system-service","title":"System Service","text":""},{"location":"OS/lec2/lec2/#linkers-and-loaders","title":"Linkers and Loaders","text":"<ul> <li>Where does static variable goes? -- <code>.data</code> section</li> <li>Where does static constant goes? -- <code>.rodata</code> section</li> <li> <p>Why unintialized in <code>.bss</code> instead of <code>.data</code>? -- To save space, as <code>.bss</code> is not stored in the file   </p> </li> <li> <p><code>readelf -h main</code></p> </li> <li>Entry Address</li> <li>Magic Number : <code>0x7f 0x45 0x4c 0x46</code> -- ELF : Linux defines the format of the file using magic number</li> </ul> <p></p>"},{"location":"OS/lec2/lec2/#linking","title":"Linking","text":""},{"location":"OS/lec2/lec2/#static-linking","title":"Static Linking","text":"<ul> <li>All needed code is packed in single binary, leading to large binary</li> <li>\u53ef\u4ee5\u79fb\u690d\u6027\u5f3a</li> </ul>"},{"location":"OS/lec2/lec2/#dynamic-linking","title":"Dynamic linking","text":"<ul> <li>Reuse libraries to reduce ELF file size.</li> <li>How to resolve library calls?</li> </ul> <pre><code>readelf -p .interp main\n</code></pre> <ul> <li>This dump the <code>.interp</code> section of the ELF file, which contains the path of the dynamic linker</li> <li>It is the loader who resolves lib calls.</li> <li>lib call: like <code>printf()</code></li> <li>loader: <code>ld-linux-aarch64.so.1</code></li> </ul>"},{"location":"OS/lec2/lec2/#running-a-binary","title":"Running a Binary","text":"<ul> <li>While for static linking, the mapping is much less.</li> </ul> <ul> <li>Memory layout is in user space ?</li> <li>User space: stack, heap, data, text</li> <li>Kernel space: kernel code, kernel data, kernel stack</li> </ul>"},{"location":"OS/lec2/lec2/#questions","title":"Questions","text":"<ul> <li>Who setups ELF file mapping? -- kernel: execve() system call</li> </ul> <ul> <li>Who setups stack and heap?</li> <li>Who setups libraries?</li> </ul> <ul> <li>Dynamic linking has to do more system calls</li> </ul>"},{"location":"OS/lec2/lec2/#setup-a-binary","title":"Setup a Binary","text":""},{"location":"OS/lec2/lec2/#static-binary","title":"Static Binary","text":"<ul> <li>In <code>readelf</code> we see that entry of the <code>main.static</code> is <code>0x400640</code></li> <li>We find that <code>0x400640</code> is the address of the <code>start</code> function in the <code>main.static</code> binary</li> <li><code>objdump-d a.out</code></li> </ul> <ul> <li><code>regs-&gt;pc = pc</code> here <code>pc</code> is the address of the <code>start</code> function -- <code>elf_entry</code></li> </ul>"},{"location":"OS/lec2/lec2/#dynamic-binary","title":"Dynamic Binary","text":"<ul> <li>For dynamic binary, the elf_entry -- <code>interp_elf_ex -&gt; e_entry</code> </li> <li><code>ld.so</code> -- Loader resolves the library calls</li> <li>So loader has to be called first, then the <code>start</code> function</li> </ul>"},{"location":"OS/lec2/lec2/#why-applications-are-operating-system-specific","title":"Why Applications are Operating System Specific","text":"<p>System calls are different -- name / number</p> <p>Apps can be multi-operating system * Written in interpreted language like Python, Ruby, and interpreter available on multiple operating systems * App written in language that includes a VM containing the running app (like Java) * Use standard language (like C), compile separately on each operating system to run on each</p> <p>Application Binary Interface (ABI) is architecture equivalent of API, defines how different components of binary code can interface for a given operating system on a given architecture, CPU, etc </p>"},{"location":"OS/lec2/lec2/#operating-system-design-and-implementation","title":"Operating-System Design and Implementation","text":""},{"location":"OS/lec2/lec2/#operating-system-structure","title":"Operating System Structure","text":"<p>General-purpose OS is very large program</p> <p>Various ways to structure ones</p> <ul> <li>Simple structure \u2013MS-DOS</li> <li>Monolithic \u2013Unix, Linux</li> <li>Layered \u2013an abstraction</li> <li> <p>Microkernel \u2013Mach</p> </li> <li> <p>Good Helper Website</p> </li> </ul>"},{"location":"OS/lec2/lec2/#building-and-booting-an-operating-system","title":"Building and Booting an Operating System","text":""},{"location":"OS/lec2/lec2/#operating-system-debugging","title":"Operating System Debugging","text":""},{"location":"OS/lec3/lec3/","title":"Lecture 3 - Process","text":"<p>"},{"location":"OS/lec3/lec3/#lecture-3-process","title":"Lecture 3 - Process","text":""},{"location":"OS/lec3/lec3/#process-concept","title":"Process Concept","text":"<p>Process\uff1aa unit of resource allocation and protection.</p> <p><pre><code>Process = code (also called the text)\n            initially stored on disk in an executable file\n          data section\n             global variables (.bssand .data in x86 assembly)\n          program counter\n            points to the next instruction to execute (i.e., an address in the code)\n          contents of the processor's registers\n          a stack\n          a heap\n----------------------------------------------\n|                 Stack                      |\n|--------------------------------------------|\n|                  |                         |\n|                  v                         |\n|                 ...                        |\n|                 ...                        |\n|                  ^                         |\n|                  |                         |\n|--------------------------------------------|\n|                 Heap                       |  \n|--------------------------------------------|\n|                 Data                       |\n|--------------------------------------------|\n|                 Code                       |\n----------------------------------------------\n</code></pre> </p>"},{"location":"OS/lec3/lec3/#runtime-stack","title":"Runtime Stack","text":"<ul> <li>Two processes share the same code, but have different runtime stack/heap.</li> </ul> <ul> <li>Dijkstra's stack model</li> </ul>"},{"location":"OS/lec3/lec3/#process-control-block","title":"Process Control Block","text":"<p>Each process has and only has a PCB * Allocate a PCB on new process creation * Free the PCB on process termination</p> <p>Represented by the C structure task_struct </p>"},{"location":"OS/lec3/lec3/#process-state","title":"Process State","text":"<ul> <li>process 0 is the idle process   1. Process 0 run when no other process is running   2. Process 0 -&gt; process 1</li> <li>process 1 is the init process   1. Process 1 is the parent of all other processes</li> <li>systemd is the init process in modern Linux   1. systemd is the parent of all other processes   2. systemd is the first process to run after the kernel is loaded   3. when systemd terminates -- user space ternimated, the system will reboot</li> </ul>"},{"location":"OS/lec3/lec3/#process-creation","title":"Process Creation","text":""},{"location":"OS/lec3/lec3/#the-fork-system-call","title":"The <code>fork()</code> System Call","text":"<ul> <li><code>fork()</code> creates a new process</li> <li> <p>The child is is a copy of the parent, but...   1. It has a different pid(and thus ppid)   2. Its resource utilization (so far) is set to 0</p> </li> <li> <p><code>fork()</code> returns the child\u2019s pid to the parent, and 0 to the child</p> </li> <li>Each process can find its own pidwith the <code>getpid()</code> call, and its ppidwith the <code>getppid()</code> call</li> <li>Both processes continue execution after the call to <code>fork()</code></li> </ul> <pre><code>pid=fork();\nif (pid&lt;0) {\n    fprintf(stdout, \"Error: can\u2019t fork()\\n\");\n    perror(\u201cfork()\u201d);\n}\nif(pid!=0) {\n    fprintf(stdout, \"I am parent and my child has pid%d\\n\",pid);while(1);\n} else{\n    fprintf(stdout, \"I am child, and my pidis %d\\n\", getpid());while(1) ;\n}\n</code></pre> <ul> <li>Further Explian:   1. Child prcess is a copy of the parent process!   2. Next line for child is also <code>if(pid!=0)</code>, but for child, <code>pid</code> is 0, so the child will not enter the <code>if</code> block</li> </ul> <pre><code>int a = 12\nif(pid = fork()){// PARENT\n    // ask the OS to put me in waiting\n    sleep(10); // 10 seconds\n    fprintf(stdout,\"a =%d\\n\",a);\n}\nelse{//CHILD\n    a += 3;\n    while(1);\n}\n</code></pre> <ul> <li>What is the output of the above code?   1. The parent process will print <code>a = 12</code>   2. The child process cannot modify the parent's memory space</li> </ul> <p></p> <ul> <li> <p>How many times will the following code print \"Hello\"? <pre><code>pid1 = fork();\nprintf(\"Hello\\n\");\npid2 = fork();\nprintf(\"Hello\\n\");\n</code></pre></p> </li> <li> <p>6 times</p> </li> </ul> <p> </p>"},{"location":"OS/lec3/lec3/#unix-examples","title":"UNIX examples","text":"<ul> <li><code>fork()</code> system call creates new process</li> <li><code>execve()</code> system call used after a <code>fork()</code> to replace the process\u2019memory space with a new program</li> <li>Parent process calls <code>wait()</code> for the child to terminate</li> </ul> <p>Demo of how the system do <code>ls</code></p> <p></p> <p>\u5177\u4f53\u6765\u8bf4\uff0c\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u8c03\u7528 exec \u7cfb\u5217\u51fd\u6570\uff08\u4f8b\u5982 execl()\u3001execv() \u7b49\uff09\u65f6\uff0c\u5b83\u4f1a\u7528\u4e00\u4e2a\u65b0\u7684\u7a0b\u5e8f\u66ff\u6362\u5f53\u524d\u8fdb\u7a0b\u7684\u5185\u5bb9\u3002\u8c03\u7528\u6210\u529f\u540e\uff0c\u65e7\u7684\u7a0b\u5e8f\u4ee3\u7801\u3001\u6570\u636e\u548c\u6808\u90fd\u4f1a\u88ab\u65b0\u7a0b\u5e8f\u7684\u5185\u5bb9\u53d6\u4ee3\uff0c\u4f46\u8fdb\u7a0bID\uff08PID\uff09\u4fdd\u6301\u4e0d\u53d8\uff0c\u8fd9\u610f\u5473\u7740\u65b0\u7a0b\u5e8f\u7ee7\u7eed\u5728\u540c\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u3002\u6b64\u65f6\uff0c\u5f53\u524d\u8fdb\u7a0b\u7684\u6240\u6709\u6267\u884c\u72b6\u6001\u90fd\u4f1a\u88ab\u65b0\u7a0b\u5e8f\u7684\u72b6\u6001\u66ff\u4ee3\uff0c\u539f\u8fdb\u7a0b\u7684\u4ee3\u7801\u4e0d\u4f1a\u518d\u6267\u884c\u3002</p>"},{"location":"OS/lec3/lec3/#pros-and-cons-of-fork","title":"pros and cons of <code>fork()</code>","text":"<ul> <li>Pros   1. \u7b80\u6d01\uff1aWindowsCreateProcess\u9700\u63d0\u4f9b10\u4e2a\u53c2\u6570   2. \u5206\u5de5\uff1afork\u642d\u8d77\u9aa8\u67b6\uff0cexec\u8d4b\u4e88\u7075\u9b42   3. \u8054\u7cfb\uff1a\u4fdd\u6301\u8fdb\u7a0b\u4e0e\u8fdb\u7a0b\u4e4b\u95f4\u7684\u5173\u7cfb</li> <li>Cons   1. \u590d\u6742\uff1a\u4e24\u4e2a\u7cfb\u7edf\u8c03\u7528   2. \u6027\u80fd\u5dee   3. \u5b89\u5168\u6027\u95ee\u9898</li> </ul>"},{"location":"OS/lec3/lec3/#demo","title":"DEMO","text":"<ul> <li>Originally, highlighted part is in the parent process,so the parent process will print \"Will I be executed?\"</li> <li>After <code>fork()</code>, the child process do <code>execve()</code>, so the child process will not print \"Will I be executed?\"; it will call another program</li> </ul>"},{"location":"OS/lec3/lec3/#process-termination","title":"Process Termination","text":""},{"location":"OS/lec3/lec3/#wait-and-waitpid","title":"Wait and Waitpid","text":"<ul> <li>A parent can wait for a child to complete </li> <li>The <code>wait()</code> call    1. blocks until any child completes   2. returns the pidof the completed child and the child\u2019s exit code</li> <li>The <code>waitpid()</code> call   1. blocks until a specific child completes   2. can be made non-blocking with WNOHANG options\uf06cRead the man pages (\u201cman 2waitpid\u201d)</li> </ul>"},{"location":"OS/lec3/lec3/#process-and-signal","title":"Process and Signal","text":""},{"location":"OS/lec3/lec3/#zombie-process","title":"Zombie Process","text":"<p>Question: what resources cannot be deallocated by the child process? * PCB (Process Control Block)</p> <p></p> <ul> <li>A process that has terminated, but whose parent has not yet called <code>wait()</code></li> <li>The process is in the <code>Z</code> state</li> </ul> <p></p> <ul> <li>Add <code>wait()</code> to the parent process to avoid zombie process or <code>waitpid(pid)</code></li> </ul>"},{"location":"OS/lec3/lec3/#orphan-process","title":"Orphan Process","text":"<ul> <li>Another way to avoid zombie process:</li> </ul> <pre><code>if(pid&lt;0){\n    fprintf(stdout, \"Error: can\u2019t fork()\\n\");\n    perror(\u201cfork()\u201d);\n}\nif(pid!=0){\n    fprintf(stdout, \"I am parent and my child has pid%d\\n\",pid);\n    while(1);\n    //did not call wait() not properly\n} else{ //I am the child\n      pid = fork();\n      if(pid&lt;0){\n          fprintf(stdder,\"Error: can't fork()\\n\");\n          perror(\"fork()\");\n          exit(1);\n      }\n      if(pid==0){\n          fprintf(stdder,\"I am the grandchild, and my pid is %d\\n\",getpid());\n          sleep(10);\n          exit(0);\n      }\n      else{\n          sleep(1);\n          // parent exits without waiting for the child\n          // grandchild becomes an orphan -- not a zombie\n          exit(0);\n      }\n}\n</code></pre>"},{"location":"OS/lec3/lec3/#process-scheduling","title":"Process Scheduling","text":"<ul> <li>Ready queue : A set of all processes residing in main memory, ready and waiting to execute.</li> <li>Not empty -- IDLE process always in the ready queue</li> <li>Only one ready queue in the system</li> <li>Wait queue - A set of processes waiting for an event.</li> <li> <p>Processes migrate among the various queues.</p> </li> <li> <p>\u5f53\u6211\u4eec\u60f3\u8981\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\u65f6\uff0c\u76f4\u63a5\u901a\u8fc7\u53cc\u5411\u94fe\u8868\u63a5\u4e0a\u5373\u53ef\u3002</p> </li> <li>\u901a\u8fc7\u504f\u79fb\u91cf\u627e\u5230\u5bf9\u5e94\u5730\u5740\uff0c\u5e76\u901a\u8fc7\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u5f97\u5230 task_struct\u3002</li> </ul> <p></p> <ul> <li>\u5f53\u6211\u4eec\u60f3\u8981\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\u65f6\uff0c\u76f4\u63a5\u901a\u8fc7\u53cc\u5411\u94fe\u8868\u63a5\u4e0a\u5373\u53ef\u3002\u901a\u8fc7\u504f\u79fb\u91cf\u627e\u5230\u5bf9\u5e94\u5730\u5740\uff0c\u5e76\u901a\u8fc7\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u5f97\u5230 task_struct\u3002</li> </ul> <p></p> <ul> <li>P and C who will run first?</li> <li>Depends on the Scheduler</li> </ul>"},{"location":"OS/lec3/lec3/#context-switch","title":"Context Switch","text":"<ul> <li>Context switch is the process of saving the state of the current process and restoring the state of a new process.</li> <li>CPU only has one register set [Context] =&gt; [Register Set]</li> <li> <p>Context Switch is Pure Overhead   1. Should be minimized.</p> </li> <li> <p>Code</p> </li> </ul> <p></p> <ol> <li>Save the current process's context </li> <li>cpu_context in task_struct, which is a pointer to the current process's context</li> <li>Save the current process's context to the cpu_context[in task_struct]</li> <li>Save the current process's stack pointer to the task_struct</li> <li><code>x8</code> points to the task_struct of the process to be switched in</li> <li>Load the new process's context from the cpu_context[in new task_struct]</li> <li>Load the new process's stack pointer from the new task_struct</li> </ol> <ul> <li>When is the ret value of <code>switch_to()</code> set ?</li> </ul> <p></p> <ul> <li>Now, <code>task_struct</code> is on the heap.</li> <li>Context Switch is in Kernel Mode. </li> <li>Why <code>fork()</code> can return two different values in parent and child processes?</li> <li> <p>Because <code>fork()</code> , then, two set of context values.</p> </li> <li> <p>see https://note.hobbitqia.cc/OS/chap02/#context-switch </p> </li> </ul>"},{"location":"OS/lec5/Lecture5/","title":"Lecture5","text":"<p>"},{"location":"OS/lec5/Lecture5/#segmentation","title":"Segmentation","text":""},{"location":"OS/lec5/Lecture5/#segmentation-fault","title":"Segmentation Fault:","text":"<ul> <li>Segementation -- In x86 architecture, memory is divided into segments, each with a base address and a limit.</li> <li>Segmentation Fault -- Caused by accessing memory that \"does not belong to you\" (e.g. trying to write to a read-only segment of memory).</li> <li> <p>Segmentation -- Not fixed size, can grow or shrink as needed. </p> </li> <li> <p>Still have External Fragmentation -- Segments are of varying sizes, so memory may not be used efficiently.</p> </li> <li>How to solve this? -- Paging </li> </ul>"},{"location":"PPL/lec1/lec1/","title":"Lecture 1 - lambda calculus","text":"<p>"},{"location":"PPL/lec1/lec1/#lec-1-lambda-calculus","title":"Lec 1  \\(\\lambda\\)-Calculus","text":"<p>Lambda calculus is a formal system in mathematical logic for expressing computation based on function abstraction and application using variable binding and substitution.</p>"},{"location":"PPL/lec1/lec1/#definition","title":"Definition","text":"<ul> <li>Variables: \\(x, y, z, \\ldots\\)</li> <li>Abstraction: \\(\\lambda x.M\\) where \\(x\\) is a variable and \\(M\\) is a lambda term.</li> <li>Application: if \\(M\\) and \\(N\\) are lambda terms, then \\((M N)\\) is a lambda term.</li> </ul>"},{"location":"PPL/lec1/lec1/#example","title":"Example","text":"<ul> <li>Identity function: \\(\\lambda x.x\\) </li> <li>Constant function: \\(\\lambda x.y\\)</li> <li>\\(\\lambda x.(\\lambda y.y x)\\) is a function that takes two arguments and returns the second one. -- Abstraction (Definition)</li> <li>Example: \\((\\lambda x.(\\lambda y.y x)) a b \\rightarrow (\\lambda y.y a) b \\rightarrow b a\\)</li> <li>\\((\\lambda x.x)y\\) is a function that takes one argument and returns the argument. -- Application</li> <li>Example: \\((\\lambda x.x)y \\rightarrow y\\)</li> <li>\\((\\lambda x.x) (\\lambda y.y x)\\) is a function that takes one argument and returns the identity function. -- Application </li> <li>Example: \\((\\lambda x.x) (\\lambda y.y x) \\rightarrow \\lambda y.y x\\)</li> </ul>"},{"location":"PPL/lec1/lec1/#free-and-bound-variables","title":"Free and Bound Variables","text":"<ul> <li>A variable \\(x\\) is free in \\(M\\) if \\(x\\) is not bound by any \\(\\lambda\\) in \\(M\\).</li> <li>A variable \\(x\\) is bound in \\(M\\) if \\(x\\) is bound by some \\(\\lambda\\) in \\(M\\).</li> </ul>"},{"location":"PPL/lec1/lec1/#example_1","title":"Example","text":"<ul> <li>In \\(\\lambda x.x\\), \\(x\\) is bound.</li> <li>In \\(\\lambda x.y\\), \\(y\\) is free.</li> <li>In \\(\\lambda x.y x\\), \\(x\\) is bound and \\(y\\) is free.</li> <li>In \\((\\lambda y,y)(\\lambda x.xy)\\), represented as \\(MN\\) where \\(M = (\\lambda y.y)\\) and \\(N = (\\lambda x.xy)\\), \\(x\\) is bound in \\(N\\) and \\(y\\) is bound in \\(M\\).</li> <li>In M: \\(y\\) is bound.</li> <li>In N: \\(x\\) is bound and \\(y\\) is free. also \\(y\\) has nothing to do with the \\(y\\) in \\(M\\).</li> <li>In \\(\\lambda x.(\\lambda y.y xz)\\), \\(x\\) is bound by the first \\(\\lambda\\) and \\(y\\) is bound by the second \\(\\lambda\\) and \\(z\\) is free.</li> </ul>"},{"location":"PPL/lec1/lec1/#free-variable","title":"Free Variable","text":"<p>CANNOT CHANGE NAME OF FREE VARIABLE</p> <ul> <li>\\(FV(x) = \\{x\\}\\)</li> <li>\\(FV(\\lambda x.t') = FV(t') - \\{x\\}\\)</li> <li>\\(FV(t_1 t_2) = FV(t_1) \\cup FV(t_2)\\)</li> </ul>"},{"location":"PPL/lec1/lec1/#bound-variable","title":"Bound Variable","text":"<p>CAN CHANGE NAME OF BOUND VARIABLE * \\(BV(x) = \\emptyset\\) * \\(BV(\\lambda x.t') = BV(t') \\cup \\{x\\}\\) * \\(BV(t_1 t_2) = BV(t_1) \\cup BV(t_2)\\)</p>"},{"location":"PPL/lec1/lec1/#example2","title":"Example2","text":"<ul> <li>\\(BV(\\lambda x.y x) = \\{x\\}\\) ; \\(FV(\\lambda x.y x) = \\{y\\}\\)</li> <li>\\(BV(xyz) = \\emptyset\\) ; \\(FV(xyz) = \\{x, y, z\\}\\)</li> <li>\\(BV(\\lambda x.\\lambda y.x) = \\{x,y\\}\\) ; \\(FV(\\lambda x.\\lambda y.x) = \\emptyset\\)</li> <li>\\(BV(\\lambda x.\\lambda y.y)=\\{x,y\\}\\) ; \\(FV(\\lambda x.\\lambda y.y) = \\emptyset\\)</li> </ul>"},{"location":"PPL/lec1/lec1/#closed-term","title":"Closed Term","text":"<ul> <li>A term with no free variables is called a closed term: \\(FV(t) = \\emptyset\\)</li> <li>Term \\(t\\) \u76f8\u5bf9\u4e8e term \\(t'\\)\u5c01\u95ed if and only if \\(FV(t) \\cap BV(t') = \\emptyset\\)</li> <li>\\(t\\) 's free variables are not bound by \\(t'\\)</li> <li>Closed term s is a closed term relative to any term \\(t\\).</li> </ul>"},{"location":"PPL/lec1/lec1/#substitution","title":"Substitution","text":"<ul> <li>\\([N/x]M\\) implies that all occurrences of \\(x\\) in \\(M\\) are replaced by \\(N\\).</li> <li>In M, there cannot be any bound variable with the same name as the free variable in N.</li> </ul>"},{"location":"PPL/lec1/lec1/#alpha-renaming","title":"\\(\\alpha\\)-Renaming","text":"<ul> <li>\\(\\forall x\\) and \\(\\forall term\\ t'\\) \\(\\lambda x.t' =_{\\alpha} \\lambda y.[y/x]t'\\).</li> <li>If \\(t' =_{\\alpha} t''\\), then \\(\\lambda x.t' =_{\\alpha} \\lambda x.t''\\).</li> <li>If \\(t_1 =_{\\alpha} t_1'\\) and \\(t_2 =_{\\alpha} t_2'\\), then \\(t_1 t_2 =_{\\alpha} t_1' t_2'\\).</li> </ul>"},{"location":"PPL/lec1/lec1/#beta-reduction","title":"\\(\\beta\\)-Reduction","text":"<ul> <li>\\(\\forall x\\) and \\(\\forall term\\ t_1'\\) and \\(t_2\\), if   \\(t_2\\) is closed relative to \\(t_1'\\), then \\((\\lambda x.t_1')t_2 =_{\\beta} [t_2/x]t_1'\\).</li> <li>If \\(t_1 =_{\\beta} t_1'\\) and \\(t_2 =_{\\beta} t_2'\\), then \\(t_1 t_2 =_{\\beta} t_1' t_2'\\).</li> <li>If \\(t_1 =_{\\beta} t_1'\\), then \\(\\lambda x.t_1 =_{\\beta} \\lambda x.t_1'\\).</li> </ul>"},{"location":"PPL/lec1/lec1/#eta-conversion","title":"\\(\\eta\\)-Conversion","text":"<ul> <li>\\(\\forall x\\) and \\(\\forall term\\ t'\\), \\(\\lambda y.(\\lambda x.t')y =_{\\eta} \\lambda x.t'\\) </li> <li>if \\(t_1 =_{\\eta} t_1'\\) and \\(t_2 =_{\\eta} t_2'\\), then \\(t_1 t_2 =_{\\eta} t_1' t_2'\\).</li> <li>if \\(t_1 =_{\\eta} t_1'\\), then \\(\\lambda x.t_1 =_{\\eta} \\lambda x.t_1'\\).</li> </ul>"},{"location":"PPL/lec1/lec1/#equationsemantics","title":"EquationSemantics","text":""},{"location":"PPL/lec1/lec1/#function-composition","title":"Function Composition","text":"<ul> <li>composition operator: \\(\\circ\\)</li> <li>\\((f \\circ g )(x) = f(g(x))\\)</li> <li>\\(f \\circ g = \\lambda x.f(g(x))\\)</li> <li>\\(\\circ\\) itself is a function : \\(\\lambda f.\\lambda g.\\lambda x.f(g(x))\\)</li> </ul>"},{"location":"PPL/lec1/lec1/#application","title":"Application","text":""},{"location":"PPL/lec1/lec1/#representing-boolean-values","title":"Representing Boolean Values","text":""},{"location":"PPL/lec1/lec1/#true-and-false","title":"True and False","text":"<p>True: \\(\\lambda x.\\lambda y.x\\)</p> <p>False: \\(\\lambda x.\\lambda y.y\\)</p> <p>Example: (in steps):</p> <ul> <li>\\((\\lambda x.\\lambda y.x) a b \\rightarrow (\\lambda y.a) b \\rightarrow a\\)</li> <li>\\((\\lambda x.\\lambda y.y) a b \\rightarrow (\\lambda y.y) b \\rightarrow b\\)</li> </ul> <p>not</p> <ul> <li>\\(\\lambda b.b\\ (\\lambda x.\\lambda y.y)\\ (\\lambda x.\\lambda y.x)\\)</li> </ul> <p>and</p> <ul> <li>\\(\\lambda a. \\lambda b. a\\ b\\ a\\)</li> <li>and True False : </li> </ul> \\[ \\begin{align*} &amp;(\\lambda a. \\lambda b. a\\ b\\ a)\\ (\\lambda x.\\lambda y.x)\\ (\\lambda x.\\lambda y.y)\\\\ &amp;\\rightarrow (\\lambda b.(\\lambda x.\\lambda y.x)\\ b\\ (\\lambda x.\\lambda y.x))\\ (\\lambda x.\\lambda y.y)\\\\ &amp;\\rightarrow (\\lambda x.\\lambda y.x)\\ (\\lambda x.\\lambda y.y)\\ (\\lambda x.\\lambda y.x) note :\\ True\\ chooses\\ the\\ first\\ one \\\\  &amp;\\rightarrow(\\lambda x.\\lambda y.y)\\\\ \\end{align*} \\] <p>or</p> <ul> <li>\\(\\lambda a. \\lambda b. a\\ a\\ b\\)</li> </ul> <p>xor</p> <ul> <li>\\(\\lambda a. \\lambda b. a\\ (not\\ b)\\ b\\)</li> </ul>"},{"location":"PPL/lec1/lec1/#representing-natural-numbers","title":"Representing Natural Numbers","text":"\\[ \\begin{align*} &amp;\\bar{0} = \\lambda s.\\lambda z.z =z\\\\ &amp;\\bar{1} = \\lambda s.\\lambda z.s\\ z\\\\ &amp;\\bar{2} = \\lambda s.\\lambda z.s\\ (s\\ z)\\\\ &amp;\\bar{3} = \\lambda s.\\lambda z.s\\ (s\\ (s\\ z))\\\\ &amp; ...\\\\ &amp;\\bar{n} = \\lambda s.\\lambda z.s^n\\ z\\\\ \\end{align*} \\]"},{"location":"PPL/lec1/lec1/#define-z-and-s","title":"Define z and s","text":"<ul> <li>The representation \\(\\bar{n}\\) iterates its first argument \\(n\\) times on its second argument.</li> </ul> \\[ \\bar{n}fx = f^b(x) \\] <ul> <li>To define a successor function that satisfies succ \\(\\bar{n} = \\overline{n+1}\\), we need to define \\(s\\) and \\(z\\).</li> </ul> \\[ \\begin{align*} &amp;zeor = \\bar{0} = \\lambda s.\\lambda z.z\\\\ &amp;succ = \\lambda n.\\overline{n+1} = \\lambda n.\\lambda s.\\lambda z.s(n\\ s\\ z)\\\\ \\end{align*} \\] <ul> <li>To define addition, we need to define \\(add\\).</li> </ul> \\[ \\begin{align*} &amp;add = \\lambda m.\\lambda n.m\\ succ\\ n\\\\ \\end{align*} \\] <ul> <li>To define multiplication, we need to define \\(mul\\).</li> </ul> \\[ \\begin{align*} &amp;mul = \u03bbm. \u03bbn. \u03bbf. m (n f)\\\\ \\end{align*} \\] <p>Let's walk through a concrete example of the multiplication function in lambda calculus, using Church numerals to represent numbers. The Church numeral for a natural number \\( n \\) is defined as a function that applies a given function \\( f \\) to an argument \\( x \\), \\( n \\)-times. Here\u2019s a quick refresher on the Church numerals:</p> <ul> <li>0: \\( \\lambda f. \\lambda x. x \\)</li> <li>1: \\( \\lambda f. \\lambda x. f(x) \\)</li> <li>2: \\( \\lambda f. \\lambda x. f(f(x)) \\)</li> <li>3: \\( \\lambda f. \\lambda x. f(f(f(x))) \\)</li> <li>And so on.</li> </ul> <p>Multiplication Function: The multiplication function is: [ mul = \\lambda m.\\lambda n.\\lambda f. m (n f) ] This means \\( m \\) is applied \\( n \\)-times to a function \\( f \\).</p> <p>Example: Multiply 2 and 3 To demonstrate, we'll compute \\( 2 \\times 3 \\) using Church numerals for 2 and 3.</p> <ul> <li>\\( 2 \\) is \\( \\lambda f. \\lambda x. f(f(x)) \\)</li> <li>\\( 3 \\) is \\( \\lambda f. \\lambda x. f(f(f(x))) \\)</li> </ul> <p>Now, let\u2019s compute \\( mul(2)(3) \\):</p> <ol> <li>Apply \\( mul \\) to 2:</li> </ol> \\[ \\begin{align*} &amp;mul\\ 2 = \\lambda n.\\lambda f. 2 (n f)\\\\ &amp;\\text{Substituting } 2 = \\lambda f.\\lambda x.f(f(x)):\\\\ &amp;mul\\ 2 = \\lambda n.\\lambda f. (\\lambda f.\\lambda x. f(f(x))) (n f)\\\\ \\end{align*} \\] <ol> <li>Apply \\( mul(2) \\) to 3:</li> </ol> \\[ \\begin{align*} &amp;\\text{Now,apply} n = 3 = \\lambda f. \\lambda x. f(f(f(x)))\\\\ &amp;mul\\ 2\\ 3 = \\lambda f. (\\lambda x. f(f(x))) (3 f)\\\\ &amp;\\text{Substituting } 3 f = \\lambda x. f(f(f(x))):\\\\ &amp;mul\\ 2\\ 3 = \\lambda f. (\\lambda x. f(f(x))) (\\lambda x. f(f(f(x))))\\\\ \\end{align*} \\] <ol> <li>Simplify the Expression:</li> </ol> \\[ \\begin{align*} &amp;\\text{Now, apply } \\lambda x. f(f(x)) \\text{ to } \\lambda x. f(f(f(x))), \\text{ replacing } x \\text{ in } f(f(x)) \\text{ with } \\lambda x. f(f(f(x))), \\text{ resulting in:}\\\\ &amp;mul\\ 2\\ 3 = \\lambda f. \\lambda x. f(f(f(f(f(f(x))))))\\\\ \\end{align*} \\] <p>Thus, \\( mul\\ 2\\ 3 = \\lambda f. \\lambda x. f(f(f(f(f(f(x)))))) \\), which is the Church numeral for 6.</p> <p>Conclusion: This result shows that applying the multiplication function to the Church numerals for 2 and 3 correctly gives the Church numeral for 6, as expected.</p> <ul> <li>To define exponentiation, we need to define \\(exp\\).</li> </ul> \\[ \\begin{align*} &amp;exp = \\lambda m.\\lambda n.n\\ m\\\\ \\end{align*} \\] <p>In lambda calculus, exponentiation (<code>exp</code>) can be defined as repeated application of multiplication. Specifically, exponentiation can be thought of as applying a number \\( n \\) (the exponent) to a function \\( m \\) (the base) a number of times. This means we can define exponentiation in terms of function application.</p> <p>Explanation: - \\( m \\) is the base, which is a Church numeral. - \\( n \\) is the exponent, which is also a Church numeral. - In lambda calculus, \\( n\\ m \\) means applying \\( m \\), \\( n \\)-times. Since a Church numeral represents the number of times to apply a function, this effectively results in exponentiation.</p> <p>This function takes two Church numerals \\( m \\) and \\( n \\), and applies the base \\( m \\), \\( n \\)-times. The result is \\( m^n \\), which is the Church numeral representing the result of exponentiation.</p> <p>Example: \\( 2^3 \\) Let\u2019s compute \\( 2^3 \\) using this definition.</p> <ol> <li> <p>Church Numerals:    - \\( 2 = \\lambda f. \\lambda x. f(f(x)) \\)    - \\( 3 = \\lambda f. \\lambda x. f(f(f(x))) \\)</p> </li> <li> <p>Exponentiation Function:</p> </li> </ol> \\[ \\begin{align*} &amp;exp = \\lambda m. \\lambda n. n\\ m\\\\ \\end{align*} \\] <ol> <li>Apply \\( exp \\) to \\( 2 \\) and \\( 3 \\):</li> </ol> \\[ \\begin{align*} &amp;exp\\ 2\\ 3 = 3\\ 2\\\\ &amp;\\text{Substituting } 3 = \\lambda f. \\lambda x. f(f(f(x)))\\\\  &amp;\\text{this becomes:}\\\\ &amp;exp\\ 2\\ 3 = (\\lambda f. \\lambda x. f(f(f(x))))\\ 2\\\\ \\end{align*} \\] <ol> <li>Simplification:</li> </ol> \\[ \\begin{align*} &amp;\\text{Now, apply } 2 = \\lambda f. \\lambda x. f(f(x)) \\text{ to } 3 = \\lambda f. \\lambda x. f(f(f(x))), \\text{ resulting in:}\\\\ &amp;exp\\ 2\\ 3 = \\lambda x. 2(2(2(x)))\\\\ \\end{align*} \\] <p>Expanding this, each application of \\( 2 \\) adds another layer of function application:</p> \\[ \\begin{align*} &amp;= \\lambda x. 2(2(f(f(x)))\\\\ &amp;= \\lambda x. 2(f(f(f(f(x))))\\\\ &amp;= \\lambda x. f(f(f(f(f(f(f(f(x)))))))\\\\ \\end{align*} \\] <p>This result corresponds to the Church numeral for \\( 8 \\), which is \\( 2^3 \\).</p> <p></p>"},{"location":"PPL/lec2/lec2/","title":"Lecture 2 - Abstract Syntax Trees","text":"<p>"},{"location":"PPL/lec2/lec2/#lec-2-abstract-syntax-trees","title":"Lec 2  Abstract Syntax Trees","text":""},{"location":"PPL/lec2/lec2/#definition","title":"Definition","text":"<ul> <li>Abstract Syntax Tree (AST) is a tree representation of the abstract syntactic structure of source code written in a programming language. </li> </ul> <p>Operand and arity</p> <ul> <li>\u8fd0\u7b97\u7b26\u7684\u5143\u6570arity\u89c4\u5b9a\u4e86\u8fd0\u7b97\u7b26\u7684\u7c7b\u522b\uff0c\u4ee5\u53ca\u53c2\u6570\u7684\u4e2a\u6570n\u548c\u6bcf\u4e2a\u53c2\u6570\u7684\u7c7b\u522b\\(s_1,s_2,...,s_n\\).\u8ba1\u4f5c\\((s_1,s_2,...,s_n)s\\).</li> <li>\u8fd0\u7b97\u7b26\u7684\u5143\u6570\u89c4\u5b9a\u4e86\u8fd0\u7b97\u7b26\u53c2\u6570\u7684\u4e2a\u6570\u548c\u7c7b\u522b\uff0c\u4ee5\u53ca\u8fd0\u7b97\u7b26\u7684\u7c7b\u522b.</li> <li>\u4e00\u4e2a\u7c7b\u522b\u4e3as,\u5143\u6570\u4e3a\\(s_1,s_2,...,s_n\\)\u7684\u8fd0\u7b97\u7b26\u80fd\u5c06\\(n\\geq 0\\)\u4e2a\u7c7b\u522b\u4e3a\\(s_1,s_2,...,s_n\\)\u7684ast\u8f6c\u6362\u4e3a\u4e00\u4e2a\u7c7b\u522b\u4e3as\u7684ast.</li> </ul>"},{"location":"PPL/lec2/lec2/#example","title":"Example","text":""},{"location":"PPL/lec2/lec2/#example-1","title":"Example 1","text":"<ul> <li>operator <code>num[n]</code> \\(n\\in \\mathbb{N}\\)</li> <li>operator <code>plus</code>,<code>times</code>,\u6bcf\u4e2a\u53c2\u6570\u90fd\u662fExp\u7684ast</li> <li>\\(2 +(3 \\times x)\\) is</li> <li><code>plus (num[2] ;times( num[3]; x])</code> <pre><code>EST can be drawn as:\n    plus\n  /       \\\n  num[2]    times\n          /      \\\n       num[3]     x\n</code></pre></li> </ul>"},{"location":"PPL/lec2/lec2/#structural-induction","title":"Structural Induction","text":""},{"location":"PT/PT/","title":"\u968f\u673a\u53d8\u91cf\u4e0e\u5206\u5e03\u51fd\u6570","text":"<p>"},{"location":"PT/PT/#probability-theory","title":"Probability Theory","text":""},{"location":"PT/PT/#_1","title":"\u968f\u673a\u53d8\u91cf\u4e0e\u5206\u5e03\u51fd\u6570","text":""},{"location":"PT/PT/#_2","title":"\u968f\u673a\u53d8\u91cf","text":""},{"location":"PT/PT/#_3","title":"\u5206\u5e03\u51fd\u6570","text":"<p>\\(F (x) = P (\u03be \u2a7d x), \u2212\u221e &lt; x &lt; +\u221e\\)</p> <ul> <li>Properties</li> </ul> <p>(1) \\(a &lt; b, F (a) \u2a7d F (b)\\)</p> <p>(2). \\(lim_{x\\rightarrow-\\infty} F(x)=0\\\\ lim_{x\\rightarrow +\\infty} F(x)=1\\)</p> <p>(3) \\(\u2203F(x\u22120)= lim_{h\u21920+}F(x\u2212h)\\)  -- \u5904\u5904\u5de6\u6781\u9650\u5b58\u5728 \\(F(x+0)= lim_{h\u21920+} F(x+h)=F(x)\\) -- \u53f3\u8fde\u7eed</p> <p>\u6ce8\u610f\uff0c\u5982\u679c\u4fee\u6539\u5206\u5e03\u51fd\u6570\u5b9a\u4e49\u4e3a\\(F (x) = P (\u03be &lt; x), \u2212\u221e &lt; x &lt; +\u221e\\)\u90a3\u4e48 (3) \u5e94\u8be5\u4fee\u6539\u4e3a\u5904\u5904\u53f3\u6781\u9650\u5b58\u5728\uff0c\u5de6\u8fde\u7eed\u3002</p>"},{"location":"PT/PT/#_4","title":"\u5bc6\u5ea6\u51fd\u6570","text":"<p>\u82e5\u968f\u673a\u53d8\u91cf\\(\\epsilon\\)\u53ef\u53d6\u67d0\u4e2a\u533a\u95f4\u4e2d\u7684\u4e00\u5207\u503c\uff0c\u5e76\u4e14\u5b58\u5728\u67d0\u4e2a\u975e\u8d1f\u7684\u53ef\u79ef\u51fd\u6570\\(p(x)\\) , \u4f7f\u5206\u5e03\u51fd\u6570\\(F(x)\\)\u6ee1\u8db3\\(F(x)=\\int_{-\\infty}^xp(y)dy\\) \u5219\u79f0\\(\\epsilon\\) \u4e3a\u8fde\u7eed\u6027\u968f\u673a\u53d8\u91cf\uff0c\u79f0p(x)\u4e3a\\(\\epsilon\\)\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570</p> <ul> <li>\\(F'(x)=p(x)\\)</li> <li>\\(P(a\\le\\epsilon \\le b)=F(b)-F(a)=\\int_a^b p(y)dy\\)</li> <li>\\(p(x)\\ge 0\\)</li> <li>\\(\\int_{-\\infty}^{+\\infty} p(x)=1\\)</li> </ul>"},{"location":"PT/PT/#_5","title":"\u968f\u673a\u5411\u91cf","text":"<p>1.\u5206\u5e03\u51fd\u6570</p> <p>2.\u5bc6\u5ea6\u51fd\u6570</p> <ul> <li>Properties</li> </ul> <p>\uff081\uff09\u57fa\u672c\u540c\u968f\u673a\u53d8\u91cf\u7684\u60c5\u51b5</p> <p>\uff082\uff09\\(\\frac{\\partial^nF(x_1,x_2,\u2026\u2026,X_n)}{\\partial x_1\u2026\u2026\\partial x_n}=p(x_1,x_2,\u2026\u2026,x_n)\\)</p> <p>3.\u8fb9\u9645\u5bc6\u5ea6</p>"},{"location":"PT/PT/#_6","title":"\u72ec\u7acb\u6027","text":"<p>\u5bf9\u4e8e\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\uff0c\u7528\u5206\u5e03\u51fd\u6570\u5b9a\u4e49\u7684\u968f\u673a\u53d8\u91cf\u7684\u72ec\u7acb\u6027\u6761\u4ef6\\(F(x,y) = F_\u03be(x)F_\u03b7(y)\\) \u53ef\u4ee5\u901a\u8fc7\u6570\u5b66\u5f52\u7eb3\u63a8\u51fa\u5176\u7279\u6709\u72ec\u7acb\u6027\u6761\u4ef6\\(p_{ij} = p_i\u00b7 p_j\\) \u540c\u7406\uff0c\u5f88\u65b9\u4fbf\u5730\u53ef\u4ee5\u7528\u540e\u8005\u53cd\u63a8\u51fa\u524d\u8005\u3002\u56e0\u6b64\u5728\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\u4e2d\uff0c\u8fd9\u4e24\u79cd\u5b9a\u4e49\u662f\u7b49\u4ef7\u7684</p> <p>\u8bbe \\(p(x, y)\\)\u4e0e \\(p_\u03be (x), p_\u03b7 (y)\\) \u5206\u522b\u4e3a\u8fde\u7eed\u578b\u968f\u673a\u5411\u91cf \\((\u03be, \u03b7)\\)\u7684\u8054\u5408\u5bc6\u5ea6\u548c\u8fb9\u9645\u5bc6\u5ea6, \u5219 \\(\u03be, \u03b7\\)\u76f8\u4e92\u72ec\u7acb\u7684\u5145\u8981\u6761\u4ef6\u662f\\(p(x, y) = p_\u03be (x)p_\u03b7 (y)\\)</p>"},{"location":"PT/PT/#_7","title":"\u6761\u4ef6\u5206\u5e03","text":"<ul> <li> <p>\u79bb\u6563\u578b</p> </li> <li> <p>\u8fde\u7eed\u578b</p> </li> </ul> <p>\u6761\u4ef6\u5206\u5e03\u51fd\u6570  \\(P(\\eta \\le y | \\epsilon =x)=\\int_{-\\infty}^{y}\\frac{p(x,v)}{p_\\epsilon(x)}dv\\)</p> <p>\u6761\u4ef6\u5bc6\u5ea6\u51fd\u6570   \\(p_{\\eta | \\epsilon}(y|x)=\\frac{p(x,y)}{p_\\epsilon(x)}\\)</p> <ul> <li>\u7ed9\u5b9a\u968f\u673a\u53d8\u91cf\u4e0b\u7684\u6761\u4ef6\u6982\u7387</li> </ul> <p>\\(P(A)=P(A,-\\infty&lt;x&lt;+\\infty)=\\int_{-\\infty}^{+\\infty} P(A|X=x)p_X(x)dx=\\int_{-\\infty}^{+\\infty}g(x)P_X(x)dx\\)</p> <p>BOOK p79 2.24</p>"},{"location":"PT/PT/#_8","title":"\u968f\u673a\u53d8\u91cf\u7684\u51fd\u6570\u53ca\u5176\u5206\u5e03","text":"<ul> <li>\u79bb\u6563\u5377\u79ef</li> <li>\u4e00\u7ef4\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\u51fd\u6570\u7684\u5206\u5e03</li> </ul> <p>Therom 1 </p> <p>\u5047\u8bbef(x)\u4e25\u683c\u5355\u8c03\uff0c\u53cd\u51fd\u6570\u6709\u8fde\u7eed\u5bfc\u6570\uff0c\u5219\\(\\eta = f(\\epsilon)\\)\u4e5f\u662f\u8fde\u7eed\u6027\u968f\u673a\u53d8\u91cf\uff0c\u5176\u5bc6\u5ea6\u51fd\u6570\u4e3a</p> <p>\\(g(y)=\\left\\{\\begin{array}{**lr**}p(f^{-1}(y)|f^{-1}|(y))'| y\\in f(x)\u7684\u503c\u57df\\\\0\\ \\ \\ \\  \u5176\u4ed6\\end{array}\\right.\\)</p> <p>note \u5728\u4e0d\u91cd\u53e0\u7684\u533a\u95f4\u4e0a\u9010\u6bb5\u4e25\u683c\u5355\u8c03\uff0c\u5404\u6bb5\u7684\u53cd\u51fd\u6570\u90fd\u6709\u8fde\u7eed\u5012\u6570</p> <p>\\(g(y)=\\left\\{\\begin{array}{**lr**}\\sum p(h_i(y)|h'_i|(y)|) y\\in \u5404h_i(y)\u7684\u5b9a\u4e49\u57df\\\\0\\ \\ \\ \\  \u5176\u4ed6\\end{array}\\right.\\)</p> <p>Therom 2</p> <p>\u8bbe\\(\\epsilon\\) \u6709\u8fde\u7eed\u7684\u5206\u5e03\u51fd\u6570\\(F(x)\\),\u6c42\\(\\theta=F(\\epsilon)\\)\u7684\u5206\u5e03 \\(P_{\\theta}(y)=y\\) \u670d\u4ece[0,1]\u4e0a\u7684\u5747\u5300\u5206\u5e03</p> <p>Therom 3</p> <p>\u82e5 \\(\\theta\\) \u670d\u4ece[0,1]\u4e0a\u7684\u5747\u5300\u5206\u5e03,F(x)\u6ee1\u8db3\u5206\u5e03\u51fd\u6570\u7684\u4e09\u4e2a\u6027\u8d28\uff0c\\(\\epsilon=F^{-1}(\\theta)\\) \u5219 \\(P_{\\epsilon}(x)=F(x)\\)</p> <ul> <li>\u968f\u673a\u5411\u91cf\u51fd\u6570\u7684\u5206\u5e03\u5f8b</li> </ul> <p>Therom 1\u5377\u79ef\u516c\u5f0f</p> <p>Therom 2 \u82e5\\((\\epsilon_1 \\epsilon_2)\\)\u662f\u8fde\u7eed\u6027\u968f\u673a\u5411\u91cf\uff0c\u5219\\(\\eta=\\frac{\\epsilon_1}{\\epsilon_2}\\)\u662f\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\uff0c\u5176\u5bc6\u5ea6\u51fd\u6570\u4e3a</p> <p>\\(p_{\\eta}(z)=\\int_{-\\infty}^{+\\infty}p(zx,x)|x|dx\\)</p> <p>\\(F_{\\eta}(y)=\\int_{-\\infty}^yp_{\\eta}(z)dz\\)</p> <p>\u6b21\u5e8f\u7edf\u8ba1\u8ba1\u91cf\u5206\u5e03</p> <ul> <li>\u968f\u673a\u5411\u91cf\u7684\u53d8\u6362</li> </ul> <p>P89-93</p> <p>\u8bbe\u968f\u673a\u53d8\u91cfX\u548cY\u76f8\u4e92\u72ec\u7acb\uff0c\u5e76\u4e14Z\u4ec5\u662fX\u7684\u51fd\u6570\uff0cW\u4ec5\u662fY\u7684\u51fd\u6570\uff1bZ=g(X) W=h(Y) \u5176\u4e2dg\u548ch\u90fd\u662f\u6ce2\u96f7\u5c14\u53ef\u6d4b\u51fd\u6570\uff0c\u90a3\u4e48Z\u548cW\u4f9d\u65e7\u72ec\u7acb</p>"},{"location":"PT/PT/#_9","title":"\u5e38\u89c1\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\u5206\u5e03","text":"<p>1.\u9000\u5316\u5206\u5e03 \\(P(\\epsilon = c)=1\\)</p> <p>2.\u4e24\u70b9\u5206\u5e03 \\(\\begin{bmatrix}x1&amp;x2\\\\p&amp;q\\end{bmatrix}\\) \\(p+q=1 p,q&gt;0\\)</p> <p>3.\u5e15\u65af\u5361\u5206\u5e03 \\(P(\\epsilon=k)=\\begin{pmatrix}k-1\\\\r-1\\end{pmatrix}p^rq^{k-r}\\)</p> <p>4.\u4e8c\u9879\u5206\u5e03</p> <ul> <li>\\(b(k,n,p)=b(n-k,n,1-p)\\)</li> <li>\\(\\frac{b(k,n,p)}{b(k-1,n,p)}=1+\\frac{(n+1)p-k}{kq}\\)</li> <li>\\((n+1)p\\)\u662f\u6574\u6570 \uff1a \\((n+1)p \\ (n+1)p-1\\) \u4e3a\u6700\u6709\u53ef\u80fd\u7684\u6210\u529f\u6b21\u6570</li> <li>\\((n+1)p\\)\u662f\u4e0d\u6574\u6570\uff1a \\(k=[(n+1)p]\\) \u6700\u6709\u53ef\u80fd\u7684\u6210\u529f\u6b21\u6570 \\([x]\\)\u8868\u793a\\(x\\)\u6700\u5927\u6574\u6570\u90e8\u5206</li> <li>\u9012\u63a8\u516c\u5f0f \\(P(\\epsilon=k+1)=\\frac{p(n-k)}{(k+1)q}P(\\epsilon=k)\\)</li> <li>\\(n \\rightarrow +\\infty\\) \u300c\u6cca\u677e\u5b9a\u7406\u300d</li> </ul> <p>\u82e5\u5b58\u5728\u6b63\u5e38\u6570\\(\\lambda\\) \u5f53\\(n \\rightarrow+\\infty\\)\u65f6\uff0c\u6709\\(bp_n \\rightarrow +\\lambda\\) ,\u5219</p> <p>\\(lim_{n \\rightarrow+\\infty} b(k,n,p)=\\frac{\\lambda^k}{k!}e^{-\\lambda}\\)</p> <p>\u901a\u5e38\uff0cn\u4e0ep\u65e0\u5173\uff0c\u4f46\u662fn\u5f88\u5927\uff0cp\u5f88\u5c0f\uff0cnp\u4e0d\u662f\u5f88\u5927\u7684\u65f6\u5019\uff0c\u53ef\u8fd1\u4f3c\u5730\u53d6\\(\\lambda=np\\)</p> <ul> <li>\u5fb7\u83ab\u4f5b-\u62c9\u666e\u62c9\u65af\u5b9a\u7406 \\(npq \\rightarrow +\\infty\\)</li> </ul> <p>\\(P(\\epsilon_n=j)\\approx \\frac{1}{\\sqrt{2\\pi npq}}e^{-x^2/2} \\ \\ x=\\frac{j-np}{\\sqrt{npq}}\\)</p> <p>4.\u6cca\u677e\u5206\u5e03</p> <p>\\(P(\\epsilon=k)=\\frac{\\lambda^k}{k!}e^{-\\lambda}\\)</p> <p>5.\u51e0\u4f55\u5206\u5e03\u300c\u65e0\u8bb0\u5fc6\u6027\u300d</p> <p>\\(P(\\epsilon=k)=pq^{k-1}\\)</p> <p>6.\u8d85\u51e0\u4f55\u5206\u5e03</p> <ul> <li>\\(P(\\epsilon=k)=\\frac{ \\begin{pmatrix}M\\\\k\\end{pmatrix} \\begin{pmatrix}N-M\\\\n-k\\end{pmatrix}}{\\begin{pmatrix}N\\\\n\\end{pmatrix}}\\) \\(k=0,1,2,\u2026\u2026\uff0cmin(n,M)\\)</li> <li>\\(N\\rightarrow +\\infty\\ \\frac{M}{N}\\rightarrow p\\), \u8d85\u51e0\u4f55\u5206\u5e03\u53ef\u4ee5\u7528\u4e8c\u9879\u5206\u5e03\u8fd1\u4f3c\u8ba1\u7b97</li> </ul> <p>\u300c\u4fee\u6b63\uff1aM+N-n \u6709\u5927\u5c0f\u5199\u9519\u8bef\u300d</p> <p></p>"},{"location":"PT/PT/#_10","title":"\u5e38\u89c1\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\u5206\u5e03","text":"<p>1.\u5747\u5300\u5206\u5e03</p> <p>2.\u6b63\u6001\u5206\u5e03</p> <ul> <li>BASIC \\(p(x)=\\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{(x-a)^2}{2\\sigma^2}}\\)</li> </ul> <p>\\(Proof\\)</p> <p>\\(\\begin{align*}(\\frac{1}{\\sqrt{2\\pi}\\sigma}\\int_{-\\infty}^{+\\infty} e^{-\\frac{(t-a)^2}{2\\sigma^2}}dt)^2 &amp;= (\\frac{1}{\\sqrt{2\\pi}}\\int_{-\\infty}^{+\\infty} e^{-\\frac{t^2}{2}}dt)^2\\\\&amp;=\\frac{1}{2\\pi}\\int_{-\\infty}^{+\\infty} \\int_{-\\infty}^{+\\infty} e^{\\frac{t^2+s^2}{2}}dtds\\\\ &amp;=\\frac{1}{2\\pi} \\int_{0}^{2\\pi}d\\theta\\int_{0}^{+\\infty}  re^{-\\frac{r^2}{2}}dr\\\\ &amp;=1\\end{align*}\\)</p> <p></p> <ul> <li>\\(a=0\\ \\sigma=1\\) \u6807\u51c6\u6b63\u6001\u5206\u5e03 \\(\\Phi(x)=\\frac{1}{\\sqrt{2\\pi}}e^{-\\frac{x^2}{2}}\\)</li> <li>\\(\\Phi(-x)=1-\\Phi(x)\\)</li> </ul> <p>2.2 n\u7ef4\u6b63\u6001\u5206\u5e03</p> <p>\u8bbe \\(B = (b_{ij} )\\) \u4e3a n \u7ef4\u6b63\u5b9a\u5bf9\u79f0\u77e9\u9635, \\(|B|\\) \u4e3a\u5176\u884c\u5217\u5f0f, \\(B^{\u22121}\\) \u4e3a\u5176\u9006,</p> <p>\u53c8\u8bbe \\(x = (x1, x2, \u00b7 \u00b7 \u00b7 , xn)^T\\) , \\(a = (a1, a2, \u00b7 \u00b7 \u00b7 , an)^T\\) , \u5219\u79f0</p> <p>\\(p(\\vec{x})=\\frac{1}{(2\\pi)^{n/2}|B|^{1/2}} exp(-\\frac{1}{2}(x-a)^TB^{-1}(x-a))\\) \u4e3an\u7ef4\u6b63\u6001\u5bc6\u5ea6\u51fd\u6570</p> <p>2.3 \u4e8c\u7ef4\u7684\u60c5\u51b5</p> <p>\\(B=\\begin{pmatrix}\\sigma_1^2 &amp; r\\sigma_1\\sigma_2\\\\ r\\sigma_1\\sigma_2&amp;\\sigma_2^2\\end{pmatrix}. B^{-1}=\\begin{pmatrix}\\sigma_2^2 &amp; -r\\sigma_1\\sigma_2\\\\ -r\\sigma_1\\sigma_2&amp;\\sigma_1^2\\end{pmatrix}\\)</p> <p>\\(p(x,y)=\\frac{1}{2\\pi\\sigma_1\\sigma_2\\sqrt{1-r^2}}exp(-\\frac{1}{2(1-r^2)}\\times[\\frac{(x-a)^2}{\\sigma_1^2} - \\frac{2r(x-a)(y-b)}{\\sigma_1\\sigma_2} + \\frac{(y-b)^2}{\\sigma_2^2}])\\)</p> <p>\u7b80\u8bb0\u4f5c \\((\\epsilon,\\eta)\\) ~ \\(N(a,b,\\sigma_1^2,\\sigma_2^2,r)\\)</p> <ul> <li>\u4e8c\u5143\u6b63\u6001\u5206\u5e03\u7684\u8fb9\u9645\u51fd\u6570\u4ecd\u662f\u6b63\u6001\u5206\u5e03 \\(\\eta\\)~\\(N(b,\\sigma_2^2)\\) [\u53cd\u8fc7\u6765\u5219\u4e0d\u4e00\u5b9a]</li> <li>\\(\\epsilon\\ \\  \\eta\\) \u72ec\u7acb \u7b49\u4ef7\u4e8e \\(r=0\\)</li> </ul> <p>2.4 \u6761\u4ef6\u5206\u5e03</p> <p></p> <p>2.5  \u6b63\u6001\u5206\u5e03\u7684\u51fd\u6570</p> <ul> <li>\\(\\epsilon\\) ~ \\(N(0,\\sigma^2) \\ \\eta = k\\epsilon+b\\ \\eta\\)~ \\(N(ka+b,k^2\\sigma^2)\\)</li> <li> <p>\\(\\epsilon\\)~ \\(N(a_1,\\sigma_1^2)\\) \\(\\eta\\)~\\(N(a_2,\\sigma_2^2)\\) \\(\\eta + \\epsilon\\)~\\(N(a_1+a_2,\\sigma_1^2+\\sigma_2^2)\\)</p> </li> <li> <p>\\(\\epsilon\\) ~ \\(N(0,\\ 1) \\ \\eta = \\epsilon^2\\)</p> </li> <li> <p>\u82e5\\((X,Y)\\)~\\(N(\\mu_1,\\mu_2,\\sigma_1^2,\\sigma_2^2,r)\\) \u5219 \\(C_1X+C_2Y\\)~\\(N(C_1\\mu_1+C_2\\mu_2,C_1^2\\sigma_1^2+C_2^2\\sigma_2^2+2C_1C_2r\\sigma_1\\sigma_2)\\)</p> </li> </ul> <p>2.6 \u591a\u7ef4\u6b63\u6001\u5206\u5e03 P93</p> <p>\\(\\vec{\\eta}=C\\vec{\\epsilon}+a\\)  \u5219 \\(\\vec{\\eta}\\) ~ \\(N(C\\vec{\\mu}+a,C\\Sigma C^T)\\)</p> <p>3.\u6307\u6570\u5206\u5e03</p> <p>\\(p(x)=\\left\\{\\begin{array}{**lr**}\\lambda e^{-\\lambda x}\\ x\\ge 0 \\\\0  \\ \\ \\ \\ \\ \\ \\ \\ \\ x &lt; 0\\end{array}\\right.\\)</p> <p>\\(F(x)=\\left\\{\\begin{array}{**lr**}1-e^{-\\lambda x}\\ x\\ge 0 \\\\0  \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ x &lt; 0\\end{array}\\right.\\)</p> <ul> <li>\u65e0\u8bb0\u5fc6\u6027 \uff1a \\(P(\\epsilon &gt; s+t | \\epsilon &gt; s)=P(\\epsilon &gt; t)\\)</li> </ul> <p>4.T\u5206\u5e03</p> <p>5.\u5a01\u5e03\u5c14\u5206\u5e03</p> <p>6.\u5e15\u7d2f\u6258\u5206\u5e03</p> <p>7.\\(\\beta\\)\u5206\u5e03 </p> <p>8.\u67ef\u897f\u5206\u5e03</p> <p></p>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/","title":"\u6570\u5b57\u7279\u5f81\u4e0e\u7279\u5f81\u51fd\u6570","text":"<p>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#_1","title":"\u6570\u5b66\u671f\u671b","text":""},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#_2","title":"\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\u7684\u6570\u5b66\u671f\u671b","text":"<p>\u8bbe\u7f6e\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\\(\\epsilon\\) \u7684\u5206\u5e03\u5217\u4e3a</p> <p>\\(\\begin{bmatrix}x_1&amp;x_2&amp;\u2026\u2026&amp;x_k&amp;\u2026\u2026\\\\p_1&amp;p_2&amp;\u2026\u2026&amp;p_k&amp;\u2026\u2026\\end{bmatrix}\\)</p> <p>\u5982\u679c\u7ea7\u6570\\(\\sum_kx_kp_k\\)\u7edd\u5bf9\u6536\u655b\uff0c\u5219\u79f0\u6b64\u7ea7\u6570\u7684\u548c\u4e3a\\(\\epsilon\\) \u7684\u6570\u5b66\u671f\u671b\u6216\u5747\u503c\\((mean)\\)\uff0c\u8ba1\u4f5c\\(E\\epsilon=\\sum_kx_kp_k\\)</p>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#_3","title":"\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\u7684\u6570\u5b66\u671f\u671b","text":"<p>\u8bbe\\(\\epsilon\\)\u4e3a\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\uff0c\u6709\u5bc6\u5ea6\u51fd\u6570\\(p(x)\\)\u5f53\\(\\int_{-\\infty}^{+\\infty}|x|p(x)dx&lt;\\infty\u65f6\\) \u79f0\\(E\\epsilon=\\int_{-\\infty}^{+\\infty}xp(x)dx\\)\u4e3a\\(\\epsilon\\)\u7684\u6570\u5b66\u671f\u671b</p>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#_4","title":"\u4e00\u822c\u5b9a\u4e49","text":"<p>\u8bbe\u968f\u673a\u53d8\u91cf\\(\\epsilon\\)\u6709\u5206\u5e03\u51fd\u6570\\(F(x)\\)\uff0c\u82e5\\(\\int_{-\\infty}^{+\\infty}|x|d F(x)&lt;\\infty\\) \u79f0\\(E\\epsilon=\\int_{-\\infty}^{+\\infty}xd F(x)\\)\u4e3a\\(\\epsilon\\)\u7684\u6570\u5b66\u671f\u671b</p> <ul> <li>\u65af\u63d0\u5c14\u5409\u65af(Stieltjes)\u79ef\u5206</li> </ul>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#_5","title":"\u968f\u673a\u53d8\u91cf\u51fd\u6570\u7684\u6570\u5b66\u671f\u671b","text":"<ul> <li> <p>\u8bbe\\(\\epsilon\\ \\eta\\)\u4e3a\u968f\u673a\u53d8\u91cf\u5206\u5e03\u51fd\u6570\u5206\u522b\u4e3a\\(F_{\\epsilon}(x)\\ F_{\\eta}(x)\\) \uff1b\\(f(x)\\)\u662f\u4e00\u5143\u6ce2\u96f7\u5c14\u51fd\u6570\uff0c\u8ba1\\(\\eta=f(\\epsilon)\\)  \u5219 \\(E_{\\eta}=\\int_{-\\infty}^{+\\infty}xdF_{\\eta}(x)=\\int_{-\\infty}^{+\\infty}f(x)dF_{\\epsilon}(x)\\)</p> </li> <li> <p>(Stein \u5f15\u7406) \\(P119\\)</p> </li> </ul>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#_6","title":"\u6570\u5b66\u671f\u671b\u7684\u57fa\u672c\u6027\u8d28","text":""},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#1","title":"\u6027\u8d281","text":"<p>\u82e5\\(a\\le \\epsilon \\le b\\)\u5219 \\(E\\epsilon\\) \u5b58\u5728\u4e14\\(a\\le E\\epsilon\\le b\\)</p>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#1_1","title":"\u6027\u8d281\u2018","text":"<p>\u82e5\\(|\\epsilon| &lt; \\eta\\) \u4e14\\(E\\eta\\) \u5b58\u5728 \u5219\\(E\\epsilon\\)\u5b58\u5728 \u4e14\\(|E\\epsilon|\\le E|\\epsilon|\\le E\\eta\\)</p>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#2","title":"\u6027\u8d282","text":"<p>\\(E_{\\epsilon_1},E_{\\epsilon_2},E_{\\epsilon_3}\u2026\u2026 E_{\\epsilon_n}\\)\u5b58\u5728\uff0c\u5219\u5bf9\u4efb\u610f\u5e38\u6570\\(c_1,c_2,\u2026\u2026c_n\\)\u548cb \\(E(\\sum_{i=1}^nc_i\\epsilon_i+b)\\)\u5b58\u5728\uff0c\u4e14\\(E(\\sum_{i=1}^nc_i\\epsilon_i+b)=\\sum_{i=1}^nc_iE\\epsilon_i+b\\)</p> <p>\u7279\u522b\u5730\uff1a\\(E(\\sum_{i=1}^n\\epsilon_i)=\\sum_{i=1}^nE\\epsilon_i\\) \\(E(c\\epsilon)=cE\\epsilon\\)</p> <ul> <li>Exercise :\\(p121\\)</li> </ul>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#3","title":"\u6027\u8d283","text":"<p>\u82e5\\(\\epsilon_1,\\epsilon_2\u2026\u2026\\epsilon_n\\)\u76f8\u4e92\u72ec\u7acb\uff0c\u5404\\(E_{\\epsilon_i}\\)\u5b58\u5728\uff0c\u5219\\(E(\\epsilon_1,\\epsilon_2\u2026\u2026,\\epsilon_n)=E\\epsilon_1E\\epsilon_2\u2026\u2026E\\epsilon_n\\)</p>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#4","title":"\u6027\u8d284(\u6709\u754c\u6536\u655b\u5b9a\u7406)","text":"<p>\u5047\u8bbe\u5bf9\u4efb\u610f\\(\\omega\\in\\Omega\\) \u6709\\(\\lim_{n\\rightarrow\\infty}\\epsilon(\\omega)=\\epsilon(\\omega)\\)\u5e76\u4e14\uff0c\u5bf9\u4e00\u5207\u7684\\(n &gt;=1\\) \\(|\\epsilon_n|\\le M\\) M\u4e3a\u5e38\u6570\uff0c\u5219\\(\\lim_{n\\rightarrow\\infty}E\\epsilon_n=E\\epsilon\\)</p>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#_7","title":"\u6761\u4ef6\u671f\u671b","text":""},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#_8","title":"\u6761\u4ef6\u671f\u671b","text":"<p>\\(E(\\eta|\\epsilon=x)=\\int_{-\\infty}^{+\\infty}ydF_{\\eta|\\epsilon}(y|x)\\)</p> <p>\\(E(\\eta|\\epsilon=x)=\\int_{-\\infty}^{+\\infty}yp_{\\eta|\\epsilon}(y|x)dy\\)</p> <p>\\(E(\\eta|\\epsilon=x)=\\sum yp_{\\eta|\\epsilon}(y|x)dy\\)</p> <p>\u518d\u5bf9\\(E(\\eta|\\epsilon=x)\\)\u6c42\u671f\u671b\uff0c\u4f1a\u5f97\u5230\\(E[E(\\eta|\\epsilon=x)]=E\\eta\\)</p> <p>\u8fde\u7eed\u578b</p> <p></p> <p>\u79bb\u6563\u578b</p> <p></p>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#_9","title":"\u5168\u671f\u671b\u516c\u5f0f","text":"<p>\\(\\epsilon\\) \u662f\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\u65f6\uff0c\u8ba1\\(p_i=P(\\epsilon=x_i) \\Rightarrow E\\eta=\\sum_i p_iE(\\eta|\\epsilon=x_i)=\\sum_iE(\\eta|\\epsilon=x_i)P(\\epsilon=x_i)\\)</p>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#_10","title":"\u6761\u4ef6\u671f\u671b\u7684\u6027\u8d28","text":"<ul> <li>P125</li> </ul>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#_11","title":"\u65b9\u5dee\uff0c\u534f\u65b9\u5dee\u4e0e\u76f8\u5173\u7cfb\u6570","text":""},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#_12","title":"\u65b9\u5dee","text":"<p>\\(Var\\epsilon=E(\\epsilon-E\\epsilon)^2=E\\epsilon^2-(E\\epsilon)^2\\)</p>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#chebyshev","title":"Chebyshev \u4e0d\u7b49\u5f0f","text":"<p>\\(P(|\u03be\u2212E\u03be|\u2265\u03b5)\u2264 Var\u03be\\)</p> <p>\\(P(|\u03be \u2212 E\u03be| \u2265 \u03b5) =\\int_{|x-E\u03be|&gt;=\\epsilon}dF(x)\\le \\int_{|x-E\u03be|&gt;=\\epsilon}\\frac{(x-E\u03be)^2}{\\epsilon^2}dF(x)\\\\ \\le \\frac{1}{\\epsilon^2}\\int_ {-\\infty}^{+\\infty}(x-E\u03be)^2dF(x) =\\frac{Var\u03be}{\\epsilon^2}\\)</p> <ul> <li>\u6027\u8d281</li> </ul> <p>\\(Var\u03be=0 \\Leftrightarrow P(\u03be=c)=1\\) (c\u662f\u5e38\u6570)</p> <ul> <li>\u6027\u8d282</li> </ul> <p>\\(Var(c\u03be+b)=c^2Var\u03be\\)</p> <ul> <li>\u6027\u8d283</li> </ul> <p>\u82e5 \\(c \\ne E\u03be\\  \\ \\ var\u03be&lt;E(\u03be-c)^2\\)</p> <p>\\(p130\\)\u6700\u4f73\u9884\u6d4b\u95ee\u9898</p> <ul> <li>\u6027\u8d284</li> </ul> <p>\\(Var (\\sum\u03be_i )= \\sum Var\u03be_i +2\\sum_{1\\le i&lt;j\\le n} E(\u03be_i \u2212E\u03be_i)(\u03be_j \u2212E\u03be_j)\\)</p>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#_13","title":"\u534f\u65b9\u5dee","text":"<p>\u8bbe\\(\\epsilon_i \\epsilon_j\\)\u7684\u8054\u5408\u5206\u5e03\u51fd\u6570\u4e3a\\(F_{ij}(x,y)\\)\u82e5\\(E|(\\epsilon_i-E\\epsilon_i)(\\epsilon_j-E\\epsilon_j)|&lt;\\infty\\) \u79f0 \\(E(\\epsilon_i-E\\epsilon_i)(\\epsilon_j-E\\epsilon_j)=\\int_{-\\infty}^{+\\infty}\\int_{-\\infty}^{+\\infty}(x-E\\epsilon_i)(y-E\\epsilon_j)dF_{ij}(x,y)\\)\u4e3a\\(\\epsilon_i\\)\u548c\\(\\epsilon_j\\)\u7684\u534f\u65b9\u5dee\uff0c\u8ba1\u4f5c\\(Cov(\\epsilon_i\\ \\epsilon_j)\\)</p>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#_14","title":"\u6027\u8d28","text":"<ul> <li>1.\\(Cov(\\epsilon\\ \\eta)=Cov(\\eta\\ \\epsilon)=E\\epsilon\\eta-E\\epsilon E\\eta\\)</li> <li>2.a b are constant \\(Cov(a\\epsilon,b\\eta)=abCov(\\epsilon.\\eta)\\)</li> <li>3.\\(Cov(\\sum_{i=1}^n\\epsilon_i,\\eta)=\\sum_{i=1}^nCov(\\epsilon_i,\\eta)\\)</li> <li>4.\\(CBC^{T}\\)</li> </ul>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#_15","title":"\u76f8\u5173\u7cfb\u6570","text":"<p>\u4ee4\\(\\epsilon^*=(\\epsilon-E\\epsilon)/\\sqrt{Var\\epsilon} \\\\ \\eta^*=(\\eta-E\\eta)/\\sqrt{Var\\eta}\\)</p> <p>\u79f0\\(r_{\\epsilon\\eta}=Cov(\\epsilon^*,\\eta^*)=\\frac{E(\\epsilon-E\\epsilon)(\\eta-E\\eta)}{\\sqrt{Var\\epsilon Var\\eta}}\\) \u4e3a\\(\\epsilon \\ \\eta\\)\u7684\u76f8\u5173\u7cfb\u6570  \\(E\\epsilon^* \\eta^*\\) instead of \\(Cov(\\epsilon^*,\\eta^*)\\)?</p> <ul> <li>Cauchy-Schwar \u4e0d\u7b49\u5f0f \\(|E\\epsilon\\eta|^2\\le E\\epsilon^2 E\\eta^2\\) \u7b49\u5f0f\u6210\u7acb\u5f53\u4e14\u4ec5\u5f53\\(\\exist t_o \\ st. P(\\eta=t_0\\epsilon)=1\\) \\(Proof\\ P134\\)</li> </ul>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#_16","title":"\u6027\u8d28","text":"<ul> <li>\u5bf9\u76f8\u5173\u7cfb\u6570\\(r_{\\epsilon\\eta}\\)\u6709 \\(|r_{\\epsilon\\eta}|\\le 1\\) </li> </ul> <p>\\(r_{\\epsilon\\eta}=1\\)\u6210\u7acb\\(iff\\ P(\\frac{\\epsilon-E\\epsilon}{\\sqrt{Var\\epsilon}}=\\frac{\\eta-E\\eta}{\\sqrt{Var\\eta}})=1\\)</p> <p>\\(r_{\\epsilon\\eta}=-1\\)\u6210\u7acb\\(iff\\ P(\\frac{\\epsilon-E\\epsilon}{\\sqrt{Var\\epsilon}}=-\\frac{\\eta-E\\eta}{\\sqrt{Var\\eta}})=1\\)</p> <ul> <li>All the below are equavilant</li> </ul> <p>\\((1) Cov(\\epsilon,\\eta)=0\\)</p> <p>\\((2) \\epsilon \\ \\eta\\)\u4e0d\u76f8\u5173</p> <p>\\((3) E\\epsilon\\eta=E\\epsilon E\\eta\\)</p> <p>\\((4)Var{\\epsilon+\\eta}=Var\\epsilon+Var\\eta\\)</p>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#_17","title":"\u77e9","text":""},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#_18","title":"\u7279\u5f81\u51fd\u6570","text":"<p>\\(f(t)=Ee^{it\\epsilon}\\)</p>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#example","title":"Example","text":"<ul> <li>\\(P(\\epsilon=c)=1--f(t)=e^{ict}\\)</li> <li>\\(B(n,p)-- f(t)=\\sum_{k=0}^nC_n^kp^kq^{n-k}e^{itk}=\\sum_{k=0}^nC_n^k(pe^{it})^kq^{n-k}=(pe^{it}+q)^n\\)</li> <li>\\(Poisson P(\\lambda)--f(t)=\\sum_{k=0}^{\\infty}\\frac{\\lambda^k}{k!}e^{-\\lambda}e^{ikt}=\\sum_{k=0}^{\\infty}\\frac{(\\lambda e^{it})^k}{k!}e^{-\\lambda}=e^{\\lambda e^{it}}e^{-\\lambda}=e^{\\lambda(e^{it}-1)}\\)</li> <li>\\(Uniform\\ U(a,b)--f(t)=\\int_a^b\\frac{1}{b-a}e^{itx}dx=\\frac{e^{itb}-e^{ita}}{i(b-a)t}\\)</li> <li>\\(N(a,\\sigma^2)--f(t)=\\frac{1}{\\sqrt{2\\pi\\sigma}}\\int_{-\\infty}^{+\\infty}e^{itx-(x-a)^2/2\\sigma^2}dx=e^{ita-\\frac{\\sigma^2t^2}{2}}\\)</li> </ul>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#properties","title":"Properties","text":"<ul> <li>\\(|f(t)|\\le f(0)=1\\\\f(-t)=\\bar{f(t)}\\)</li> <li>\\(f(t)\\)\u5728\\((-\\infty,+\\infty)\\)\u4e0a\u4e00\u81f4\u8fde\u7eed</li> <li>\\(f(t)\\)\u975e\u8d1f\u5b9a</li> </ul> <p>\\(f(t)\\)\u4e3a\u7279\u5f81\u51fd\u6570\\(\\Leftrightarrow f(t)\\)\u975e\u8d1f\u5b9a\uff0c\u8fde\u7eed\u4e14\\(f(0)=1\\) * \\(\\epsilon_1\u2026\u2026\\epsilon_n\\)\u76f8\u4e92\u72ec\u7acb\uff0c\u7279\u5f81\u51fd\u6570\u5206\u522b\u4e3a\\(f_1(t)\u2026\u2026f_n(t)\\)  \u8bb0\\(\\eta=\\epsilon_1+\u2026\u2026+\\epsilon_n\\)  \u5219\\(\\eta\\)\u7684\u7279\u5f81\u51fd\u6570\\(f_\\eta(t)=f_1(t)f_2(t)\u2026\u2026f_n(t)\\) * \u82e5\\(E\\epsilon^n\\)\u5b58\u5728\uff0c\u5219\\(f(t)\\)n\u6b21\u53ef\u5fae\uff0c\u8fdb\u800c \\(k\\le n\\)\u65f6\uff0c\\(f^{k}(t)=i^k\\int_{-\\infty}^{+\\infty}x^ke^{itx}dF(x),f^{(k)}(0)=i^kE\\epsilon^k\\)\u7279\u522b\u5730 \\(E\\epsilon^2\\)\u5b58\u5728\u65f6 \\(E\\epsilon=-if'(0),E\\epsilon^2=-f''(0),Var\\epsilon=-f''(0)+[f'(0)]^2\\)</p> <p>\u53cd\u8fc7\u6765\uff0c\u82e5n\u4e3a\u5076\u6570\uff0c\u4e14\\(f^{(n)}(0)\\)\u5b58\u5728\uff0c\u5219\\(E\\epsilon^n\\)\u5b58\u5728 * \\(\\eta=a\\epsilon+b, f_\\eta(t)=e^{ibt}f(at)\\)</p>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#_19","title":"\u9006\u8f6c\u516c\u5f0f","text":"<p>\u8bbe\u5206\u5e03\u51fd\u6570\\(F(x)\\)\u7684\u7279\u5f81\u51fd\u6570\u4e3a\\(f(t)\\) \u53e6x1\uff0cx2\u4e3a\\(F(x)\\)\u7684\u8fde\u7eed\u70b9\uff0c\u5219\\(F(x_2)-F(x_1)=lim_{T\\rightarrow \\infty}\\frac{e^{-itx_1}=e^{-itx^2}}{it}f(t)dt\\)</p>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#_20","title":"\u552f\u4e00\u6027\u5b9a\u7406","text":"<p>\u5206\u5e03\u51fd\u6570\u53ef\u7531\u7279\u5f81\u51fd\u6570\u552f\u4e00\u786e\u5b9a</p>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#_21","title":"\u9006\u5085\u7acb\u53f6\u53d8\u6362","text":"<p>\u8bbe\\(f(t)\\)\u662f\u7279\u5f81\u51fd\u6570\u4e14\\(\\int_{=\\infty}^{+\\infty}|f(t)|dt&lt;\\infty\\)\u5219\u5206\u5e03\u51fd\u6570F(x)\u8fde\u7eed\uff0c\u6b64\u65f6 \\(F'(x)=\\frac{1}{2\\pi}\\int_{-\\infty}^{+\\infty}e^{-itx}f(t)dt\\) * \u82e5f(t)\u662f\u67d0\u968f\u673a\u53d8\u91cf\u7684\u7279\u5f81\u51fd\u6570\uff0c\u5219\\(\\bar{f(t)},|f(t)|^2\\)\u4e5f\u662f\u7279\u5f81\u51fd\u6570   \\(f(-t)=\\bar{f(t)}\\)\u662f\\(-\\epsilon\\)\u7684\u7279\u5f81\u51fd\u6570   \\(\\epsilon_1-\\epsilon_2\\)\uff08\u72ec\u7acb\u540c\u5206\u5e03\uff09\u7684\u7279\u5f81\u51fd\u6570\u4e3a\\(f(t)\\bar{f(t)}=|f(t)|^2\\)</p>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#_22","title":"\u5206\u5e03\u51fd\u6570\u7684\u53ef\u52a0\u6027","text":""},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#_23","title":"\u591a\u5143\u7279\u5f81\u51fd\u6570","text":"<p>\u8bbe\u968f\u673a\u5411\u91cf\\(\\vec{\\epsilon}=(\\epsilon_1,\u2026\u2026,\\epsilon_n)'\\)\u7684\u5206\u5e03\u51fd\u6570\u4e3a\\(F(x_1\u2026\u2026,x_n)\\)\u79f0\\(f(t_1,\u2026\u2026t_n)=\\int_{-\\infty}^{+\\infty}\u2026\u2026\\int_{-\\infty}^{+\\infty}e^{i(t_1x_1+\u2026\u2026+t_nx_n)}dF(x_1\u2026\u2026\uff0cx_n)\\)\u4e3a\u4ed6\u7684\u7279\u5f81\u51fd\u6570 * \\(\\eta=a_1\\epsilon_1\u2026\u2026+a_n\\epsilon_n\\\\f_\\eta(t)=Ee^{it\\sum_{k=1}^na_k\\epsilon_k}=f(a_1t,\u2026\u2026a_nt)\\) \u5176\u4ed6\u8be6\u7ec6\u89c1P48</p>"},{"location":"PT/%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E4%B8%8E%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/#_24","title":"\u591a\u5143\u6b63\u6001\u5206\u5e03","text":"<p>P149-P154</p> <p></p>"},{"location":"PT/%E6%9E%81%E9%99%90%E5%AE%9A%E7%90%86/","title":"\u6781\u9650\u5b9a\u7406","text":""},{"location":"PT/%E6%9E%81%E9%99%90%E5%AE%9A%E7%90%86/#_1","title":"\u4f9d\u5206\u5e03\u6536\u655b\u4e0e\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406","text":""},{"location":"Papers/3DGS/paper/","title":"Paper","text":"<p>"},{"location":"Papers/3DGS/paper/#3d-gaussian-splatting-for-real-time-radiance-field-rendering","title":"3D Gaussian Splatting for Real-Time Radiance Field Rendering","text":""},{"location":"Papers/3DGS/paper/#differentiable-3d-gaussian-splatting","title":"Differentiable 3D Gaussian Splatting","text":""},{"location":"Papers/3DGS/paper/#3d-gaussian","title":"3D Gaussian","text":"<ul> <li>Gaussian : \\(G(x) = \\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}\\)</li> <li> <p>3D Gaussian : \\(G(x) = \\frac{1}{(2\\pi)^{3/2}\\sigma^3}e^{-\\frac{||x-\\mu||^2}{2\\sigma^2}}\\)</p> </li> <li> <p>reference : 3D\u9ad8\u65af</p> </li> </ul> <p> </p> <ul> <li>note: Because the covariance matrix is semi-definite, so we represent it as \\(\\Sigma = R\\Lambda R^T\\) where \\(\\Lambda\\) is a diagonal matrix and \\(U\\) is an orthogonal matrix. Also if we use \\(S = (\\Lambda)^{1/2}\\), then \\(\\Sigma = RSS^TR\\)</li> </ul>"},{"location":"Papers/3DGS/paper/#3d-gaussian-rendering","title":"3D Gaussian Rendering","text":"<ul> <li>reference : 3D\u9ad8\u65af\u6e32\u67d3</li> </ul> <p>Project the 3D Gaussian to 2D Gaussian and then render it.</p>"},{"location":"Papers/3DGS/paper/#projection","title":"Projection :","text":"<p>Conclusion</p> <p>\\(\\Sigma^{'} = JW\\Sigma W^TJ^T\\) where W is a view transformation and J is the Jacobian of the affine approximation of the projective transformation</p> <p>Derivation </p>"},{"location":"Papers/3DGS/paper/#the-viewing-transformation","title":"The viewing transformation:","text":"<p>Denote the Gaussian reconstruction kernels in object space by \\(r_{k}''(\\mathbf{t})=\\mathcal{G}_{\\mathbf{V''}}(\\mathbf{t}-\\mathbf{t_k})\\), where \\(\\mathbf{t_k}\\) are the voxel positions of center of kernel.</p> <p>Denote camera coordinates by a vector \\(\\mathbf{u}=(u_0,u_1,u_2)^{T}\\). Object coordinates are transformed to camera coordinates using an af\ufb01ne mapping \\(\\mathbf{u}=\\varphi(\\mathbf{t})=\\mathbf{Wt+d}\\), called viewing tranformation.</p> <p>Now we can transform the reconstruction kernels \\(\\mathcal{G}_{\\mathbf{V''}}(\\mathbf{t}-\\mathbf{t_k})\\) to camera space: </p> <p>\\(\\(\\mathcal{G}_{\\mathbf{V''}}(\\varphi^{-1}(\\mathbf{u})-\\mathbf{t_k})=\\frac{1}{|\\mathbf{W}^{-1}|}\\mathcal{G}_{\\mathbf{V'}_{k}}(\\mathbf{u}-\\mathbf{u_k})=r_{k}'(\\mathbf{u})\\)\\)</p> <p>where \\(\\mathbf{u_k}=\\varphi(\\mathbf{t_k})\\) is the center of the Gaussian in camera coordinates and \\(\\mathbf{V'}_{k}=\\mathbf{W}\\mathbf{V''}_{k}\\mathbf{W}^{T}\\) is the variance matrix in camera coordinates.</p>"},{"location":"Papers/3DGS/paper/#the-projective-transformation","title":"The Projective Transformation","text":"<p>In camera space, The ray intersecting the center of projection and the point \\((x_0, x_1)\\) on the projection plane is called a viewing ray.</p> <p>To facilitate analiytical integration of volumn function, we need to transform the camera space to ray space such that the viewing rays are parallel to a coordinate axis. The projective transformation converts camera coordinates to ray coordinates.</p> <p>Camera space is de\ufb01ned such that the origin of the camera coordinate system is at the center of projection and the projection plane is the plane \\(u_{2}=1\\). Camera space and ray space are related by the mapping \\(\\mathbf{x=m(u)}\\). </p> \\[ \\begin{pmatrix} x_0\\\\ x_1\\\\ x_2\\\\ \\end{pmatrix} =\\mathbf{m(u)}= \\begin{pmatrix} u_{0}/u_{2}\\\\ u_{1}/u_{2}\\\\ \\Vert(u_{0},u_{1},u_{2})^{T}\\Vert\\\\ \\end{pmatrix}\\\\\\\\ ~\\\\\\\\ \\begin{pmatrix} u_0\\\\ u_1\\\\ u_2\\\\ \\end{pmatrix} =\\mathbf{m^{-1}(u)}= \\begin{pmatrix} x_{0}/l\\cdot x_2\\\\ x_{1}/l\\cdot x_2\\\\ 1/l\\cdot x_2\\\\ \\end{pmatrix} \\] <p>where \\(l=\\Vert(x_{0},x_{1},1)^{T}\\Vert\\).</p> <p>Unfortunately, these mappings are not affine. The Gaussian after the transformation may not still Gaussian. To solve this problem, we introduce the local affine approximation \\(m_{uk}\\) of the projective transformation. It is defined by the first two terms of the Taylor expansion of \\(\\mathbf{m}\\) at the point \\(\\mathbf{u}_k\\):</p> \\[ \\mathbf{m_{u_k}(u)=x_k+J_{u_k}\\cdot (u-u_k)}\\\\\\\\ ~\\\\ \\mathbf{J_{u_k}}={\\frac{\\partial \\mathbf{m}}{\\partial \\mathbf{u}}}(\\mathbf{u}_k) \\] <p>where \\(\\mathbf{x}_k=\\mathbf{m(u_k)}\\) is the center of a Gaussian in ray space and the Jacobian \\(\\mathbf{J_{u_k}}\\) is given by the partial derivatives of \\(\\mathbf{m}\\) at the point \\(\\mathbf{u}_k\\).</p> <p>This yields the local affine approximation of reconstruction kernels to ray space:</p> \\[ \\begin{aligned} r_{k}(\\mathbf{x})&amp;=\\frac{1}{|\\mathbf{W}^{-1}|}\\mathcal{G}_{\\mathbf{V'}_{k}}(\\mathbf{m^{-1}(x)}-\\mathbf{u_k})\\\\ &amp;=\\frac{1}{|\\mathbf{W}^{-1}||\\mathbf{J}^{-1}|}\\mathcal{G}_{\\mathbf{V}_{k}}(\\mathbf{x}-\\mathbf{x_k}) \\end{aligned} \\] <p>where \\(\\mathbf{V}_k\\) is the variance matrix in ray coordinates:</p> \\[ \\begin{aligned} \\mathbf{V}_{k}&amp;=\\mathbf{J}\\mathbf{V'}_{k}\\mathbf{J}^{T}\\\\ &amp;=\\mathbf{JW}\\mathbf{V''}_{k}\\mathbf{W}^{T}\\mathbf{J}^{T} \\end{aligned} \\]"},{"location":"Papers/3DGS/paper/#rasterizer","title":"Rasterizer","text":"<ul> <li>See Below for the Rasterizer</li> </ul>"},{"location":"Papers/3DGS/paper/#representing-colour","title":"Representing Colour","text":"<p>http://www.yindaheng98.top/%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E7%90%83%E8%B0%90%E7%B3%BB%E6%95%B0.html#%E7%90%83%E9%9D%A2%E9%AB%98%E6%96%AF%EF%BC%88spherical-gaussian%EF%BC%89</p>"},{"location":"Papers/3DGS/paper/#optimization-with-adaptive-density-control-of-3d-gaussians","title":"Optimization With Adaptive Density Control of 3D Gaussians","text":""},{"location":"Papers/3DGS/paper/#gradient-caculation","title":"Gradient Caculation","text":"<ul> <li> <p>Reference : grads\u63a8\u5bfc</p> </li> <li> <p>\u56db\u5143\u6570 : \u56db\u5143\u6570</p> </li> </ul> <p> </p> <pre><code>// Compute loss gradient w.r.t. matrix M\n// dSigma_dM = 2 * M\nglm::mat3 dL_dM = 2.0f * M * dL_dSigma;\n</code></pre> <p></p>"},{"location":"Papers/3DGS/paper/#adaptive-control-of-gaussians","title":"Adaptive Control of Gaussians","text":"<ul> <li> <p>\u201c\u6b20\u91cd\u6784\u533a\u201d(under-reconstruction)\uff1a\u4f4d\u7f6e\u68af\u5ea6\u5f88\u5927\u4f46\u503c\u5f88\u5c0f\u7684Gaussian\u70b9 -- \u7f3a\u5c11Gaussian\u70b9\u7684\u533a\u57df   \u590d\u5236\u8fd9\u4e2aGaussian\u70b9\uff0c\u518d\u6cbf\u4f4d\u7f6e\u68af\u5ea6\u8fdb\u884c\u79fb\u52a8</p> </li> <li> <p>\u201c\u8fc7\u91cd\u6784\u533a\u201d(over-reconstruction)\uff1a\u4f4d\u7f6e\u68af\u5ea6\u5f88\u5927\u4e14\u503c\u5f88\u5927\u7684Gaussian\u70b9 -- \u6bcf\u4e2aGaussian\u70b9\u8986\u76d6\u5f88\u5927\u8303\u56f4\u7684\u533a\u57df</p> </li> </ul> <p>\u51cf\u5c0f\u8fd9\u4e2aGaussian\u70b9\u7684\u503c\uff0c\u518d\u590d\u5236\u8fd9\u4e2aGaussian\u70b9\uff0c\u518d\u6cbf\u4f4d\u7f6e\u68af\u5ea6\u8fdb\u884c\u79fb\u52a8</p> <p></p>"},{"location":"Papers/3DGS/paper/#fast-differentiable-rasterization-for-gaussians","title":"Fast Differentiable Rasterization For Gaussians","text":""},{"location":"Papers/3DGS/paper/#pipeline","title":"Pipeline","text":"<ol> <li>\u5c4f\u5e55\u5206\u5272 : Split the screen into 16x16 tiles</li> <li>\u89c6\u9525\u4f53\u88c1\u526a : \u5047\u8bbe\u6211\u4eec\u6709\u4e00\u7ec43D\u9ad8\u65afsplat\uff0c\u6bcf\u4e2asplat\u4ee3\u8868\u4e00\u4e2a\u4f53\u79ef\u6570\u636e\u70b9\u3002\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u8fd9\u4e9bsplat\u662f\u5426\u4e0e\u89c6\u9525\u4f53\u76f8\u4ea4: </li> </ol> <p>Only keep the splats that have 99% confidence of intersecting the view frustum.</p> <p>\u4f8b\u5982\uff0c\u5982\u679c\u6709\u4e00\u4e2asplat\u7684\u4e2d\u5fc3\u4f4d\u4e8e\u89c6\u9525\u4f53\u4e4b\u5916\uff0c\u6211\u4eec\u5c31\u4e0d\u4f1a\u8003\u8651\u5b83\u3002</p> <ol> <li>Use guard band to trivially reject splats that are at extreme positions : computing their 2D variance would be unstable.</li> <li>\u5b9e\u4f8b\u5316\u548c\u6392\u5e8f</li> </ol> <ul> <li> <p>\u5047\u8bbe\u4e00\u4e2asplat\u4e0e5\u4e2a\u74e6\u7247\u76f8\u4ea4\uff0c\u6211\u4eec\u4e3a\u8fd9\u4e2asplat\u521b\u5efa5\u4e2a\u5b9e\u4f8b</p> </li> <li> <p>\u6bcf\u4e2a\u5b9e\u4f8b\u6839\u636e\u5176\u5728\u89c6\u7a7a\u95f4\u4e2d\u7684\u6df1\u5ea6\u548c\u74e6\u7247ID\u83b7\u5f97\u4e00\u4e2a\u552f\u4e00\u7684\u952e</p> </li> <li> <p>\u4f7f\u7528GPU Radix\u6392\u5e8f\u7b97\u6cd5\uff0c\u6211\u4eec\u6839\u636e\u8fd9\u4e9b\u952e\u5bf9\u6240\u6709\u5b9e\u4f8b\u8fdb\u884c\u6392\u5e8f 5. Rasterization</p> </li> <li> <p>\u5bf9\u4e8e\u6bcf\u4e2a\u74e6\u7247\uff0c\u6211\u4eec\u786e\u5b9a\u6392\u5e8f\u540e\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u5f71\u54cd\u8be5\u74e6\u7247\u7684splat\u5b9e\u4f8b</p> </li> <li> <p>\u5047\u8bbe\u74e6\u7247(5,5)\u9996\u5148\u52a0\u8f7d\u4e86\u5f71\u54cd\u5b83\u7684splat\u5b9e\u4f8b\u5217\u8868\u5230\u5171\u4eab\u5185\u5b58</p> </li> <li> <p>\u5bf9\u4e8e\u74e6\u7247(5,5)\u4e2d\u7684\u50cf\u7d20(5,5)\uff0c\u6211\u4eec\u4ece\u5217\u8868\u7684\u5f00\u59cb\u5230\u7ed3\u675f\u904d\u5386splat\u5b9e\u4f8b\uff0c\u7d2f\u79ef\u989c\u8272\u548c\u03b1\u503c</p> </li> <li> <p>\u5f53\u50cf\u7d20(5,5)\u7684\u03b1\u503c\u8fbe\u52301\u65f6\uff0c\u6211\u4eec\u77e5\u9053\u5b83\u5df2\u7ecf\u9971\u548c\uff0c\u4e0d\u518d\u9700\u8981\u66f4\u591a\u7684splat\u5b9e\u4f8b\u6765\u5f71\u54cd\u5b83\u7684\u989c\u8272 </p> </li> </ul>"},{"location":"Papers/3DGS/paper/#results","title":"Results","text":"<p>Compared to the state-of-the-art NeRF, 3DGS achieves much faster rendering speed with comparable visual quality (But the memory consumption is higher).</p> <p>Details see the paper </p>"},{"location":"Papers/4DGS/paper/","title":"2023.10-ICLR","text":"<p>"},{"location":"Papers/4DGS/paper/#real-time-photorrealistic-dynamic-scene-representation-and-rendering-with-4d-gaussian-splatting","title":"Real-Time Photorrealistic Dynamic Scene Representation And Rendering With 4D Gaussian Splatting","text":""},{"location":"Papers/4DGS/paper/#problem-formulation-and-4d-gaussian-splatting","title":"Problem Formulation and 4D Gaussian Splatting","text":""},{"location":"Papers/4DGS/paper/#problem-formulation","title":"Problem Formulation","text":"\\[ \\mathbb{I}(\\mu,v,t)=\\sum_{i=1}^{N} p_i(\\mu,v,t) \\alpha_ic_i(d)\\prod_{j=1}^{i-1} (1-p_j(\\mu, v,t)\\alpha_j) \\] <ul> <li>\\(p_i(\\mu,v,t)\\) can be factorized as a product of a conditional Gaussian and a marginal 1D Gaussian</li> </ul> \\[ p_i(\\mu,v,t) = p_i(\\mu,v|t)p_i(t) \\] <p>Helper Proof see Appendix</p>"},{"location":"Papers/4DGS/paper/#representaion-of-4d-gaussian","title":"Representaion of 4D Gaussian","text":""},{"location":"Papers/4DGS/paper/#4d-gaussian","title":"4D Gaussian","text":"<p>4D Gaussian : In the same way as in 3D Gaussian, we can define decomposition of 4D Gaussian as \\(\\Sigma = R\\Lambda R^T\\) where \\(\\Lambda\\) is a diagonal matrix and \\(U\\) is an orthogonal matrix. Also if we use \\(S = (\\Lambda)^{1/2}\\), then \\(\\Sigma = RSS^TR\\)</p> <p>S is a 4x4 scaling matrix (diagonal matrix) so it can be represented as \\(S = diag(s_x, s_y, s_z, s_t)\\)</p> <p>R is a 4x4 rotation matrix so it can be decomposed into 2 isotropic 2 rotations, each of which represented by a quaternion. So \\(R = L(q_l)R(q_r)\\) where \\(q_l\\) and \\(q_r\\) are left and right quaternions respectively.</p> <p>\\(q_l = (a, b, c, d)\\) and \\(q_r = (p, q, r, s)\\)</p> \\[ R(q_l)= \\begin{pmatrix} a&amp;-b&amp;-c&amp;-d\\\\ b&amp;a&amp;-d&amp;c\\\\ c&amp;d&amp;a&amp;-b\\\\ d&amp;-c&amp;b&amp;a \\end{pmatrix} \\] \\[ R(q_r)= \\begin{pmatrix} p&amp;-q&amp;-r&amp;-s\\\\ q&amp;p&amp;s&amp;-r\\\\ r&amp;-s&amp;p&amp;q\\\\ s&amp;r&amp;-q&amp;p \\end{pmatrix} \\] <p>the mean of the Gaussian is represented by a 4D vector \\(\\mu = (\\mu_x, \\mu_y, \\mu_z, \\mu_t)\\)</p>"},{"location":"Papers/4DGS/paper/#derivation-of-the-conditional-3d-gaussian-and-marginal-1d-gaussian","title":"Derivation of the conditional 3D Gaussian and marginal 1D Gaussian","text":""},{"location":"Papers/4DGS/paper/#conditional-3d-gaussian","title":"Conditional 3D Gaussian","text":"<p>The conditional 3D Gaussian is the Gaussian distribution of the first 3 dimensions given the 4<sup>th</sup> dimension. It can be derived by the following formula:</p> \\[ \\begin{aligned} \\Sigma_{3|1} &amp;= \\Sigma_{1,2,3} - \\Sigma_{1,2,4}\\Sigma_{4}^{-1}\\Sigma_{1,2,4}^T\\\\ \\mu_{3|1} &amp;= \\mu_{1,2,3} - \\Sigma_{1,2,3}\\Sigma_{4}^{-1}(r - \\mu_{4}) \\end{aligned} \\] \\[ \\Sigma = \\begin{pmatrix} \\Sigma_{1,2,3} &amp; \\Sigma_{1,2,4} \\\\ \\Sigma_{1,2,4}^T &amp; \\Sigma_4 \\end{pmatrix} \\]"},{"location":"Papers/4DGS/paper/#marginal-1d-gaussian","title":"Marginal 1D Gaussian","text":"<p>The marginal 1D Gaussian is the Gaussian distribution of the 4<sup>th</sup> dimension. It can be derived by the following formula:</p> \\[ \\begin{aligned} \\Sigma_{4} &amp;= \\Sigma_{4}\\\\ \\mu_{4} &amp;= \\mu_{4} \\end{aligned} \\]"},{"location":"Papers/4DGS/paper/#4d-spherindrical-harmonics","title":"4D spherindrical harmonics","text":""},{"location":"Papers/4DGS/paper/#spherindrical-harmonics","title":"spherindrical harmonics","text":"\\[ \\begin{aligned} Y_{l}^m(\\theta, \\phi) &amp;= \\sqrt{\\frac{2l+1}{4\\pi}\\frac{(l-|m|)!}{(l+|m|)!}}P_l^m(\\cos(\\theta))e^{im\\phi}\\\\ P_l^m(x) &amp;= (1-x^2)^{|m|/2}\\frac{d^{|m|}}{dx^{|m|}}P_l(x)\\\\ P_l(x) &amp;= \\frac{1}{2^ll!}\\frac{d^l}{dx^l}(x^2-1)^l \\end{aligned} \\] <ul> <li>Spherical harmonic functions are a series of orthogonal functions defined on the surface of a sphere, which can be use to approximate function in spherical coordinate:</li> </ul> \\[ f(t)\\approx \\sum_{l}\\sum_{m=-l}^{l}c_{l}^{m}Y_{l}^{m}(\\theta,\\phi) \\] <ul> <li> <p>\\(l\\): the degree (non-negative integer)</p> </li> <li> <p>\\(m\\): the order (integer such that \\(\u2212l\\leq m\\leq l\\))</p> </li> <li> <p>\\(c_{l}^{m}\\): SH coefficients</p> </li> </ul> \\[ c_{l}^{m}=\\int_{\\Omega}f(w)Y_{l}^{m}(w)dw \\] <ul> <li>\\(Y_{l}^{m}\\): SH functions, where \\(P_{l}^{m}\\) are the associated Legendre polynomials, \\(\\theta\\) is the colatitude(0 to \\(\\pi\\)), and \\(\\phi\\) is the longitude(0 to \\(2\\pi\\))</li> </ul> \\[ Y_{l}^{m}=\\sqrt{\\frac{(2l+1)(l-m)!}{4\\pi (l+m)!}}P_{l}^{m}(cos\\theta)e^{im\\phi} \\] <ul> <li>Reference: Spherical Harmonics</li> <li>Reference: Spherical Harmonics</li> </ul>"},{"location":"Papers/4DGS/paper/#4d-spherindrical-harmonics_1","title":"4D spherindrical harmonics","text":"<ul> <li>4D spherindrical harmonics are the extension of spherical harmonics to 4D space. It can be defined as:</li> </ul> \\[ Z_{nl}^m(t, \\theta, \\phi) = cos(\\frac{2\\pi nt}{T})Y_{l}^m(\\theta, \\phi) \\]"},{"location":"Papers/DM/DDIM/","title":"DDIM","text":"<p>"},{"location":"Papers/DM/DDIM/#ddim-denoising-diffusion-implicit-models","title":"DDIM: Denoising Diffusion Implicit Models","text":""},{"location":"Papers/DM/DDIM/#goal","title":"Goal","text":"<ul> <li>Reduce the number of iterations required by the generative model.</li> </ul>"},{"location":"Papers/DM/DDIM/#references","title":"References","text":"<ul> <li>Blog </li> </ul>"},{"location":"Papers/DM/DDPM/","title":"DDPM","text":"<p>"},{"location":"Papers/DM/DDPM/#ddpm-denoising-diffusion-probabilistic-models","title":"DDPM: Denoising Diffusion Probabilistic Models","text":""},{"location":"Papers/DM/DDPM/#mathematical-formulation","title":"Mathematical Formulation","text":""},{"location":"Papers/DM/DDPM/#forward-diffusion-process","title":"Forward Diffusion Process","text":"<p>The distribution \\(q\\) in the forward diffusion process is defined as Markov Chain given by $$ q(x_1,...x_T|x_0) = \\Pi_{t=1}^T q(x_t|x_{t-1})  (1) $$ $$ q(x_t|x_{t-1}) = \\mathcal{N}(x_t;\\sqrt{1-\\beta_t}x_{t-1},\\beta_t I)  (2) $$</p> <ul> <li> <p>From (2) we can sample \\(x_t\\) from \\(q(x_t|x_{t-1})\\) by $$ x_t = \\sqrt{1-\\beta_t}x_{t-1} + \\sqrt{\\beta_t}z_t  (3) $$ where \\(z_t \\sim \\mathcal{N}(0,I)\\).</p> </li> <li> <p>We want to sample at any time \\(t\\) from the distribution \\(q(x_t|x_0)\\) without knowing the previous samples \\(x_{t-1},...,x_1\\). </p> </li> </ul> <p>$$\\alpha_t = 1-\\beta_t  (4)\\ $$   \\(\\(\\bar{\\alpha}_t = \\Pi_{i=1}^t \\alpha_i \\ \\ (5)\\\\\\)\\)   $$ q(x_t|x_0) = \\mathcal{N}(x_t;\\sqrt{\\bar{\\alpha}_t}x_0,(1-\\bar{\\alpha}_t) I)  (6)$$</p> <ul> <li>Therefore, we can sample \\(x_t\\) from \\(q(x_t|x_0)\\) by \\(x_t = \\sqrt{\\bar{\\alpha}_t}x_0 + \\sqrt{1-\\bar{\\alpha}_t}z_t\\)    where \\(z_t \\sim \\mathcal{N}(0,I)\\) and \\(\\bar{\\alpha}_t\\) is the cumulative product of \\(\\alpha_i\\),which means \\(\\bar{\\alpha}_t = \\Pi_{i=1}^t \\alpha_i\\).</li> </ul>"},{"location":"Papers/DM/DDPM/#reverse-diffusion-process","title":"Reverse Diffusion Process","text":"<p>The reverse process is a Markov chain where a neural network predicts the parameters for the reverse diffusion kernel at each timestep. </p> <ul> <li> <p>maximum likelihood estimation (MLE) is used to train the neural network.   </p> </li> <li> <p>Maximize the lower bound of the log-likelihood of the data given the model.</p> </li> <li> <p>After some math -- our goal is to minimize the noise difference between the predicted noise and the true noise.   \\(\\(||(\\epsilon_{\\theta}-\\epsilon)^2_2||\\)\\) </p> </li> </ul>"},{"location":"Papers/DM/DDPM/#algorithm","title":"Algorithm","text":""},{"location":"Papers/DM/DDPM/#implementation","title":"Implementation","text":""},{"location":"Papers/DM/DDPM/#noise-scheduling","title":"Noise Scheduling","text":""},{"location":"Papers/DM/DDPM/#references","title":"References","text":"<ol> <li> <p>what are diffusion models</p> </li> <li> <p>An In-Depth Guide to Denoising Diffusion Probabilistic Models DDPM \u2013 Theory to Implementation</p> </li> <li> <p>Youtube: Denoising Diffusion Probabilistic Models | DDPM Explained </p> </li> </ol>"},{"location":"Papers/DM/SD/","title":"Stable Diffusion","text":"<p>"},{"location":"Papers/DM/SD/#high-resolution-image-synthesis-with-latent-diffusion-models","title":"High-Resolution Image Synthesis with Latent Diffusion Models","text":""},{"location":"Papers/DM/SD/#architecture","title":"Architecture","text":""},{"location":"Papers/DM/SD/#perceptual-image-compression","title":"Perceptual Image Compression","text":"<ul> <li>Encoder:  given an image \\(x \\in \\mathbb{R}^{H \\times W \\times 3}\\) in RGB space, the encoder \\(\\epsilon\\) encodes \\(x\\) into a latent representation \\(z = \\epsilon(x)\\). where \\(z \\in \\mathbb{R}^{h \\times w \\times C}\\).</li> <li>Decoder: given a latent representation \\(z\\), the decoder \\(\\delta\\) decodes \\(z\\) into an image \\(\\hat{x} = \\delta(z)\\).</li> <li>Regularization: the encoder and decoder are trained to minimize the reconstruction error between the input image \\(x\\) and the decoded image \\(\\hat{x}\\) </li> <li>KL-reg </li> <li>VQ-reg</li> </ul>"},{"location":"Papers/DM/SD/#generative-modeling-of-latent-representations","title":"Generative Modeling of Latent Representations","text":"<ul> <li>A Time-conditioned UNet</li> </ul>"},{"location":"Papers/DM/SD/#conditioning-mechanisms","title":"Conditioning Mechanisms","text":"<ul> <li>conditional denoising autoencoder \\(\\epsilon_{\\theta}(z_t,t,y)\\)</li> <li>Add cross-attention mechanism to the Unet architecture</li> <li>To pre-process y from various modalities (such as language prompts) we introduce a domain specific encoder \\(\u03c4_\u03b8\\) that projects y to an intermediate representation \\(\u03c4_\u03b8(y) \\in \\mathbb{R}^{h \\times w \\times C}\\), which is then mapped to the intermediate layers of the UNet via a cross-attention layer implementing </li> <li>\\(Attention(Q,K,V) = softmax(QK^T/\\sqrt{d})V\\),    with \\(Q = \\epsilon_{\\theta}(z_t,t,y)\\), \\(K = \u03c4_\u03b8(y)\\), and \\(V\\) being the intermediate feature maps of the UNet.</li> <li>\\(\\tau_\u03b8\\) and \\(\\epsilon_\u03b8\\) are trained jointly with the rest of the model. </li> </ul>"},{"location":"Papers/NeRF/Theory/","title":"NeRF","text":"<p>"},{"location":"Papers/NeRF/Theory/#nerf-representing-scenes-as-neural-radiance-fields-for-view-synthesis","title":"NeRF: Representing Scenes as Neural Radiance Fields for View Synthesis","text":""},{"location":"Papers/NeRF/Theory/#introduction","title":"Introduction","text":"<p>Overfit a single neural network for a particular scene to train an overfitted nerual network which represents the scene.</p> <p>Input : \\((x,y,z,\\theta,\\phi)\\): \\((x,y,z)\\) is the space location and \\((\\theta,\\phi)\\) is the viewing direction </p> <p>Output : (colour, density)</p> <p>Therefore, when the network is well-overfitted, it can give you results depending on the given viewing directions -- Catch Transparency and Colour.</p>"},{"location":"Papers/NeRF/Theory/#overview","title":"Overview","text":"<p>a. Sample 5D coordinates along camera rays.</p> <p>b. Feed those locations into an MLP to produce a color and volume density.</p> <p></p> <p>\\(F_{\\Theta}\\) : </p> <ol> <li> <p>Process the input 3D coordinate with 8 fully-connected layers (with ReLU activations and 256 channels per layer)</p> </li> <li> <p>Output \\(\\sigma\\) and a 256-dimensional feature vector.</p> </li> <li> <p>Concatenate the feature vector with the camera ray's viewing direction and passed to one additional fully-connected layer (using ReLU activation and 128 channels.)</p> </li> <li>It outputs the view-dependent RGB colour.</li> </ol> <p>From above we can see that, NeRF encourages the representation to be multivies consistent by restricting the network to predict the volume density \\(\\sigma\\) as a function of ONLY the location, while we allow the RGB colour to be predicted as a fucntion of both location and viewing direction.</p> <p>c. Use volume rendering techniques to composite these values into an image</p> <p>d. The rendering function is differentiable, we optimize the scene representation by minimizing the residual between synthesized and ground truth observed images.</p> <p>The weight is the scene</p>"},{"location":"Papers/NeRF/Theory/#detailed-parts","title":"Detailed Parts","text":""},{"location":"Papers/NeRF/Theory/#neural-radiance-field-scene-representation","title":"Neural Radiance Field Scene Representation","text":"<ul> <li> <p>Volume density \\(\\sigma(x)\\) : differential probability of a ray terminating at an infinitesimal particle at location x </p> </li> <li> <p>\\(C(r)\\) : The expected color of ray \\(r(t) = o+td\\)  with near and far bound \\(t_n\\) and \\(t_f\\)\u200b</p> </li> <li> <p>\\(T(t)\\) : accumulated transmittance along the ray from \\(t_n\\) to \\(t\\) ,i.e., the probability that the ray travels from \\(t_n\\) to \\(t\\) without hitting any other particle. And therefore \\(T(t)=exp(-\\int_{t_n}^{t}\\sigma(r(s))ds)\\)\u200b</p> </li> </ul> <p></p> <p></p> <p>Thus , \\(C(r) = \\int_{t_n}^{t_f} T(t) \\sigma(r(t))c(r(t),d)dt\\)\u200b  : Clearly color depends on both position and direction.</p> <p></p> <p>Numerically estimate this continuous integral using quadrature and finally we get:</p> <p></p>"},{"location":"Papers/NeRF/Theory/#optimizing-a-neural-radiance-field","title":"Optimizing a Neural Radiance Field","text":""},{"location":"Papers/NeRF/Theory/#positional-encoding","title":"Positional Encoding","text":"<p>Better Performace at representing high-frequency variation</p> <p>Reform \\(F_{\\theta}\\) as a composition of two functions \\(F_{\\theta}=F_{\\theta}'*\\gamma\\) one learned and one not.</p> <ul> <li>\\(\\gamma\\) is a mapping from \\(R\\) into a higher dimensional space \\(R^{2L}\\) and \\(F_{\\theta}'\\) is still simply a regular MLP.</li> </ul> <p></p> <p></p>"},{"location":"Papers/NeRF/Theory/#hierarchical-volume-sampling","title":"Hierarchical volume sampling","text":"<p>Implement two networks: Use the result of the coarse network to determine where to sample in the fine network. </p> <ul> <li>one \"coarse\"</li> <li>one \"fine\"</li> </ul> <p>To do this, we rewrite the alpha composited color from thecoarse network \\(\\hat{C}_c(r)\\) as a weighted sum of all sampled colors \\(c_i\\)\u200b along the ray.</p> <p></p> <p>Normalize the wights as \\(\\hat{w}_i=\\frac{w_i}{\\sum_{j=1}^{N_c}w_j}\\) , we sample a second set of \\(N_f\\) locations from the distribution using inverse transform sampling (https://en.wikipedia.org/wiki/Inverse_transform_sampling)</p> <p>Compute the final result using all \\(N_c + N_f\\)\u200b samples(Training Time), at test time use ONLY fine network.</p>"},{"location":"Papers/NeRF/Theory/#implementation-details","title":"Implementation Details","text":""},{"location":"assembly/%E4%B8%AD%E6%96%AD/","title":"\u4e2d\u65ad","text":""},{"location":"assembly/%E4%B8%AD%E6%96%AD/#int16","title":"int16","text":"<ul> <li>int 16h/ah=00h \u5c5e\u4e8ebios\u4e2d\u65ad <p>int 16h ax=\u6240\u6572\u952e\u7684\u7f16\u7801 <pre><code>again:  [\u5237\u65b0\u6e38\u620f\u7684\u753b\u9762]\nmov ah,1\nint 16h \u68c0\u67e5\u952e\u76d8\u7f13\u51b2\u533a\u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56dezf=1,\u5426\u5219\u8fd4\u56dezf=0  (ZF=1 jz\u8df3\u8f6c)\njz no_key\nhas_key:\n    mov ah,0\n    int 16h  \u4ece\u952e\u76d8\u7684\u7f13\u51b2\u533a\u8bfb\u53d6\u4e00\u4e2a\u952e\uff0c\u6839\u636e\u6240\u6572\u7684\u952e\u6267\u884c\u4e0d\u540c\u5206\u652f\nno_key:\n    jmp again\n</code></pre></p> </li> </ul> <p>\u4f8b\u5b50\uff1a <pre><code>data segment\nx dw 0\ny dw 0\ndata ends\ncode segment\nassume cs:code,ds:data\nmain:\n  mov ax,data\n  mov ds,ax\n  mov ah,0\n  mov al,3\n  mov ax,0B800h\n  mov es,ax\ndraw:\n  ;bx=(y*80+x)*2\n  mov ax,[y]\n  mov bp,80\n  mul bp \n;  dx(\u9ad816\u4f4d):ax\uff08\u4f4e16\u4f4d\uff09=ax*bp \n;  \u5176\u4e2ddx=0 mul\u7684\u4e58\u6570\u5bbd\u5ea616 \u5219\u88ab\u4e58\u6570\u4e3aax\n;  24x79\u603b\u4e4b\u4e0d\u8d85\u8fc716\u4f4d      \n  add ax,[x]\n  add ax,ax\n  mov bx,ax\n  mov es:[bx],1720h\n check_key:\n  mov ah,1\n  int 16h\n  jnz has_key\n  jmp check_key\n has_key:\n  mov ah,0\n  int 16h\n  cmp ax,4800h\n  je is_up\n  cmp ax,5000h\n  je is_down\n  cmp ax,4B00h\n  je is_left\n  cmp ax,4D00h\n  je is_right\n  jmp exit\nis_up:\n  cmp [y],0\n  je check_key\n  dec [y]\n  jmp draw\nis_down:\n  cmp [y],24\n  je check_key\n  inc [y]\n  jmp draw\nis_left:\n  cmp [x],0\n  je check_key\n  dec [x]\n  jmp draw\nis_right:\n  cmp [x],79\n  je check_key\n  inc [x]\n  jmp draw\nexit:\n  mov ah,4Ch\n  int 21h\ncode ends\nend main\n</code></pre></p>"},{"location":"assembly/%E4%B8%AD%E6%96%AD/#int-21h","title":"int 21h","text":"<ul> <li>int21h\u5bf9\u5e94\u7684\u51fd\u6570\u9996\u5730\u5740\u4fdd\u5b58\u57280:84h\u5904, \u8be5\u5730\u5740\u662f\u4e00\u4e2a\u8fdc\u6307\u9488\u3002 <pre><code>0:84 78h\n0:85 56h\n0:86 34h\n0:87 12h\nxor ax,ax\nmov es,ax\nmov bx,84h\nlds si,es:[bx]\n;ds=1234h si=5678h\n</code></pre></li> <li>dword ptr 0:[84h]\u79f0\u4e3aint 21h\u7684\u4e2d\u65ad\u5411\u91cf(\u5176\u5b9e\u662f\u5b83\u7684\u51fd\u6570\u9996\u5730\u5740) <ul> <li>int n\u5bf9\u5e94\u7684\u4e2d\u65ad\u5411\u91cf\u7684\u5b58\u50a8\u4f4d\u7f6e\u4e00\u5b9a\u662f0:n*4</li> <li>n\u7684\u53d6\u503c\u8303\u56f4\u662f[00, FF], \u6240\u4ee5256\u4e2a\u4e2d\u65ad\u5411\u91cf\u4f1a\u5360\u75280:0~0:3FF\u4e4b\u95f4\u5171400h\u4e2a\u5b57\u8282\u7684\u5185\u5b58\uff0c\u8fd9\u5757\u533a\u57df\u79f0\u4e3a \u4e2d\u65ad\u5411\u91cf\u8868\u3002</li> </ul> </li> </ul> <p><pre><code>\u663e\u7136, int 00h\u7684\u4e2d\u65ad\u5411\u91cf\u4fdd\u5b58\u5728dword ptr 0:[0];\nint 01h\u7684\u4e2d\u65ad\u5411\u91cf\u4fdd\u5b58\u5728dword ptr 0:[4];\nint 03h\u7684\u4e2d\u65ad\u5411\u91cf\u4fdd\u5b58\u5728dword ptr 0:[0Ch];\nint 08h\u7684\u4e2d\u65ad\u5411\u91cf\u4fdd\u5b58\u5728dword ptr 0:[20h];\nint 0FFh\u7684\u4e2d\u65ad\u5411\u91cf\u4fdd\u5b58\u5728dword ptr 0:[3FCh];\n</code></pre> * BIOS\u4f1a\u5b8c\u6210\u90e8\u5206\u4e2d\u65ad\u5411\u91cf\u7684\u586b\u5199, \u5982int 10h\u3001int 16h\u3001int 13h\u8fd9\u51e0\u4e2aBIOS\u4e2d\u65ad\u7684\u5411\u91cf\u5728DOS\u542f\u52a8\u524d\u5c31\u5df2\u7ecf\u586b\u597d\u4e86 * DOS\u542f\u52a8\u5b8c\u6210\u540e\uff0c\u4f1a\u586b\u5165int 21h\u7684\u4e2d\u65ad\u5411\u91cf\u3002</p> <p><pre><code>1000:2000 mov ah, 2\n1000:2002 mov dl, 'A'\n1000:2004 int 21h\n1000:2006 mov ah,4Ch\n</code></pre> * \u4e0a\u9762\u8fd9\u6761int 21h\u6307\u4ee4\u6267\u884c\u65f6, cpu\u505a\u4e86\u4ee5\u4e0b4\u4ef6\u4e8b: <pre><code>IF=0\nTF=0  -\u9632\u6b62\u4e2d\u65ad\u91cc\u518d\u6b21\u4ea7\u751f\u4e2d\u65ad\npushf\npush cs\u53731000h\npush \u4e0b\u6761\u6307\u4ee4\u7684\u504f\u79fb\u5730\u5740\u53732006h\njmp dword ptr 0:[84h]; jmp 1234h:5678h\n\n\u4e0a\u9762\u8fd9\u6761jmp\u4f1a\u8df3\u8f6c\u5230int 21h\u7684\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\u5185\u90e8:\n1234:5678  ...\n             ...\n1234:56FF  iret; \u4e2d\u65ad\u8fd4\u56de\niret\u5728\u6267\u884c\u65f6, cpu\u505a\u4e86\u4ee5\u4e0b3\u4ef6\u4e8b\u60c5:\npop ip\u5373ip=2006h\npop cs\u5373cs=1000h\npopf\n\n1000:2000 call 1234:5678; \u8fdc\u8c03\u7528\n;\u6b64\u65f6\u4f1apush 1000h \u518d push 2005h\n;\u6700\u540ejmp 1234:5678\n1000:2005 mov ah, 4Ch\n1000:2007 int 21h\n...\n1234:5678 ...\n            retf; \u6b64\u65f6\u6267\u884cpop ip\u518dpop cs\n</code></pre></p> <p>\u4e2d\u65ad\u7a0b\u5e8f\u4f8b\u5b50 <pre><code>code segment\nassume cs:code\nold_80h dw 0, 0\nmain:\n   xor ax, ax\n   mov es, ax\n   mov bx, 80h*4; mov bx, 200h\n   mov ax, es:[bx]\n   mov old_80h[0], ax\n   mov ax, es:[bx+2]\n   mov old_80h[2], ax\n\n   mov word ptr es:[bx], offset int_80h\n   mov es:[bx+2], cs\n\n   mov ah, 1\n   int 80h; AL=\u952e\u76d8\u8f93\u5165\u7684ASCII\u7801\nnext:\n   mov ah, 2\n   mov dl, al\n   int 80h\n\n   mov ax, old_80h[0]\n   mov es:[bx], ax\n   mov ax, old_80h[2]\n   mov es:[bx+2], ax\n\n   mov ah, 4Ch\n   int 21h\nint_80h: ; ISR(Interrupt Service Routine)\n         ; \u4e2d\u65ad\u670d\u52a1\u51fd\u6570\n   cmp ah, 1\n   je is_1\nis_2:\n   push es\n   push bx\n   push ax\n   mov bx, 0B800h\n   mov es, bx\n   mov byte ptr es:[160], dl\n   mov byte ptr es:[161], 17h\n   pop ax\n   pop bx\n   pop es\n   jmp done\nis_1:\n   int 21h\ndone:\n   iret\n   ;\u5982\u679c\u60f3\u63a5\u8fde\u6267\u884cold int80\uff1ajmp dword ptr cs:[old_80h]\n\ncode ends\nend main\n</code></pre></p>"},{"location":"assembly/%E5%87%BD%E6%95%B0/","title":"\u51fd\u6570","text":""},{"location":"assembly/%E5%87%BD%E6%95%B0/#_1","title":"\u6c47\u7f16\u8bed\u8a00\u4e2d\u7684\u4e09\u79cd\u53c2\u6570\u4f20\u9012\u65b9\u5f0f","text":""},{"location":"assembly/%E5%87%BD%E6%95%B0/#_2","title":"\u5bc4\u5b58\u5668\u4f20\u9012","text":"<pre><code>f:\n   add ax, ax; ax=2*ax\n   ret        ; \u8fd4\u56de\u65f6ax\u5c31\u662f\u51fd\u6570\u503c\nmain:\n   mov ax, 3; ax\u5c31\u662ff()\u7684\u53c2\u6570\n   call f\nnext:\n   mov ah, 4Ch\n   int 21h\n</code></pre>"},{"location":"assembly/%E5%87%BD%E6%95%B0/#_3","title":"\u53d8\u91cf\u4f20\u9012","text":"<p><pre><code>f:\n   mov ax, var\n   add ax, ax; ax\u5c31\u662f\u51fd\u6570\u503c\n   ret\nmain:\n   mov var, 3\n   ; var\u662f\u4e00\u4e2a16\u4f4d\u7684\u53d8\u91cf, \u7528\u4f5c\u53c2\u6570\uff0cvar\u5fc5\u987b\u662f\u5168\u5c40\u53d8\u91cf\n   call f\n</code></pre> * \u5728\u6c47\u7f16\u8bed\u8a00\u4e2d\uff0c\u7528\u00a0db\u3001dw\u7b49\u5173\u952e\u8bcd\u5b9a\u4e49\u7684\u53d8\u91cf\u5747\u4e3a\u5168\u5c40\u53d8\u91cf\u00a0\u3002\u5728\u5806\u6808\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u624d\u662f\u5c40\u90e8\u53d8\u91cf\u3002 * var\u4e0d\u80fd\u7528\u4e8e\u9012\u5f52\u51fd\u6570\u5185--\u6bcf\u4e00\u5c42\u53d8\u91cf\u5730\u5740\u5404\u4e0d\u76f8\u540c\uff0c\u5168\u5c40\u53d8\u91cf\u7684\u8bdd\u6c38\u8fdc\u662f\u540c\u4e00\u4e2a\u5730\u5740\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528\u6765\u4f20\u9012\u9012\u5f52\u51fd\u6570\u7684\u53c2\u6570</p>"},{"location":"assembly/%E5%87%BD%E6%95%B0/#_4","title":"\u5806\u6808\u4f20\u9012","text":"<p><pre><code>f:\n   push bp\n   mov bp, sp\n   mov ax, [bp+4]; \u4ece\u5806\u6808\u4e2d\u53d6\u5f97\u53c2\u6570\n   add ax, ax\n   pop bp\n   ret\nmain:\n   mov ax, 3\n   push ax; \u53c2\u6570\u538b\u5165\u5230\u5806\u6808\n   call f\n   add sp, 2\n</code></pre> * C\u8bed\u8a00\u51fd\u6570\u8c03\u7528y=f(2,3)\u6c42\u4e24\u6570\u4e4b\u548c\u8f6c\u5316\u6210\u6c47\u7f16\u8bed\u8a00 * \u8bbess=1000h sp=2000h <pre><code>f:\n   push bp;(4)\n   mov bp, sp\n   mov ax, [bp+4]\n   add ax, [bp+6]\n   pop bp; (5)\n   ret; (6)  pop ip\nmain:\n   mov ax, 3\n   push ax; (1)\n   mov ax, 2\n   push ax; (2)\n   call f; (3) \n   ;call\u4f1a\u628af\u6307\u4ee4\u7684\u4e0b\u4e00\u6761\u7684\u5730\u5740\uff08here\uff09\u538b\u5165\u5806\u6808 \u7136\u540e\u518djmpf\nhere:\n   add sp, 4;(7);\u5806\u6808\u6062\u590d\u5e73\u8861\n</code></pre> * \u4e0a\u8ff0\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u7684\u5806\u6808\u5e03\u5c40\u5982\u4e0b:stack frame <pre><code>ss:1FF8 old bp &lt;- bp (4)\nss:1FFA here &lt;- (3)(5)\nss:1FFC 02   &lt;- (2)(6)\nss:1FFE 03   &lt;- (1)\nss:2000 ??   &lt;- (7)\n</code></pre> * printf\u51fd\u6570\u539f\u578b <pre><code>#include &lt;stdio.h&gt;\ndouble f(char *s, ...)\n{  double y=0;\n   char *p = (char *)&amp;s; /* p = bp+4 */\n   p += sizeof(s); /* p = bp+6 */\n   while(*s != '\\0')\n   {\n      if(*s == 'i')\n      {\n         y += *(int *)p;\n         p += sizeof(int);\n      }\n      else if(*s == 'l')\n      {\n         y += *(long*)p;\n         p += sizeof(long);\n      }\n      else if(*s == 'd')\n      {\n         y += *(double *)p;\n         p += sizeof(double);\n      }\n      s++;\n   }\n   return y;\n}\nmain()\n{\n   double y;\n   y = f(\"ild\", 10, 20L, 3.14);\n   printf(\"y=%lf\\n\", y);\n}\n</code></pre> * call far ptr dest retf <pre><code>1000:2000 call 1234:5678  ;\u8de8\u6bb5\u8df3\u8fdc\ncpu\u4f1a\u505a\u4e00\u4e0b\u52a8\u4f5c\uff1a\n[1]push cs\n[2]push 2005h\n[3]jmp 1234:5678h\n;\u4e00\u5b9a\u5148\u538b\u5165\u6bb5\u5730\u5740\uff0c\u518d\u538b\u5165\u504f\u79fb\u5730\u5740  WHY?5.18\u6700\u540e\u4e00\u6bb5\n1000:2005 mov ah,4Ch\n1234:5678 ...\n1234:5688 retf\ncpu \u5728retf\u65f6\u4f1a\u505a\u4ee5\u4e0b\u52a8\u4f5c\n[1]pop ip;\n[2]pop cs;\n</code></pre></p>"},{"location":"assembly/%E5%87%BD%E6%95%B0/#3","title":"\u7528\u5806\u6808\u4f20\u9012\u53c2\u6570\u67093\u79cd\u65b9\u5f0f:","text":""},{"location":"assembly/%E5%87%BD%E6%95%B0/#__cdecl","title":"__cdecl","text":"<ul> <li>\u53c2\u6570\u4ece\u53f3\u5230\u5de6\u987a\u5e8f\u538b\u5165\u5806\u6808\uff0c\u7531\u8c03\u7528\u8005\u6e05\u7406\u5806\u6808\u662fC\u8bed\u8a00\u53c2\u6570\u4f20\u9012\u89c4\u8303\u3002 <p>__cdecl\u7684\u4f8b\u5b50: <pre><code>f:\npush bp; (4)\nmov bp, sp\nmov ax, [bp+4]; arg0\nadd ax, [bp+6]; arg1\npop bp; (5)\nret; (6)\nmain:\nmov ax, 20; arg1\npush ax; (1)\nmov ax, 10; arg0\npush ax; (2)\ncall f; (3)\nhere:\nadd sp, 4; (7)\n</code></pre></p> </li> <li>__cdecl\u5806\u6808\u5e03\u5c40: <pre><code>ss:1FF8 old bp -&gt; bp (4)\nss:1FFA here -&gt; (3)(5)\nss:1FFC 10 -&gt; (2)(6)\nss:1FFE 20 -&gt; (1)\nss:2000    -&gt; (7)\n</code></pre></li> </ul>"},{"location":"assembly/%E5%87%BD%E6%95%B0/#__pascal","title":"__pascal","text":"<ul> <li>\u53c2\u6570\u4ece\u5de6\u5230\u53f3\u987a\u5e8f\u538b\u5165\u5806\u6808\uff0c\u7531\u88ab\u8c03\u7528\u8005\u6e05\u7406\u5806\u6808\u662fPascal\u8bed\u8a00\u53c2\u6570\u4f20\u9012\u89c4\u8303\u3002 <p>__pascal\u7684\u4f8b\u5b50\uff1a <pre><code>f:\npush bp; (4)\nmov bp, sp\nmov ax, [bp+6]; arg0\nadd ax, [bp+4]; arg1\npop bp; (5)\nret 4; (6)\nmain: \nmov ax, 10\npush ax; (1) arg0\nmov ax, 20\npush ax; (2) arg1\ncall f; (3)\nhere: \n</code></pre></p> </li> <li>__pascal\u7684\u5806\u6808\u5e03\u5c40: <pre><code>ss:1FF8 old bp&lt;- bp (4)\nss:1FFA here &lt;- (3)(5)\nss:1FFC 20 &lt;- (2)\nss:1FFE 10 &lt;- (1)\nss:2000    &lt;-(6)\n</code></pre> <p>ret 4: [1]pop ip [2]sp=sp+4</p> </li> </ul>"},{"location":"assembly/%E5%87%BD%E6%95%B0/#__stdcall","title":"__stdcall","text":"<ul> <li>\u53c2\u6570\u4ece\u53f3\u5230\u5de6\u987a\u5e8f\u538b\u5165\u5806\u6808\uff0c\u7531\u88ab\u8c03\u7528\u8005\u6e05\u7406\u5806\u6808\u662fWindows API\u51fd\u6570\u7684\u53c2\u6570\u4f20\u9012\u89c4\u8303\u3002 <p>__stdcall\u7684\u4f8b\u5b50\uff1a <pre><code>f:\npush bp; (4)\nmov bp, sp\nmov ax, [bp+4]; arg0\nadd ax, [bp+6]; arg1\npop bp; (5)\nret 4; (6)\nmain:\nmov ax, 20\npush ax; (1) arg1\nmov ax, 10\npush ax; (2) arg0\ncall f; (3)\nhere: \n</code></pre></p> </li> </ul> <p>__stdcall\u7684\u5806\u6808\u5e03\u5c40: <pre><code>ss:1FF8 old bp&lt;- bp (4)\nss:1FFA here &lt;- (3)(5)\nss:1FFC 10 &lt;- (2)\nss:1FFE 20 &lt;- (1)\nss:2000    &lt;-(6)\n</code></pre> * 32\u4f4d__stdcall\u7684\u4f8b\u5b50: <pre><code>f:\npush ebp;(4)\nmov ebp, esp\nmov eax,[ebp+8];arg0\nadd eax,[ebp+0Ch];arg1\npop ebp;(5)\nret 8;(6)\nmain:\npush 20;(1) arg1\npush 10;(2) arg0\ncall f;(3)\nhere:\n</code></pre> * 32\u4f4d__stdcall\u7684\u5806\u6808\u5e03\u5c40: <pre><code>ss:1FF0 old ebp&lt;- ebp (4)\nss:1FF4 here &lt;- (3)(5)\nss:1FF8 10 &lt;- (2)\nss:1FFC 20 &lt;- (1)\nss:2000    &lt;-(6)\n</code></pre></p>"},{"location":"assembly/%E5%87%BD%E6%95%B0/#_5","title":"\u52a8\u6001\u53d8\u91cf","text":"<pre><code>int f(int a, int b)\n{\n   int c; /* c\u662f\u5c40\u90e8\u52a8\u6001\u53d8\u91cf */\n   c = a+b;\n   return c;\n}\n</code></pre> <p>\u4e0a\u8ff0C\u8bed\u8a00\u51fd\u6570\u53ef\u7ffb\u8bd1\u6210\u4ee5\u4e0b\u6c47\u7f16\u4ee3\u7801: <pre><code>f:\npush bp; (4)\nmov bp, sp\nsub sp, 2; (5) \u8fd9\u91cc\u6316\u7684\u5751\u5c31\u662f\u7ed9\u53d8\u91cfc\u7684\nmov ax, [bp+4]\nadd ax, [bp+6]\nmov [bp-2], ax\nmov ax, [bp-2]\nmov sp, bp; (6)\u6b64\u65f6\u53d8\u91cfc\u6b7b\u4ea1\npop bp; (7)\nret; (8)\nmain:\nmov ax, 20\npush ax; (1)\nmov ax, 10\npush ax; (2)\ncall f; (3)\nhere:\nadd sp, 4;(9)\u6b64\u65f6\u53c2\u6570a,b\u6b7b\u4ea1\n</code></pre> \u6267\u884c\u4e0a\u8ff0\u4ee3\u7801\u65f6, \u5806\u6808\u5e03\u5c40\u5982\u4e0b: <pre><code>ss:1FF6 [30] (5) \u53d8\u91cfc\nss:1FF8 old bp&lt;- bp(4)(6)\nss:1FFA here &lt;- (3)(7)\nss:1FFC 10 &lt;- (2)(8)\nss:1FFE 20 &lt;- (1)\nss:2000    &lt;-(9)\n</code></pre></p>"},{"location":"assembly/%E5%87%BD%E6%95%B0/#cbp-bx-si-di","title":"C\u8bed\u8a00\u51fd\u6570\u4e2d\u9700\u8981\u4fdd\u62a4bp, bx, si, di","text":"<ul> <li>C\u8bed\u8a00\u7684\u51fd\u6570\u91cc\u9762\u9664\u4e86\u4e0d\u80fd\u7834\u574fbp\u5916\uff0c\u8fd8\u8981\u4fdd\u62a4bx,si,di\u7684\u503c: <pre><code>f:\npush bp\nmov bp, sp\nsub sp, n; \u5176\u4e2dn\u4e00\u4e2a\u5e38\u6570,\u7528\u6765\u4e3a\u52a8\u6001\u53d8\u91cf\u5206\u914d\u7a7a\u95f4\n           \u5148\u6316\u5751\u518dpush\npush bx\npush si\npush di\n...\npop di\npop si\npop bx\nmov sp, bp\npop bp\nret\n</code></pre></li> <li>\u5982\u679c\u6ca1\u6709push bp --- \u591a\u5c42\u8c03\u7528\u4f1a\u51fa\u95ee\u9898\uff1amain\u8c03\u7528f f\u8c03\u7528g \u8fd9\u65f6g-&gt;f-&gt;main\u56de\u4e0d\u53bb</li> </ul>"},{"location":"assembly/%E5%87%BD%E6%95%B0/#_6","title":"\u9012\u5f52","text":"<pre><code>int f(int n)\n{\n   if(n==1)\n      return 1;\n   return n+f(n-1);\n}\n</code></pre> <p>\u4e0a\u8ff0C\u8bed\u8a00\u9012\u5f52\u51fd\u6570\u53ef\u7ffb\u8bd1\u6210\u4ee5\u4e0b\u6c47\u7f16\u4ee3\u7801: <pre><code>f:\n    push bp;(3)(6)(9)\n    mov bp, sp\n    mov ax, [bp+4]\n    cmp ax, 1\n    je done\n    dec ax\n    push ax;(4)(7)\n    call f;(5)(8)\nthere:\n    add sp, 2;(12)(15)\n    add ax, [bp+4]\ndone:\n    pop bp;(10)(13)(16)\n    ret;(11)(14)(17)\nmain:\n    mov ax, 3\n    push ax;(1)\n    call f;(2)\n    here:\n    add sp, 2;(18)\n</code></pre> \u6267\u884c\u4e0a\u8ff0\u4ee3\u7801\u65f6\u7684\u5806\u6808\u5e03\u5c40\u5982\u4e0b: <pre><code>ss:1FEE oldbp&lt;-bp(9)\nss:1FF0 there&lt;-(8)(10)\nss:1FF2 1&lt;-(7)(11)\nss:1FF4 oldbp&lt;-bp(6)12\nss:1FF6 there&lt;-(5)(13)\nss:1FF8 2&lt;-(4)(14)\nss:1FFA oldbp&lt;-bp(3)(15)\nss:1FFC here &lt;-(2)(16)\nss:1FFE 3 &lt;-(1)(17)\nss:2000   &lt;-(18)\n</code></pre></p>"},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/","title":"\u57fa\u7840\u6307\u4ee4","text":""},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#_1","title":"\u903b\u8f91\u8fd0\u7b97\u548c\u79fb\u4f4d\u6307\u4ee4","text":""},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#andorxornottest","title":"\u903b\u8f91\u8fd0\u7b97\u6307\u4ee4\uff1aAND\uff0cOR\uff0cXOR\uff0cNOT\uff0cTEST","text":"<ul> <li>not:\u5355\u76ee\u8fd0\u7b97\u7b26 not ax =~ax</li> <li>test:\u00a0\u4e22\u5f03\u8fd0\u7b97\u7ed3\u679c\u00a0\uff0c\u4fdd\u7559\u6807\u5fd7\u4f4d\u72b6\u6001\uff1b\u672c\u8d28\u4e0a\u662fand\u6307\u4ee4 <pre><code>mov ax, 9234h\ntest ax, 8000h; ZF=0, AX=9234h\njnz msb_is_one; most significant bit\u6700\u9ad8\u4f4d\n;test\u548cand\u7684\u5173\u7cfb\u76f8\u5f53\u4e8ecmp\u548csub\u7684\u5173\u7cfb\u3002\n</code></pre></li> <li>\u5224\u65ad\u67d0\u4e2a\u5bc4\u5b58\u5668\u662f\u5426\u4e3a0\u7684\u51e0\u79cd\u65b9\u6cd5: <pre><code>test cl, cl\nor cl, cl\nand cl, cl\nor cl, 0\ncmp cl, 0\n</code></pre></li> </ul>"},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#_2","title":"\u79fb\u4f4d\u6307\u4ee4","text":"<ul> <li>shl shr \u903b\u8f91\u5de6\u79fb\u3001\u903b\u8f91\u53f3\u79fb[\u9488\u5bf9\u975e\u7b26\u53f7\u6570]</li> <li>sal sar \u7b97\u672f\u5de6\u79fb\u3001\u7b97\u672f\u53f3\u79fb[\u9488\u5bf9\u7b26\u53f7\u6570]</li> <li>sal=shl \u5747\u53f3\u8fb9\u8865\u96f6</li> <li>shr\u53f3\u79fb\u65f6\u5de6\u8fb9\u6c38\u8fdc\u8865\u96f6\uff0c\u00a0sar\u53f3\u79fb\u65f6\u5de6\u8fb9\u8865\u4e0a\u5143\u7d20\u7684\u6700\u9ad8\u4f4d\u00a0 <pre><code>mov ah, 1011 0110B\nrol ah, 1;  AH=0110 1101, CF=1\n;sal: shift arithmetic left \u7b97\u672f\u5de6\u79fb\nmov ah,11111100B;AH=-4\nsar ah,2;AH=11111111 AH=-2\n</code></pre></li> <li>sar\u5bf9\u8d1f\u6570\u53f3\u79fb\u65f6\u5de6\u8fb9\u8981\u88651</li> <li>rcl: rotate through carry left \u5e26\u8fdb\u4f4d\u5faa\u73af\u5de6\u79fb</li> <li>rcr: rotate through carry right\u5e26\u8fdb\u4f4d\u5faa\u73af\u53f3\u79fb <pre><code>mov ah,0B6h\nclc       ;CF=0\nrcl ah,1  ;CF=\u539f\u6765\u6700\u9ad8\u4f4d\u7684\u503c ah\u6700\u5730\u4f4d\u4f1a\u53d8\u6210\u539fCF\u7684\u503c\n          ;ah=01101100 CF=1\n\nmov ah, 0B6h\nstc         ; CF=1\nrcl ah, 1   ; CF=1 AH=1011 0110 \u79fb\u4f4d\u524d\n            ; CF=1 AH=0110 1101 \u79fb\u4f4d\u540e\n\nmov ah, 0B6h\nstc         ; CF=1\nrcr ah, 1   ; AH=1011 0110  CF=1\u79fb\u4f4d\u524d\n            ; AH=1101 1011  CF=0\u79fb\u4f4d\u540e\n\nmov ah,0B6h\nstc\nrcl ah, 1;  CF=1 AH=0110 1101\n           ;dx   ax\n</code></pre></li> <li>shl, shr, rol, ror, rcl, rcr\u00a0\u6700\u540e\u79fb\u51fa\u53bb\u7684\u90a3\u4e00\u4f4d\u4e00\u5b9a\u5728CF\u4e2d\u3002\u00a0</li> </ul> <p>\u5047\u5b9a\u8981\u628aAX\u4e2d\u768416\u4f4d\u503c\u8f6c\u5316\u6210\u4e8c\u8fdb\u5236\u8f93\u51fa: * \u89e3\u6cd51: <pre><code>mov cx, 16\nnext:\n    shl ax, 1\n    jc is_1\n\nis_0:\n    mov dl, '0'\n    jmp output\n\nis_1:\n    mov dl, '1'\n\noutput:\npush ax\nmov ah, 2\nint 21h\npop ax\ndec cx\njnz next\n</code></pre> * \u89e3\u6cd52: <pre><code>mov cx, 16\nnext:\nshl ax, 1\nmov dl, '0'\nadc dl, 0\noutput:\npush ax\nmov ah, 2\nint 21h\npop ax\ndec cx\njnz next\n</code></pre></p>"},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#_3","title":"\u5b57\u7b26\u4e32\u64cd\u4f5c\u6307\u4ee4","text":""},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#movsbmovswmovsd","title":"\u5b57\u7b26\u4e32\u4f20\u9001\u6307\u4ee4\uff1aMOVSB\uff0cMOVSW\uff0cMOVSD","text":"<ul> <li> <p>rep movsb : \u5176\u4e2drep\u8868\u793arepeat\uff0cs\u8868\u793astring\uff0cb\u8868\u793abyte</p> </li> <li> <p>\u5728\u6267\u884c\u6b64\u6307\u4ee4\u524d\u8981\u505a\u4ee5\u4e0b\u51c6\u5907\u5de5\u4f5c\uff1a</p> </li> <li>\u2460ds:si-&gt;\u6e90\u5b57\u7b26\u4e32(si\u5c31\u662fsource index)</li> <li>\u2461es:di-&gt;\u76ee\u6807\u5b57\u7b26\u4e32(di\u5c31\u662fdestination index)</li> <li>\u2462cx=\u79fb\u52a8\u6b21\u6570</li> <li>\u2463DF=0\u5373\u65b9\u5411\u6807\u5fd7\u8bbe\u6210\u6b63\u65b9\u5411(\u7528\u6307\u4ee4cld)</li> <li> <p>rep movsb\u6240\u505a\u7684\u64cd\u4f5c\u5982\u4e0b: <pre><code>again:\nif(cx == 0)\n   goto done;\nbyte ptr es:[di] = byte ptr ds:[si]\nif(df==0)\n{si++; di++;}\nelse\n{si--; di--;}\ncx--\ngoto again\ndone:\n</code></pre></p> </li> <li> <p>\u4f8b\u5b50: \u8981\u628a\u4ee5\u4e0b\u5de6\u4fa74\u4e2a\u5b57\u8282\u590d\u5236\u5230\u53f3\u4fa7</p> </li> </ul> <p><pre><code>1000:0000 'A'        2000:0000  'A'\n1000:0001 'B'        2000:0001  'B'\n1000:0002 'C'        2000:0002  'C'\n1000:0003 00         2000:0003  00\n</code></pre> <pre><code>mov ax, 1000h\nmov ds, ax\nmov si, 0      ; mov si, 3\nmov ax, 2000h\nmov es, ax\nmov di, 0      ; mov di, 3\nmov cx, 4\ncld             ; std\nrep movsb\n</code></pre></p> <ul> <li>rep movsw\u7684\u64cd\u4f5c\u8fc7\u7a0b:[word] <pre><code>again:\nif(cx == 0)\n   goto done;\nword ptr es:[di] = word ptr ds:[si]\nif(df==0)\n{si+=2; di+=2;}\nelse\n{si-=2; di-=2;}\ncx--\ngoto again\ndone:\n</code></pre></li> <li> <p>rep movsd\u7684\u64cd\u4f5c\u8fc7\u7a0b:[dword] <pre><code>again:\nif(cx == 0)\n   goto done;\ndword ptr es:[di] = dword ptr ds:[si]\nif(df==0)\n{si+=4; di+=4;}\nelse\n{si-=4; di-=4;}\ncx--\ngoto again\ndone:\n</code></pre></p> </li> <li> <p>\u572832\u4f4d\u7cfb\u7edf\u4e0b, \u5047\u5b9a<code>ds:esi-&gt;\u6e90\u5185\u5b58\u5757</code>, <code>es:edi-&gt;\u76ee\u6807\u5757</code>, <code>DF=0</code>, \u5219\u5f53\u8981\u590d\u5236\u7684\u5b57\u8282\u6570ecx\u4e0d\u662f4\u7684\u500d\u6570\u65f6\uff0c\u53ef\u4ee5\u505a\u5982\u4e0b\u5904\u7406: <pre><code>push ecx\nshr ecx, 2\nrep movsd\npop ecx\nand ecx, 3; \u76f8\u5f53\u4e8eecx = ecx % 4\nrep movsb\n</code></pre></p> </li> </ul>"},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#cmpsbcmpswcmpsd","title":"\u5b57\u7b26\u4e32\u6bd4\u8f83\u6307\u4ee4\uff1aCMPSB\uff0cCMPSW\uff0cCMPSD","text":"<ul> <li> <p>cmpsb [jz je]</p> <ul> <li>\u6bd4\u8f83byte ptr ds:[si]\u4e0ebyte ptr es:[di]</li> <li>\u5f53DF=0\u65f6\uff0csi++\uff0cdi++</li> <li>\u5f53DF=1\u65f6\uff0csi--\uff0cdi--</li> <li>\u81ea\u52a8\u5bf9si di\u66f4\u65b0[\u4e3a\u4e0b\u4e00\u6b21\u79fb\u52a8\u51c6\u5907]</li> </ul> </li> <li> <p>repe cmpsb</p> </li> <li>\u82e5\u672c\u6b21\u6bd4\u8f83\u76f8\u7b49\u5219\u7ee7\u7eed\u6bd4\u8f83\u4e0b\u4e00\u4e2a(repeat if equal)</li> </ul> <p><pre><code>again:\nif(cx == 0) goto done;\ntemp=byte ptr ds:[si]-byte ptr es:[di]\nold_fl=FL\n\u5f53DF=0\u65f6\uff0csi++\uff0cdi++\n\u5f53DF=1\u65f6\uff0csi--\uff0cdi--\ncx--\nFL=old_fl\nif (ZF==1) goto again\ndone:\n</code></pre> * cx!=0 \u4e5f\u53ef\u80fd\u63d0\u524d\u7ed3\u675f\u5faa\u73af * repne cmpsb   * \u82e5\u672c\u6b21\u6bd4\u8f83\u4e0d\u7b49\u5219\u7ee7\u7eed\u6bd4\u8f83\u4e0b\u4e00\u4e2a(repeat if not equal) <pre><code>again:\nif(cx == 0) goto done;\ntemp=byte ptr ds:[si]-byte ptr es:[di]\nold_fl=FL\n\u5f53DF=0\u65f6\uff0csi++\uff0cdi++\n\u5f53DF=1\u65f6\uff0csi--\uff0cdi--\ncx--\nFL=old_fl\nif (ZF==0) goto again\ndone:\n</code></pre></p>"},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#scasbscasw-scasd","title":"\u5b57\u7b26\u4e32\u626b\u63cf\u6307\u4ee4\uff1ascasb\uff0cscasw, scasd","text":"<ul> <li>scasb: <pre><code>cmp al, es:[di]\ndi++; (\u5f53DF=1\u65f6\uff0c\u4e3adi--)\n</code></pre></li> <li> <p>repne scasb: <pre><code>next:\n  if(cx == 0) goto done;\n  cmp al, es:[di]\n      di++; \u5f53DF=1\u65f6\uff0c\u4e3adi--\n      cx--\n  je done\n  goto next\ndone:\n</code></pre></p> </li> <li> <p>\u4f8b\u5b50: \u5047\u5b9a\u4ece\u5730\u57401000:2000\u5f00\u59cb\u5b58\u653e\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u8ba1\u7b97\u8be5\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u5e76\u5b58\u653e\u5230CX\u4e2d\u3002\u5047\u5b9a\u5b57\u7b26\u4e32\u4ee5ASCII\u78010\u7ed3\u675f\uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u5305\u62ec0\u3002 <pre><code>mov ax, 1000h\nmov es, ax\nmov di, 2000h; ES:DI-&gt;\u76ee\u6807\u4e32\nmov cx, 0FFFFh; CX=\u6700\u591a\u627eFFFF\u6b21\nmov al, 0; AL=\u5f85\u627e\u7684\u5b57\u7b26\ncld       ; DF=0\uff0c\u8868\u793a\u6b63\u65b9\u5411\nrepne scasb; again:\nnot cx      ; \u76f8\u5f53\u4e8ecx=FFFF-cx\ndec cx\n;\u4e0a\u8ff0\u4e24\u6761\u6307\u4ee4\u4e5f\u53ef\u4ee5\u66ff\u6362\u6210\u4ee5\u4e0b\u4e24\u6761\u6307\u4ee4:\n;inc cx\n;not cx\n;not cx\u76f8\u5f53\u4e8ecx=FFFF-cx\u00a0\n</code></pre></p> </li> <li>repe scasb<ul> <li>\u5047\u5b9a\u4ece\u5730\u57401000:0000\u8d77\u5b58\u653e\u4ee5\u4e0b\u5b57\u7b26\u4e32\"###ABC\"\uff0c\u73b0\u8981\u6c42\u8df3\u8fc7\u524d\u9762\u7684#\uff0c\u628a\u540e\u9762\u5269\u4f59\u7684\u5168\u90e8\u5b57\u7b26\u590d\u5236\u52302000:0000\u4e2d</li> <li>\u5047\u5b9aes=1000h, di=0, cx=7, \u5219</li> </ul> </li> </ul> <pre><code>mov al, '#'\ncld\nrepe scasb\ndec di; ES:DI-&gt;\"ABC\"\ninc cx; CX=4\npush es\npop ds; DS=ES\npush di\npop si; SI=DI\nmov ax, 2000h\nmov es, ax\nmov di, 0\nrep movsb\n</code></pre>"},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#_4","title":"\u5b57\u7b26\u4e32\u64cd\u4f5c\u6307\u4ee4","text":"<ul> <li>stosb: <pre><code>es:[di] = AL\ndi++; DF=1\u65f6\u4e3adi--\n</code></pre></li> <li>rep stosb: \u5faa\u73afCX\u6b21stosb <pre><code>again:\nif(cx == 0) goto done;\nes:[di] = al\ndi++; \u5f53DF=1\u65f6, \u4e3aDI--\ncx--\ngoto again;\ndone:\n</code></pre></li> </ul> <pre><code>memset(void *t,int value,int n);\ndouble x[100];\nmemset(&amp;x,0,sizeof(x))\n</code></pre> <ul> <li>lodsb <pre><code>al=ds:[si]\nSI++;\u5f53DF=1\u65f6, \u4e3aSI--\n</code></pre></li> <li>Exercise:</li> <li>\u8bbeds:si-&gt; \"##AB#12#XY\"</li> <li>es:di\u6307\u5411\u4e00\u4e2a\u7a7a\u7684\u6570\u7ec4,</li> <li>CX=11</li> <li>\u901a\u8fc7\u7f16\u7a0b\u8fc7\u6ee4#\u6700\u540e\u4f7f\u5f97es:di -&gt;\"AB12XY\"</li> </ul> <pre><code>cld\nagain:\n   lodsb ; AL=DS:[SI], SI++\n         ; mov al, ds:[si]\n         ; inc si\n   cmp al, '#'\n   je   next\n   stosb ; ES:[DI]=AL, DI++\n         ; mov es:[di], al\n         ; inc di\nnext:\n   dec cx\n   jnz again\n</code></pre>"},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#c","title":"C\u8bed\u8a00\u5b57\u7b26\u4e32\u51fd\u6570\u8f6c\u6362","text":"<pre><code>strlen:\n    push bp\n    mov bp,sp\n    push di\n    push ds\n\n\n    mov di,[bp+4]\n    mov ax,data\n    mov ds,ax\n    mov es,ax\n    mov cx,0FFFFh\n    xor al,al\n    cld\n    repne scasb\n    inc cx\n    not cx\n    mov ax,cx\n\n    pop ds\n    pop di\n    mov sp,bp\n    pop bp\n    ret\n_memcpy:\n    push bp\n    mov bp,sp\n    push es\n    push ds\n    push si\n    push di\n    mov ax,data\n    mov es,ax\n    mov ds,ax\n    mov si,word ptr [bp+6]\n    mov di,word ptr [bp+4]\n    mov cx,word ptr [bp+8]\n    cld\n    rep movsb\n    pop di\n    pop si\n    pop ds\n    pop es\n    mov sp,bp\n    pop bp\n    ret\n_strncpy:\n    push bp\n    mov bp,sp\n    push es\n    push ds\n    push si\n    push di\n    mov si, word ptr [bp+6]\n    mov di,word ptr [bp+4]\n    push si\n    call _strlen\n    pop cx\n    cmp ax,[bp+8]\n    jl tricky_form\n    mov cx,word ptr [bp+8]\n    cld\n    rep movsb\n    tricky_form:\n    mov dx,[bp+8]\n    sub dx,ax\n    mov cx,ax\n    cld\n    rep movsb\n    mov cx,dx\n    mov ax,0\n    cld\n    rep stosb\n    pop di\n    pop si\n    pop ds\n    pop es\n    mov sp,bp\n    pop bp\n    ret\n_memset:\n    push bp\n    mov bp,sp\n    push es\n    push di\n    mov ax,data\n    mov es,ax\n    mov di,[bp+4]\n    mov ax,[bp+6]\n    mov cx,[bp+8]\n    cld\n    rep stosb\n    pop di\n    pop es\n    mov sp,bp\n    pop bp\n    ret\n\n_clrscr:\n    push es\n    push di\n    mov ax,0B800h\n    mov es,ax\n    mov di,0\n    mov ax,0000h\n    mov cx,2000\nagain:\n    mov es:[di],ax\n    add di,2\n    sub cx,1\n    jnz again\n    pop di\n    pop es\n    ret\n</code></pre>"},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#_5","title":"\u63a7\u5236\u8f6c\u79fb\u6307\u4ee4","text":"<ul> <li>jmp\u76843\u79cd\u7c7b\u578b \u2460jmp short target           ; \u77ed\u8df3 \u2461jmp near ptr target    ; \u8fd1\u8df3 \u2462jmp far ptr target     ; \u8fdc\u8df3</li> <li>\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5ea6\u91cf\u8df3\u8dc3\u7684\u8ddd\u79bb\uff0c\u56e0\u6b64\u6211\u4eec\u5728 \u5199\u6e90\u7a0b\u5e8f\u7684\u65f6\u5019\u4e0d\u9700\u8981\u52a0\u4e0ashort\u3001near ptr\u3001far ptr\u7b49\u7c7b\u578b\u4fee\u9970\u5373\u4e0a\u8ff0\u4e09\u79cd\u5199\u6cd5\u4e00\u5f8b\u53ef\u4ee5\u7b80\u5316\u4e3ajmp target\u3002</li> <li>\u77ed\u8df3\u6307\u4ee4[only one byte]</li> <li>\u683c\u5f0f jmp + \u504f\u79fb\u5730\u5740\u6216\u6807\u53f7</li> <li>\u4ee5\u4e0b\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\u4e5f\u90fd\u5c5e\u4e8e\u77ed\u8df3: <code>jc jnc jo jno js jns jz jnz ja jb jae jbe jg jge jl jle jp jnp</code> </li> <li>\u77ed\u8df3\u6307\u4ee4\u7684\u673a\u5668\u7801 <pre><code>     \u5730\u5740            \u673a\u5668\u7801   \u6c47\u7f16\u6307\u4ee4  \n    1D3E:0090     ...\n    1D3E:00F0\n    1D3E:0100     EB06     jmp  0108h\n    1D3E:0102     B402     mov  ah\uff0c2\n    1D3E:0104     B241     mov  dl, 41h\n    1D3E:0106     CD21     int  21h\n    1D3E:0108     B44C     mov  ah\uff0c4Ch\n    1D3E:010A     CD21     int  21h\n</code></pre></li> <li>\u77ed\u8df3\u592a\u8fdc\u8df3\u4e0d\u8fc7\u53bb\u7684\u89e3\u51b3\u529e\u6cd5 <pre><code>cmp ax, bx\n\uff08je  equal; jump out of range\uff09\njne not_equal\njmp equal; \u8fd1\u8df3\nnot_equal:\n...; \u5047\u5b9a\u8fd9\u91cc\u7701\u7565\u6307\u4ee4\u7684\u673a\u5668\u7801\u603b\u957f\u5ea6\u8d85\u8fc77Fh\u5b57\u8282\nequal:\n...\n</code></pre></li> <li>\u8fd1\u8df3\u6307\u4ee4[two bytes]</li> <li>\u8fd1\u8df3\u6307\u4ee4\u76843\u79cd\u683c\u5f0f <pre><code>jmp \u504f\u79fb\u5730\u5740\u6216\u6807\u53f7        ; \u5982jmp 1000h\njmp 16\u4f4d\u5bc4\u5b58\u5668      ; \u5982jmp bx\njmp 16\u4f4d\u53d8\u91cf       ; \u5982jmp word ptr [addr]\n</code></pre></li> <li>\u8fdc\u8df3\u6307\u4ee4[\u8de8\u6bb5\u8df3\u8dc3]</li> <li>\u8fdc\u8df3\u6307\u4ee4\u76842\u79cd\u683c\u5f0f<ul> <li>jmp \u6bb5\u5730\u5740:\u504f\u79fb\u5730\u5740</li> <li>jmp dword ptr 32\u4f4d\u53d8\u91cf</li> </ul> </li> <li>\u8fdc\u8df3\u6307\u4ee4\u7684\u673a\u5668\u7801<ul> <li><code>jmp 1234h:5678h</code>; \u673a\u5668\u7801\u4e3a<code>0EAh,78h,56h,34h,12h</code></li> </ul> </li> <li>\u8fdc\u8df3\u6ca1\u6709\u7528\u25b3\uff0c\u800c\u662f\u76f4\u63a5\u5730\u5740.\u8fdc\u8df3\u5230\u67d0\u4e2a\u5e38\u6570\u5730\u5740\u65f6,\u5728\u6e90\u7a0b\u5e8f\u4e2d\u4e0d\u80fd\u76f4\u63a5\u7528jmp\u6307\u4ee4\uff0c\u800c\u5e94\u8be5\u6539\u7528\u673a\u5668\u78010EAh\u5b9a\u4e49\uff0c\u5982: <pre><code>db 0EAh\ndw 5678h\ndw 1234h\ndb 0EAh\ndd 0FFFF0000h\n;\u6216 dw 0000h\n;dw 0FFFFh\n;\u4e0a\u8ff03\u884c\u5b9a\u4e49\u5408\u5728\u4e00\u8d77\u8868\u793ajmp 1234h:5678h\n</code></pre></li> <li>jmp dword ptr 32\u4f4d\u53d8\u91cf\u7684\u7528\u6cd5 <pre><code>mov word ptr ds:[bx],1234h\nmov word ptr ds:[bx+2],5678h\njmp dword ptr ds:[bx] ;jmp 5678h:1234h\n</code></pre> <pre><code>data segment\naddr dw 0000h, 0FFFFh \n;\u6216\u5199\u6210addr dd 0FFFF0000h\ndata ends\ncode segment\nassume cs:code, ds:data\nmain:\nmov ax, data\nmov ds, ax\njmp dword ptr [addr] \n;\u76f8\u5f53\u4e8ejmp FFFF:0000\ncode ends\nend main\n</code></pre></li> </ul>"},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#loop","title":"\u5faa\u73af\u6307\u4ee4\uff1aLOOP","text":"<ul> <li>loop  dest\u7684\u64cd\u4f5c\u8fc7\u7a0b: <pre><code>CX = CX - 1     ; \u5faa\u73af\u6b21\u6570\u51cf1\nif(CX != 0)     ; \u82e5CX\u4e0d\u7b49\u4e8e0\uff0c\u5219\n    goto  dest  ; \u8df3\u8f6c\u81f3dest\n</code></pre></li> <li>\u4f8b: \u6c421+2+3\u7684\u548c <pre><code>mov cx, 3\nnext:\nadd ax, cx; ax +3, +2, +1\nloop next; cx=2, 1, 0\n           ; dec cx\n           ; jnz next  \u5148-1\u518d\u5224\u65ad\n           ;--cx\u521d\u59cb\u503c=0\u65f6\u80fd\u8fbe\u5230\u6700\u5927\u5faa\u73af\u6b21\u6570 10000h\u6b21\n\nmov ax, 0\nmov cx, 0\njcxz done  \u8fd9\u6761\u6307\u4ee4\u53ef\u4ee5\u9632\u6b62cx\u4e3a0\u65f6\u8fdb\u5165\u5faa\u73af\nnext:\nadd ax, cx\nloop next; \u5faa\u73af10000h\u6b21\ndone:\n</code></pre></li> <li>jecxz \u8868\u793ajump if ecx is zero</li> </ul>"},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#call-ret","title":"call, ret\u6307\u4ee4","text":"<pre><code>\u8fd1\u8fd4\u56de\uff1aretn\uff0c\u5728\u591a\u6570\u60c5\u51b5\u4e0b\u53ef\u5199\u6210ret\n\u8fdc\u8c03\u7528\uff1acall far ptr dest\n\u8fdc\u8fd4\u56de\uff1aretf\n</code></pre>"},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#movpushpopxchg","title":"\u901a\u7528\u6570\u636e\u4f20\u9001\u6307\u4ee4\uff1aMOV\uff0cPUSH\uff0cPOP\uff0cXCHG","text":"<ul> <li>mov byte ptr ds:[bx], byte ptr es:[di]</li> <li>\u9519\u8bef\u539f\u56e0:\u4e24\u4e2a\u64cd\u4f5c\u6570\u4e0d\u80fd\u540c\u65f6\u4e3a\u5185\u5b58\u53d8\u91cf\u4ee5\u4e0b\u4e3a\u6b63\u786e\u5199\u6cd5:</li> </ul> <pre><code>mov al, es:[di]\nmov ds:[bx], al\n</code></pre> <pre><code>eax=12345678h\nebx=89ABCDEFh\nss=1000h\nsp=2000h\n\u73b0\u6267\u884c\u4ee5\u4e0b\u6307\u4ee4:\npush eax;(1)\npush ebx;(2)\npop ebx;(3)\npop eax;(4)\n</code></pre> <ul> <li>exchange \u6307\u4ee4 <pre><code>mov ax,1\nmov bx,2\nxchg ax,bx\nxchg ax,ds:[bx] \u53ef\u4ee5\u4ea4\u6362\u5bc4\u5b58\u5668\u548c\u53d8\u91cf \u4e0d\u5141\u8bb8\u5bf9\u4e24\u4e2a\u53d8\u91cf\u8fdb\u884c\u4ea4\u6362\n</code></pre></li> </ul>"},{"location":"assembly/%E5%A0%86%E6%A0%88/","title":"\u5806\u6808","text":""},{"location":"assembly/%E5%A0%86%E6%A0%88/#_1","title":"\u5806\u6808\u6bb5\u7684\u5b9a\u4e49","text":"<p><pre><code>stk segment stack    \u5806\u6808\u53ea\u80fd\u5b9a\u4e49\u4e00\u4e2a\ns db 200h dup ('S');\u4e5f\u53ef\u4ee5\u4e0d\u5b9a\u4e49\u6570\u7ec4\u540d\ndb 200h dup('S')\nstk ends\n</code></pre> * assume cs:code,ds:data,ss:stk * \\(mov\\ ah,s[1]\\) \u7f16\u8bd1\u540e\u53d8\u6210 \\(mov\\ ah,stk:[s+1]\\)\u518d\u8f6c\u5316\u6210$mov ah,ss:[1] $ * \u5982\u679c\u5f15\u7528\u6570\u7ec4s\u5fc5\u987b\u52a0\u4e0aassume ss\uff1astk</p>"},{"location":"assembly/%E5%A0%86%E6%A0%88/#dos","title":"\u7a0b\u5e8f\u8f7d\u5165\u5185\u5b58\u540e\uff0c\u64cd\u4f5c\u7cfb\u7edfdos\u4f1a\u5bf9\u4e00\u4e0b\u5bc4\u5b58\u5668\u4f5c\u521d\u59cb\u5316\u8d4b\u503c\uff1a","text":"<ul> <li>cs=code \u5373\u4e0d\u7528\u624b\u5de5\u7ed9cs\u8d4b\u503c</li> <li>ip=offset main</li> <li>ss=stk</li> <li>sp=200h</li> <li>ds=es=psp\u6bb5\u5740\uff1bpsp\u7a0b\u5e8f\u6bb5\u524d\u7f00\uff08program segment prefix) <p>psp\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a100h\u5b57\u8282\u7684\u5185\u5b58\u5757\uff0c\u4f4d\u4e8e\u5f53\u524d\u7a0b\u5e8f\u9996\u6bb5\u7684\u524d\u9762 psp\u7531\u64cd\u4f5c\u7cfb\u7edf\u5206\u914d\u7ed9\u5f53\u524d\u7a0b\u5e8f\uff0c\u91cc\u9762\u5b58\u653e\u4e86\u4e0e\u8be5exe\u76f8\u5173\u7684\u4e00\u4e9b\u4fe1\u606f\u5982\u547d\u4ee4\u884c\u53c2\u6570\u5373main\uff08\uff09\u7684\u53c2\u6570 <pre><code>int main(int argc,char *argv[]){  }\nmain.exe  123  xyz\nargv[0]   [1]  [2] \n</code></pre></p> </li> </ul>"},{"location":"assembly/%E5%A0%86%E6%A0%88/#sssp","title":"\u5982\u679c\u672a\u5b9a\u4e49\u5806\u6808\uff0c\u90a3\u4e48ss\u548csp\uff1f","text":"<p>\u6e90\u7a0b\u5e8f\u4e2d\u6ca1\u6709\u5b9a\u4e49\u5806\u6808\u6bb5\u65f6 ss=\u9996\u6bb5\u7684\u6bb5\u5730\u5740=1000h sp=0 sp-2=FFFE\uff081000\uff1aFFFE\uff09\u2014\u2014\u8fbe\u5230\u6700\u5927\u5806\u6808  \u5c0f\u7aef \u5373push a[0] (1234h)\u5728\u5806\u6808\u91cc\u4ec0\u4e48\u6837\u5b50  34 12 * 9000\uff1aFFFF\u662f\u7528\u6237\u53ef\u7528\u7684last \u5982\u679cpush\u592a\u591a\u4e86 \u53ef\u80fd\u8fdb\u5165code\u6bb5\u672b\u5c3e\uff0c\u5806\u6808\u6ea2\u51fa</p>"},{"location":"assembly/%E5%AF%84%E5%AD%98%E5%99%A8/","title":"\u5bc4\u5b58\u5668","text":""},{"location":"assembly/%E5%AF%84%E5%AD%98%E5%99%A8/#_1","title":"\u5bc4\u5b58\u5668\u8be6\u89e3","text":"<ul> <li> <p>\u5982\u679c\u672a\u5b9a\u4e49\u5806\u6808\uff0c\u90a3\u4e48ss\u548csp\uff1f</p> <ul> <li>\u6e90\u7a0b\u5e8f\u4e2d\u6ca1\u6709\u5b9a\u4e49\u5806\u6808\u6bb5\u65f6</li> </ul> <pre><code>ss=\u9996\u6bb5\u7684\u6bb5\u5730\u5740=1000h \nsp=0 \nsp-2=FFFE\uff081000\uff1aFFFE\uff09\u2014\u2014\u8fbe\u5230\u6700\u5927\u5806\u6808 \n9000\uff1aFFFF\u662f\u7528\u6237\u53ef\u7528\u7684last \n\u5982\u679cpush\u592a\u591a\u4e86 \u53ef\u80fd\u8fdb\u5165code\u6bb5\u672b\u5c3e\uff0c\u5806\u6808\u6ea2\u51fa\n</code></pre> </li> </ul>"},{"location":"assembly/%E5%AF%84%E5%AD%98%E5%99%A8/#fl16-9963","title":"FL\u517116\u4f4d, \u4f46\u53ea\u7528\u5176\u4e2d9\u4f4d\uff0c\u8fd99\u4f4d\u5305\u62ec6\u4e2a\u72b6\u6001\u6807\u5fd7\u548c3\u4e2a\u63a7\u5236\u6807\u5fd7\uff0c\u5982\u4e0b\u6240\u793a\uff1a","text":"<p>11  10    9    8    7   6    4    2    0</p> <p>O   DF    IF  TF   SF  ZF   AF   PF   CF</p>"},{"location":"assembly/%E5%AF%84%E5%AD%98%E5%99%A8/#cf-zf-sf-of-af-pf","title":"CF ZF SF OF AF PF: \u72b6\u6001\u6807\u5fd7","text":"<ul> <li> <p>CF: \u8fdb\u4f4d\u6807\u5fd7(carry flag)</p> <pre><code>mov ah, 0FFh ;\nadd ah, 1; ah=0, CF=1\u4ea7\u751f\u4e86\u8fdb\u4f4d \nadd ah, 2; ah=2, CF=0 \nsub ah, 3; ah=0FFh, CF=1\u4ea7\u751f\u4e86\u8fdb\u4f4d \n</code></pre> <ul> <li>\u79fb\u4f4d\u6307\u4ee4\u4e5f\u4f1a\u5f71\u54cdcf\u503c\uff0c\u6700\u540e\u4e00\u51fa\u53bb\u7684\u90a3\u4e00\u4f4d\u4f1a\u4fdd\u5b58\u5728cf\u5f53\u4e2d</li> </ul> <pre><code>mov cl,2 shr ah,cl;\u53f3\u79fb\u4e24\u4f4d\uff0ccf=1 \n</code></pre> <ul> <li> <p>\u4e0eCF\u76f8\u5173\u7684\u8df3\u8f6c\u6307\u4ee4:</p> <ul> <li>jc\u2014\u2014\u6709\u8fdb\u4f4d\u5219\u8df3\u8f6c</li> <li>jnc\u2014\u2014\u65e0\u8fdb\u4f4d\u5219\u8df3\u8f6c</li> <li>adc\u2014\u2014\u5e26\u8fdb\u4f4d\u52a0</li> <li>clc : cf=0</li> <li>stc : cf=1</li> <li>adc ax,bx;ax=ax+bx+cf</li> </ul> <pre><code>data segment\nabc dw 32767\ndata ends\ncode segment\nassume cs:code,ds:data\nmain:\n    mov ax,data\n    mov ds,ax\n    mov ax,[abc]\n    mov cx,16\nagain:\n    shl ax,1\n    jc is_one\nis_zero:\n    mov dl,'0'\n    jmp out_put\nis_one:\n    mov dl,'1'\nout_put:\n    push ax\n    mov ah,2\n    int 21h\n    pop ax\n    sub cx,1\n    jnz again\nmov ah,4Ch\nint 21h\ncode ends\nend main\n</code></pre> </li> </ul> </li> <li> <p>ZF: \u96f6\u6807\u5fd7(zero flag)</p> <pre><code>sub ax, ax; AX=0, ZF=1 \nadd ax, 1; AX=1, ZF=0 \nadd ax, 0FFFFh; AX=0, ZF=1, CF=1\n</code></pre> <ul> <li>jz is_zero \u4f1a\u53d1\u751f\u8df3\u8f6c, \u56e0\u4e3a\u5f53\u524dZF==1</li> <li>jnz\u6839\u636eZF==0\u4f5c\u51fa\u8df3\u8f6c</li> <li>jz\u7b49\u4ef7je jnz\u7b49\u4ef7jne</li> <li>cmp ax,ax ;ax-ax \u5dee\u503c\u6ca1\u6709\u4fdd\u7559\uff0c\u800c\u662f\u4fdd\u7559\u4e86zf \u5373\u5224\u65ad\u662f\u5426\u60f3\u7b49\u5c31\u662f\u5224\u65ad\u662f\u5426zf=1</li> </ul> </li> <li> <p>SF: \u7b26\u53f7\u6807\u5fd7(sign flag)\u8fd0\u7b97\u7ed3\u679c\u7684\u6700\u9ad8\u4f4d</p> <pre><code>mov ah, 7Fh add ah, 1; AH=80h=1000 0000B, SF=1\u2014\u2014\u8fd0\u7b97\u7ed3\u679c\u8d1f\u6570 \nsub ah, 1; AH=7Fh=0111 1111B, SF=0\u2014\u2014\u8fd0\u7b97\u7ed3\u679c\u6b63\u6570\n</code></pre> <ul> <li>jns \u2014positive;\u4f1a\u53d1\u751f\u8df3\u8f6c, \u56e0\u4e3aSF==0</li> <li>js\u662f\u6839\u636eSF==1\u4f5c\u51fa\u8df3\u8f6c</li> </ul> </li> <li> <p>OF: \u6ea2\u51fa\u6807\u5fd7(overflow flag)</p> <pre><code>mov ah, 7Fh \nadd ah, 1 ;AH=80h, OF=1, ZF=0, CF=0, SF=1 \nmov ah, 80h add ah, 0FFh; AH=7Fh, OF=1, ZF=0, CF=1, SF=0 \nmov ah, 80h sub ah, 1; AH=7Fh, OF=1, ZF=0, CF=0, SF=0 \n</code></pre> <ul> <li>OF\u4e5f\u6709\u4e24\u6761\u76f8\u5173\u7684\u6307\u4ee4: jo, jno </li> </ul> <pre><code>mov ab,81h ;ah=10000001B \nshl ah,1 ah=00000010B;0F=1,CF=1 \nonly one-bit shift\u4f1a\u5f71\u54cdOF\n</code></pre> </li> <li> <p>PF(Parity Flag)\u5947\u5076\u6807\u5fd7</p> <pre><code>mov ah, 4 add ah, 1; AH=0000 0101B, PF=1\u8868\u793a\u6709\u5076\u6570\u4e2a1 \nmov ax, 0101h add ax, 0004h; AX=0105h=0000 0001 0000 0101B \n; PF=1\u53ea\u7edf\u8ba1\u4f4e8\u4f4d\u4e2d1\u7684\u4e2a\u6570 \u8981\u662f\u4f4e8\u4f4d\u4e2d1\u7684\u4e2a\u6570\u662f\u5947\u6570\u65f6\uff0cPF=0 \n</code></pre> <ul> <li>jp(\u5f53PF==1\u65f6\u5219\u8df3)</li> <li>jnp(\u5f53PF==0\u65f6\u5219\u8df3)</li> <li>jp\u4e5f\u53ef\u4ee5\u5199\u6210jpe(jump if parity even)</li> <li>jnp\u4e5f\u53ef\u4ee5\u5199\u6210jpo(jump if parity odd)</li> </ul> <p>\u5047\u5b9a\u8981\u53d1\u9001\u5b57\u7b26\u2019C\u2019=0100 0011B, \u73b0\u5047\u5b9a\u4f4e7\u4f4d\u4e3a\u6570\u636e\u4f4d \u6700\u9ad8\u4f4d\u4e3a\u6821\u9a8c\u4f4d\u3002\u90a3\u4e48\u6821\u9a8c\u4f4d\u7684\u8ba1\u7b97\u65b9\u6cd5\u67092\u79cd: </p> <p>(1) \u5947\u6821\u9a8c: \u6570\u636e\u4f4d+\u6821\u9a8c\u4f4d\u5408\u8d77\u6765\uff0c1\u7684\u4e2a\u6570\u5fc5\u987b\u662f\u5947\u6570 </p> <p>(2) \u5076\u6821\u9a8c: \u6570\u636e\u4f4d+\u6821\u9a8c\u4f4d\u5408\u8d77\u6765\uff0c1\u7684\u4e2a\u6570\u5fc5\u987b\u662f\u5076\u6570 </p> <p>\u73b0\u5728\u6211\u4eec\u91c7\u7528\u5076\u6821\u9a8c\u6765\u53d1\u9001\u2019C\u2019,\u90a3\u4e48\u6821\u9a8c\u4f4d\u5fc5\u987b\u7b49\u4e8e1,\u5373\u5b9e\u9645\u8981\u53d1\u9001\u76848\u4f4d\u4e8c\u8fdb\u5236\u503c\u4e3a1100 0011B \u5bf9\u65b9\u63a5\u6536\u8fd98\u4f4d\u503c\u5e76\u4fdd\u5b58\u5728\u5bc4\u5b58\u5668AL\u4e2d, \u63a5\u4e0b\u53bb\u53ef\u4ee5\u6267\u884c\u5982\u4e0b\u4ee3\u7801\u6765\u9a8c\u8bc1AL\u4e2d\u7684\u503c\u662f\u5426\u6709\u9519: </p> <pre><code>or al, al\njnp error; if(PF==0) goto error\n good:\n ...\n error:\n ...\n</code></pre> </li> <li> <p>AF(Auxiliary Flag) \u8f85\u52a9\u8fdb\u4f4d\u6807\u5fd7</p> <ul> <li> <p>\u4f4e4\u4f4d\u5411\u9ad84\u4f4d\u4ea7\u751f\u8fdb\u4f4d\u6216\u501f\u4f4d</p> <pre><code>mov ah, 1Fh ; 0001 1111\nadd ah, 1 ; ah=20h, AF=1\n</code></pre> </li> <li> <p>AF\u8ddfBCD(Binary Coded Decimal)\u7801\u6709\u5173</p> </li> </ul> </li> </ul>"},{"location":"assembly/%E5%AF%84%E5%AD%98%E5%99%A8/#df-tf-if","title":"DF TF IF: \u63a7\u5236\u6807\u5fd7","text":"<ul> <li> <p>DF:direction flag</p> </li> <li> <p>TF:trace/trap flag</p> </li> <li> <p>IF:interrupt flag</p> </li> <li> <p>DF(Direction Flag)\u65b9\u5411\u6807\u5fd7: \u63a7\u5236\u5b57\u7b26\u4e32\u7684\u64cd\u4f5c\u65b9\u5411</p> <ul> <li>\u5f53DF=0\u65f6\u4e3a\u6b63\u65b9\u5411(\u4f4e\u5730\u5740\u5230\u9ad8\u5730\u5740)\uff0c\u5f53DF=1\u662f\u53cd\u65b9\u5411\u3002</li> <li>\u82e5\u6e90\u6570\u636e\u9996\u5730\u5740&gt;\u76ee\u6807\u6570\u636e\u9996\u5730\u5740\uff0c\u5219\u590d\u5236\u65f6\u8981\u6309\u6b63\u65b9\u5411(\u4ece\u4f4e\u5730\u5740\u5230\u9ad8\u5730\u5740)\uff1b</li> <li>\u82e5\u6e90\u6570\u636e\u9996\u5730\u5740&lt;\u76ee\u6807\u6570\u636e\u9996\u5730\u5740\uff0c\u5219\u590d\u5236\u65f6\u8981\u6309\u53cd\u65b9\u5411(\u4ece\u9ad8\u5730\u5740\u5230\u4f4e\u5730\u5740)\uff1b</li> <li>strcpy(target, source); \u6c38\u8fdc\u6309\u6b63\u65b9\u5411\u590d\u5236</li> <li>memcpy(target, source, n);\u6c38\u8fdc\u6309\u6b63\u65b9\u5411\u590d\u5236</li> <li>memmove(target, source, n); \u80fd\u6b63\u786e\u5904\u7406\u90e8\u5206\u91cd\u53e0</li> <li>\u67092\u6761\u6307\u4ee4\u53ef\u4ee5\u8bbe\u7f6eDF\u7684\u503c: cld\u4f7fDF=0, \u5b57\u7b26\u4e32\u590d\u5236\u6309\u6b63\u65b9\u5411 std\u4f7fDF=1, \u5b57\u7b26\u4e32\u590d\u5236\u6309\u53cd\u65b9\u5411 <pre><code>data segment:\ns db \"ABC123xyz\",0\nt db 10 dup(0)\ndata ends\ncode segment:\nassume cs:code,ds:data\nmain:\n    mov ax,data\n    mov ds,ax\n    mov es,ax\n    mov si,offset s+9\n    mov di,offset t+9\n    mov cx,10\n    std\n    rep movsb ;memcpy(es:di,ds:si,cx)\ndone:\n    mov ah,4Ch\n    int 21h\ncode ends\nend main\n\n\u6ce8\uff1arep movsb\nagain:\n    cmp cx,0\n    je done\n    mov al,ds[si]\n    mov es:[di],al\n    inc si/dec si\n    inc di/dec di\n    dec cx\n    jmp again\n</code></pre></li> </ul> </li> <li> <p>IF\uff08Interrupt Flag\uff09\u4e2d\u65ad\u6807\u5fd7</p> <ul> <li>\u5f53IF=1\u65f6,\u5141\u8bb8\u4e2d\u65ad;\u5426\u5219\u7981\u6b62\u4e2d\u65ad</li> <li>cli\u6307\u4ee4\u4f7fIF=0\u8868\u793a\u5173/\u7981\u6b62\u786c\u4ef6\u4e2d\u65ad</li> <li>sti\u6307\u4ee4\u4f7fIF=1\u8868\u793a\u5f00/\u5141\u8bb8\u786c\u4ef6\u4e2d\u65ad</li> <li>int nh \u4fdd\u5b58\u57284xn</li> </ul> <pre><code>mov ax, 0 \nmov bx, 1 \nadd ax, bx \n</code></pre> <ul> <li>\u6b64\u65f6\u82e5\u7528\u6237\u6572\u952e,\u5219CPU\u4f1a\u5728\u6b64\u5904\u63d2\u5165\u4e00\u6761int 9h\u6307\u4ee4\u5e76\u6267\u884c\u5b83</li> <li>int 9h\u7684\u529f\u80fd\u662f\u8bfb\u952e\u76d8\u7f16\u7801\u5e76\u4fdd\u5b58\u5230\u952e\u76d8\u7f13\u51b2\u533a\u4e2d(\u9690\u85cf)\u786c\u4ef6\u4e2d\u65ad</li> <li>\u53d1\u8d77\u8005\u662f\u4e8b\u4ef6\uff0c\u533a\u522b\u4e8e\u7a0b\u5e8f\u5458\u4e3b\u52a8\u7684\u8f6f\u4ef6\u4e2d\u65ad</li> </ul> <p>\u65f6\u949f\u6bcf\u96941/18\u5999\u4f1a\u4ea7\u751f\u4e00\u4e2a\u4e2d\u65ad\u8bf7\u6c42 \u82e5\u7a0b\u5e8f\u5df2\u8fd0\u884c\u4e861/18\u79d2,\u5219cpu\u4f1a\u5728\u6b64\u5904\u63d2\u5165\u4e00\u6761int 8h\u6307\u4ee4\u5e76\u6267\u884c\uff08count++\uff09</p> <ul> <li>\u7528cli\u548csti\u628a\u4e00\u6bb5\u4ee3\u7801\u5305\u56f4\u8d77\u6765\u53ef\u4ee5\u8fbe\u5230\u8be5\u6bb5\u4ee3\u7801\u5728 \u6267\u884c\u8fc7\u7a0b\u4e2d\u4e0d\u4f1a\u88ab\u6253\u65ad\u7684\u6548\u679c:<ul> <li>cli clear interrupt\u7981\u6b62\u786c\u4ef6\u4e2d\u65ad</li> <li>\u91cd\u8981\u4ee3\u7801</li> <li>sti set interrupt\u5141\u8bb8\u786c\u4ef6\u4e2d\u65ad</li> </ul> </li> </ul> </li> <li> <p>TF\uff08Trace/Trap Flag\uff09\u8ddf\u8e2a/\u9677\u9631\u6807\u5fd7</p> <ul> <li>\u5f53TF=1\u65f6,CPU\u4f1a\u8fdb\u5165\u5355\u6b65\u6a21\u5f0f(single-step mode)\u3002</li> <li>\u5f53TF=1\u65f6,CPU\u5728\u6bcf\u6267\u884c\u5b8c\u4e00\u6761\u6307\u4ee4\u540e,\u4f1a\u81ea\u52a8\u5728\u8be5\u6761\u6307\u4ee4\u4e0e\u4e0b\u6761\u6307\u4ee4\u4e4b\u95f4\u63d2\u5165\u4e00\u6761int 1h\u6307\u4ee4\u5e76\u6267\u884c\u5b83\u3002</li> <li> <p>\u5229\u7528\u5355\u6b65\u6a21\u5f0f\u53ef\u4ee5\u5b9e\u73b0\u53cd\u8c03\u8bd5,\u6f14\u793a\u4ee3\u7801\u89c1\u4ee5\u4e0b\u94fe\u63a5: http://cc.zju.edu.cn/bhh/antidbg.zip</p> </li> <li> <p>bp\u7684\u9690\u542b\u6bb5\u5730\u5740\u662fss\u300c\u7528\u4ee5\u4ee3\u66ffsp\uff0c\u53ef\u83b7\u5f97\u5806\u6808\u4e2d\u7684\u5185\u5bb9\u300f</p> </li> <li>anti-debug \u4f8b\u5b50\uff1a</li> </ul> </li> </ul> <pre><code>code segment\nassume cs:code,ds:data\nmain:\n    jmp begin\nold1h dw 0,0\nprev_addr dw offset first,code  \n[\u6bb5\u5730\u5740+\u504f\u79fb\u5730\u5740\uff1a2x16\u4f4d]\n[\u5982\uff1aA0 00:00 01 \u662f\u4e00\u4e2a\u5730\u5740]\nbegin:\n    push cs\n    pop ds\n    xor ax,ax\n    mov es,ax  ;es=0\n    mov bx,4   ;bx=4 es:[bx]-&gt;int1h \u7684\u4e2d\u65ad\u5411\u91cf(\u8be5\u51fd\u6570\u7684\u9996\u5730\u5740) \u5176\u4e2d\u524d16\u4f4d\u5b58\u653e\u504f\u79fb\u5730\u57400:[4]\uff0c\u540e16\u4f4d\u5b58\u653e\u6bb5\u5730\u57400:[6]\n    push es:[bx]\n    pop old1h[0]\n    push es:[bx+2]\n    pop old1h[2]\n    mov word ptr es:[bx],offset int1h\n    mov word ptr es:[bx+2],cs\n    pushf   [save old FL \u628aflag\u538b\u5165\u5806\u6808]\n    pushf   [\u4e3a\u4e86\u4e4b\u540e\u518d\u628aTF\u6539\u62100][and ax,0FEFFh]\n    pop ax  [\u4e0d\u53ef\u7528mov ax,fl \u5373fl\u548cip\u552f\u4e8c\u4e0d\u80fd\u88ab\u5f15\u7528\u7684\u5bc4\u5b58\u5668]\n    or ax,100h [\u5c06TF\u6539\u62101]\uff01TF=1\n    push ax\n    popf    [FL=AX]\nfirst:\n    nop  \n    \u5f53\u67d0\u6307\u4ee4\u6267\u884c\u524dTF=1 \u5219\u8be5\u6307\u4ee4\u6267\u884c\u4e4b\u540e\u624d\u4f1a\u81ea\u52a8\u6267\u884cint01h\u5355\u6b65\u4e2d\u65ad\nsingle\u2014\u2014step_begin:\n\n[first int 1h] \nint1h\u53d1\u751f\u7684\u65f6\u5019 cpu\u4f1a\u505a\u4ee5\u4e0b\u7684\u52a8\u4f5c\uff1a\npushf      \u5c06flag\u538b\u5165\u5806\u6808\npush cs    \u5c06\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u6bb5\u5730\u5740\u538b\u5165\u5806\u6808\npush offset back \u5c06\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u504f\u79fb\u5730\u5740\u538b\u5165\u5806\u6808 &lt;- ss:sp\njmp dword ptr 0:[4]\u8fdb\u5165\u51fd\u6570int1h\n\nback:\n    xor ax,ax\n    mov cx,3\nnext\uff1a\n    add ax,cx  ;\u5df2\u89e3\u5bc6\n    nop\n    loop next\n    popf\n    nop\nsingle_step_end:\n    push old1h[0]\n    pop es:[bx]\n    push old1h[2]\n    pop es:[bx+2]\n    mov ah,4Ch\n    int 21h\nint1h:\n    push bp\n    mov bp,sp\n    push bx\n    push es\n    mov bx,cs:prev_addr[0]\n    mov es,cs:prev_addr[2]\n    inc byte ptr es:[bx]\n    mov bx,[bp+2]\n    mov es,[bp+4]\n    dec byte ptr es:[bx]\n    mov cs:prev_addr[0],bx\n    mov cs:prev_addr[2],es \n    pop es\n    pop bx\n    pop bp\n    iret[\u4e2d\u65ad\u8fd4\u56de cpu\u4f1a\u6267\u884cpop ip \uff0cpop cs\uff0cpopf]\ncode ends\nend main\n</code></pre>"},{"location":"assembly/%E6%98%BE%E5%8D%A1%E8%BE%93%E5%87%BA/","title":"\u663e\u5361\u8f93\u51fa","text":""},{"location":"assembly/%E6%98%BE%E5%8D%A1%E8%BE%93%E5%87%BA/#_1","title":"\u663e\u5361\u8f93\u51fa","text":"<ul> <li>7\u2014white 4-red</li> </ul> <pre><code>0000\u2014\u2014black\n0001-blue\n0010-green\n0100-red\n0011(BLue and green)\n</code></pre> <ul> <li>\u6700\u53f3\u8fb9\u4e00\u4f4d\u8868\u793a\u52a0\u5f3a\u8272</li> <li>(x,y)\u5750\u6807\u5bf9\u5e94\u7684\u663e\u5361\u504f\u79fb\u5730\u5740=\uff08y*80+x\uff09\u00d72 \uff0880\u00d725\u7684\u5c4f\u5e55\u5c3a\u5bf8\uff09</li> <li>\u6ce8\u660e\uff1a\u4e5f\u5c31\u662f\u8bf4\u663e\u5361\uff0c\u4e00\u884c160\u4e2a\u5b57\u8282\uff1a</li> <li>\u4e00\u822c\u4e00\u4e2a\u663e\u793a\u4f7f\u7528\u4e24\u4e2a\u5b57\u8282</li> <li>\u7b2c\u4e00\u4e2a\u50a8\u5b58\u8f93\u51fa\uff0c\u7b2c\u4e8c\u4e2a\u50a8\u5b58\u989c\u8272</li> </ul> <pre><code>code segment\nassume cs:code\nmain:\n  mov ax,0B800h\n  mov ds,ax\n  mov di,0\n  mov al,'A'\n  mov ah,17h\n  mov cx,2000\nagain:\n  mov ds:[di],ax\n  mov bx,800h\n\nwait_wait:\n  mov dx,0\nwait_a_while:\n  sub dx,1\n  jnz wait_a_while\n  sub bx,1\n  jnz wait_a_while;1000h\u4e58\u4ee5800h\n\n  mov word ptr ds:[di],0020h ;00\u9ed1\u8272\n  add di,2\n  sub cx,1\n  jnz again\n\n  mov ah,1\n  int 21h   (\u7528\u6237\u6572\u952e\u76d8\u518d\u7ed3\u675f)\n  mov ah ,4Ch\n  int 21h\n\ncode ends\nend main\n</code></pre>"},{"location":"assembly/%E6%98%BE%E5%8D%A1%E8%BE%93%E5%87%BA/#_2","title":"\u5185\u5b58\u6620\u5c04","text":"<ul> <li>B800:0000</li> <li>\u6587\u672c\u6a21\u5f0f\u4e0b\u7684\u663e\u5361\u5730\u5740 A000:0000\u662f\u56fe\u5f62\u6a21\u5f0f\u4e0b\u7684\u663e\u5361\u5730\u5740</li> <li> <p>dos\u53ca\u7528\u6237\u7a0b\u5e8f\u5360\u7528\u8fd9\u5757\u5185\u5b58\uff0c\u603b\u957f\u4e3a640KB <pre><code>1000:0000~1000:FFFF\n\u2026\u2026\n9000:0000~9000:FFFF\n</code></pre></p> </li> <li> <p>A000:0000~A000:FFFF</p> </li> <li>(x,y)\u5750\u6807\u5bf9\u5e94\u7684\u663e\u5361\u504f\u79fb\u5730\u5740=y*320+x</li> <li>B000:0000~B000:7FFF   <pre><code>mov ah,0  set video mode\nmov al,13h  13\u53f7 320*200\nint 10h\n</code></pre></li> <li>int10h \u5207\u6362\u5230320 * 200 * 256\u8272\u56fe\u5f62\u6a21\u5f0f\uff08\u4e5f\u53ef\u4ee5\u8f93\u51fa\u6587\u672c 40x25 \uff09\uff080\u884c0\u5217\uff09</li> <li> <p>al=12h \u5207\u6362\u5230640 * 480 16 \u8272\u56fe\u5f62\u6a21\u5f0f &gt; 640 480 \u8de8\u6bb5\uff0c\u8fd9\u4e2a\u65f6\u5019\u4e0d\u662f\u7528\u4e00\u4e2a\u5b57\u8282\u63a7\u5236\u4e00\u4e2a\u70b9\uff0c\u800c\u662f\u4e00\u4e2abit\u63a7\u5236\u4e00\u4e2a\u70b9 \uff0c\u7528\u56db\u4e2a\u5e73\u9762\u53e0\u8d77\u6765\uff0c\u63a7\u523616\u79cd\u989c\u8272</p> <pre><code>code segment\nassume cs:code\nmain:\n  jmp begin\ni dw 0\nbegin:\n  mov ah,00h\n  mov al,13h\n  int 10h\n  mov ax,0A000h\n  mov es,ax\n  mov di,(100-20)*320+(160-20)\n  mov [i],41  \u4e00\u517141\u884c\nnext_row:\n  ;push cx\n  push di\n  mov al,4 ;color=red\n  mov cx,41\nnext_dot:\n  mov es:[di],al\n  add di,1\n  sub cx,1\n  jnz next_dot\n  pop di\n  add di,320\n  sub [i],1\n  jnz next_row\n  mov ah,1\n  int 21h\n\n  mov ah,00h\n  mov al,03h;80*25\u7684\u6587\u672c\u6a21\u5f0f\n  int 10h\n  mov ah ,4Ch\n  int 21h\ncode ends\nend main\n</code></pre> </li> <li> <p>Applications   <pre><code>\u7a0b\u5e8f \u753b\u6c49\u5b57\n\ndata segment:\nhz db 04h,08h,0Eh,0A0h,78h,80h,08h,90h,\u2026\u202610h,0Ch\ndata ends\ncode segment:\nassume cs:code,ds:data\nmain:\n    mov ax,data\n    mov ds,ax\n    mov ax,0A000h\n    mov es,ax\n    mov di,0\n    mov ax,0013h\n    int 10h\n    mov dx,16\n    mov si,0\nnext_row:\n    mov ah,hz[si]\n    mov al,hz[si+1]\n    add si,2\n    mov cx,16\ncheck_next_dot:\n    shl ax,1\n    jnc no_dot\nis_dot:\n    mov byte ptr es:[di],0Ch\nno_dot:\n    add di,1\n    sub cx,1\n    jnz check_next_dot\n    sub di,16\n    add di,320\n    sub dx,1\n    jnz next_row\n    mov ah,1\n    int 21h\n    mov ax,0003h\n    int 10h;\u56de\u523080*25\u6587\u672c\u6a21\u5f0f\n    mov ah,4Ch\n    int 21h\ncode ends\nend main\n</code></pre></p> </li> </ul> <ul> <li>\u5185\u5b58\u6620\u5c04</li> <li>A000:0000-A000\uff1aFFFF B000:0000-B700:FFFF B800:0000~B800:7FFF \u6620\u5c04\u5230\u663e\u5361\u5185\u5b58</li> <li>C000:0000C000:FFFF \u2026\u2026 F000:0000F000:FFFF \u6620\u5c04\u5230ROM</li> <li>\u6620\u5c04\u65f6\u5728\u7535\u8111\u6267\u884cROM\u4e2dPOST\u4ee3\u7801\u8fc7\u7a0b\u4e2d\u5b8c\u6210\u7684;ROM\u4e2d\u8fd8\u5305\u62ecBIOS\u4ee3\u7801</li> <li>\u5982int10h\u4ee5\u53caint16h\u51fd\u6570\u96c6\u5c31\u5b9a\u4e49\u5728BIOS\u4e2d</li> </ul>"},{"location":"assembly/%E7%AB%AF%E5%8F%A3/","title":"\u7aef\u53e3","text":""},{"location":"assembly/%E7%AB%AF%E5%8F%A3/#_1","title":"\u7aef\u53e3","text":"<ul> <li> <p>CPU &lt;\u2014&gt; \u7aef\u53e3(port)  &lt;\u2014&gt; I/O\u8bbe\u5907</p> </li> <li> <p>\u7aef\u53e3\u7f16\u53f7\u5c31\u662f\u7aef\u53e3\u5730\u5740\u3002\u7aef\u53e3\u5730\u5740\u7684\u8303\u56f4\u662f\uff1a[0000h, 0FFFFh]\uff0c\u517165536\u4e2a\u7aef\u53e3</p> </li> <li> <p>\u5bf9\u7aef\u53e3\u64cd\u4f5c\u4f7f\u7528\u6307\u4ee4in\u4e0eout\u5b9e\u73b0\u3002</p> </li> </ul>"},{"location":"assembly/%E7%AB%AF%E5%8F%A3/#_2","title":"\u952e\u76d8\u901a\u4fe1","text":"<ul> <li>\u901a\u8fc760h\u53f7\u7aef\u53e3\uff0cCPU\u4e0e\u952e\u76d8\u4e4b\u95f4\u53ef\u4ee5\u5efa\u7acb\u901a\u8baf\u3002</li> <li><code>in al, 60h</code>\u4ece\u7aef\u53e360h\u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282\u5e76\u5b58\u653e\u5230AL\u4e2d</li> </ul>"},{"location":"assembly/%E7%AB%AF%E5%8F%A3/#_3","title":"\u65f6\u949f","text":"<ul> <li>70h\u53ca71h\u7aef\u53e3\u4e0ecmos\u5185\u90e8\u7684\u65f6\u949f\u6709\u5173\u3002</li> <li>70h\u00a0\u5730\u5740\u7aef\u53e3\u00a0 71h\u00a0\u6570\u636e\u7aef\u53e3</li> <li>\u5176\u4e2dcmos\u4e2d\u7684\u5730\u57404\u30012\u30010\u4e2d\u5206\u522b\u4fdd\u5b58\u4e86\u5f53\u524d\u7684\u65f6\u3001\u5206\u3001\u79d2\uff0c\u5e76\u4e14\u683c\u5f0f\u5747\u4e3aBCD\u7801\u3002</li> </ul> <pre><code>mov al,2\nout 70h,al \u544a\u8bc9cmos\u63a5\u4e0b\u6765\u8981\u53bb\u8bbf\u95ee\u5b83\u76842\u53f7\u5185\u5b58\u5355\u5143\nin al,71h  \u8bfb\u53d6cmos\u4e2d2\u53f7\u5355\u5143\u7684\u503c\uff08\u5206\u949f\uff09\nmov al, 4\nout 70h, al\nmov al, 23h\nout 71h, al; \u628acmos4\u53f7\u5355\u5143\u5373\u5c0f\u65f6\u7684\u503c\u6539\u621023\u70b9\n</code></pre>"},{"location":"note/basicII/","title":"Basic data Structures II","text":"<p>"},{"location":"note/basicII/#graphs","title":"Graphs","text":""},{"location":"note/basicII/#some-defs","title":"Some defs","text":"<ul> <li>Complete graphs</li> </ul> <p>\\(Undirected \\ V=n \\ \\ \\ \\  E=C_n^2=\\frac{n(n-1)}{2}\\)</p> <p>\\(Directed \\ V=n \\ \\ \\ \\  E=2*C_n^2=n(n-1)\\)</p> <ul> <li>Adjacent</li> </ul> <p>\\(Undirected \\ : (v_i,v_j)\\ is \\ incident \\ on\\ v_i\\ and\\ v_j\\)</p> <p>\\(Directed \\ : v_i \\ is\\ adjacent\\ to \\ v_j \\ \\ \\ \\  \\ v_j \\ is\\ adjacent\\ from \\ v_i\\)</p> <ul> <li> <p>Subgraph</p> </li> <li> <p>Simple Path</p> </li> <li> <p>Connected</p> </li> </ul> <p>\\(Undirected:\\)  An undirected graph G is connected if every pair of distinct \\(v_i\\) and \\(v_j\\) are connected</p> <ul> <li>A tree = a graph that is connected and acyclic.</li> </ul> <p>\\(Directed:\\) </p> <p>Strongly connected directed graph G = for every pair of \\(v_i\\) and \\(v_j\\) in V( G ), there exist directed paths from \\(v_i\\) to \\(v_j\\) and from \\(v_j\\) to \\(v_i\\). </p> <p>If the graph is connected without direction to the edges, then it is said to be weakly connected</p> <p>Strongly connected component :  the maximal subgraph that is strongly connected</p> <ul> <li>A DAG = a directed acyclic graph.</li> </ul> <ul> <li>Degree: Number of edges incident to v.</li> <li> <p>For a directed G, we have in-degree and out-degree. </p> </li> <li> <p>\\(r=v-e+2\\)</p> </li> </ul>"},{"location":"note/basicII/#representation-of-graphs","title":"Representation of Graphs","text":""},{"location":"note/basicII/#adjacency-matrix","title":"Adjacency Matrix","text":"<p>\\(adj_- mat[i][j]=\\left\\{\\begin{array}{l} 1 \\ if (v_i,v_j) \\ or &lt;v_i,v_j&gt; \\in E(G)\\\\0\\ \\ otherwise \\end{array}\\right.\\)</p> <p>If G is undirected the matrix is symmetric,thus sorting only half of the matrix</p> <p>The trick is to store the matrix as a 1-D array: adj_mat [ $n(n+1)/2 $] = \\({ a_{11}, a_{21}, a_{22}, ..., a_{n1}, ..., a_{nn} }\\)</p> <p>The index for \\(a_{ij}\\)  is  \\(i( i - 1 )/2+j\\).</p> <p>\\(\\begin{align*}degree(i) &amp;= \\sum_{j=0}^{n-1}adj_-mat[i][j] \\ (If\\ G\\ is\\ undirected)\\\\ &amp; \\ \\ +\\sum_{j=0}^{n-1}adj_-mat[j][i]\\ (If\\ G\\ is\\ directed)\\end{align*}\\)</p>"},{"location":"note/basicII/#adjacency-lists","title":"Adjacency Lists","text":"<ul> <li>Undirected</li> </ul> <p>Degree( \\(i\\) ) = number of nodes in graph[ \\(i\\) ] (if \\(G\\) is undirected).</p> <p>T of examine (whether complete)  E(G) = O( n + e ) </p> <ul> <li>Directed</li> </ul> <p>A. Add inverse adjacency lists</p> <p>B.Multilists</p>"},{"location":"note/basicII/#adjacency-multilist","title":"Adjacency Multilist","text":"<ul> <li>The space taken :\\((n+2e)\\) ptrs + \\(2e\\) ints  and \u201cmark\u201d is not counted.</li> <li>Sometimes we need to mark the edge after examine it,and then find the next edge.This representation makesit easy to do so.</li> </ul>"},{"location":"note/basicII/#topological-sort","title":"Topological Sort","text":""},{"location":"note/basicII/#aov-network","title":"AOV Network","text":"<p>Digraph G in which V( G ) represents activities ( e.g.  the courses ) and E( G ) represents precedence relations</p> <ul> <li>i  is a predecessor of j \\(:\\) there is a path from i  to j.</li> <li>i  is an immediate predecessor of  j \\(:\\) \\(&lt; i,  j &gt;\\in E( G )\\)  then \\(j\\) is called a successor ( immediate successor ) of i.</li> <li>Partial order \\(:\\) a precedence relation which is both transitive and irreflexive.</li> </ul> <p>If the precedence relation is reflexive, then there must be an i such that i is a predecessor of i.  </p> <p>That is, i must be done before i is started.   Therefore if a project is feasible, it must be irreflexive.</p> <ul> <li>Feasible AOV network must be a dag (directed acyclic graph).</li> </ul>"},{"location":"note/basicII/#topological-order","title":"topological order","text":"<p>A topological order is a linear ordering of the vertices of a graph such that, for any two vertices, i, j, if i is a predecessor of j in the network then i precedes j in the linear ordering.</p> <ul> <li> <p>Test an AOV for feasibility, and generate a topological order if possible.</p> </li> <li> <p>Method One \\(T=O(|V|^2)\\)</p> </li> </ul> <pre><code>void Topsort( Graph G )\n{   int  Counter;\n    Vertex  V, W;\n    for ( Counter = 0; Counter &lt; NumVertex; Counter ++ ) {\n        V = FindNewVertexOfDegreeZero( );\n        if ( V == NotAVertex ) {\n        Error ( \u201cGraph has a cycle\u201d );   break;  }\n        TopNum[ V ] = Counter; /* or output V */\n        for ( each W adjacent to V )\n            Indegree[ W ] \u2013 \u2013 ;\n    }\n}\n</code></pre> <ul> <li>Method Two. \\(T = O( |V| + |E| )\\)</li> </ul> <pre><code>void Topsort( Graph G )\n{   Queue  Q;\n    int  Counter = 0;\n    Vertex  V, W;\n    Q = CreateQueue( NumVertex );  MakeEmpty( Q );\n    for ( each vertex V )\n    if ( Indegree[ V ] == 0 )   Enqueue( V, Q );\n    while ( !IsEmpty( Q ) ) {\n    V = Dequeue( Q );\n    TopNum[ V ] = ++ Counter; /* assign next */\n    for ( each W adjacent to V )\n        if ( \u2013 \u2013 Indegree[ W ] == 0 )  Enqueue( W, Q );\n    }  /* end-while */\n    if ( Counter != NumVertex )\n    Error( \u201cGraph has a cycle\u201d );\n    DisposeQueue( Q ); /* free memory */\n}\n</code></pre>"},{"location":"note/basicII/#midterm-review","title":"Midterm Review","text":"<p>Which of the following statements is TRUE about topological sorting? (5\u5206)</p> <ul> <li>If a graph has a topological sequence, then its adjacency matrix must be triangular.</li> <li>If the adjacency matrix is triangular, then the corresponding directed graph must have a unique topological sequence.</li> <li>In a DAG, if for any pair of distinct vertices Vi and Vj, there is a path either from Vi to Vj or from Vj to Vi, then the DAG must have a unique topological sequence.</li> <li>If Vi precedes Vj in a topological sequence, then there must be a path from Vi to Vj.</li> </ul> <p>3 is true</p>"},{"location":"note/basicII/#shortest-path-problem","title":"Shortest Path Problem","text":""},{"location":"note/basicII/#1single-source-shortest-path-problem","title":"1.Single-Source Shortest Path Problem","text":"<ul> <li>Unweighted Shortest Path</li> </ul> <pre><code>void unweighted(Table T){\n    int CurrDist;\n    Vertex V,W;\n     for(CurrDist=0;CurrDist&lt;NumVertex;CurrDist++){\n      for(each vertex V){      \n        if(!T[V].Known&amp;&amp;T[V].Dust==CurrDist){\n          R[V].Known=true;\n          for(each W adjacent to V){\n            if(T[W].Dist==infinity){\n              T[W].Dist=CurrDist+1;\n                T[E].Path=V;\n            }\n          }\n        }\n      }\n    }\n}\n</code></pre> <p>But the time complexity is \\(O(|V|^2)\\)</p> <ul> <li>Note: If V is unknown yet has \\(Dist &lt; Infinity\\),then Dist is either \\(CurrDist\\) or \\(CurrDist +1\\)(Remember Tree?)</li> </ul> <p>Improvement</p> <pre><code>void unweighted (Table T){\n  Queue Q;\n  Vertex V,W;\n  Q=CreateQueue(NumVertex);MakeEmpty(Q);\n  Enqueue(S,Q);\n  while(!isEmpty(Q)){\n    V=Dequeue(Q);\n    T[V].known=true;//not really necessary\n    for(each W adjacent to V){\n      if(T[W].Dist==Infinity){\n        T[W].Dist=T[V].Dist+1;\n        T[W].Path=V;\n        ENqueue(W,Q)\n      }\n    }\n  }\n  DisposeQueue(Q);\n}\n</code></pre> <ul> <li>\\(T=O(|V|+|E|)\\)</li> </ul>"},{"location":"note/basicII/#dijkstras-algorithmfor-weighted-shortest-paths","title":"Dijkstra's Algorithm(for weighted shortest paths)","text":"<pre><code>void Dijkstra(Table T){\n  //T is initialized by Figure 9.30 on p 303\n  Vertex V,W;\n  for(;;){\n    V=smallest unknown distance vertex;\n    if(V==NotAVertex){break;}\n    T[V].known=true;\n    for(each W adjacent to V){\n      if(!T[W].Known){\n        if(T[V].Dist+Cvw&lt;T[W].Dist){\n          Decrease(T[W].Dist to T[V].Dist+Cvw);\n          T[W].Path=V\n        }\n      }\n    }\n  }\n}\n</code></pre> <ul> <li>Implementation 1</li> </ul> <p>\\(T = O( |V|^2 + |E| )\\)</p> <ul> <li> <p>Initialization: The initialization phase involves traversing all vertices, setting their distances to infinity, and setting the initial vertex's distance to 0. The time complexity of this step is O(V), where V is the number of vertices.</p> </li> <li> <p>Main Loop: The number of iterations in the main loop depends on the number of vertices. In each iteration, the algorithm selects the smallest unknown distance vertex V and then traverses all vertices W adjacent to V. For each W, it checks if there is a shorter path through V to W, and if so, it updates the distance of W. </p> <p>The time complexity of this step is \\(O(V^2)\\), as, for each vertex V, all vertices adjacent to V are considered.</p> </li> <li> <p>Finding the Minimum Distance Vertex: In the main loop, the algorithm needs to find the smallest unknown distance vertex V. The time complexity of this step is O(V^2), as it needs to check the distance of each vertex.</p> </li> </ul> <p>In summary, the time complexity of the Dijkstra algorithm is \\(O(V^2)\\).</p> <ul> <li> <p>Implementation 2</p> </li> <li> <p>V = smallest unknown distance vertex:  Keep distances in a priority queue and call DeleteMin \u2013 \\(O(log|V|)\\)</p> </li> <li> <p>Decrease( T[ W ].Dist  to  T[ V ].Dist + Cvw )</p> <ul> <li>Method 1: DecreaseKey \u2013 \\(O(log|V|)\\)</li> </ul> <p>\\(T = O( |V|log|V|+|E|log|V|)=O(|E|log|V|)\\)  ----Good if the graph is sparse</p> <ul> <li>Method 2: insert \\(W\\) with updated Dist into the priority queue. </li> </ul> <p>Must keep doing DeleteMin until an unknown vertex emerges</p> <p>\\(T = O(|E| log|V| )\\) but requires \\(|E|\\) DeleteMin with \\(|E|\\) space</p> </li> </ul>"},{"location":"note/basicII/#graphs-with-negative-edge-costs","title":"Graphs with Negative Edge Costs","text":"<ul> <li>Why don\u2019t we simply add a constant to each edge and thus remove negative edges? --Path with different count of PATHS!</li> </ul> <pre><code>void  WeightedNegative( Table T )\n{   Queue  Q;\n    Vertex  V, W;\n    Q = CreateQueue (NumVertex );  MakeEmpty( Q );\n    Enqueue( S, Q ); /* Enqueue the source vertex */\n    while (!IsEmpty(Q)){\n      V=Dequeue(Q);/* each vertex can dequeue at most |V| times */\n      for(each W adjacent to V){\n        if ( T[ V ].Dist + Cvw &lt; T[ W ].Dist ){/* no longer once per edge */\n            T[ W ].Dist = T[ V ].Dist + Cvw;\n            T[ W ].Path = V;\n            if(W is not already in Q){Enqueue(W,Q)}\n        }/* end-if update */                                              \n      }\n    }/* end-while */\n    DisposeQueue( Q ); /* free memory */\n}\n</code></pre>"},{"location":"note/basicII/#acyclic-graphs","title":"Acyclic Graphs","text":"<p>If the graph is acyclic, vertices may be selected in topological order since when a vertex is selected, its distance can no longer be lowered without any incoming edges from unknown nodes.</p> <p>\\(T=O(|E| + |V|)\\) and no priority queue is needed.</p> <p>Application: AOE ( Activity On Edge ) Networks           \u2014\u2014 scheduling a project</p> <p></p>"},{"location":"note/basicII/#all-pairs-shortest-path-problem","title":"All-pairs Shortest path problem","text":""},{"location":"note/basicII/#network-flow-problem","title":"Network Flow Problem","text":""},{"location":"note/basicII/#ford-fulkerson-algorithm","title":"Ford-Fulkerson Algorithm","text":"<ul> <li> <p>If the edge capabilities are rational numbers, this algorithm always terminate with a maximum flow.</p> </li> <li> <p>The algorithm works for G with cycles as well.</p> </li> </ul> <p>Analysis</p>"},{"location":"note/basicII/#1an-augmenting-path-can-be-found-by-an-unweighted-shortest-path-algorithm","title":"1.An augmenting path can be found by an unweighted shortest path algorithm.","text":"<p>\\(T = O( f\\cdot|E| )\\)  where  f  is the maximum flow.</p> <p></p>"},{"location":"note/basicII/#2always-choose-the-augmenting-path-that-allows-the-largest-increase-in-flow","title":"2.always choose the augmenting path that allows the largest increase in flow.","text":"<p>\\(\u300cmodify\\ Dijkstra\u2019s\\ algorithm\\ \u300d\\)</p> <p>\\(\\begin{align*}T&amp;=T_{argmentation}*T_{find\\ a\\ path}\\\\ &amp;=O(E)log(cap_{max})*O(|E|log|V|)\\\\ &amp;= O( |E|^2log|V|).\\end{align*}\\) if capmax is a small integer</p>"},{"location":"note/basicII/#3always-choose-the-augmenting-path-that-has-the-least-number-of-edges","title":"3.Always choose the augmenting path that has the least number of edges.","text":"<p>Simple \\(BSF\\) Unweighted shortest path algorithm</p> <p>\\(\\begin{align*}T&amp;=T_{argmentation}*T_{find\\ a\\ path}\\\\ &amp;=O(E)*O(|E||V|)\\\\ &amp;= O( |E|^2|V|).\\end{align*}\\)</p> <ul> <li>If every v \\(\\notin\\) { s, t } has either a single incoming edge of capacity 1 or a single outgoing edge of capacity 1, then time bound is reduced to \\(O( |E| |V|^{1/2} )\\).</li> <li>The min-cost flow problem is to find, among all maximum flows, the one flow of minimum cost provided that each edge has a cost per unit of flow.</li> </ul>"},{"location":"note/basicII/#minimum-spanning-tree","title":"Minimum Spanning Tree","text":"<ul> <li>A spanning tree of a graph G is a tree which consists of \\(V( G )\\) and a subset of \\(E( G )\\)</li> <li>The minimum spanning tree is a tree since it is acyclic -- the number of edges is |V| \u2013 1.</li> <li>It is minimum for the total cost of edges is minimized.</li> <li>It is spanning because it covers every vertex.</li> <li>A minimum spanning tree exists iff G is connected.</li> <li>Adding a non-tree edge to a spanning tree, we obtain a cycle.</li> </ul>"},{"location":"note/basicII/#algorithm","title":"Algorithm","text":"<p>(1)  we must use only edges within the graph</p> <p>(2)  we must use exactly |V| -1 edges</p> <p>(3)  we may not use edges that would produce a cycle.</p>"},{"location":"note/basicII/#1prims-algorithm-grow-a-tree","title":"1.Prim\u2019s Algorithm \u2013 grow a tree","text":""},{"location":"note/basicII/#2krukals-algorithm-grow-a-tree","title":"2.Krukal\u2019s Algorithm \u2013 grow a tree","text":"<pre><code>void Kruskal ( Graph G )\n{   T = { } ;\n    while  ( T contains less than |V| - 1 edges \n                   &amp;&amp; E is not empty ) {\n        choose a least cost edge (v, w) from E ; /* Delete Min */\n        delete (v, w) from E ;\n        if  ( (v, w) does not create a cycle in T )     /Union Find/\n    add (v, w) to T ;*\n        else     \n    discard (v, w) ;\n    }\n    if  ( T contains fewer than |V| - 1 edges )\n        Error ( \u201cNo spanning tree\u201d ) ;\n}\n</code></pre>"},{"location":"note/basicII/#applications-of-depth-first-search","title":"Applications of Depth-First Search","text":"<pre><code>void DFS ( Vertex V )  /* this is only a template */\n{   visited[ V ] = true;  /* mark this vertex to avoid cycles */\n    for ( each W adjacent to V )\n        if ( !visited[ W ] )\n    DFS( W );\n} \n/* T = O( |E| + |V| ) as long as adjacency lists are used */\n</code></pre>"},{"location":"note/basicII/#biconnectivity","title":"Biconnectivity","text":"<ul> <li>v is an articulation point if G\u2019 = DeleteVertex( G, v ) has at least 2 connected components.</li> <li>G is a biconnected graph if G is connected and has no articulation points.</li> <li>A biconnected component is a maximal biconnected subgraph.</li> </ul>"},{"location":"note/basicII/#find-the-biconected-components-of-a-connected-undirected-graph-g","title":"find  the biconected components of a connected undirected graph G","text":""},{"location":"note/basicII/#directed-case","title":"Directed case","text":"<p>Refert to https://www.baeldung.com/cs/scc-tarjans-algorithm</p> <p>A directed graph is strongly connected if there is a path between all pairs of vertices. A strongly connected component (SCC) of a directed graph is a maximal strongly connected subgraph. </p> <ul> <li>DFS search produces a DFS tree/forest </li> <li>Strongly Connected Components form subtrees of the DFS tree. </li> <li>If we can find the head of such subtrees, we can print/store all the nodes in that subtree (including the head) and that will be one SCC. </li> <li> <p>There is no back edge from one SCC to another (There can be cross edges, but cross edges will not be used while processing the graph).</p> </li> <li> <p>Case1 (Tree Edge): If node v is not visited already, then after the DFS of v is complete, a minimum of low[u] and low[v] will be updated to low[u].    low[u] = min(low[u], low[v])</p> </li> <li>Case 2 (Back Edge): When child v is already visited, then a minimum of low[u] and Disc[v] will be updated to low[u].    low[u] = min(low[u], disc[v]); </li> </ul>"},{"location":"note/basicII/#euler-circuit","title":"Euler Circuit","text":"<ul> <li>\u6b27\u62c9\u56de\u8def\uff08Euler circuit\uff09\u4e3a\u5305\u542b\u6240\u6709\u8fb9\u7684\u7b80\u5355\u73af\uff0c\u6b27\u62c9\u8def\u5f84\uff08Euler path\uff09\u4e3a\u5305\u542b\u6240\u6709\u8fb9\u7684\u7b80\u5355\u8def\u5f84</li> <li>\u65e0\u5411\u56fe</li> <li>\u65e0\u5411\u56fe G \u6709\u6b27\u62c9\u56de\u8def\u5f53\u4e14\u4ec5\u5f53 G \u662f\u8fde\u901a\u7684\u4e14\u6bcf\u4e2a\u9876\u70b9\u7684\u5ea6\u6570\u90fd\u662f\u5076\u6570</li> <li>\u65e0\u5411\u56fe G \u6709\u6b27\u62c9\u8def\u5f84\u5f53\u4e14\u4ec5\u5f53 G \u662f\u8fde\u901a\u7684\u4e14\u6709\u4e14\u4ec5\u6709\u4e24\u4e2a\u9876\u70b9\u7684\u5ea6\u6570\u662f\u5947\u6570</li> <li>\u6709\u5411\u56fe</li> <li>\u6709\u5411\u56fe G \u6709\u6b27\u62c9\u56de\u8def\u5f53\u4e14\u4ec5\u5f53 G \u662f\u5f31\u8fde\u901a\u7684\u4e14\u6bcf\u4e2a\u9876\u70b9\u7684\u51fa\u5ea6\u7b49\u4e8e\u5165\u5ea6</li> <li>\u6709\u5411\u56fe G \u6709\u6b27\u62c9\u8def\u5f84\u5f53\u4e14\u4ec5\u5f53 G \u662f\u5f31\u8fde\u901a\u7684\u4e14\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u9876\u70b9\u7684\u51fa\u5ea6\u6bd4\u5165\u5ea6\u5927 1\uff0c\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u9876\u70b9\u7684\u5165\u5ea6\u6bd4\u51fa\u5ea6\u5927 1\uff0c\u5176\u4f59\u9876\u70b9\u7684\u51fa\u5ea6\u7b49\u4e8e\u5165\u5ea6</li> </ul>"},{"location":"note/basicII/#dfs","title":"DFS","text":"<ul> <li>The path should be maintained as a linked list.</li> <li>For each adjacency list, maintain a pointer to the last edge scanned.</li> <li>T = \\(O( |E| + |V| )\\)</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\nusing namespace std;\nconst int maxn = 1005;  // \u5047\u8bbe\u6700\u5927\u8282\u70b9\u6570\u4e3a1005\nint G[maxn][maxn];      // \u90bb\u63a5\u77e9\u9635\u8868\u793a\u56fe\nint deg[maxn];          // \u8282\u70b9\u7684\u5ea6\nint ans[maxn];          // \u5b58\u50a8\u7ed3\u679c\u7684\u6570\u7ec4\nint ansi = 0;           // \u7ed3\u679c\u6570\u7ec4\u7684\u7d22\u5f15\nbool visited[maxn];     // \u6807\u8bb0\u8282\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\nvoid dfs(int x) {\n    for (int y = 1; y &lt;= maxn; ++y) {\n        if (G[x][y]) {\n            G[x][y] = G[y][x] = 0;\n            dfs(y);\n        }\n    }\n    ans[++ansi] = x;\n}\nint main() {\n    // ... \u8bfb\u53d6\u8f93\u5165\uff0c\u521d\u59cb\u5316 G \u548c deg\n    int cnt = 0, root = 0;\n    for (int i = 1; i &lt;= maxn; ++i) {\n        if (deg[i] % 2) {\n            cnt++;\n            if (!root) root = i;\n        }\n    }\n    if (!root) {\n        for (int i = 1; i &lt;= maxn; ++i) {\n            if (deg[i]) {\n                root = i; break;\n            }\n        }\n    }\n    if (cnt &amp;&amp; cnt != 2) {\n        cout &lt;&lt; \"No Solution\\n\";\n        return 0;\n    }\n    dfs(root);\n    // \u8f93\u51fa\u7ed3\u679c\n    for (int i = ansi; i &gt; 0; --i) {\n        cout &lt;&lt; ans[i] &lt;&lt; ' ';}\n    cout &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>"},{"location":"note/basicII/#hamilton-cycle","title":"Hamilton cycle","text":""},{"location":"note/hash/","title":"HASH","text":"<p>"},{"location":"note/hash/#hashing","title":"HASHING","text":""},{"location":"note/hash/#interpolation-search","title":"Interpolation Search","text":"<p>Interpolation Search is a searching algorithm used to find a specific element in a sorted array. Similar to binary search, it employs a divide-and-conquer strategy, but it differs by estimating the probable position of the target value based on the distribution of the search key and array elements at each step.</p> <p>The algorithm proceeds as follows:</p> <ol> <li> <p>Assume the array is sorted.</p> </li> <li> <p>Calculate the interpolation position using the formula:</p> </li> </ol> <p>\\(position=low+\u230a\\frac{(high\u2212low)\u00d7(key\u2212arr[low])}{arr[high]\u2212arr[low]\u230b}\\)</p> <p>Here, \\(arr\\) is the array, and \\(low\\) and \\(high\\) are the array indices, while \\(key\\) is the element to be searched.</p> <ol> <li> <p>If \\(arr[position]=key\\), the target element is found, and the position positionposition is returned.</p> </li> <li> <p>If \\(arr[position]&lt;key\\), continue the search in the right half by updating \\(low=position+1\\)</p> </li> <li> <p>If \\(arr[position]&gt;key\\), continue the search in the left half by updating \\(high=position\u22121\\)</p> </li> <li> <p>Repeat steps 2 to 5 until the target element is found or \\(low&gt;high\\).</p> </li> </ol> <p>Interpolation Search excels when dealing with uniformly distributed sorted arrays, as it efficiently estimates the target element's position, reducing the number of search iterations. However, its effectiveness relies on the assumption of a roughly uniform distribution of array elements. In cases of uneven data distribution, other search algorithms may outperform Interpolation Search. Binary search, for instance, could be more stable as it is less sensitive to the distribution of array elements.</p>"},{"location":"note/hash/#hash-tables","title":"Hash Tables","text":"<p>https://www.geeksforgeeks.org/hashing-data-structure/#introduction</p> <p></p> <ul> <li>Without overflow,\\(T_{search} = T_{insert} = T_{delete} = O( 1 )\\)</li> </ul>"},{"location":"note/hash/#hash-functions","title":"Hash Functions","text":"<p>For numbers\uff1a</p> <p>\uff081\uff09\u6c42\u4f59\u6cd5</p> <p>\uff082\uff09\u5e73\u65b9\u53d6\u4e2d</p> <p>\uff083\uff09\u6298\u53e0\u6cd5</p> <p>\uff084\uff09\u6570\u5b57\u5206\u6790\u6cd5</p> <ul> <li>Eg. To Hash \"Strings\"</li> </ul> <p>\\(f(x)=(\\sum x[N-i-1]*32^i)\\%TableSize\\)</p> <pre><code>Index Hash3( const char *x, int TableSize ) {\n    unsigned  int  HashVal = 0; \n/* 1*/  while( *x != '\\0' ) \n/* 2*/       HashVal = ( HashVal &lt;&lt; 5 ) + *x++; \n/* 3*/  return HashVal % TableSize; \n} \n</code></pre> <ul> <li>If x is too long (e.g. street address), the early characters will be left-shifted out of place.</li> </ul>"},{"location":"note/hash/#separate-chaining","title":"Separate Chaining","text":"<pre><code>struct  ListNode; \ntypedef  struct  ListNode  *Position; \nstruct  HashTbl; \ntypedef  struct  HashTbl  *HashTable; \nstruct  ListNode { \n    ElementType  Element; \n    Position  Next; \n}; \ntypedef  Position  List; \n/* List *TheList will be an array of lists, allocated later */ \n/* The lists use headers (for simplicity), */ \n/* though this wastes space */ \nstruct  HashTbl { \n    int  TableSize; \n    List  *TheLists; \n};\n</code></pre>"},{"location":"note/hash/#create-an-empty-table","title":"Create an empty table","text":"<pre><code>HashTable  InitializeTable( int TableSize ) \n{   HashTable  H; \n    int  i; \n    if ( TableSize &lt; MinTableSize ) { \n        Error( \"Table size too small\" );  return NULL;  \n    } \n    H = malloc( sizeof( struct HashTbl ) );  /* Allocate table */\n    if ( H == NULL )    FatalError( \"Out of space!!!\" ); \n    H-&gt;TableSize = NextPrime( TableSize );  /* Better be prime */\n    H-&gt;TheLists = malloc( sizeof( List ) * H-&gt;TableSize );  /*Array of lists*/\n    if ( H-&gt;TheLists == NULL )   FatalError( \"Out of space!!!\" ); \n    for( i = 0; i &lt; H-&gt;TableSize; i++ ) {   /* Allocate list headers */\n                H-&gt;TheLists[ i ] = malloc( sizeof( struct ListNode ) ); /* Slow! */\n                if ( H-&gt;TheLists[ i ] == NULL )  FatalError( \"Out of space!!!\" ); \n                else    H-&gt;TheLists[ i ]-&gt;Next = NULL;\n    } \n    return  H; \n} \n</code></pre>"},{"location":"note/hash/#find-a-key-from-a-hash-table","title":"Find a key from a hash table","text":"<pre><code>Position  Find ( ElementType Key, HashTable H ) \n{ \n    Position P; \n    List L; \n    L = H-&gt;TheLists[ Hash( Key, H-&gt;TableSize ) ]; \n\n    P = L-&gt;Next; \n    while( P != NULL &amp;&amp; P-&gt;Element != Key )  /* Probably need strcmp */ \n    P = P-&gt;Next; \n    return P; \n} \n</code></pre>"},{"location":"note/hash/#insert-a-key-into-a-hash-table","title":"Insert a key into a hash table","text":"<pre><code>void  Insert ( ElementType Key, HashTable H ) \n{ \n    Position  Pos, NewCell; \n    List  L; \n    Pos = Find( Key, H ); \n    if ( Pos == NULL ) {   /* Key is not found, then insert */\n            NewCell = malloc( sizeof( struct ListNode ) ); \n            if ( NewCell == NULL )     FatalError( \"Out of space!!!\" ); \n            else { \n                L = H-&gt;TheLists[ Hash( Key, H-&gt;TableSize ) ]; \n                NewCell-&gt;Next = L-&gt;Next; \n                NewCell-&gt;Element = Key; /* Probably need strcpy! */ \n              L-&gt;Next = NewCell; \n                        } \n        } \n} \n</code></pre>"},{"location":"note/hash/#open-addressing","title":"Open Addressing","text":"<p>Solve Collision</p> <pre><code>Algorithm: insert key into an array of hash table\n{\n    index = hash(key);\n    initialize i = 0 ------ the counter of probing;\n    while ( collision at index ) {\n            index = ( hash(key) + f(i) ) % TableSize;\n            if ( table is full )    break;\n            else    i ++;\n    }\n    if ( table is full )  ERROR (\u201cNo space left\u201d);\n    else  insert key at index;\n}\n</code></pre>"},{"location":"note/hash/#linear-probing","title":"Linear Probing","text":"<p>\\(f(i)=i\\)</p> <p></p> <ul> <li>Although p is small,the worst case can beLARGE.</li> <li>Cause primary clustering: any key that hashes into the cluster will add to the cluster after several attempts to resolve the collision.</li> </ul>"},{"location":"note/hash/#quadratic-probing","title":"Quadratic Probing","text":"<p>\\(f(i)=i^2\\)</p> <p></p> <ul> <li>If the table size is a prime of the form 4k + 3, then the quadratic probing  \\(f(i)=i^2\\) can probe the entire table.</li> <li>Read Figures \\(7.15 - 7.16\\) for detailed representations and implementations of initialization.</li> </ul> <pre><code>Position  Find ( ElementType Key, HashTable H ) \n{   Position  CurrentPos; \n    int  CollisionNum; \n    CollisionNum = 0; \n    CurrentPos = Hash( Key, H-&gt;TableSize ); \n    while( H-&gt;TheCells[ CurrentPos ].Info != Empty &amp;&amp; H-&gt;TheCells[ CurrentPos ].Element != Key) { \n    CurrentPos += 2 * (++CollisionNum)-1; \n    if ( CurrentPos &gt;= H-&gt;TableSize )  CurrentPos \uf02d = H-&gt;TableSize; \n    } \n    return CurrentPos; \n} \n</code></pre> <ul> <li>Insert</li> </ul> <pre><code>void  Insert ( ElementType Key, HashTable H ){ \n    Position  Pos; \n    Pos = Find( Key, H ); \n   if ( H-&gt;TheCells[ Pos ].Info != Legitimate ) { /* OK to insert here */ \n    H-&gt;TheCells[ Pos ].Info = Legitimate; \n    H-&gt;TheCells[ Pos ].Element = Key; /* Probably need strcpy */ \n    } \n} \n</code></pre> <ul> <li>Delete</li> </ul> <p>Insertion will be seriously slowed down if there are too many deletions intermixed with insertions.     </p> <p>Although primary clustering is solved, secondary clustering occurs \u2013 that is, keys that hash to the same position will probe the same alternative cells.</p>"},{"location":"note/hash/#double-hashing","title":"Double Hashing","text":"<p>\\(f ( i ) = i * hash_2( x )\\) </p> <ul> <li>hash2( x ) is the 2<sup>nd</sup> hash function  -- usually \\(hash_2( x ) = R-(x\\% R)\\)  with R a prime smaller than TableSize, will work well.</li> </ul>"},{"location":"note/hash/#rehashing","title":"Rehashing","text":""},{"location":"note/list/","title":"List","text":""},{"location":"note/list/#linked-list","title":"linked list","text":"<p><pre><code>// Reverse a linked list\nq=h;\np=NUll;\nwhile(q){\n    t = q-&gt;next;\n    q-&gt;next = p;\n    p=q;\n    q=t;\n}\nh = p;\n\nLNode *reverse( LNode *head ){\n    LNode *p0,*head1;\n    head1=NULL;\n    for(p0=head-&gt;next;p0;){\n       LNode *temp=p0-&gt;next;//important!!!\n       p0-&gt;next =head1;\n       head1=p0;\n       p0=temp;\n    }\n    return head1;\n}\n</code></pre> * multilist * sparse matrix representation</p>"},{"location":"note/sort/","title":"Sort","text":"<p>"},{"location":"note/sort/#simple-sort","title":"Simple Sort","text":""},{"location":"note/sort/#algorithm","title":"Algorithm","text":""},{"location":"note/sort/#bubble-sort","title":"Bubble sort","text":"<p>Basic</p> <pre><code>void bubbleSort(int arr[], int n) {\n    for (int i = 0; i &lt; n - 1; i++) {\n        for (int j = 0; j &lt; n - i - 1; j++) {\n            if (arr[j] &gt; arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}\n</code></pre> <p>Improvement</p> <pre><code>void bubbleSort_recursive(int a[],int begin,int end,int n){\n    if(end&gt;begin){\n        int lastswap=-1;\n        for(int i=begin;i&lt;end;i++){\n        if(a[i]&gt;a[i+1]){\n          int m=a[i];\n          a[i]=a[i+1];\n          a[i+1]=m; \n          lastswap=i;\n        }\n    }\n    end=lastswap;\n    sort(a,begin,end,n);\n}\n\nvoid bubbleSort_iter (int a[], int n){\n    int lastswap, end;\n    for (int i=0;i&lt;n-1;i++) {\n        lastswap = -1;\n        for (int j=0;j&lt;end;j++) {\n            if (a[j] &gt; a[j + 1]) {\n                exchange(&amp;a[j], &amp;a[j + 1]);\n                lastswap = j;\n            }\n        }\n        end = lastswap;\n    }\n}\n</code></pre>"},{"location":"note/sort/#selection-sort","title":"Selection sort","text":"<pre><code>void selectionSort(int arr[], int n) {\n    int i, j, min_idx;\n    // \u5916\u5c42\u5faa\u73af\u904d\u5386\u672a\u6392\u5e8f\u90e8\u5206\n    for (i = 0; i &lt;n-1;i++) {\n        // \u5047\u8bbe\u5f53\u524d\u672a\u6392\u5e8f\u90e8\u5206\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e3a\u6700\u5c0f\n        min_idx = i;\n        // \u5185\u5c42\u5faa\u73af\u5728\u672a\u6392\u5e8f\u90e8\u5206\u4e2d\u627e\u5230\u6700\u5c0f\u5143\u7d20\u7684\u7d22\u5f15\n        for (j=i+1;j&lt;n;j++) {\n            if (arr[j] &lt; arr[min_idx]) {\n                min_idx = j;\n            }\n        }\n        // \u5c06\u627e\u5230\u7684\u6700\u5c0f\u5143\u7d20\u4e0e\u672a\u6392\u5e8f\u90e8\u5206\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\u4f4d\u7f6e\n        swap(&amp;arr[min_idx], &amp;arr[i]);\n    }\n}\n</code></pre>"},{"location":"note/sort/#insertion-sort","title":"Insertion Sort","text":"<pre><code>void InsertionSort ( ElementType A[ ], int N ){\n  int j,P;\n  ElementType Tmp;\n  for(P=1;P&lt;N;P++){\n    Tmp=A[p];\n    for(j=P;j&gt;0&amp;&amp;A[j-1]&gt;Tmp;j--){\n      A[j]=A[j-1];\n    }\n    A[j]=Tmp;\n  }\n}\n</code></pre> <p>The worst case:Input \\(A[ \\ \\ ]\\) is in reverse order.   \\(T( N ) = O( N^2 )\\)</p>"},{"location":"note/sort/#analysis","title":"Analysis","text":"<ul> <li>A Lower Bound for Simple Sorting Algorithms</li> <li>An inversion in an array of numbers is any ordered pair \\(( i, j )\\) having the property that \\(i &lt; j\\) but \\(A[i] &gt; A[j]\\).</li> <li>Swapping two adjacent elements that are out of place removes exactly one inversion.</li> <li> <p>\\(T ( N, I )\\) = \\(O( I+N  )\\) where \\(I\\) is the number of inversions in the original array.</p> </li> <li> <p>The average number of inversions in an array of N distinct numbers is  \\(N ( N +1 ) / 4\\).</p> </li> <li>Any algorithm that sorts by exchanging adjacent elements requires \\(\\Omega( N^2 )\\) time on average.</li> </ul>"},{"location":"note/sort/#shell-sort","title":"Shell sort","text":"<p>Original Shell Sequence: The original sequence suggested by Donald Shell was to use gaps of <code>n/2</code>, <code>n/4</code>, <code>n/8</code>, ..., <code>1</code>. This is a simple and effective sequence, often called the \"original Shell sequence.\" It is easy to implement and works well in practice.</p> <pre><code>for (int gap = n/2; gap &gt; 0; gap /= 2) {\n    // Shell sort logic\n}\n</code></pre> <p>Knuth's Sequence: Donald Knuth suggested a formula for computing gaps, which is <code>3^k - 1</code> for <code>k = 0, 1, 2, ...</code>. This sequence often performs well in practice.</p> <pre><code>for (int gap = 1; gap &lt; n/3; gap = 3 * gap + 1) {\n    // Shell sort logic\n}\n</code></pre> <p>Sedgewick's Sequence: Robert Sedgewick proposed a sequence that interleaves powers of 2 and 3: <code>1, 5, 19, 41, 109, 209, 505, ...</code>. It combines the simplicity of the original Shell sequence with the effectiveness of the Knuth sequence.</p> <p><pre><code>int sedgewick[] = {1, 5, 19, 41, 109, 209, 505, ...};  // Extend as needed\nint sedgewickIndex = 0;\nfor (int gap = sedgewick[sedgewickIndex]; gap &gt; 0; gap = sedgewick[++sedgewickIndex]) {\n    // Shell sort logic\n}\n</code></pre> the terms are either of the form \\(9\\times 4^i -9\\times 2^i + 1\\) or  \\(4^i -3\\times 2^i + 1\\).  \\(T_{avg} ( N ) = O ( N^{7/6} )\\) and \\(T_{worst} ( N ) = O ( N^{4/3} )\\).</p> <pre><code>void shellSort(int arr[], int n) {\n    // ps:we can choose any ideal sequence suitable for given cases\n    for (int gap = n/2; gap &gt; 0; gap /= 2) {\n        for (int i = gap; i &lt; n; i++) {\n            int temp = arr[i];\n            int j;\n            for (j = i; j &gt;= gap &amp;&amp; arr[j - gap] &gt; temp; j -= gap) {\n                arr[j] = arr[j - gap];\n            }\n            arr[j] = temp;\n        }\n    }\n}\n</code></pre>"},{"location":"note/sort/#worst-case-analysis","title":"Worst-Case Analysis:","text":"<p>The worst-case running time of Shellsort, using Shell's increments, is \\(O(N^2)\\). * example : <code>1 9 2 10 3 11 4 12 5 13 6 14</code></p>"},{"location":"note/sort/#hibbards-increment-sequence","title":"Hibbard's Increment Sequence:","text":"<p>\\(h_k = 2^k -1\\)  ---- consecutive increments have no common factors. The worst-case running time of Shellsort, using Hibbard's increments, is \\(O( N^{3/2})\\).</p>"},{"location":"note/sort/#heap-sort","title":"Heap Sort","text":""},{"location":"note/sort/#algorithm-1","title":"Algorithm 1:","text":"<p><pre><code>Algorithm 1:\n{\n  BuildHeap( H ); //O(N)\n  for (int i=0; i&lt;N; i++ ){\n        TmpH[ i ] = DeleteMin( H );O(logN)\n  }\n  for ( i=0; i&lt;N; i++ ){\n        H[ i ] = TmpH[ i ];\n  }\n}\n</code></pre> \\(T ( N ) = O ( N  log N  )\\) but space needed is doubled.</p>"},{"location":"note/sort/#algorithm-2","title":"Algorithm 2:","text":"<p>Review <pre><code>void PercolateDown( int p, PriorityQueue H ){   \n    int temp=H-&gt;Elements[p];\n    int parent,son;\n    for(parent=p;parent*2&lt;=H-&gt;Size;parent=son){\n        son=parent*2;\n        if(son&lt;H-&gt;Size&amp;&amp;H-&gt;Elements[son]&lt;H-&gt;Elements[son+1]){\n            son++;      \n        }\n        if(temp&gt;=H-&gt;Elements[son]){break;}      \n        else{H-&gt;Elements[parent]=H-&gt;Elements[son];}\n    }\n    H-&gt;Elements[parent]=temp;\n}\n</code></pre></p> <p><pre><code>void Heapsort( ElementType A[ ], int N ) \n{   int i; \n    for ( i = N / 2; i &gt;= 0; i - - ) /* BuildHeap */ {PercDown( A, i, N ); }\n    for ( i = N - 1; i &gt; 0; i - - ) { \n        Swap( &amp;A[ 0 ], &amp;A[ i ] ); /* DeleteMax */ \n        PercDown( A, 0, i ); \n    } \n}\n</code></pre> The average number of comparisons used to heapsort a random permutation of N distinct items is \\(2N log N - O( N log log N )\\).</p> <p>Although Heapsort gives the best average time, in practice it is slower than a version of Shellsort that uses Sedgewick's increment sequence.</p>"},{"location":"note/sort/#mergesort","title":"Mergesort","text":"<pre><code>void Mergesort( ElementType A[ ], int N );\nvoid MSort( ElementType A[ ], ElementType TmpArray[ ],int Left,int Right);\nvoid Merge( ElementType A[ ], ElementType TmpArray[ ],int Lpos,int Rpos, int RightEnd);\n\nvoid Mergesort( ElementType A[ ], int N ) {\n    ElementType  *TmpArray;  /* need O(N) extra space */\n    TmpArray = malloc( N * sizeof( ElementType ) ); \n    if ( TmpArray != NULL ) { \n            MSort( A, TmpArray, 0, N - 1 ); \n            free( TmpArray ); \n    } \n    else  FatalError( \"No space for tmp array!!!\" ); \n}\n\nvoid MSort( ElementType A[ ], ElementType TmpArray[ ],int Left, int Right){\n    int  Center; \n    if ( Left &lt; Right ) {  /* if there are elements to be sorted */\n        Center = ( Left + Right ) / 2; \n        MSort( A, TmpArray, Left, Center );     /* T( N / 2 ) */\n        MSort( A, TmpArray, Center + 1, Right );    /* T( N / 2 ) */\n        Merge( A, TmpArray, Left, Center + 1, Right );  /* O( N ) */\n    } \n} \n\n/* Lpos = start of left half, Rpos = start of right half */ \nvoid Merge( ElementType A[ ], ElementType TmpArray[ ], int Lpos, int Rpos, int RightEnd ) {\n    int  i, LeftEnd, NumElements, TmpPos; \n    LeftEnd = Rpos - 1; \n    TmpPos = Lpos; \n    NumElements = RightEnd - Lpos + 1; \n    while(Lpos&lt;=LeftEnd &amp;&amp; Rpos&lt;=RightEnd){\n        if(A[Lpos]&lt;=A[Rpos]){TmpArray[TmpPos++]=A[Lpos++];}\n        else{TmpArray[TmpPos++]=A[Rpos++];}\n    }\n    while(Lpos&lt;=LeftEnd){TmpArray[ TmpPos++ ] = A[ Lpos++ ];}\n    while(Rpos&lt;=RightEnd){TmpArray[ TmpPos++ ] = A[ Rpos++ ];}\n    for( i = 0; i &lt; NumElements; i++, RightEnd - - ) \n         /* Copy TmpArray back */ \n        A[ RightEnd ] = TmpArray[ RightEnd ]; \n}\n/** version2 **/\nvoid Merge2( ElementType A[ ], ElementType TmpArray[ ], int Lpos, int Rpos, int RightEnd ) {\n    int  i, LeftEnd, NumElements, TmpPos; \n    LeftEnd = Rpos - 1; \n    TmpPos = Lpos; \n    NumElements = RightEnd - Lpos + 1; \n    for(int i=0;i&lt;NumElements;i++){\n        if((Lpos&lt;=LeftEnd)&amp;&amp;(Rpos&gt;RightEnd||A[Lpos]&lt;=A[Rpos])){TmpArray[i]=A[Lpos++];}\n        else{TmpArray[TmpPos++]=A[Rpos++];}\n    }\n}\n/** version3 **/\nvoid CopyArray(int B[],int iBegin,int iEnd,int A[]);\nvoid Merge (int A[],int ileft,int iright,int iend,int B[]);\nvoid BottomupMergeSort(int A[],int B[],int n){\n   for(int width=1;width&lt;n;width=width*2){\n           for(int i=0;i&lt;n;i=i+2*width){\n            Merge(A,i,min(i+width,n),min(i+2*width,n),B);\n           }\n           CopyArray(B,0,n,A);\n   }\n}\n// (iBegin,iEnd]\nvoid Merge (int A[],int ileft,int iright,int iend,int B[]){\n     int i=ileft,j=iright;\n     for(int k=ileft;k&lt;iend;k++){\n         if(i&lt;iright&amp;&amp;(j&gt;=iend||A[i]&lt;=A[j])){\n            B[k]=A[i++];\n         }\n         else{B[k]=A[j++];}\n    }\n}\n</code></pre>"},{"location":"note/sort/#complexity","title":"Complexity","text":"<p>\\(T(n)=2T(n/2)+O(n)\\) \u2192 \\(O(nlogn)\\) Note:  Mergesort requires linear extra memory, and copying an array is slow.  It is hardly ever used for internal sorting, but is quite useful for external sorting.</p>"},{"location":"note/sort/#quick-sort","title":"Quick Sort","text":""},{"location":"note/sort/#picking-the-pivot","title":"Picking the Pivot","text":"<p>A Safe Maneuver: \\(Pivot = random\\ select\\ from\\ A[\\ \\ ]\\)</p> <p>Median-of-Three Partitioning : \\(Pivot\\ = median ( left, center, right )\\)</p> <ol> <li>Select the elements at the leftmost, center, and rightmost positions of the array.</li> <li>Calculate the median among these three elements, i.e., identify the element that is the middle value.</li> <li>Set the median as the pivot element.</li> </ol> <p>Eliminates the bad case for sorted input and actually reduces the running time by about 5%.</p>"},{"location":"note/sort/#small-arrays","title":"Small Arrays","text":"<p>Problem: Quicksort is slower than insertion sort for small N ( \\(\\le\\)20 ).</p> <p>Solution : Cutoff when N gets small ( e.g. N = 10 ) and use other efficient algorithms (such as insertion sort).</p>"},{"location":"note/sort/#implementation","title":"Implementation","text":"<ul> <li>\u53cc\u6307\u9488</li> </ul> <pre><code>void  Quicksort( ElementType A[ ], int N ) \n{ \n    Qsort( A, 0, N - 1 ); \n    /* A:   the array   */\n    /* 0:   Left index  */\n    /* N \u2013 1: Right index   */\n}\n\n/* Return median of Left, Center, and Right */ \n/* Order these and hide the pivot */ \nElementType Median3( ElementType A[ ], int Left, int Right ) \n{ \n    int  Center = ( Left + Right ) / 2; \n    if ( A[ Left ] &gt; A[ Center ] ) \n        Swap( &amp;A[ Left ], &amp;A[ Center ] ); \n    if ( A[ Left ] &gt; A[ Right ] ) \n        Swap( &amp;A[ Left ], &amp;A[ Right ] ); \n    if ( A[ Center ] &gt; A[ Right ] ) \n        Swap( &amp;A[ Center ], &amp;A[ Right ] ); \n    /* Invariant: A[ Left ] &lt;= A[ Center ] &lt;= A[ Right ] */ \n    Swap( &amp;A[ Center ], &amp;A[ Right - 1 ] ); /* Hide pivot */ \n    /* only need to sort A[ Left + 1 ] \u2026 A[ Right \u2013 2 ] */\n    return  A[ Right - 1 ];  /* Return pivot */ \n}\n\nvoid  Qsort( ElementType A[ ], int Left, int Right ) \n{   int  i,  j; \n    ElementType  Pivot; \n    if( Left + Cutoff &lt;= Right ){  /* if the sequence is not too short */\n        Pivot = Median3( A, Left, Right );  /* select pivot */\n        i = Left;     \n        j = Right \u2013 1;  /* why not set Left+1 and Right-2? */\n        for( ; ; ) { \n                    while ( A[ ++i ] &lt; Pivot ) { }  /* scan from left */\n                    while ( A[ \u2013\u2013j ] &gt; Pivot ) { }  /* scan from right */\n                    if ( i &lt; j ) {Swap( &amp;A[ i ], &amp;A[ j ] ); } /* adjust partition */\n                    else {break; } /* partition done */\n        } \n        Swap( &amp;A[ i ], &amp;A[ Right - 1 ] ); /* restore pivot */ \n        Qsort( A, Left, i - 1 );      /* recursively sort left part */\n        Qsort( A, i + 1, Right );   /* recursively sort right part */\n    }  /* end if - the sequence is long */\n\n    else /* do an insertion sort on the short subarray */ \n    {InsertionSort( A + Left, Right - Left + 1 );}\n}\n</code></pre>"},{"location":"note/sort/#sorting-large-structures","title":"Sorting Large Structures","text":"<p>Swapping large structures can be very much expensive.</p> <ul> <li>Add a pointer field to the structure and swap pointers instead \u2013 indirect sorting.  </li> </ul> <p></p> <ul> <li>Physically rearrange the structures at last if it is really necessary.   In the worst case there are \\([N/2]\\)(down) cycles and requires \\([3N/2]\\) (down) record moves.   \\(T = O( m N )\\) where m is the size of a structure</li> </ul>"},{"location":"note/sort/#a-general-lower-bound-for-sorting","title":"A General Lower Bound for Sorting","text":"<p>Any algorithm that sorts by comparisons only must have a worst case computing time of \\(\\Omega( N log N )\\).</p> <p>When sorting N distinct elements, there are \\(N!\\) (N factorial) different possible sorting outcomes. This arises from the numerous ways of arranging the elements, with \\(N\\) choices for the first element, \\(N-1\\) choices for the second, and so forth, yielding a total of \\(N!\\).</p> <p>In the context of decision trees representing the decision-making process of comparison-based sorting algorithms, the number of leaves in the tree is at least \\(N!\\). Each leaf node signifies a distinct sorting outcome.</p> <p>The relationship between the height of the decision tree \\((k)\\) and complete binary trees is emphasized.  For a complete binary tree with \\(k\\) levels, it can have at most \\(2^{k-1}\\) leaves. Combining this with the earlier discussion, the inequality \\(N! \u2264 2^{k-1}\\) is established, where k is the height of the decision tree.</p> <p>Expressing the relationship between height and N! using logarithms, we find that \\(k \u2265 log(N!) + 1\\).</p> <ul> <li>Logarithms are preferred due to their intuitive representation of exponential growth in tree height.</li> </ul> <p>These insights delineate theoretical limits for comparison-based sorting algorithms and underscore the significance of N log N as the theoretical lower bound for their time complexity.</p>"},{"location":"note/sort/#bucket-sort-and-radix-sort","title":"Bucket Sort and Radix Sort","text":""},{"location":"note/sort/#bucket-sort-tnmomn","title":"Bucket Sort \\(T(N,M)=O(M+N)\\)","text":"<p><pre><code>Algorithm{\n    initialize count[ ];\n    while (read in a student\u2019s record)\n        insert to list count[stdnt.grade];\n    for (i=0; i&lt;M; i++) {\n        if (count[i])\n            output list count[i];\n    }\n}\n</code></pre> * What if \\(M &gt;&gt; N\\) ?</p>"},{"location":"note/sort/#radix-sort","title":"Radix Sort","text":""},{"location":"note/sort/#stableness","title":"Stableness","text":"<ul> <li>\u7a33\u5b9a\u6392\u5e8f\uff1a\u5192\u6ce1\u3001\u5f52\u5e76\u3001\u63d2\u5165\u3001\u57fa\u6570</li> <li>\u4e0d\u7a33\u5b9a\u6392\u5e8f\uff1a\u5feb\u6392\u3001\u5e0c\u5c14\u3001\u5806\u6392\u3001\u9009\u62e9</li> </ul>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","title":"Basic data Structures I","text":"<p>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#sparse-matrix","title":"SPARSE MATRIX","text":"<p>Representing a sparse matrix by a 2D array leads to wastage of lots of memory as zeroes in the matrix are of no use in most of the cases. So, instead of storing zeroes with non-zero elements, we only store non-zero elements. This means storing non-zero elements with triples- (Row, Column, value).</p> <ul> <li>Using Array</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    // Assume 4x5 sparse matrix\n    int sparseMatrix[4][5] =\n    {\n        {0 , 0 , 3 , 0 , 4 },\n        {0 , 0 , 5 , 7 , 0 },\n        {0 , 0 , 0 , 0 , 0 },\n        {0 , 2 , 6 , 0 , 0 }\n    };\n\n    int size = 0;\n    for (int i = 0; i &lt; 4; i++)\n        for (int j = 0; j &lt; 5; j++)\n            if (sparseMatrix[i][j] != 0)\n                size++;\n\n    // number of columns in compactMatrix (size) must be\n    // equal to number of non - zero elements in\n    // sparseMatrix\n    int compactMatrix[3][size];\n\n    // Making of new matrix\n    int k = 0;\n    for (int i = 0; i &lt; 4; i++)\n        for (int j = 0; j &lt; 5; j++)\n            if (sparseMatrix[i][j] != 0)\n            {\n                compactMatrix[0][k] = i;\n                compactMatrix[1][k] = j;\n                compactMatrix[2][k] = sparseMatrix[i][j];\n                k++;\n            } \n\n    for (int i=0; i&lt;3; i++)\n    {\n        for (int j=0; j&lt;size; j++)\n            cout &lt;&lt;\" \"&lt;&lt; compactMatrix[i][j];\n        cout &lt;&lt;\"\\n\";\n    }\n    return 0;\n}\n</code></pre> <ul> <li>Using Linked Lists</li> </ul> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n\n// Node to represent sparse matrix\nstruct Node\n{\n    int value;\n    int row_position;\n    int column_postion;\n    struct Node *next;\n};\n\n// Function to create new node\nvoid create_new_node(struct Node** start, int non_zero_element,int row_index, int column_index )\n{\n    struct Node *temp, *r;\n    temp = *start;\n    if (temp == NULL)\n    {\n        // Create new node dynamically\n        temp = (struct Node *) malloc (sizeof(struct Node));\n        temp-&gt;value = non_zero_element;\n        temp-&gt;row_position = row_index;\n        temp-&gt;column_postion = column_index;\n        temp-&gt;next = NULL;\n        *start = temp;\n    }\n    else\n    {\n        while (temp-&gt;next != NULL)\n            temp = temp-&gt;next;\n        // Create new node dynamically\n        r = (struct Node *) malloc (sizeof(struct Node));\n        r-&gt;value = non_zero_element;\n        r-&gt;row_position = row_index;\n        r-&gt;column_postion = column_index;\n        r-&gt;next = NULL;\n        temp-&gt;next = r;\n    }\n}\n// This function prints contents of linked list\n// starting from start\nvoid PrintList(struct Node* start)\n{\n    struct Node *temp, *r, *s;\n    temp = r = s = start;\n\n    printf(\"row_position: \");\n    while(temp != NULL){\n        printf(\"%d \", temp-&gt;row_position);\n        temp = temp-&gt;next;\n    }\n    printf(\"\\n\");\n    printf(\"column_postion: \");\n    while(r != NULL){\n        printf(\"%d \", r-&gt;column_postion);\n        r = r-&gt;next;\n    }\n    printf(\"\\n\");\n    printf(\"Value: \");\n    while(s != NULL){\n        printf(\"%d \", s-&gt;value);\n        s = s-&gt;next;\n    }\n    printf(\"\\n\");\n}\n// Driver of the program\nint main(){\n// Assume 4x5 sparse matrix\n    int sparseMatric[4][5] =\n    {\n        {0 , 0 , 3 , 0 , 4 },\n        {0 , 0 , 5 , 7 , 0 },\n        {0 , 0 , 0 , 0 , 0 },\n        {0 , 2 , 6 , 0 , 0 }\n    };\n    /* Start with the empty list */\n    struct Node* start = NULL;\n    for (int i = 0; i &lt; 4; i++)\n        for (int j = 0; j &lt; 5; j++)\n            // Pass only those values which are non - zero\n            if (sparseMatric[i][j] != 0)\n                create_new_node(&amp;start, sparseMatric[i][j], i, j);\n    PrintList(start);\n    return 0;\n}\n</code></pre>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#stack","title":"STACK","text":""},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#1adt","title":"1.ADT","text":""},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#2implementations","title":"2.Implementations","text":"<ul> <li>Linked List</li> <li>Array : The stack model must be well encapsulated.</li> </ul>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#3applications","title":"3.Applications","text":"<ul> <li>Balancing Symbols</li> <li>Pseudo Code</li> </ul> <pre><code>Algorithm  {\n    Make an empty stack S;\n    while (read in a character c) {\n        if (c is an opening symbol)\n            Push(c, S);\n        else if (c is a closing symbol) {\n            if (S is empty)  { ERROR; exit; }\n            else  {  /* stack is okay */\n                if  (Top(S) doesn\u2019t match c)  { ERROR, exit; }\n                else  Pop(S);\n            }  /* end else-stack is okay */\n        }  /* end else-if-closing symbol */\n    } /* end while-loop */ \n    if (S is not empty)  ERROR;\n}\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdbool.h&gt;\n#include &lt;string.h&gt;\n\n#define STACKSIZE 30 \nchar stack[STACKSIZE]; // Global, but let's go with it\nint top = 0;\n\nvoid push(char x) {\n    if (top == STACKSIZE)\n        puts(\"Stack Full\");\n    else\n        stack[top++] = x;\n}\n\nbool popExpect(char c) { // compare expected char on top with passed char\n    return top &amp;&amp; c == stack[--top];\n}\n\nbool chk(const char *str) {\n    char *cp, pairs[] = \"(){}[]\"; // three important pairs\n    bool isGood = true; // optimism\n\n    for (int i = 0; isGood &amp;&amp; str[i]; i++)\n        // is this char one of the \"special\" ones?\n        if ((cp = strchr(pairs, str[i])) != NULL) {\n            int off = cp - pairs;\n            // because \"paired\" 0,2,4 are open, 1,3,5 are close\n            if (off % 2 == 0) // opening\n                push(cp[1]); // push the close that matches this open\n            else // special closing\n                isGood = popExpect(str[i]); // does this close match?\n        }\n\n    return isGood &amp;&amp; top == 0;\n}\n\nint main() {\n    const char *s1 = \"(foobar)({}){bar}[[[(foo)]]]\"; // balanced\n    const char *s2 = \"(foobar)({}){ { bar}[[[(foo)]]]\"; // unbalanced open\n    const char *s3 = \"(foobar)({}){ ] bar}[[[(foo)]]]\"; // unbalanced close\n\n    puts(chk(s1) ? \"Balanced\" : \"Unbalanced\");\n    puts(chk(s2) ? \"Balanced\" : \"Unbalanced\");\n    puts(chk(s3) ? \"Balanced\" : \"Unbalanced\");\n\n    return 0;\n}\n</code></pre> <ul> <li> <p>Calculation</p> </li> <li> <p>Prefix</p> </li> <li> <p>Infix\u300cConvert To Postfix\u300d</p> </li> </ul> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\n// Function to return precedence of operators\nint prec(char c) {\n    if (c == '^')\n        return 3;\n    else if (c == '/' || c == '*')\n        return 2;\n    else if (c == '+' || c == '-')\n        return 1;\n    else\n        return -1;\n}\n\n// Function to return associativity of operators\nchar associativity(char c) {\n    if (c == '^')\n        return 'R';\n    return 'L'; // Default to left-associative\n}\n\n// Structure to represent stack\nstruct Stack {\n    int top;\n    unsigned capacity;\n    char* array;\n};\n\n// Function to initialize a stack\nstruct Stack* createStack(unsigned capacity) {\n    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));\n    stack-&gt;capacity = capacity;\n    stack-&gt;top = -1;\n    stack-&gt;array = (char*)malloc(stack-&gt;capacity * sizeof(char));\n    return stack;\n}\n\n// Function to check if the stack is full\nint isFull(struct Stack* stack) {\n    return stack-&gt;top == stack-&gt;capacity - 1;\n}\n\n// Function to check if the stack is empty\nint isEmpty(struct Stack* stack) {\n    return stack-&gt;top == -1;\n}\n\n// Function to push an element to the stack\nvoid push(struct Stack* stack, char item) {\n    if (isFull(stack)) {\n        printf(\"Stack Full\\n\");\n        return;\n    }\n    stack-&gt;array[++stack-&gt;top] = item;\n}\n\n// Function to pop an element from the stack\nchar pop(struct Stack* stack) {\n    if (isEmpty(stack)) {\n        return '$'; // Assuming '$' as an invalid character\n    }\n    return stack-&gt;array[stack-&gt;top--];\n}\n\n// The main function to convert infix expression\n// to postfix expression\nvoid infixToPostfix(char* exp) {\n    struct Stack* stack = createStack(strlen(exp));\n    char result[strlen(exp)];\n    int resultIndex = 0;\n\n    for (int i = 0; exp[i] != '\\0'; i++) {\n        char c = exp[i];\n\n        // If the scanned character is\n        // an operand, add it to the output string.\n        if ((c &gt;= 'a' &amp;&amp; c &lt;= 'z') || (c &gt;= 'A' &amp;&amp; c &lt;= 'Z') || (c &gt;= '0' &amp;&amp; c &lt;= '9'))\n            result[resultIndex++] = c;\n\n        // If the scanned character is an\n        // \u2018(\u2018, push it to the stack.\n        else if (c == '(')\n            push(stack, '(');\n\n        // If the scanned character is an \u2018)\u2019,\n        // pop and add to the output string from the stack\n        // until an \u2018(\u2018 is encountered.\n        else if (c == ')') {\n            while (stack-&gt;top != -1 &amp;&amp; stack-&gt;array[stack-&gt;top] != '(') {\n                result[resultIndex++] = pop(stack);\n            }\n            pop(stack); // Pop '('\n        }\n\n        // If an operator is scanned\n        else {\n            while (!isEmpty(stack) &amp;&amp; prec(exp[i]) &lt; prec(stack-&gt;array[stack-&gt;top]) ||\n                !isEmpty(stack) &amp;&amp; prec(exp[i]) == prec(stack-&gt;array[stack-&gt;top]) &amp;&amp;\n                associativity(exp[i]) == 'L') {\n                result[resultIndex++] = pop(stack);\n            }\n            push(stack, c);\n        }\n    }\n\n    // Pop all the remaining elements from the stack\n    while (!isEmpty(stack)) {\n        result[resultIndex++] = pop(stack);\n    }\n\n    result[resultIndex] = '\\0'; // Null-terminate the result string\n\n    printf(\"%s\\n\", result);\n}\n\n// Driver code\nint main() {\n    char exp[] = \"a+b*(c^d-e)^(f+g*h)-i\";\n    // Function call\n    infixToPostfix(exp);\n    return 0;\n}\n</code></pre> <ul> <li>Never pop a '(' from the stack except when processing a  ')' .</li> <li>Observe that when ' (  ' is not in the stack, its precedence is the highest; but when it is in the stack, its precedence is the lowest.  Define in-stack precedence and incoming precedence for symbols, and each time use the corresponding precedence for comparison. </li> <li> <p>Note:  a \u2013 b \u2013 c will be converted to a b \u2013 c \u2013.  However, \\(2^{2^{3}}\\)must be converted to 2 2 3 ^ ^  ,  not 2 2 ^ 3 ^ since exponentiation associates right to left.</p> <ul> <li> <p>Observe that when ' (  ' is not in the stack, its precedence is the highest; but when it is in the stack, its precedence is the lowest.  Define in-stack precedence and incoming precedence for symbols, and each time use the corresponding precedence for comparison. </p> </li> <li> <p>Note:  a \u2013 b \u2013 c will be converted to a b \u2013 c \u2013.  However, \\(2^{2^{3}}\\)must be converted to 2 2 3 ^ ^  ,  not 2 2 ^ 3 ^ since exponentiation associates right to left.</p> </li> </ul> </li> <li> <p>Postfix \u300cEasier To Calculate\u300d</p> </li> </ul> <p>ps:Tail Recursion! -- compliler will remove the recursion.</p>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#the-queue-adt","title":"The Queue ADT","text":"<ul> <li> <p>A queue is a First-In-First-Out (FIFO) list, that is, an ordered list in which insertions take place at one end and deletions take place at the opposite end.</p> </li> <li> <p>Linked list implementation</p> </li> <li> <p>Array Implementation</p> </li> </ul> <pre><code>struct  QueueRecord {\n    int     Capacity ;   /* max size of queue */\n    int     Front;          /* the front pointer */\n    int     Rear;           /* the rear pointer */\n    int     Size;  /* Optional - the current size of queue */\n    ElementType  *Array;    /* array for queue elements */\n } ; \n</code></pre> <ul> <li>A circular Queue</li> <li>Rear[0] Font[1]</li> </ul>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#tree","title":"TREE","text":""},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#basic-properties","title":"Basic Properties","text":"<ul> <li>N nodes and N-1 edges</li> <li>node without any son is called  \\(leaf\\)</li> <li>\u4e00\u68f5\u6811\u7684\u5ea6\u662f\u8fd9\u68f5\u6811\u91cc\u6240\u6709\u8282\u70b9\u5ea6\u7684\u6700\u5927\u503c</li> <li>\u4ece\u8282\u70b9 \\(n1\\) \u5230 \\(nk\\) \u7684\u8def\u5f84\u662f\u552f\u4e00\u7684\uff0c\u5176\u957f\u5ea6\u662f\u8def\u5f84\u4e0a\u8fb9\u7684\u6570\u91cf.</li> <li>\u5bf9\u4e8e\u8282\u70b9 \\(ni\\)\uff0c\u5176\u6df1\u5ea6\u4e3a\u4ece\u6839\u5230 \\(ni\\) \u7684\u552f\u4e00\u8def\u5f84\u7684\u957f\u5ea6\\([Depth\\) \\(root = 0]\\)</li> <li>\u5bf9\u4e8e\u8282\u70b9 \\(ni\\)\uff0c\u5176\u9ad8\u5ea6\u4e3a\u4ece \\(ni\\) \u5230\u4e00\u4e2a\u53f6\u8282\u70b9\u7684\u6700\u957f\u957f\u5ea6\\([Height\\) \\(leaf = 0]\\)</li> <li>\u6839\u7684\u9ad8\u5ea6\u79f0\u4e3a\u8fd9\u68f5\u6811\u7684\u9ad8\u5ea6 / \u6df1\u5ea6</li> <li>\u4e00\u4e2a\u8282\u70b9\u7684\u7956\u5148\uff08ancestors\uff09\u662f\u4ece\u6839\u5230\u8fd9\u4e2a\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9</li> <li>\u4e00\u4e2a\u8282\u70b9\u7684\u540e\u88d4\uff08descendants\uff09\u662f\u8fd9\u4e2a\u8282\u70b9\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9</li> </ul>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#implementation","title":"Implementation","text":"<ul> <li> <p>FirstChild-NextSibling \u8868\u793a\u6cd5</p> </li> <li> <p>\u8bb0\u5f55\u7b2c\u4e00\u4e2a\u5b50\u8282\u70b9\u548c\u4e0b\u4e00\u4e2a\u5144\u5f1f\u8282\u70b9</p> </li> <li> <p>\u56e0\u4e3a\u4e00\u68f5\u6811\u7684\u513f\u5b50\u987a\u5e8f\u4e0d\u5b9a\uff0c\u6240\u4ee5\u4e00\u68f5\u6811\u7684\u8868\u793a\u65b9\u5f0f\u4e0d\u552f\u4e00</p> <pre><code>struct TreeNode {\n    ElementType Element;\n    PtrToNode FirstChild;\n    PtrToNode NextSibling;FirstChildFirfsads\n};\ntypedef struct TreeNode *PtrToNode;\n</code></pre> </li> </ul>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#binary-tree","title":"Binary Tree","text":""},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#basic-properties_1","title":"Basic Properties","text":"<ul> <li>\u7b2c i \u5c42\u7684\u8282\u70b9\u6570\u6700\u591a\u4e3a \\(2^{i-1}\\)</li> <li>\u6df1\u5ea6\u4e3a k \u7684\u4e8c\u53c9\u6811\u6700\u591a\u6709\\(2^{k}-1\\) \u4e2a\u8282\u70b9</li> <li>\\(n0\\) \u8868\u793a\u53f6\u8282\u70b9\u6570\uff0c\\(n2\\) \u8868\u793a\u5ea6\u4e3a 2 \u7684\u8282\u70b9\u6570\uff0c\u5219 \\(n0 = n2 +1\\)</li> <li>\u4e8c\u53c9\u6811\u53ef\u4ee5\u901a\u8fc7\u6570\u7ec4\u6765\u8868\u793a</li> <li>\u6839\u4e3a tree[1]</li> <li>\u8282\u70b9 tree[i] \u7684\u5de6\u513f\u5b50\u4e3a tree[2i]\uff0c\u53f3\u513f\u5b50\u4e3a tree[2i+1]</li> <li>\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u6570\u7ec4\u4e2d\u5143\u7d20\u5168\u90e8\u5206\u5e03\u5728 1 ~ n \u4e2d</li> <li>\u8868\u8fbe\u5f0f\u6811\uff08expression tree\uff09</li> </ul>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_1","title":"\u904d\u5386","text":"<p>https://blog.csdn.net/m0_73070900/article/details/130227715</p> <ul> <li> <p>Preorder\uff1aroot-left-right</p> </li> <li> <p>Postorder\uff1aleft-right-root</p> </li> <li> <p>inorder:left-root-right</p> </li> <li> <p>level order:</p> </li> </ul> <pre><code>void levelorder(tree_ptr tree) {\n    enqueue(tree);\n    while (queue is not empty) {\n        visit(T = dequeue());\n        for (each child C of T) \n            enqueue(C);\n    }\n}\n</code></pre> <pre><code>//    \u4e8c\u53c9\u6811\u7684\u5b9e\u73b0\uff08C\u8bed\u8a00\uff09\n//    \u94fe\u8868\uff0c\u9012\u5f52\u5b9e\u73b0\ntypedef char Elementtype;    //    \u5b9a\u4e49\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u6839\u636e\u9700\u8981\u81ea\u884c\u5b9a\u5236\ntypedef struct TreeNode * Node;    //    Node\u76f8\u5f53\u4e8estruct treeNode *\n//    \u5b9a\u4e49\u6570\u8282\u70b9\u7ed3\u6784\ntypedef struct TreeNode {\n    Elementtype Element;\n    Node left;    //    \u6811\u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9\n    Node right;    //    \u6811\u8282\u70b9\u7684\u53f3\u5b50\u8282\u70b9\n}TREE,*PTREE;\n\nvoid CreatTree(PTREE *);    //    \u6811\u7684\u5148\u5e8f\u521b\u5efa\u51fd\u6570\nvoid PreOrderTree(PTREE );    //    \u6811\u7684\u524d\u5e8f\u904d\u5386\u51fd\u6570\nvoid InOrderTree(PTREE );    //    \u6811\u7684\u4e2d\u5e8f\u904d\u5386\nvoid PostOrderTree(PTREE );    //    \u6811\u7684\u540e\u5e8f\u904d\u5386\nvoid LeafOfTree(PTREE );    //    \u6253\u5370\u6811\u7684\u53f6\u5b50\u8282\u70b9\u51fd\u6570\nint  Get_Leaf_Num(PTREE );    //    \u83b7\u53d6\u6811\u53f6\u5b50\u8282\u70b9\u4e2a\u6570\nint Get_Height(PTREE );    //    \u83b7\u53d6\u6811\u7684\u9ad8\u5ea6\n\nint main() {\n    PTREE Root;    \n    printf(\"\u8bf7\u5148\u5e8f\u8f93\u5165\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u6570\u636e\uff1a \");\n    CreatTree(&amp;Root);    \n    printf(\"\\n\u524d\u5e8f\u904d\u5386\u7ed3\u679c\u4e3a\uff1a\");\n    PreOrderTree(Root);    \n    printf(\"\\n\u4e2d\u5e8f\u904d\u5386\u7ed3\u679c\u4e3a\uff1a\");\n    InOrderTree(Root);\n    printf(\"\\n\u540e\u5e8f\u904d\u5386\u7ed3\u679c\u4e3a\uff1a\");\n    PostOrderTree(Root);\n    printf(\"\\n\u6253\u5370\u53f6\u5b50\u8282\u70b9\u4e3a\uff1a\");\n    LeafOfTree(Root);\n    printf(\"\\n\u53f6\u5b50\u8282\u70b9\u4e2a\u6570\u4e3a\uff1a%d\", Get_Leaf_Num(Root));\n    printf(\"\\n\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u4e3a\uff1a%d\", Get_Height(Root));\n    printf(\"\\n\");\n    return 0;\n}\n//    \u5b9a\u4e49\u6811\u5148\u5e8f\u521b\u5efa\u51fd\u6570\nvoid CreatTree(PTREE *ROOT){\n  char val = 0;\n  val = getchar();\n  if(wal=='*'){*ROOT=NULL;}\n  else{\n    (*Root)=(PTREE)malloc(sizeof(TREE));\n        if ((*Root) == NULL) {\n            printf(\"\u521b\u5efa\u8282\u70b9\u5931\u8d25\uff0c\u65e0\u6cd5\u5206\u914d\u53ef\u7528\u5185\u5b58...\");\n            exit(-1);\n        }\n            else{\n          (*Root)-&gt;Element =val;\n          CreatTree(&amp;(*Root)-&gt;left);\n          CreatTree(&amp;(*Root)-&gt;right); \n        }\n  }\n\n}\n\n//    \u6811\u7684\u524d\u5e8f\u904d\u5386\u51fd\u6570\u5b9a\u4e49\nvoid PreOrderTree(PTREE Root) {\n    if (Root == NULL)\n        return;\n    else {\n        putchar(Root-&gt;Element);\n        PreOrderTree(Root-&gt;left);\n        PreOrderTree(Root-&gt;right);\n    }\n}\n\n//    \u6811\u7684\u4e2d\u5e8f\u904d\u5386\u51fd\u6570\u5b9a\u4e49\nvoid InOrderTree(PTREE Root) {\n    if (Root == NULL)\n        return;\n    else {\n        InOrderTree(Root-&gt;left);\n        putchar(Root-&gt;Element);\n        InOrderTree(Root-&gt;right);\n    }\n}\n//    \u6811\u7684\u540e\u5e8f\u904d\u5386\u51fd\u6570\u5b9a\u4e49\nvoid PostOrderTree(PTREE Root) {\n    if (Root==NULL) \n        return ;\n    else{\n        PostOrderTree(Root-&gt;left);\n        PostOrderTree(Root-&gt;right);\n        putchar( Root-&gt;Element);\n    }\n}\n//\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u5faa\u73af\u5f62\u5f0f\nIterative Program \nvoid iter_postorder\uff08tree_ptr_tree\uff09{\n  stack S = CreateStack(MAX_SIZE);\n  for(;;){\n\n  }\n}\n//    \u6253\u5370\u6811\u7684\u53f6\u5b50\u8282\u70b9\u51fd\u6570\u5b9a\u4e49\nvoid LeafOfTree(PTREE Tree) {\n    if (Tree == NULL)    \n        return ;\n    else {\n        if (Tree-&gt;left == NULL&amp;&amp;Tree-&gt;right == NULL)\n            putchar(Tree-&gt;Element);\n        else {\n            LeafOfTree(Tree-&gt;left);\n            LeafOfTree(Tree-&gt;right);\n        }\n    }  \n}\n//    \u83b7\u53d6\u6811\u7684\u53f6\u5b50\u8282\u70b9\u4e2a\u6570\u51fd\u6570\u5b9a\u4e49\nint Get_Leaf_Num(PTREE Tree) {\n    if (Tree == NULL)\n        return 0;\n    if (Tree-&gt;left == NULL&amp;&amp;Tree-&gt;right == NULL)\n        return 1;\n    //\u9012\u5f52\u6574\u4e2a\u6811\u7684\u53f6\u5b50\u8282\u70b9\u4e2a\u6570 = \u5de6\u5b50\u6811\u53f6\u5b50\u8282\u70b9\u7684\u4e2a\u6570 + \u53f3\u5b50\u6811\u53f6\u5b50\u8282\u70b9\u7684\u4e2a\u6570\n    return Get_Leaf_Num(Tree-&gt;left) + Get_Leaf_Num(Tree-&gt;right);\n}\n//    \u83b7\u53d6\u6811\u9ad8\u7684\u51fd\u6570\u5b9a\u4e49\nint Get_Height(PTREE Tree) {\n    int Height = 0;\n    if (Tree == NULL)\n        return 0;\n    //\u6811\u7684\u9ad8\u5ea6 = max(\u5de6\u5b50\u6811\u7684\u9ad8\u5ea6\uff0c\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6) + 1\n    else\n    {\n        int L_Height = Get_Height(Tree-&gt;left);\n        int R_Height = Get_Height(Tree-&gt;right);\n        Height = L_Height &gt;= R_Height ? L_Height + 1 : R_Height + 1;\n    }\n    return Height;\n}\n</code></pre> <ul> <li>inorder iterative</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;stdbool.h&gt;\n\n// \u5b9a\u4e49\u4e8c\u53c9\u6811\u7ed3\u70b9\nstruct TreeNode {\n    int val;\n    struct TreeNode* left;\n    struct TreeNode* right;\n};\n\n// \u521b\u5efa\u4e00\u4e2a\u4e8c\u53c9\u6811\u7ed3\u70b9\nstruct TreeNode* createNode(int val) {\n    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));\n    newNode-&gt;val = val;\n    newNode-&gt;left = NULL;\n    newNode-&gt;right = NULL;\n    return newNode;\n}\n// \u7ed3\u6784\u4f53\u6a21\u62df\u6808\nstruct TreeNodeStack {\n    struct TreeNode* data;\n    struct TreeNodeStack* next;\n};\n\nstruct TreeNodeStack* createStackNode(struct TreeNode* node) {\n    struct TreeNodeStack* stackNode = (struct TreeNodeStack*)malloc(sizeof(struct TreeNodeStack));\n    stackNode-&gt;data = node;\n    stackNode-&gt;next = NULL;\n    return stackNode;\n}\n\nvoid push(struct TreeNodeStack** stack, struct TreeNode* node) {\n    struct TreeNodeStack* stackNode = createStackNode(node);\n    stackNode-&gt;next = *stack;\n    *stack = stackNode;\n}\n\nstruct TreeNode* pop(struct TreeNodeStack** stack) {\n    if (*stack == NULL) {\n        return NULL;\n    }\n    struct TreeNodeStack* temp = *stack;\n    *stack = (*stack)-&gt;next;\n    struct TreeNode* node = temp-&gt;data;\n    free(temp);\n    return node;\n}\n\nbool isEmpty(struct TreeNodeStack* stack) {\n    return stack == NULL;\n}\n\n// \u4e2d\u5e8f\u904d\u5386\u4e8c\u53c9\u6811\u5e76\u8fd4\u56de\u7ed3\u679c\u4f5c\u4e3a\u6570\u7ec4\nint* inorderTraversal(struct TreeNode* root, int* returnSize) {\n    struct TreeNodeStack* stack = NULL;\n    int* result = (int*)malloc(sizeof(int));\n    int resultSize = 0;\n    struct TreeNode* current = root;\n    while (current != NULL || !isEmpty(stack)) {\n        while (current != NULL) {\n            push(&amp;stack, current);\n            current = current-&gt;left;\n        }\n        current = pop(&amp;stack);\n        result = (int*)realloc(result, (resultSize + 1) * sizeof(int));\n        result[resultSize] = current-&gt;val;\n        resultSize++;\n        current = current-&gt;right;\n    }\n\n    *returnSize = resultSize;\n    return result;\n}\n\n// \u4e3b\u51fd\u6570\nint main() {\n    struct TreeNode* root = createNode(1);\n    root-&gt;right = createNode(2);\n    root-&gt;right-&gt;left = createNode(3);\n\n    printf(\"Inorder Traversal: \");\n    int resultSize;\n    int* result = inorderTraversal(root, &amp;resultSize);\n    for (int i = 0; i &lt; resultSize; i++) {\n        printf(\"%d \", result[i]);\n    }\n    free(result);\n    return 0;\n}\n</code></pre>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#tree_1","title":"\u521b\u5efaTREE","text":"<ul> <li>1.Postorder &amp;  Inorder \u540e\u5e8f&amp;\u4e2d\u5e8f</li> </ul> <pre><code>BiTree* postInTree(int post[],int in[],int n)  {\n    if (n&lt;=0)   return nullptr;\n    int i=0;\n    while (post[n-1]!=in[i])    i++;    //i\u4e5f\u6b63\u597d\u662f\u5de6\u5b50\u6811\u8282\u70b9\u6570\n    BiTree* nw=new BiTree;\n    nw-&gt;data=in[i];\n    nw-&gt;lc=postInTree(post,in,i);       //\u5efa\u5de6\u5b50\u6811\n    nw-&gt;rc=postInTree(post+i,in+i+1,n-i-1);     //\u5efa\u53f3\u5b50\u6811\n    return nw;\n}\n</code></pre> <ul> <li>2.preorder &amp; inorder \u524d\u5e8f&amp;\u4e2d\u5e8f</li> </ul> <pre><code>BiTree* preInTree2(int pre[],int in[],int n)  { //\u8fd9\u662f\u7b14\u8bb0\u4e0a\u7684\u6211\u7684\u65b9\u6cd5,n\u662f\u5f53\u524d\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u6570\n    if (n&lt;=0)   return nullptr;\n    int i=0;\n    while (in[i]!=pre[0])   i++;        //\u6b64\u65f6i\u6b63\u597d\u662f\u5de6\u5b50\u6811\u8282\u70b9\u6570\u3002\u5148\u5e8f\u904d\u5386\u7684\u9996\u5143\u7d20\u4e00\u5b9a\u662f\u6839\u8282\u70b9\n    BiTree* nw=new BiTree;\n    nw-&gt;data=in[i];\n    nw-&gt;lc=preInTree2(pre+1,in,i);      //\u5efa\u5de6\u5b50\u6811\uff0c\u5de6\u5b50\u6811\u8282\u70b9i\u4e2a\n    nw-&gt;rc=preInTree2(pre+i+1,in+i+1,n-i-1);        //\u5efa\u53f3\u5b50\u6811\uff0c\u53f3\u5b50\u6811\u8282\u70b9n-i-1\u4e2a\n    return nw;\n}\n</code></pre>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#application","title":"Application","text":"<ul> <li>Linux dir\u300cTypical Preoder Traversal\u300d</li> </ul> <pre><code>static void  ListDir ( DirOrFile D, int Depth )\n{\n    if  ( D is a legitimate entry )   {\n        PrintName (D, Depth );\n        if ( D is a directory )\n            for (each child C of D )\n                ListDir ( C, Depth + 1 );\n    }\n}\n</code></pre> <ul> <li> <p>Calculating the size of the directory\u300cTypical Postorder Traversal\u300d</p> </li> <li> <p>\u7ebf\u7d22\u4e8c\u53c9\u6811 Threader Binary Tree   Inorder   </p> </li> </ul> <p>Rule 1:  If Tree-&gt;Left is null, replace it with a pointer to the inorder predecessor of Tree.</p> <p>Rule 2:  If Tree-&gt;Right is null, replace it with a pointer to the inorder successor of Tree.</p> <p>Rule 3:  There must not be any loose threads.  Therefore a threaded binary tree must have a head node of which the left child points to the first node.</p>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#binary-search-tree","title":"Binary Search Tree","text":"<ul> <li>Delete</li> </ul> <pre><code>SearchTree Delete(ElementType X, SearchTree T) {\n    Position TmpCell;\n    if (T == NULL) Error(\"not found\");\n    else if (X &lt; T-&gt;Element) T-&gt;Left = Delete(X, T-&gt;Left);\n    else if (x &gt; T-&gt;Element) T-&gt;Right = Delete(X, T-&gt;Right);\n    else {\n        if (T-&gt;Left &amp;&amp; T-&gt;Right) {\n            TmpCell = FindMin(T-&gt;Right);\n            T-&gt;Element = TmpCell-&gt;Element;\n            T-&gt;Right = Delete(T-&gt;Element, T-&gt;Right);\n        } else {\n            TmpCell = T;\n            if (T-&gt;Left == NULL) T = T-&gt;Right;\n            else if (T-&gt;Right == NULL) T = T-&gt;Left;\n            free(TmpCell);\n        }\n    }\n    return T;\n}\n</code></pre> <ul> <li>All binary trees: Equals n nodes pop sequence!!</li> </ul> <p>\\(C_{n}=\\sum_{i=1}^{n} C_{i}C{n-i-1}\\)</p>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#complete-binary-tree","title":"\u5b8c\u5168\u4e8c\u53c9\u6811\uff08complete binary tree\uff09","text":""},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#basic-properties_2","title":"Basic Properties","text":"<ul> <li> <p>\u6240\u6709\u53f6\u8282\u70b9\u90fd\u5728\u76f8\u90bb\u7684\u4e24\u5c42\u4e0a\u7684\u4e8c\u53c9\u6811</p> </li> <li> <p>Basic Properties:</p> </li> <li> <p>\u9664\u4e86\u6700\u540e\u4e00\u5c42\uff0c\u6bcf\u4e00\u5c42\u90fd\u662f\u6ee1\u7684</p> </li> <li> <p>\u6700\u540e\u4e00\u5c42\u7684\u8282\u70b9\u90fd\u9760\u5de6\u6392\u5217</p> </li> <li> <p>\\(2^{h}\\) ~ \\(2^{h+1}-1\\) nodes\\((0,1,2,3- height = 3)\\)</p> </li> <li> <p>\\(h=O(log(n))\\)</p> </li> </ul>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#insert","title":"INSERT","text":"<pre><code>void Insert(ElementType X, MaxHeap H) {\n    if (IsFull(H)) {\n        Error(\"Full Heap\");\n        return;\n    }\n    int i = ++H-&gt;Size;\n    for (; H-&gt;Elements[i/2] &lt; X; i /= 2) {\n        H-&gt;Elements[i] = H-&gt;Elements[i/2];\n    }\n    H-&gt;Elements[i] = X;\n}\n</code></pre>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#delete","title":"DELETE","text":"<pre><code>ElementType DeleteMax(MaxHeap H) {\n    if (IsEmpty(H)) {\n        Error(\"Empty Heap\");\n        return H-&gt;Elements[0];\n    }\n    int i, Child;\n    ElementType MaxElement, LastElement;\n    MaxElement = H-&gt;Elements[1];\n    LastElement = H-&gt;Elements[H-&gt;Size--];\n    for (i = 1; i * 2 &lt;= H-&gt;size; i = Child) {\n        Child = i * 2;\n        if (Child != H-&gt;Size &amp;&amp; H-&gt;Elements[Child + 1] &gt; H-&gt;Elements[Child]) {\n            Child++;\n        }\n        if (LastElement &lt; H-&gt;Elements[Child]) {\n            H-&gt;Elements[i] = H-&gt;Elements[Child];\n        } else {\n            break;\n        }\n    }\n    H-&gt;Elements[i] = LastElement;\n    return MaxElement;\n}\n</code></pre> <p>Question: how to make it a natural stop without using \\(Child != H-&gt;size\\)</p>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#buildheap-h","title":"BuildHeap ( H )","text":"<p>For the perfect binary tree of height h containing \\(2^{h+1}-1\\) nodes, the sum of the heights of the nodes is \\(2^{h+1}-1 -(h + 1)\\).</p> <p>\\(T ( N ) = O ( N )\\)</p>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#the-dynamic-equivalence-problem","title":"The Dynamic Equivalence Problem","text":"<p>A dynamic graph generally refers to a graph that keeps on changing its configuration. Let\u2019s deep dive into it using an example:</p> <ul> <li>Let\u2019s consider the edge information for the given graph as: {{1,2}, {2,3}, {4,5}, {6,7}, {5,6}, {3,7}}. Now if we start adding the edges one by one, in each step the structure of the graph will change. So, after each step, if we perform the same operation on the graph while updating the edges, the result might be different. In this case, the graph will be considered a dynamic graph.</li> <li>For example, after adding the first 4 edges if we look at the graph, we will find that node 4 and node 1 belong to different components but after adding all 6 edges if we search for the same we will figure out that node 4 and node 1 belong to the same component.</li> </ul>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#the-disjoint-set-adt","title":"THE DISJOINT SET ADT","text":"<ul> <li>UNION</li> </ul> <p>NOTE:UNION is the union of the head of one head to another(thus for a random element x,always find the \"head\" element Find(x) and modify s[Find(x)]</p> <pre><code>void  SetUnion ( DisjSet S, \n                 SetType Rt1, \n                 SetType Rt2 )\n{    S [ Rt2 ] = Rt1 ;     }\n</code></pre> <ul> <li>Find</li> </ul> <pre><code>SetType  Find ( ElementType X, DisjSet S )\n{   for ( ; S[X] &gt; 0; X = S[X] )   ;\n    return  X ;\n}\n</code></pre> <ul> <li>Analysis for the Given problem</li> </ul> <pre><code>Algorithm using union-find operations\n{  Initialize  Si = { i }  for  i = 1, ..., 12 ;\n   for  ( k = 1; k &lt;= 9; k++ )  {  /* for each pair  i \u7b49\u4ef7j  \u5373\u5982\u679c\u7ed9\u51fa\u4e5d\u7ec4\u7b49\u4ef7\u5173\u7cfb*/\n      if  ( Find( i ) != Find( j ) )\n          SetUnion( Find( i ), Find( j ) );\n   }\n}\n</code></pre>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#smart-union-algorithms","title":"Smart Union Algorithms","text":"<ul> <li>\uff01\uff01\u5176\u5b9e\u53ef\u4ee5\u4e0d\u5f00\u65b0\u6570\u7ec4\uff0c\u53ea\u8bb0\u5f55\u5728\u6839\u7684\u6570\u636e\u4e2d</li> </ul>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#union-by-rank","title":"Union by rank","text":"<ul> <li>Rank:</li> </ul> <p>The rank of a node generally refers to the distance (the number of nodes including the leaf node) between the furthest leaf node and the current node. Basically rank includes all the nodes beneath the current node.</p> <ul> <li>Algorithm:</li> <li>Initial configuration:</li> <li>rank array: This array is initialized with zero.</li> <li>parent array: The array is initialized with the value of nodes i.e. parent[i] =i.</li> <li>The algorithm steps are as follows:</li> <li>Firstly, the Union function requires two nodes(let\u2019s say u and v) as arguments. Then we will find the ultimate parent (using the findPar() function that is discussed later) of u and v. Let\u2019s consider the ultimate parent of u is pu and the ultimate parent of v is pv.</li> <li>After that, we will find the rank of pu and pv.</li> <li>Finally, we will connect the ultimate parent with a smaller rank to the other ultimate parent with a larger rank. But if the ranks are equal, we can connect any parent to the other parent and we will increase the rank by one for the parent node to whom we have connected the other one.</li> </ul> <pre><code>void make_set(int v) {\n    parent[v] = v;\n    rank[v] = 0;\n}\nvoid union_sets(int a, int b) {\n    a = find_set(a);\n    b = find_set(b);\n    if (a != b) {\n        if (rank[a] &lt; rank[b])\n            swap(a, b);\n        parent[b] = a;\n        if (rank[a] == rank[b])\n            rank[a]++;\n    }\n}\n</code></pre>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#union-by-size","title":"Union by size","text":"<ul> <li>Quite similar as Union by rank.</li> </ul> <pre><code>void make_set(int v) {\n    parent[v] = v;\n    size[v] = 1;\n}\nvoid union_sets(int a, int b) {\n    a = find_set(a);\n    b = find_set(b);\n    if (a != b) {\n        if (size[a] &lt; size[b])\n            swap(a, b);\n        parent[b] = a;\n        size[a] += size[b];\n    }\n}\n</code></pre> <ul> <li> <p>Let T be a tree created by union-by-size with N nodes, then \\((Height(T) \\le \\lfloor log_2N \\rfloor + 1)\\)</p> </li> <li> <p>Proof: By induction. (Each element can have its set name changed at most. \\(log_2N\\)</p> </li> </ul> <p>times.\uff09\u300cUnion by size\u300d</p> <p>First , all note are at depth 0 at the very beginning</p> <p>Every time,we do Union:the node was set on a new tree whose size is at least twice its size</p> <p>So a node from either set can only incrase the depth by \\(1\\)</p> <p>For n nodes ,every node can have its set name changed at most \\(log_2N\\) times.</p> <p>Thus,Time complexity for Find is \\(O (l o g N )\\)</p> <ul> <li>Here is a proof by induction on the tree height k. \u300cUnion By Size\u300d</li> </ul> <p>The base case K=0 is easy, since a tree of height 0 always has just 1 node</p> <p>Suppose the claim is true for h=k. Now consider a union-by-height tree of height k+1.</p> <p>There must have been a union that brought two trees together and increased the height of one of them from k to k+1.</p> <p>Let those two trees (at the time of that union) be T1 and T2. We know that both T1 and T2 were of height k before the union.</p> <ul> <li>If one of them were of height less than k, then union-by-height would have changed the root of that shorter one to make it point to the root of the taller one, and the height of the unioned tree would still be k.</li> <li> <p>Now we can apply the induction hypothesis: the trees T1 and T2 each have at least  \\(2^k\\) nodes. Thus, the unioned tree has at least \\(2^k + 2^k = 2^{k+1}\\)nodes.</p> </li> <li> <p>Time complexity of \\(N\\) Union and \\(M\\) Find operations is now. \\(O( N + M log_2N)\\)</p> </li> </ul>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#note","title":"Note:","text":"<p>We can set \\(S [ Root ] = \u2013 size\\), thus we don't need the array size[ ]</p>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#path-compression","title":"Path Compression","text":"<p>Basically, connecting each node in a particular path to its ultimate parent refers to path compression. Let\u2019s understand it using the following illustration</p> <ol> <li>Base case: If the node and the parent of the node become the same, it will return the node.</li> <li>We will call the findPar() function for a node until it hits the base case and while backtracking we will update the parent of the current node with the returned value.</li> </ol> <pre><code>SetType  Find ( ElementType  X, DisjSet  S )\n{\n    if ( S[ X ] &lt;= 0 )    return  X;\n    else  return  S[ X ] = Find( S[ X ], S );//IMPORTANT\uff01\uff01\uff01\n}\n//The simple implementation does what was intended: first find the representative of the set (root vertex), and then in the process of stack unwinding the visited nodes are attached directly to the representative.\nSetType  Find ( ElementType  X, DisjSet  S )\n{   ElementType  root,  trail,  lead;\n    for ( root = X; S[ root ] &gt; 0; root = S[ root ] )\n        ;  /* find the root */\n    for ( trail = X; trail != root; trail = lead ) {\n       lead = S[ trail ] ;   \n       S[ trail ] = root ;   \n    }  /* collapsing */\n    return  root ;\n}\n</code></pre> <p>NOTE</p> <ul> <li>Though using the path compression technique it seems like the rank of the node is also changing, we cannot be sure about it. So, we will not make any changes to the rank array while applying path compression.</li> <li>Just take \u201cheight\u201d as an estimated rank.</li> </ul>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#worst-case-for-union-by-rank-and-path-compression","title":"Worst Case for Union-by-Rank and Path Compression","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nstruct DisjointSet {\n    int *rank, *parent, *size;\n    int n;\n};\nstruct DisjointSet* createDisjointSet(int n) {\n    struct DisjointSet* ds = (struct DisjointSet*)malloc(sizeof(struct DisjointSet));\n    ds-&gt;n = n;\n    ds-&gt;rank = (int*)malloc((n + 1) * sizeof(int));\n    ds-&gt;parent = (int*)malloc((n + 1) * sizeof(int));\n    ds-&gt;size = (int*)malloc((n + 1) * sizeof(int));\n    for (int i = 0; i &lt;= n; i++) {\n        ds-&gt;rank[i] = 0;\n        ds-&gt;parent[i] = i;\n        ds-&gt;size[i] = 1;\n    }\n    return ds;\n}\nint findUPar(struct DisjointSet* ds, int node) {\n    if (node == ds-&gt;parent[node])\n        return node;\n    ds-&gt;parent[node] = findUPar(ds, ds-&gt;parent[node]);//PATH COMPRESSION\n    return ds-&gt;parent[node];\n}\nvoid unionByRank(struct DisjointSet* ds, int u, int v) {\n    int ulp_u = findUPar(ds, u);\n    int ulp_v = findUPar(ds, v);\n    if (ulp_u == ulp_v)\n        return;\n    if (ds-&gt;rank[ulp_u] &lt; ds-&gt;rank[ulp_v]) {\n        ds-&gt;parent[ulp_u] = ulp_v;\n    } else if (ds-&gt;rank[ulp_v] &lt; ds-&gt;rank[ulp_u]) {\n        ds-&gt;parent[ulp_v] = ulp_u;\n    } else {\n        ds-&gt;parent[ulp_v] = ulp_u;\n        ds-&gt;rank[ulp_u]++;\n    }\n}\nvoid unionBySize(struct DisjointSet* ds, int u, int v) {\n    int ulp_u = findUPar(ds, u);\n    int ulp_v = findUPar(ds, v);\n    if (ulp_u == ulp_v)\n        return;\n    if (ds-&gt;size[ulp_u] &lt; ds-&gt;size[ulp_v]) {\n        ds-&gt;parent[ulp_u] = ulp_v;\n        ds-&gt;size[ulp_v] += ds-&gt;size[ulp_u];\n    } else {\n        ds-&gt;parent[ulp_v] = ulp_u;\n        ds-&gt;size[ulp_u] += ds-&gt;size[ulp_v];\n    }\n}\nint main() {\n    struct DisjointSet* ds = createDisjointSet(7);\n    unionBySize(ds, 1, 2);\n    unionBySize(ds, 2, 3);\n    unionBySize(ds, 4, 5);\n    unionBySize(ds, 6, 7);\n    unionBySize(ds, 5, 6);\n    if (findUPar(ds, 3) == findUPar(ds, 7)) {\n        printf(\"Same\\n\");\n    } else {\n        printf(\"Not same\\n\");\n    }\n    unionBySize(ds, 3, 7);\n    if (findUPar(ds, 3) == findUPar(ds, 7)) {\n        printf(\"Same\\n\");\n    } else {\n        printf(\"Not same\\n\");\n    }\n    free(ds-&gt;rank);\n    free(ds-&gt;parent);\n    free(ds-&gt;size);\n    free(ds);\n    return 0;\n}\n</code></pre>"},{"location":"note/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%88%97%E5%92%8C/","title":"Maximum Subsequence Sum Problem","text":"<p>"},{"location":"note/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%88%97%E5%92%8C/#maximum-subsequence-sum-problem","title":"Maximum Subsequence Sum Problem","text":"<ul> <li> <p>O(\\(N^3\\)) \u300c\u57fa\u672c\u601d\u8def\uff0c\u9010\u4e2a\u5217\u4e3e\uff0c\u7565\u300d</p> </li> <li> <p>O(\\(N^2\\))  \u300c\u4f18\u5316\u4e00\u4e0b\u5217\u4e3e\uff0c\u7565\u300d</p> </li> <li> <p>divide &amp; conquer O(N logN)</p> </li> </ul> <p><pre><code>static int\nMaxSubSum(const int A[],int left,int right){\n    int MaxLeftSum, MaxRightSum;\n    int MaxLeftBorderSum, MaxRightBorderSum; \n    int LeftBorderSum, RightBorderSum;\n    int Center, i;\n\n    if( left == right ){\n        if(A[left]&gt;0){\n            return A[left];\n        }\n        else{\n            return 0;\n        }\n    }\n    Center = ( Left +Right ) / 2;\n    MaxLeftSum = MaxSubSum( A, Left, Center ) \n    MaxRightSum = MaxSubSum( A, Center + 1, Right );\n\n    MaxLeftBorderSum = 0; LeftBorderSum = 0;\n\n    for(i=Cente+1;i&gt;=left;i--){\n        LeftBorderSum += A[i];\n        if(leftBorderSum&gt;MaxleftBorderSum){\n            MaxleftBorderSum = LeftBorderSum;\n        }\n    }\n\n    MaxRightBorderSum = 0; \n    RightBorderSum = 0;\n    for(i=Center;i&lt;=Right;i++){\n        RightBorderSum += A[i];\n        if(RightBorderSum &gt; MaxRightBorderSum){\n            MaxRightBOrderSum = RightBorderSum\n        }\n    }\n    return Max(MaxLeftSum,MaxRightSum,MaxLeftBorderSum+MaxRightBorderSum);\n\n}\nint MaxsubsequenceSum( const int A[],intN) {\n    return MaxSubSum( A, 0, N - 1 );\n    }\n</code></pre> </p> <ul> <li>\u52a8\u6001\u89c4\u5212 O(N)</li> </ul> <pre><code>int MaxSubsequenceSum( const int  A[ ],  int  N ) \n{ \n    int  ThisSum, MaxSum, j; \n    ThisSum = MaxSum = 0; \n    for ( j = 0; j &lt; N; j++ ){ \n        ThisSum += A[ j ]; \n        if( ThisSum &gt; MaxSum ){\n            MaxSum = ThisSum; \n        }\n        else if( ThisSum &lt; 0 ){\n            ThisSum = 0;\n        }\n    } \n    return MaxSum; \n} \n</code></pre> <ul> <li>If counts negative paths</li> </ul> <pre><code>int maxSubArray(int* nums, int numsSize) {\n    int pre = 0, maxAns = nums[0];\n    for (int i = 0; i &lt; numsSize; i++) {\n        pre = fmax(pre + nums[i], nums[i]);\n        maxAns = fmax(maxAns, pre);\n    }\n    return maxAns;\n}\n</code></pre> <p></p>"},{"location":"oop/Basic/Basic/","title":"Itro & Class","text":"<p>"},{"location":"oop/Basic/Basic/#in-out","title":"In &amp; Out","text":"<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int age;\n    cin &gt;&gt; age &gt;&gt; name;\n    return 0;\n}\n</code></pre> <ul> <li> <p><code>cout</code> \u6807\u51c6\u8f93\u51fa   <code>&lt;&lt;</code> Inserter</p> </li> <li> <p><code>cout</code> \u4e3a <code>cout &lt;&lt; \"Hello World\"</code> \u7684\u7ed3\u679c</p> </li> </ul>"},{"location":"oop/Basic/Basic/#string","title":"String","text":"<p><code>#include&lt;string&gt;</code></p> <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\nint main()\n{\n    int age;\n    string name;\n    cin &gt;&gt; age &gt;&gt; name;\n    cout &lt;&lt; \"Hello World!\" &lt;&lt; name &lt;&lt; \" is \" &lt;&lt; age &lt;&lt; \" today!\" &lt;&lt; endl;\n    cout &lt;&lt; name.length() &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <ul> <li>\u5b57\u7b26\u4e32\u7ed3\u5c3e\u975e<code>\\0</code></li> </ul> <p><code>string place(\"Hangzhou\").</code></p> <p><code>int a(8)</code></p>"},{"location":"oop/Basic/Basic/#sub-string","title":"Sub-string","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\nint main() {\n    string originalString = \"Hello, World!\";\n    // Using substr to extract a substring\n    int startPos = 7; // Starting position\n    int length = 5;   // Length of the substring to extract\n    string extractedSubstring = originalString.substr(startPos, length);\n    // Displaying the result\n    cout &lt;&lt; \"Original String: \" &lt;&lt; originalString &lt;&lt; endl;\n    cout &lt;&lt; \"Substring from position \" &lt;&lt; startPos &lt;&lt; \" with length \" &lt;&lt; length &lt;&lt; \": \" &lt;&lt; extractedSubstring &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"oop/Basic/Basic/#alter-string","title":"Alter-string","text":"<ul> <li>Assign</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\nint main() {\n    // Original string\n    string myString = \"Hello, World!\";\n\n    // Example 1: Assign the value of another string\n    string anotherString = \"Goodbye\";\n    myString.assign(anotherString);\n    cout &lt;&lt; \"After assign(const string&amp; str): \" &lt;&lt; myString &lt;&lt; endl;\n\n    // Example 2: Assign a substring of another string\n    string sourceString = \"123456789\";\n    myString.assign(sourceString, 2, 5);  //Starting from position 2,take 5 characters\n    cout &lt;&lt; \"After assign(const string&amp; str, size_t subpos, size_t sublen): \" &lt;&lt; myString &lt;&lt; endl;\n\n    // Example 3: Assign the value of a C-string\n    const char* cString = \"C-Style String\";\n    myString.assign(cString);\n    cout &lt;&lt; \"After assign(const char* s): \" &lt;&lt; myString &lt;&lt; endl;\n\n    // Example 4: Assign the first n characters of a C-string\n    const char* cStringWithLength = \"ABCDE\";\n    size_t n = 3;\n    myString.assign(cStringWithLength, n);\n    cout &lt;&lt; \"After assign(const char* s, size_t n): \" &lt;&lt; myString &lt;&lt; endl;\n\n    // Example 5: Assign a string consisting of n copies of character c\n    char characterToRepeat = 'X';\n    size_t numberOfCopies = 4;\n    myString.assign(numberOfCopies, characterToRepeat);\n    cout &lt;&lt; \"After assign(size_t n, char c): \" &lt;&lt; myString &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre> <pre><code>After assign(const string&amp; str): Goodbye\nAfter assign(const string&amp; str, size_t subpos, size_t sublen): 34567\nAfter assign(const char* s): C-Style String\nAfter assign(const char* s, size_t n): ABC\nAfter assign(size_t n, char c): XXXX\n</code></pre> <p><code>size_t</code> is a data type in C++ that is commonly employed for expressing the size of objects or the count of elements. It belongs to the category of unsigned integer types and is designed to have a size large enough to handle the maximum possible size of objects on a given platform. The definition of <code>size_t</code> can be found in the standard library header <code>&lt;cstddef&gt;</code> (or <code>&lt;stddef.h&gt;</code> in C), and it is typically introduced using <code>typedef</code> or <code>using</code>.</p> <ul> <li>Insert</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main() {\n    // Original string\n    string myString = \"Hello, World!\";\n\n    // Example 1: Insert another string at a specific position\n    string insertString = \"Beautiful \";\n    size_t insertPosition = 7;  // Before the 'W'\n    myString.insert(insertPosition, insertString);\n    cout &lt;&lt; \"After insert(size_t pos, const string&amp; str): \" &lt;&lt; myString &lt;&lt; endl;\n\n    // Example 2: Insert a substring of another string at a specific position\n    string sourceString = \"12345\";\n    size_t subpos = 2;\n    size_t sublen = 3;\n    myString.insert(12, sourceString, subpos, sublen);  // Insert at position 12\n    cout &lt;&lt; \"After insert(size_t pos, const string&amp; str, size_t subpos, size_t sublen): \" &lt;&lt; myString &lt;&lt; endl;\n\n    // Example 3: Insert a C-string at a specific position\n    const char* cString = \"XYZ\";\n    myString.insert(6, cString);  // Insert at position 6\n    cout &lt;&lt; \"After insert(size_t pos, const char* s): \" &lt;&lt; myString &lt;&lt; endl;\n\n    // Example 4: Insert the first n characters of a C-string at a specific position\n    const char* cStringWithLength = \"ABCDE\";\n    size_t n = 3;\n    myString.insert(3, cStringWithLength, n);  // Insert at position 3\n    cout &lt;&lt; \"After insert(size_t pos, const char* s, size_t n): \" &lt;&lt; myString &lt;&lt; endl;\n\n    // Example 5: Insert n copies of character c at a specific position\n    char characterToInsert = '!';\n    size_t numberOfCopies = 4;\n    myString.insert(0, numberOfCopies, characterToInsert);  // Insert at the beginning\n    cout &lt;&lt; \"After insert(size_t pos, size_t n, char c): \" &lt;&lt; myString &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre> <pre><code>After insert(size_t pos, const string&amp; str): Hello, Beautiful World!\nAfter insert(size_t pos, const string&amp; str, size_t subpos, size_t sublen): Hello, Beaut345iful World!\nAfter insert(size_t pos, const char* s): Hello,XYZ Beaut345iful World!\nAfter insert(size_t pos, const char* s, size_t n): HelABClo,XYZ Beaut345iful World!\nAfter insert(size_t pos, size_t n, char c): !!!!HelABClo,XYZ Beaut345iful World!\n</code></pre> <ul> <li>Erase</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\nint main() {\n    // Original string\n    string myString = \"Hello, World!\";\n    // Example 1: Erase a portion of the string\n    size_t erasePosition = 7;  // Start erasing from position 7\n    size_t eraseLength = 5;    // Erase 5 characters\n    myString.erase(erasePosition, eraseLength);\n    cout &lt;&lt; \"After erase(size_t pos, size_t len): \" &lt;&lt; myString &lt;&lt; endl;\n    // Example 2: Erase the entire string (using default arguments)\n    myString.erase();\n    cout &lt;&lt; \"After erase(): \" &lt;&lt; myString &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <pre><code>After erase(size_t pos, size_t len): Hello, !\nAfter erase(): \n</code></pre> <ul> <li>Replace</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main() {\n    // Original string\n    string myString = \"Hello, World!\";\n\n    // Example 1: Replace a portion of the string with another string\n    size_t replacePosition = 7;        // Start replacing from position 7\n    size_t replaceLength = 5;           // Replace 5 characters\n    string replacementString = \"Universe\";\n    myString.replace(replacePosition, replaceLength, replacementString);\n    cout &lt;&lt; \"After replace(size_t pos, size_t len, const string&amp; str): \" &lt;&lt; myString &lt;&lt; endl;\n\n    // Example 2: Replace a portion of the string with a substring of another string\n    string sourceString = \"12345\";\n    size_t subpos = 2;\n    size_t sublen = 3;\n    myString.replace(12, 5, sourceString, subpos, sublen);  // Replace at position 12\n    cout &lt;&lt; \"After replace(size_t pos, size_t len, const string&amp; str, size_t subpos, size_t sublen): \" &lt;&lt; myString &lt;&lt; endl;\n\n    // Example 3: Replace a portion of the string with a C-string\n    const char* cString = \"XYZ\";\n    myString.replace(6, 5, cString);  // Replace at position 6\n    cout &lt;&lt; \"After replace(size_t pos, size_t len, const char* s): \" &lt;&lt; myString &lt;&lt; endl;\n\n    // Example 4: Replace a portion of the string with the first n characters of a C-string\n    const char* cStringWithLength = \"ABCDE\";\n    size_t n = 3;\n    myString.replace(3, 5, cStringWithLength, n);  // Replace at position 3\n    cout &lt;&lt; \"After replace(size_t pos, size_t len, const char* s, size_t n): \" &lt;&lt; myString &lt;&lt; endl;\n\n    // Example 5: Replace a portion of the string with n copies of character c\n    char characterToReplace = '!';\n    size_t numberOfCopies = 4;\n    myString.replace(0, 1, numberOfCopies, characterToReplace);  // Replace at the beginning\n    cout &lt;&lt; \"After replace(size_t pos, size_t len, size_t n, char c): \" &lt;&lt; myString &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre> <pre><code>After replace(size_t pos, size_t len, const string&amp; str): Hello, Universe!\nAfter replace(size_t pos, size_t len, const string&amp; str, size_t subpos, size_t sublen): Hello, Unive345\nAfter replace(size_t pos, size_t len, const char* s): Hello,XYZe345\nAfter replace(size_t pos, size_t len, const char* s, size_t n): HelABCZe345\nAfter replace(size_t pos, size_t len, size_t n, char c): !!!!elABCZe345\n</code></pre> <ul> <li>Find</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\nint main() {\n    // Original string\n    string myString = \"Hello, World!\";\n    // Example 1: Find the position of a substring\n    string searchString = \"World\";\n    size_t foundPosition = myString.find(searchString);\n    cout &lt;&lt; \"Position of '\" &lt;&lt; searchString &lt;&lt; \"': \" &lt;&lt; foundPosition &lt;&lt; endl;\n    // Example 2: Find the position of a substring starting from a specific position\n    size_t startPosition = 7;\n    foundPosition = myString.find(searchString, startPosition);\n    cout &lt;&lt; \"Position of '\" &lt;&lt; searchString &lt;&lt; \"' starting from position \" &lt;&lt; startPosition &lt;&lt; \": \" &lt;&lt; foundPosition &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <pre><code>Position of 'World': 7\nPosition of 'World' starting from position 7: 7\n</code></pre>"},{"location":"oop/Basic/Basic/#dynamic-memory-allocation","title":"Dynamic memory allocation","text":"<p><code>new</code> and <code>delete</code></p> <pre><code>new int;\nnew int[10];\nnew Stash;\ndelete p;\ndelete []p; //\u6307\u9488\u6307\u5411\u7684\u662f\u591a\u4e2a\u5bf9\u8c61\n</code></pre> <pre><code>// Allocate an array of integers\nint* p = new int[5];\n// Use the allocated memory\n// Deallocate the memory using delete []\ndelete [] p;\n</code></pre> <ul> <li> <p>New -- \u7533\u8bf7\u7a7a\u95f4\uff0c\u540c\u65f6\u521d\u59cb\u5316\u5bf9\u8c61</p> </li> <li> <p>It is safe to delete a <code>Null</code></p> </li> <li> <p><code>malloc</code>  returns <code>null</code> indicating not enough space</p> </li> </ul> <p><code>new</code> just alert error.</p>"},{"location":"oop/Basic/Basic/#class","title":"Class","text":""},{"location":"oop/Basic/Basic/#declaring-references","title":"Declaring references","text":"<ul> <li>Must be initialized when defined</li> </ul> <pre><code>char c;\nchar&amp; r=c;\n</code></pre> <p>For local or global variables , the initial value of the bending is required.</p> <p>In parameters lists and member varaibles , not necessary</p> <pre><code>void f(int&amp; x);\nf(y);   //initialized when function is called \n</code></pre> <p></p> <p>Restrictions</p> <ul> <li>No references to references.</li> <li>No pointers to references. (References to pointer is OK)</li> <li>No arrays of references.</li> </ul>"},{"location":"oop/Basic/Basic/#intro","title":"Intro","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\ntypedef struct point {\n    float x;\n    float y;\n    /*version1*/\n    void print(){\n        cout &lt;&lt; x &lt;&lt; \" \" &lt;&lt; y &lt;&lt; endl;\n    }\n    /*version 2*/\n    void move(int dx, int dy);\n} Point;\nvoid Point::move(int dx, int dy){\n    x += dx;\n    y += dy;\n}\n/*void print(const Point *p)\n{\n    printf(\"%d %d\\n\", p-&gt;x, p-&gt;y); // const means that the function will not change the value of the variable \n}\nvoid move(Point* p,int dx, int dy)\n{\n    p-&gt;x += dx;\n    p-&gt;y += dy;\n}*/\nint main()\n{\n    Point a;\n    a.x = 1;\n    a.y = 2;\n    a.print();\n    a.move(3, 4);\n}\n</code></pre> <pre><code>// Class\n#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\nclass Point{\n  public:\n    void init(int x,int y);\n    void move(int dx,int dy);\n    void print()const;\n  private:\n    int x;\n    int y;\n};\nvoid Point::init(int ix,int iy){\n  x=ix;\n  y=iy;\n}\nvoid Point::move(int dx,int dy){\n  x+=dx;\n  y+=dy;\n}\nvoid Point::print()const{\n  cout&lt;&lt;\"(\"&lt;&lt;x&lt;&lt;\",\"&lt;&lt;y&lt;&lt;\")\"&lt;&lt;endl;\n}\nint main()\n{\n    Point a;\n    a.init(10,20);\n    a.print();\n}\n</code></pre> <ul> <li>Take for example, the print function , How does the function knows what exactly is x and y ?</li> </ul> <pre><code>void Point::print()const{\n  cout &lt;&lt; this &lt;&lt; endl\n  cout&lt;&lt;\"(\"&lt;&lt;this-&gt;x&lt;&lt;\",\"&lt;&lt;this-&gt;y&lt;&lt;\")\"&lt;&lt;endl;\n}\n</code></pre> <p><code>this</code>  -- <code>Point* this</code> --hidden parameter</p> <p>Another example</p> <pre><code>void Point::init(int x,int y){\n  this-&gt;x=x;\n  this-&gt;y=y; \n}\n</code></pre>"},{"location":"oop/Basic/Basic/#resolver","title":"Resolver","text":"<pre><code>void S::f() {\n    ::f(); // Would be recursive otherwise!\n    ::a++; // Select the global a\n    a--; // The a at class scope\n}\n</code></pre>"},{"location":"oop/Basic/Basic/#object-oriented","title":"Object-Oriented","text":""},{"location":"oop/Basic/Basic/#constructer","title":"Constructer","text":"<ul> <li>Constructer is to initialize , not to allocate memory.</li> <li>Once there is a \"constructer\" ,you cannot initilize by <code>Point c = {10,20}</code></li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\nclass Point{\n  public:\n    Point(int deep);  //one argument\n    Point(int x,int y); //two arguments\n    Point(){x = 13,y=31;}; // no argument\n    void move(int dx,int dy);\n    void print()const;\n  private:\n    int x;\n    int y;\n};\nPoint::Point(int ix,int iy){\n  x=ix;\n  y=iy;\n}\nPoint::Point(int deep){\n  x=y=deep;\n}\nvoid Point::move(int dx,int dy){\n  x+=dx;\n  y+=dy;\n}\nvoid Point::print()const{\n  cout&lt;&lt;\"(\"&lt;&lt;x&lt;&lt;\",\"&lt;&lt;y&lt;&lt;\")\"&lt;&lt;endl;\n}\nint main()\n{\n    Point a(10,20);\n    Point c(10);//Point c = 10\n    Point d;\n    d.print();\n    a.print();\n}\n</code></pre> <ul> <li>A default constructer is one that can be called with no arguments</li> <li>If no default constructer is coded , the compiler will automatically implement one(in default version)</li> </ul>"},{"location":"oop/Basic/Basic/#initialization-vs-assignment","title":"Initialization VS assignment","text":"<pre><code>Student::Student(string s):name(s){} //initialization before constructor\n// Prefered\n</code></pre> <p>\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5728\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u4e2d\u5bf9 name \u6210\u5458\u53d8\u91cf\u8fdb\u884c\u4e86\u521d\u59cb\u5316 \u5728\u6784\u9020\u51fd\u6570\u4f53\u5185\uff0c\u6211\u4eec\u6ca1\u6709\u5bf9 name \u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\uff0c\u800c\u662f\u5728\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u4e2d\u76f4\u63a5\u5c06\u4f20\u9012\u7ed9\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570 s \u8d4b\u503c\u7ed9\u4e86 name,\u8fd9\u6837\u7684\u64cd\u4f5c\u662f\u5728\u6784\u9020\u51fd\u6570\u4f53\u6267\u884c\u4e4b\u524d\uff0c\u5373\u5728\u6784\u9020\u51fd\u6570\u88ab\u8c03\u7528\u65f6\uff0c\u5c31\u5bf9 name \u8fdb\u884c\u4e86\u521d\u59cb\u5316 \u56e0\u6b64\uff0c\u53ef\u4ee5\u8bf4\u8fd9\u662f\u201c\u521d\u59cb\u5316\uff08Initialization\uff09\u5728\u6784\u9020\u51fd\u6570\uff08Constructor\uff09\u4e4b\u524d\uff08Before\uff09\u201d\u6267\u884c\u7684\uff0c\u5373\u201cinitialization before constructor\u201d</p> <p>Assignment</p> <pre><code>Student::Student(string s) {name=s;}\n</code></pre> <ul> <li>string must have a default constructor  : (\u5148\u6784\u9020\u51fa string \u7684\u5bf9\u8c61 name, \u518d\u8d4b\u503c)</li> </ul> <p><pre><code>Student::Student(sring s){\n  name = s;\n} //assignment\n// For more constructors\n</code></pre> <pre><code>void func() {\n    int x;  // \u5728\u51fd\u6570\u5185\u90e8\u58f0\u660e\u7684\u53d8\u91cf\n                    // \u7a7a\u95f4\u5728\u51fd\u6570\u6267\u884c\u65f6\u5206\u914d\n}\nvoid func() {\n    static int x; // \u9759\u6001\u53d8\u91cf\n                              // \u7a7a\u95f4\u5728\u7a0b\u5e8f\u542f\u52a8\u65f6\u5206\u914d\n}\n</code></pre></p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nclass Student {\nprivate:\n    std::string name;\n\npublic:\n    // \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff0c\u4f7f\u7528\u6210\u5458\u521d\u59cb\u5316\u5217\u8868\u5bf9 name \u8fdb\u884c\u521d\u59cb\u5316\n    Student(std::string s) : name(s) {\n        std::cout &lt;&lt; \"Default constructor called with name: \" &lt;&lt; name &lt;&lt; std::endl;\n    }\n    // \u8f93\u51fa\u5b66\u751f\u59d3\u540d\u7684\u65b9\u6cd5\n    void display() {\n        std::cout &lt;&lt; \"Student's name: \" &lt;&lt; name &lt;&lt; std::endl;\n    }\n};\nint main() {\n    // \u521b\u5efa\u4e00\u4e2a\u540d\u4e3a \"Alice\" \u7684\u5b66\u751f\u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u8fdb\u884c\u521d\u59cb\u5316\n    Student student1(\"Alice\");\n    // \u8c03\u7528 display \u65b9\u6cd5\u663e\u793a\u5b66\u751f\u7684\u59d3\u540d\n    student1.display();\n    return 0;\n}\n</code></pre> <ul> <li>\u5728 C++ \u4e2d\uff0c<code>const</code> \u6210\u5458\u53d8\u91cf\u4e0d\u80fd\u88ab\u8d4b\u503c\uff0c\u53ea\u80fd\u5728\u521d\u59cb\u5316\u65f6\u8d4b\u503c\u3002\u8fd9\u91cc\u8be6\u7ec6\u89e3\u91ca\u4e00\u4e0b\u5173\u4e8e <code>const</code> \u6210\u5458\u53d8\u91cf\u521d\u59cb\u5316\u7684\u4e24\u79cd\u65b9\u5f0f\uff1a</li> </ul> <ol> <li> <p>\u7c7b\u5185\u76f4\u63a5\u521d\u59cb\u5316\uff1a    - \u53ef\u4ee5\u5728\u58f0\u660e <code>const</code> \u6210\u5458\u53d8\u91cf\u65f6\u76f4\u63a5\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u4f8b\u5982 <code>const float x = 1.0</code>\u3002\u4f46\u662f\uff0c\u8fd9\u6837\u505a\u7684\u7ed3\u679c\u662f\u6240\u6709\u5bf9\u8c61\u7684\u8be5 <code>const</code> \u6210\u5458\u53d8\u91cf\u90fd\u5c06\u62e5\u6709\u76f8\u540c\u7684\u503c\uff0c\u65e0\u6cd5\u9488\u5bf9\u6bcf\u4e2a\u5bf9\u8c61\u5355\u72ec\u521d\u59cb\u5316\u3002    - \u793a\u4f8b\uff1a      <pre><code>class Point {\nprivate:\n    const float x = 1.0;\n    const float y = 1.0;\npublic:\n    Point() {}\n};\n</code></pre>      \u8fd9\u79cd\u65b9\u5f0f\u7684\u9650\u5236\u662f\u6240\u6709 <code>Point</code> \u5bf9\u8c61\u7684 <code>x</code> \u548c <code>y</code> \u90fd\u662f 1.0\uff0c\u65e0\u6cd5\u5728\u521b\u5efa\u5bf9\u8c61\u65f6\u8d4b\u4e88\u4e0d\u540c\u7684\u503c\u3002</p> </li> <li> <p>\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u5217\u8868\uff1a    - \u53e6\u4e00\u79cd\u521d\u59cb\u5316 <code>const</code> \u6210\u5458\u53d8\u91cf\u7684\u65b9\u5f0f\u662f\u4f7f\u7528\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u3002\u8fd9\u79cd\u65b9\u5f0f\u5141\u8bb8\u5728\u521b\u5efa\u5bf9\u8c61\u65f6\u4e3a <code>const</code> \u6210\u5458\u53d8\u91cf\u8d4b\u4e88\u4e0d\u540c\u7684\u503c\u3002    - \u793a\u4f8b\uff1a      <pre><code>class Point {\nprivate:\n    const float x, y;\npublic:\n    Point(float xa = 0.0, float ya = 0.0) : x(xa), y(ya) {}\n};\n</code></pre>      \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c<code>Point</code> \u7c7b\u6709\u4e24\u4e2a <code>const</code> \u6210\u5458\u53d8\u91cf <code>x</code> \u548c <code>y</code>\u3002\u6784\u9020\u51fd\u6570\u4f7f\u7528\u521d\u59cb\u5316\u5217\u8868\u6765\u521d\u59cb\u5316\u8fd9\u4e24\u4e2a <code>const</code> \u53d8\u91cf\u3002\u8fd9\u6837\uff0c\u521b\u5efa\u5bf9\u8c61\u65f6\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u5bf9\u8c61\u7684 <code>x</code> \u548c <code>y</code> \u8d4b\u4e88\u4e0d\u540c\u7684\u503c\u3002      <pre><code>Point p1(1.0, 2.0);  // p1 \u7684 x \u662f 1.0\uff0cy \u662f 2.0\nPoint p2(3.0, 4.0);  // p2 \u7684 x \u662f 3.0\uff0cy \u662f 4.0\n</code></pre></p> </li> </ol> <p>\u8be6\u7ec6\u89e3\u91ca\uff1a</p> <p>\u5728\u4e0a\u8ff0 <code>Point</code> \u7c7b\u4e2d\uff0c\u5b9a\u4e49\u4e86\u4e24\u4e2a <code>const</code> \u6210\u5458\u53d8\u91cf <code>x</code> \u548c <code>y</code>\u3002\u7531\u4e8e\u5b83\u4eec\u662f <code>const</code> \u7684\uff0c\u6240\u4ee5\u4e00\u65e6\u88ab\u521d\u59cb\u5316\u540e\uff0c\u5c31\u4e0d\u80fd\u518d\u4fee\u6539\u5176\u503c\u3002\u4e3a\u4e86\u80fd\u591f\u7075\u6d3b\u5730\u4e3a\u6bcf\u4e2a\u5bf9\u8c61\u7684 <code>x</code> \u548c <code>y</code> \u8d4b\u503c\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\uff1a</p> <ul> <li>\u6784\u9020\u51fd\u6570 <code>Point(float xa = 0.0, float ya = 0.0)</code> \u5b9a\u4e49\u4e86\u4e24\u4e2a\u53c2\u6570 <code>xa</code> \u548c <code>ya</code>\uff0c\u5e76\u4e14\u7ed9\u5b83\u4eec\u63d0\u4f9b\u4e86\u9ed8\u8ba4\u503c <code>0.0</code>\u3002</li> <li>\u521d\u59cb\u5316\u5217\u8868 <code>: x(xa), y(ya)</code> \u5728\u6784\u9020\u51fd\u6570\u4f53\u6267\u884c\u4e4b\u524d\u5c06\u53c2\u6570 <code>xa</code> \u548c <code>ya</code> \u7684\u503c\u5206\u522b\u8d4b\u7ed9 <code>const</code> \u6210\u5458\u53d8\u91cf <code>x</code> \u548c <code>y</code>\u3002</li> <li>\u8fd9\u79cd\u65b9\u6cd5\u786e\u4fdd\u4e86\u6bcf\u4e2a\u5bf9\u8c61\u5728\u521b\u5efa\u65f6\u90fd\u53ef\u4ee5\u6709\u4e0d\u540c\u7684 <code>x</code> \u548c <code>y</code> \u503c\uff0c\u800c\u4e0d\u662f\u6240\u6709\u5bf9\u8c61\u90fd\u5177\u6709\u76f8\u540c\u7684 <code>const</code> \u6210\u5458\u503c\u3002</li> </ul>"},{"location":"oop/Basic/Basic/#destructor","title":"Destructor\u300c\u6790\u6784\u300d","text":"<ul> <li> <p>Destructor is called automatically by the compiler when the object goes out of scope</p> </li> <li> <p>The order of destruction is the reverse of construction.</p> </li> <li> <p>Scope is delimited by curly braces<code>{ }</code>.</p> </li> <li> <p>Upon entering a function, space for all local variables is allocated,but constructors are not invoked until the specific constructor line is executed. </p> </li> </ul> <p>Similarly, when entering a <code>switch case</code> statement, space for objects is generated but not constructed, which may lead to issues during destruction.</p> <pre><code>void f(int i){\n  if(i&lt;10){\n    goto jump1; //Error: goto bypasses init\n  }\n  X x1; //Constructor\n  jump1:\n    switch(i){\n      case 1:\n        X x2;//Constructor\n      case 2 : //Error: case bypasses init\n        X x3;//Constructor\n        break;\n    }\n}\n</code></pre> <ul> <li>Memory for <code>x1</code>(<code>x2</code>) is allocated , but not initialized , so destruction will fail</li> </ul>"},{"location":"oop/Basic/Basic/#definitions-of-a-class","title":"Definitions of a class","text":"<ul> <li>In C++, separated <code>.h</code> and <code>.cpp</code> files are used to define one class.</li> <li>Class declaration and prototypes in that class are in the header file ( <code>.h</code> ).</li> <li> <p>All the bodies of these functions are in the source file (<code>.cpp</code>)</p> </li> <li> <p>Standard header file sturcture   <pre><code>#ifnedf HEADER_FLAG\n#define HEADER_FLAG\n//Type declaration here...\n#endif\n</code></pre> <code>#include</code> is to insert the included file into the <code>.cpp</code> file at where the <code>#include</code> statement is.</p> </li> <li><code>#include \"xx.h\"</code> : search in the current directory firstly, then the directories   declared somewhere</li> <li><code>#include &lt;xx.h&gt;</code> : search in the specified directories</li> <li><code>#include &lt;xx&gt;</code> : same as <code>#include &lt;xx.h&gt;</code></li> </ul>"},{"location":"oop/Basic/Basic/#example","title":"Example","text":"<p><code>NumberDisplay.h</code> <pre><code>#ifndef _NUMBER_DISPLAY_HEAD_\n#define _NUMBER_DISPLAY_HEAD_\n#include&lt;string&gt;\nclass NumberDisplay{\n  private:\n    int limit;\n    int value;\n  public:\n  NumberDisplay(int limit);\n  int increase();\n  std::string toString();\n}\n#endif\n</code></pre> <code>NumberDisplay.cpp</code> <pre><code>#include \"NumberDisplay.h\"\n#include&lt;string&gt;\n#include&lt;iostream&gt;\n\nNumberDisplay::NumberDisplay(int limit){\n  value = 0;\n  this-&gt;limit = limit;\n}\n/**\n * @return 1 for turn over\n*/\nint NumberDisplay::increase():{\n  value++;\n  if(value == limit){\n    value = 0;\n    return 1;\n  }\n  return 0;\n}\nstd::string NumberDisplay::toString(){\n  if(value&lt;10){\n    return \"0\"+value;\n  }\n  else{\n    return \"\"+value;\n  }\n}\n#ifdef _TEST_ND_\n#include&lt;iostream&gt;\nusing namespace std;\nint main(){\n  NumberDisplay d(10);\n  for(int i=9;i&lt;20;i++){\n    d.increase();\n    cout &lt;&lt; d.tostring()&lt;&lt;endl;  \n  }\n\n}\n#endif\n</code></pre> <code>clock.h</code> <pre><code>#ifndef _CLOCK_HEAD_\n#define _CLOCK_HEAD_\n#include \"NumberDisplay.h\"\nclass Clock{\n  private:\n    NumberDisplay hour;\n    NumberDisplay minute;\n  public:\n     Clock();\n     void dida();\n}\n</code></pre> <code>clock.cpp</code> <pre><code>#include \"clock.h\"\n#include&lt;iostream&gt;\nusing namespace std;\nClock::Clock():\n  hour(24),minute(60) //initialization list\n{\n\n}\nvoid Clock::dida(){\n  if(minute.increase()){\n    hour.increase\n  }\n  cout &lt;&lt; hour.toString();\n  cout &lt;&lt; \":\";\n  cout &lt;&lt; minute.toString();\n  cout &lt;&lt; endl;\n}\n</code></pre> * What if ?  <code>clock.h</code></p> <pre><code>#ifndef _CLOCK_HEAD_\n#define _CLOCK_HEAD_\n//#include\"NumberDisplay.h\"\nclass NumberDisplay\nclass Clock{\n  private:\n    NumberDisplay *hour;\n    NumberDisplay *minute;\n  public:\n     Clock();\n     void dida();\n}\n</code></pre> <p>Reference</p> <p>\u5f15\u7528\u548c\u6307\u9488\u662fC++\u4e2d\u4e24\u79cd\u4e0d\u540c\u7684\u6982\u5ff5\uff0c\u5b83\u4eec\u6709\u7740\u76f8\u4f3c\u7684\u529f\u80fd\uff0c\u4f46\u5728\u8bed\u4e49\u548c\u4f7f\u7528\u65b9\u5f0f\u4e0a\u6709\u4e00\u4e9b\u91cd\u8981\u7684\u533a\u522b\u3002</p>"},{"location":"oop/Basic/Basic/#_1","title":"\u533a\u522b\u4e00\uff1a\u8bed\u6cd5\u548c\u58f0\u660e","text":"<ul> <li> <p>\u5f15\u7528\uff1a\u4f7f\u7528 <code>&amp;</code> \u7b26\u53f7\u6765\u58f0\u660e\uff0c\u5fc5\u987b\u5728\u521d\u59cb\u5316\u65f6\u7ed1\u5b9a\u5230\u4e00\u4e2a\u5df2\u5b58\u5728\u7684\u53d8\u91cf\u6216\u5bf9\u8c61\u3002\u4e00\u65e6\u521d\u59cb\u5316\uff0c\u5f15\u7528\u5c06\u4e00\u76f4\u6307\u5411\u8be5\u53d8\u91cf\u6216\u5bf9\u8c61\uff0c\u5e76\u4e14\u4e0d\u80fd\u91cd\u65b0\u7ed1\u5b9a\u5230\u5176\u4ed6\u5bf9\u8c61\u3002</p> </li> <li> <p>\u6307\u9488\uff1a\u4f7f\u7528 <code>*</code> \u7b26\u53f7\u6765\u58f0\u660e\uff0c\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u6307\u5411\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u6307\u5411\u7a7a\u503c\uff08nullptr\uff09\u3002\u6307\u9488\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u88ab\u91cd\u65b0\u8d4b\u503c\uff0c\u6307\u5411\u4e0d\u540c\u7684\u5bf9\u8c61\u6216\u7a7a\u503c\u3002</p> </li> </ul> <pre><code>int num = 10;\nint&amp; ref = num; // \u5f15\u7528\nint* ptr = &amp;num; // \u6307\u9488\n</code></pre>"},{"location":"oop/Basic/Basic/#_2","title":"\u533a\u522b\u4e8c\uff1a\u7a7a\u503c","text":"<ul> <li> <p>\u5f15\u7528\uff1a\u5f15\u7528\u4e0d\u80fd\u6307\u5411\u7a7a\u503c\uff0c\u5fc5\u987b\u5728\u521d\u59cb\u5316\u65f6\u7ed1\u5b9a\u5230\u4e00\u4e2a\u5df2\u5b58\u5728\u7684\u5bf9\u8c61\u3002</p> </li> <li> <p>\u6307\u9488\uff1a\u6307\u9488\u53ef\u4ee5\u6307\u5411\u7a7a\u503c\uff08nullptr\uff09\uff0c\u8868\u793a\u4e0d\u6307\u5411\u4efb\u4f55\u5bf9\u8c61\u3002</p> </li> </ul> <pre><code>int&amp; ref = null; // \u9519\u8bef\uff0c\u5f15\u7528\u4e0d\u80fd\u6307\u5411\u7a7a\u503c\nint* ptr = nullptr; // \u6307\u9488\u6307\u5411\u7a7a\u503c\n</code></pre>"},{"location":"oop/Basic/Basic/#_3","title":"\u533a\u522b\u4e09\uff1a\u64cd\u4f5c\u7b26","text":"<ul> <li> <p>\u5f15\u7528\uff1a\u4f7f\u7528\u5f15\u7528\u65f6\uff0c\u4e0d\u9700\u8981\u4f7f\u7528\u89e3\u5f15\u7528\u64cd\u4f5c\u7b26\uff08<code>*</code>\uff09\uff0c\u76f4\u63a5\u4f7f\u7528\u5f15\u7528\u672c\u8eab\u5373\u53ef\u8bbf\u95ee\u76ee\u6807\u5bf9\u8c61\u3002</p> </li> <li> <p>\u6307\u9488\uff1a\u9700\u8981\u4f7f\u7528\u89e3\u5f15\u7528\u64cd\u4f5c\u7b26\uff08<code>*</code>\uff09\u6765\u8bbf\u95ee\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61\u3002</p> </li> </ul> <pre><code>int num = 10;\nint&amp; ref = num; // \u5f15\u7528\nint* ptr = &amp;num; // \u6307\u9488\n\nint value1 = ref; // \u76f4\u63a5\u4f7f\u7528\u5f15\u7528\nint value2 = *ptr; // \u4f7f\u7528\u6307\u9488\u9700\u8981\u89e3\u5f15\u7528\n</code></pre>"},{"location":"oop/Basic/Basic/#_4","title":"\u533a\u522b\u56db\uff1a\u7a7a\u95f4\u5360\u7528","text":"<ul> <li> <p>\u5f15\u7528\uff1a\u5728\u5185\u5b58\u4e2d\u4e0d\u4f1a\u5206\u914d\u989d\u5916\u7684\u7a7a\u95f4\uff0c\u5b83\u53ea\u662f\u539f\u53d8\u91cf\u7684\u522b\u540d\u3002</p> </li> <li> <p>\u6307\u9488\uff1a\u5728\u5185\u5b58\u4e2d\u5360\u7528\u989d\u5916\u7684\u7a7a\u95f4\u6765\u5b58\u50a8\u6307\u9488\u53d8\u91cf\u672c\u8eab\u7684\u5730\u5740\u3002</p> </li> </ul>"},{"location":"oop/Basic/Basic/#_5","title":"\u603b\u7ed3","text":"<p>\u5f15\u7528\u548c\u6307\u9488\u5728C++\u4e2d\u90fd\u6709\u5176\u72ec\u7279\u7684\u7528\u9014\u548c\u4f18\u52bf\u3002\u5f15\u7528\u66f4\u5b89\u5168\u3001\u66f4\u76f4\u89c2\uff0c\u9002\u7528\u4e8e\u7b80\u5355\u7684\u522b\u540d\u548c\u4f20\u9012\u53c2\u6570\u3002\u6307\u9488\u66f4\u7075\u6d3b\uff0c\u53ef\u4ee5\u6307\u5411\u591a\u4e2a\u5bf9\u8c61\uff0c\u53ef\u4ee5\u8fdb\u884c\u7a7a\u503c\u68c0\u67e5\uff0c\u9002\u7528\u4e8e\u9700\u8981\u52a8\u6001\u5206\u914d\u5185\u5b58\u6216\u8ddf\u8e2a\u5bf9\u8c61\u5730\u5740\u7684\u60c5\u51b5\u3002\u9009\u62e9\u4f7f\u7528\u5f15\u7528\u8fd8\u662f\u6307\u9488\u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u9700\u6c42\u548c\u8bbe\u8ba1\u8003\u8651\u3002</p> <p></p>"},{"location":"oop/Container/Container/","title":"Container & Function","text":"<p> <p>Reference : https://note.hobbitqia.cc/OOP/oop3/#for-each-loop</p>"},{"location":"oop/Container/Container/#container","title":"Container","text":"<p>Collection objects are objects that can store an arbitrary number of other objects.</p> <ul> <li>\u5728 C++ \u4e2d\uff0c\u5bb9\u5668\u5728 STL \u4e2d</li> <li>STL = Standard Template Library</li> </ul>"},{"location":"oop/Container/Container/#vector","title":"Vector","text":""},{"location":"oop/Container/Container/#example1","title":"Example.1","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n#include&lt;vector&gt;\nint main(){\n  vector&lt;int&gt; x;\n  for (int a=0;a&lt;1000;a++){\n    x.push_back(a);\n  }\n  vector&lt;int&gt;::iterator p;\n  for(p=x.begin();p&lt;x.end();p++)\n        cout &lt;&lt; *p &lt;&lt; \" \";\n  return 0; \n}\n</code></pre> <pre><code>int main(){\n  vector&lt;int&gt; x;\n  for(int a=0;a&lt;100;a++){\n    x.push_back(a);\n  }\n  cout &lt;&lt; x.size()&lt;&lt;endl\n    vector&lt;int&gt;::iterator p;\n  for(auto k : x){\n    cout &lt;&lt; k &lt;&lt; \" \";\n  }\n  cout &lt;&lt; endl;\n  return x;\n}\n</code></pre> <ul> <li> <p>iterator : class inside vector</p> </li> <li> <p>generic classes <code>vector&lt;string&gt; notes;</code></p> </li> </ul> <p>Have to specify two types</p> <p>It is able to increase its internal capacity as required: as more items are added, it simply makes enough room for them</p> <p>It keeps its own private count of how many items it is currently storing. Its size method returns the number of objects currently stored in it</p> <p>It maintains the order of items you insert into it.You can later retrieve them in the same order.</p>"},{"location":"oop/Container/Container/#basic-vector-operations","title":"Basic Vector Operations","text":"<ul> <li>Constructors</li> </ul> <pre><code>vector&lt;Elem&gt;c\nvector&lt;Elem&gt;c1(c2)\n</code></pre> <ul> <li>Simple Methods</li> </ul> <pre><code>V.size()\nV.empty()\nV.swap(v2)\n</code></pre> <ul> <li>Iterators</li> </ul> <pre><code>I.begin()\nI.end()\n</code></pre> <ul> <li>Element access</li> </ul> <pre><code>V.at(index)\nV[index]\nV.front()\nV.back()\n</code></pre> <ul> <li>Add/Remove/Find</li> </ul> <pre><code>V.push_back(e)\nV.pop_back(e)\nV.insert(pos,e)\nV.erase(pos)\nV.clear()\nV.find(first,last,item)\n</code></pre> <ul> <li>Insert &amp; erase -- use iterator</li> </ul>"},{"location":"oop/Container/Container/#example2","title":"Example.2","text":"<pre><code>int main(){\n  vector&lt;Student&gt; ss //Student is a class\n  Student s(1);\n  ss.push_back(s);\n  s.x = 10; // does not change ss[0]\n}\n</code></pre> <pre><code>int main(){\n  vector&lt;Student*&gt; ss \n  Student s(1);\n  ss.push_back(&amp;s);\n  s.x = 10; //will change(obviously)\n}\n</code></pre>"},{"location":"oop/Container/Container/#operations","title":"Operations","text":"<ul> <li>\u5bf9\u4e8e\uff0c\u6bd4\u5982<code>&lt;vector&gt;</code> \u53ef\u4ee5\u5411\u4efb\u610f\u4e0b\u6807\u8d4b\u503c\uff0c\u4e0d\u4f1a\u62a5\u9519\uff0c\u4f46\u662f\u8fd9\u4e0d\u4f1a\u6539\u53d8<code>.size() .back()</code>\u7b49 \uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u6211\u4eec\u8981\u7528<code>push_back()</code>\u7b49\u53bbinsert</li> </ul>"},{"location":"oop/Container/Container/#list","title":"List","text":"<ul> <li>Dif : <code>p!=s.end()</code></li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n#include&lt;list&gt;\nint main(){\n    list &lt;int&gt; L;\n    for(int i=0;i&lt;5;i++){\n        L.push_back(i);\n    }\n    L.erase(++L.begin());\n    copy(L.begin(),L.end(),ostream_iterator&lt;int&gt;(cout,\",\"));\n}\n</code></pre> <p>\u901a\u5e38\u7528vector \uff1a \u66f4\u8282\u7ea6\u7a7a\u95f4,\u9664\u975e\u9700\u8981\u5927\u91cf\u589e\u52a0\uff0c\u5220\u9664</p>"},{"location":"oop/Container/Container/#maps","title":"Maps","text":"<p>Hash</p> <pre><code>#include &lt;map&gt;\nmap&lt;long,int&gt; root;\nroot[4] = 2;\nroot[1000000] = 1000;\nlong l;\ncin &gt;&gt; l;\nif (root.count(l))\n    cout&lt;&lt;root[l]\nelse cout&lt;&lt;\u201cNot perfect square\u201d;\n</code></pre>"},{"location":"oop/Container/Container/#pitfalls","title":"Pitfalls","text":"<pre><code>if ( my_list.count() == 0 ) { ... } // Slow\nif ( my_list.empty() ) {...} // Fast\n</code></pre> <ul> <li>Erase for Iterator !</li> </ul> <pre><code>list&lt;int&gt; L;\nlist&lt;int&gt;::iterator li;\nli = L.begin();\nL.erase(li);\n++li; // WRONG\n// Use return value of erase to advance\nli = L.erase(li); // RIGHT\n</code></pre> <ul> <li>Inadvertently inserting into <code>map&lt;&gt;</code></li> </ul> <pre><code>if (foo[\"bob\"]==1)\n//silently created entry \u201cbob\u201d\n//Solutions: Use count() to check for a key without creating a new entry. if ( foo.count(\"bob\") )\n</code></pre>"},{"location":"oop/Container/Container/#function","title":"Function","text":""},{"location":"oop/Container/Container/#function-overloading","title":"Function Overloading","text":"<pre><code>void print(char * str, int width); // #1 \nvoid print(double d, int width); // #2 \nvoid print(long l, int width); // #3 \nvoid print(int i, int width); // #4 \nvoid print(char *str); // #5 \nprint(\"Pancakes\", 15); \nprint(\"Syrup\"); \nprint(1999.0, 10); \nprint(1999, 12); \nprint(1999L, 15);\n</code></pre> <ul> <li>Can go wrong</li> </ul>"},{"location":"oop/Container/Container/#default-arguments","title":"Default arguments","text":"<p>A default argument is a value given in the declaration that the compiler automatically inserts if you don\u02bct provide a value in the function call.</p> <pre><code>int harpo(int n, int m = 4, int j = 5);\nint chico(int n, int m = 6, int j); // illegal\n//To define a function with an argument list, defaults must be added from right to left.\nint groucho(int k = 1, int m = 2, int n = 3);\nbeeps = harpo(2);\nbeeps = harpo(1,8);\nbeeps = harpo(8,7,6);\n</code></pre> <ul> <li>Default arguments Cannot write in the def part,  but the \u51fd\u6570\u58f0\u660e\uff01 part.</li> </ul> <pre><code>void f(int i, int j = 10);\nint main()\n{ ...\n}\nvoid f(int i, int j){\n    ...\n}\n// USE IN THIS WAY\n</code></pre>"},{"location":"oop/Container/Container/#friend-access-control","title":"Friend [Access Control]","text":"<pre><code>struct X{\n  private:\n    int x;\n  public :\n    void initialize();\n    friend void g(X*,int);\n    friend void Y::f(X*);\n    friend struct Z;\n    friend void h();\n};\n</code></pre>"},{"location":"oop/Container/Container/#overhead-for-a-function-call","title":"Overhead for a function call","text":""},{"location":"oop/Container/Container/#inline-functions","title":"Inline Functions","text":"<ul> <li>An inline function is expanded in place , like a preprocessor macro , so the overhead of the function call is eliminated.</li> <li>Def for inline is \"Actually \u58f0\u660e\"</li> <li>\u5f53\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u7f16\u8bd1\u5668\u628a\u51fd\u6570\u66ff\u6362\u5230\u5b9e\u9645\u4f4d\u7f6e</li> <li>\u6574\u4e2ainline\u51fd\u6570\u653e\u5165\u5934\u6587\u4ef6</li> <li>\u5982\u679c\u653e\u5728cpp\u91cc\uff0c\u90a3\u4e48\u53ea\u80fdlocal\u4f7f\u7528</li> <li>\u5185\u8054\u51fd\u6570\u5e94\u5728\u5934\u6587\u4ef6\u4e2d\u5b9a\u4e49\uff0c\u4ee5\u786e\u4fdd\u5728\u6240\u6709\u4f7f\u7528\u5b83\u7684\u7ffb\u8bd1\u5355\u5143\uff08\u7f16\u8bd1\u5355\u5143\uff09\u4e2d\u90fd\u80fd\u770b\u5230\u51fd\u6570\u4f53\u3002</li> <li>\u9012\u5f52\u51fd\u6570\u4e00\u822c\u4e0d\u9002\u5408\u5185\u8054\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u65e0\u6cd5\u9884\u6d4b\u9012\u5f52\u6df1\u5ea6\u3002</li> <li>\u5185\u8054\u51fd\u6570\u4e0d\u5e94\u8fc7\u5927\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u4ee3\u7801\u81a8\u80c0\uff0c\u5931\u53bb\u5185\u8054\u5e26\u6765\u7684\u6027\u80fd\u63d0\u5347\u3002</li> </ul> <pre><code>inline int f(int i) {\n    return i*2;\n}\nmain() {\n    int a=4;\n    int b = f(a);   // become b = a * 2;\n}\n</code></pre> <pre><code>// .h File!!!\nclass Point{\n  ...\n  public:\n    inline void print(string &amp; msg = \"\");\n};\ninline void Point::print(string &amp; msg = \"\"){\n  ...\n}\n</code></pre> <ul> <li>While \u53ef\u6267\u884c\u7a0b\u5e8fsize \u53d8\u5927 tradoff for effectiveness</li> <li>Better for \u5b8fmacro  \uff1acheck</li> <li>Compiler will automatically do inline or undo inline</li> </ul>"},{"location":"oop/Container/Container/#tradeoff","title":"Tradeoff","text":"<ul> <li>\u5c06\u6210\u5458\u51fd\u6570\u7684\u5b9a\u4e49\u5199\u5728\u58f0\u660e\u5185\uff0c\u5c31\u4f1a\u81ea\u52a8 inline. \u4e5f\u53ef\u4ee5\u5728 body \u7684\u5730\u65b9\u52a0\u4e0a inline.   <pre><code>class Cup {\n    int color;\npublic:\n    int getColor() { return color; }\n    void setColor(int color) {\n        this-&gt;color = color;\n    }\n};\n</code></pre></li> </ul>"},{"location":"oop/Container/Container/#const","title":"Const","text":"<p><code>const int a = 6</code>  -- <code>not changable variable</code></p> <ul> <li>value must be initialized. <code>const int bufsize = 1024;</code></li> <li> <p>Unless you make an explicit extern declaration , like <code>extern const int bufsize;</code></p> </li> <li> <p>Compiler to make sure that it will not be changed.</p> </li> </ul> <p>Connot be optimized : \uff08remain variables\uff09</p> <ul> <li>Global variables.</li> <li>\u51fd\u6570\u53c2\u6570</li> <li>\u6210\u5458\u53d8\u91cf</li> </ul> <pre><code>const int x = 123;  // const, literal\nx = 27;     // illegal!\nx++;    // illegal!\nint y = x;  // ok, copy const to non-const\ny = x;  // ok, same thing\nconst int z = y;    // ok, const is safer\n</code></pre> <pre><code>const int i[] = { 1, 2, 3, 4 };\nfloat f[i[3]]; // Illegal(in C++98)\nstruct S { int i, j; };\nconst S s[] = { { 1, 2 }, { 3, 4 } };\ndouble d[s[1].j]; // Illegal\n</code></pre> <ul> <li>It is possible to use <code>const</code> for aggregates, but storage will be allocated. In these situations,<code>const</code> means \"a piece of storage that cannot be changed.\" </li> </ul> <p>However,the value cannot be used at compile time because the compiler is not required to know the contents of the storage at compile time.</p>"},{"location":"oop/Container/Container/#pointer","title":"Pointer","text":"<pre><code>char * const q = \"abc\"; // q is const\n*q = 'c'; // ERROR\n// char a[] = \"abc\"; *q = 'c' is ok.\nq++; // ERROR\nconst char *p = \"ABCD\"; // (*p) is a const char\n*p = 'b'; // ERROR! (*p) is the const\n</code></pre> <ul> <li>Quiz</li> </ul> <pre><code>string p1(\"Fred\");\nconst string* p = &amp;p1; // p1 cannot be changed through p.\nstring const* p = &amp;p1; // like the first one.\nstring *const p = &amp;p1; // p cannot be changed.only point to p1.\n</code></pre>"},{"location":"oop/Container/Container/#string-literals","title":"String Literals","text":"<pre><code>char *s = \"Hello\"; //can be compile but bus error because actually const char *s\n// Add const compile will not pass.\ns[0] = 'K';\nprintf(\"%s\\n\",s);\n// Write in an array\nchar s[] = \"Hello, world!\";\n</code></pre>"},{"location":"oop/Container/Container/#const-object","title":"Const Object","text":"<pre><code>const Currency the_raise(42, 38);\n</code></pre> <p>Compiler Will ERROR:</p> <ul> <li>Public member variable</li> <li>its member function will change the variable</li> </ul> <p>Thus,when we write all  the member functions,SPECIFY CONST! For Compiler to know if it will change the value of member variables!</p> <pre><code>int Date::set_day(int d) {\n    //...error check d here...\n    day = d; // ok, non-const so can modify\n}\nint Date::get_day() const {\n    day++; // ERROR modifies data member\n    set_day(12); // ERROR calls non-const member\n    return day; // ok\n}\n</code></pre> <ul> <li><code>const</code> \u5b9a\u4e49\u7684\u5bf9\u8c61\uff0c\u53ea\u80fd\u8c03\u7528\u5e26 <code>const</code> \u5c5e\u6027\u7684\u6210\u5458\u51fd\u6570\u3002</li> <li> <p><code>const</code> \u5fc5\u987b\u4fdd\u8bc1\u6210\u5458\u53d8\u91cf\u6709\u521d\u59cb\u503c\uff01\u9ed8\u8ba4\u6784\u9020\u51fd\u6570.</p> </li> <li> <p>Overload (const can distinguish the two functions.)\uff0c\u4f1a\u6839\u636e\u5bf9\u8c61\u8c03\u7528\u65f6\u662f\u5426 <code>const</code> \u6765\u51b3\u5b9a\u8c03\u7528\u54ea\u4e2a\u6210\u5458\u51fd\u6570</p> </li> </ul> <p>\u4e8b\u5b9e\u4e0a <code>const</code> \u540e\u7684\u6210\u5458\u51fd\u6570\u53c2\u6570\uff0c\u76f8\u5f53\u4e8e <code>const A *this</code>, \u800c\u4e0d\u52a0 const \u5c31\u53ea\u662f <code>A *this</code>.</p> <p><code>const</code> \u4f5c\u7528\u5728\u9690\u85cf\u53c2\u6570 <code>A* this</code></p> <pre><code>void f() const;\nvoid f();\n</code></pre> <ul> <li>member of class is constant : must be initialized by the constructor(const) or the C++11 way</li> </ul>"},{"location":"oop/Container/Container/#static","title":"Static","text":"<ul> <li>\u9759\u6001\u672c\u5730\u53d8\u91cf\u5b9e\u9645\u4e0a\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u88ab\u5b58\u50a8\u5728\u9759\u6001\u5185\u5b58\u4e2d</li> </ul> <p>\u53ea\u5728\u7b2c\u4e00\u6b21\u8bbf\u95ee[\u53ea\u5728\u7b2c\u4e00\u6b21\u88ab\u6267\u884c\u5230\u7684\u65f6\u5019]\u65f6\u88ab\u6784\u9020</p> <p>\u51fa\u73b0\u5728\u5168\u5c40\u53d8\u91cf/\u51fd\u6570\u524d\uff0c\u8868\u793a\u8bbf\u95ee\u9650\u5236\uff0c\u53ea\u6709\u5f53\u524d\u6587\u4ef6\u53ef\u4ee5\u8bbf\u95ee</p> <p>\u5728\u7a0b\u5e8f\u7ed3\u675f\u540e\u6790\u6784</p> <ul> <li>Global Objects</li> </ul> <p>\u5168\u5c40\u53d8\u91cf\u7684\u6784\u9020\u53d1\u751f\u5728 <code>main()</code> \u4e4b\u524d\uff0c\u5728 <code>main()</code> \u6216\u8005 <code>exit()</code> \u4e4b\u540e\u6790\u6784   \u4f46\u662f\u4e0d\u540c\u7f16\u8bd1\u5355\u5143\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u5982\u679c\u5b58\u5728\u4f9d\u8d56\u5173\u7cfb\uff0c\u4f46\u8fd9\u662f\u65e0\u6cd5\u4fdd\u8bc1\u7684</p> <p>\u6700\u597d\u4e0d\u5728C++\u4f7f\u7528global variable</p> <ul> <li>\u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u9759\u6001\u672c\u5730\u53d8\u91cf\u662f\u4e00\u6837\u7684</li> </ul> <p>\u8bbf\u95ee\u53d7\u9650\uff0c\u9650\u4e8e\u7c7b\u5185\u90e8\uff0c\u5b9e\u9645\u4e0a\u662f\u5168\u5c40\u53d8\u91cf\u3002</p> <p>\u5728\u8fd9\u4e2a\u7c7b\u5185\u6240\u6709\u7684\u5bf9\u8c61\u90fd\u7ef4\u6301\u76f8\u540c\u7684\u503c\uff0c\u5bf9\u8c61 A \u4fee\u6539\u4e86\u90a3\u4e48\u5bf9\u8c61 B \u7684\u8fd9\u4e2a\u53d8\u91cf\u7684\u503c\u4e5f\u4f1a\u6539\u53d8</p> <ul> <li>\u9759\u6001\u6210\u5458\u51fd\u6570\u6ca1\u6709 this, \u4e0d\u80fd\u8c03\u7528\u975e\u9759\u6001\u6210\u5458\u53d8\u91cf\uff0c\u4e5f\u4e0d\u80fd\u8bbf\u95ee\u975e\u9759\u6001\u51fd\u6570</li> </ul> <p>\u53ef\u4ee5\u5728\u6ca1\u6709\u521b\u5efa\u7c7b\u7684\u5bf9\u8c61\u7684\u65f6\u5019\u5c31\u80fd\u8c03\u7528\u9759\u6001\u6210\u5458\u51fd\u6570</p> <pre><code>#ifndef _STAT_MEM_\n#define _STAT_MEM_\n\nclass StatMem{\npublic:\n  int getHeight(){return m_h;}\n  void setHeight(int i){m_h = i}\n  int getWeight(){return m_w;}\n  void setWeight(int i){m_w = i;}\n\n  static int m_h;\n  int m_w;\n}\n#endif \n</code></pre> <ul> <li>\u4e00\u4e2a\u9759\u6001\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u5fc5\u987b\u5728\u5934\u6587\u4ef6\u5bf9\u5e94\u7684.cpp\u4e2d\u91cd\u65b0</li> </ul> <pre><code>#include\"StatMem.h\"\nint StatMem::m_h\n</code></pre> <p>\u200b   \u4e14\u4e0d\u80fd\u518d\u52a0<code>static</code></p>"},{"location":"oop/Container/Container/#namespace","title":"Namespace","text":"<p>Example</p> <pre><code>void main() {\n    using MyLib::foo;\n    using MyLib::Cat;\n    foo();\n    Cat c;\n    c.Meow();\n}\n</code></pre> <pre><code>// Mylib.h\nnamespace XLib {\n    void x();\n    void y();\n}\nnamespace YLib {\n    void y();\n    void z();\n}\n\n//Main\nvoid main() {\n    using namespace XLib;\n    using namespace YLib;\n    x(); // OK\n    y(); // Error: ambiguous\n    XLib::y(); // OK, resolves to XLib\n    z(); // OK\n}\n</code></pre>"},{"location":"oop/Container/Container/#namespace-aliase","title":"Namespace aliase","text":"<pre><code>namespace supercalifragilistic{\n  void f();\n}\nnamespace short1 = supercalifragilistic;\nshort1::f();\n</code></pre>"},{"location":"oop/Container/Container/#namespace-composition","title":"Namespace composition","text":"<ul> <li>Compose new namespaces using names from other ones.</li> <li>Using-declarations can resolve potential clashes.</li> <li>Explicitly defined functions take precedence.</li> </ul> <pre><code>namespace first {\n    void x();\n    void y();\n}\nnamespace second {\n    void y();\n    void z();\n}\nnamespace mine {\n    using namespace first;\n    using namespace second;\n    using first::y(); // resolve clashes to first::x()\n    void mystuff();\n    // ...\n}\n</code></pre>"},{"location":"oop/Container/Container/#namespaces-are-open","title":"Namespaces are open","text":"<pre><code>//header1.h\nnamespace X {\n    void f();\n}\n// header2.h\nnamespace X {\n    void g(); // X now has f() and g();\n}\n</code></pre>"},{"location":"oop/Container/Container/#namespace-selection","title":"Namespace selection","text":"<ul> <li>Compose namespaces by selecting a few features from other namespaces.</li> <li>Choose only the names you want rather than all.</li> <li>Changes to \"orig\" declaration become reflected in \"mine\".</li> </ul> <pre><code>namespace mine {\n    using orig::Cat; // use Cat class from orig\n    void x();\n    void y();\n}\n</code></pre>"},{"location":"oop/Container/Container/#appendix","title":"Appendix","text":"<ul> <li><code>C++</code> \u94fe\u63a5\u5668\u4e0d\u53bb\u505a\u53c2\u6570\u7c7b\u578b\u7684\u5224\u65ad\uff0c\u90a3\u4e48\u600e\u4e48\u505aoverload , namespace\uff1f</li> </ul> <p><code>f(int a,float b)</code> will turn into <code>_f_int_double_()</code></p> <p><code>namespace func(void f();) _func_f_()</code></p> <ul> <li>\u8001\u7248\u672c<code>C</code>\u7f16\u8bd1\u4ea7\u751f\u7684\u662f\u4e0d\u5e26\u4e0b\u5212\u7ebf\u7684 solution\uff1a</li> </ul> <pre><code>exetern \"C\"{\n  #include \"oldc.h\"\n}\n</code></pre> <p></p>"},{"location":"oop/Exceptions/lec/","title":"Exception & File","text":"<p>"},{"location":"oop/Exceptions/lec/#exceptions","title":"Exceptions","text":"<p>Exceptions are a mechanism for handling errors in C++ programs. They are used to signal that an error has occurred and to specify what should be done to handle the error.</p> <ul> <li> <p>The significant benefit of exceptions is that they clean up error handling code.</p> </li> <li> <p>It separates the code that describes what you want to do from the code that is executed.</p> </li> </ul> <p>\u53ef\u4ee5\u9884\u89c1\u7684\u9519\u8bef\uff1a</p> <ul> <li>\u627e\u4e0d\u5230\u6587\u4ef6</li> <li>\u6587\u4ef6\u867d\u7136\u5b58\u5728\u4f46\u662f\u6253\u4e0d\u5f00\uff08\u6ca1\u6709\u6743\u9650\u3001\u88ab\u522b\u7684\u8fdb\u7a0b\u6253\u5f00\uff09</li> <li>\u6587\u4ef6\u5927\u5c0f\u5224\u65ad\u5931\u8d25\uff08\u53ef\u80fd\u662f\u4e00\u4e2a\u4e32\u53e3\uff0c\u4e0d\u662f\u78c1\u76d8\u4e0a\u7684\u6587\u4ef6\uff0c\u4e32\u53e3\u662f\u6ca1\u6709\u7ed3\u675f\u7684\uff09</li> </ul> <p>\u53ef\u4ee5 fseek \u5230\u6587\u4ef6\u672b\u5c3e\uff0c\u518d ftell \u672b\u5c3e\u7684\u503c\u3002</p> <pre><code>errorCodeType readFile { initialize errorCode = 0;\n    open the file;\n    if ( theFilesOpen ) { \n        determine its size;\n        if ( gotTheFileLength ) { \n            allocate that much memory;\n            if ( gotEnoughMemory ) { \n                read the file into memory;\n                if ( readFailed ) { \n                    errorCode = -1;\n                }\n             }else {\n                errorCode = -2;\n                } \n        } else {\n            errorCode = -3;\n        }\n        close the file;\n        if ( theFILEDidntClose &amp;&amp; errorCode == 0 ) { \n            errorCode = -4;\n    }else {\n        errorCode = errorCode and -4;\n        } \n    } else {\n        errorCode = -5;\n    }\n    return errorCode;\n}\n</code></pre> <ul> <li>\u4ee3\u7801\u4e2d\u7684\u9519\u8bef\u7801\u662f\u4ec0\u4e48\u610f\u601d\uff1f--\u53ef\u8bfb\u6027\u5dee <pre><code>try {\n    open the file;\n    determine its size;\n    allocate that much memory;\n    read the file into memory;\n    close the file; \n} \ncatch ( fileOpenFailed ) { doSomething; } \ncatch ( sizeDeterminationFailed ) { doSomething; } \ncatch ( memoryAllocationFailed ) { doSomething; } \ncatch ( readFailed ) { doSomething; } \ncatch ( fileCloseFailed ) { doSomething; }\n</code></pre></li> </ul>"},{"location":"oop/Exceptions/lec/#example","title":"Example","text":"<pre><code>template &lt;class T&gt; class Vector { \nprivate: \n    T* m_elements; \n    int m_size; \npublic: \n    Vector (int size = 0) : \n    m_size(size) ... \n    ~Vector () { delete [] m_elements; } \n    void length(int); \n    int length() { return m_size; } \n    T&amp; operator[](int); \n};\n</code></pre> <ul> <li> <p>\u95ee\u9898\uff1a\u5f53\u7528\u6237\u8bd5\u56fe\u8bbf\u95ee\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u5143\u7d20\u65f6\uff0c\u5e94\u8be5\u600e\u4e48\u5904\u7406\uff1f <pre><code>T&amp; Vector::operator[](int index) { \n    if (index &lt; 0 || index &gt;= m_size){\n        throw \"Index out of range\"; \n    }\n    return m_elements[index]; \n}\n</code></pre></p> </li> <li> <p>Assertion vs. Exception</p> </li> <li>Assertion is used to check for bugs in the program.</li> <li>Exception is used to check for errors in the program.</li> <li>\u629b\u5f02\u5e38\u4e4b\u540e\uff0c\u540e\u7eed\u7684\u4ee3\u7801\u90fd\u4e0d\u4f1a\u6267\u884c\uff08\u6ca1\u9047\u5230\u7684 try{} \u7684\u5927\u62ec\u53f7\u90fd\u53ef\u4ee5\u770b\u4f5c\u5f02\u5e38\uff09\uff0c\u7136\u540e\u5f80\u5916\u8d70\u3002</li> <li>\u4e0a\u9762\u8fd9\u91cc throw \u4e4b\u540e\uff0c\u5982\u679c\u5927\u62ec\u53f7\u662f\u8bed\u53e5\u5c31\u79bb\u5f00\u8bed\u53e5\uff0c\u5982\u679c\u662f\u51fd\u6570\u5c31\u79bb\u5f00\u51fd\u6570\uff0c\u5982\u679c\u662f <code>try{}</code>, \u6211\u4eec\u5c31\u5224\u65ad\u5339\u914d\u4e00\u4e2a\u5f02\u5e38\u7c7b</li> </ul> <p><pre><code>class VectorIndexError { \n    public: \n    VectorIndexError(int v) : m_badValue(v) { } \n    ~VectorIndexError() { } \n    void diagnostic() { cerr &lt;&lt; \"index \" &lt;&lt; m_ badValue &lt;&lt; \"out of range!\"; } \n    private: \n    int m_badValue; \n};\ntemplate &lt;class T&gt; \nT&amp; Vector::operator[](int index) { \n    if (index &lt; 0 || index &gt;= m_size) \n        throw VectorIndexError(index); \n    return m_elements[index]; \n}\n</code></pre> <pre><code>void outer2() { \nString err(\"exception caught\"); \ntry {\n    func(); \n} catch (VectorIndexError) { \n    cout &lt;&lt; err; \n    throw; // propagate the exception \n} \n}\n</code></pre></p> <ul> <li>try \u540e\u9762\u53ef\u4ee5\u8ddf\u4efb\u610f\u6570\u91cf\u7684 catch.</li> </ul> <p>Two forms</p> <p>catch (SomeType v) { // handler code } catch (...) { // handler code }</p> <ul> <li>throw \u53ef\u4ee5\u629b\u7684\u4efb\u610f\u7c7b\u578b, int/double/... \u4e5f\u662f\u53ef\u4ee5\u7684\u3002\u4e00\u822c\u4e0d\u4f1a\u629b\u539f\u59cb\u6570\u636e\u7c7b\u578b\uff0c\u56e0\u4e3a\u8868\u8fbe\u7684\u4fe1\u606f\u6709\u9650\u3002\u901a\u5e38\u4f1a\u505a\u4e00\u4e2a\u7c7b\uff0c\u629b\u7c7b\u7684\u5bf9\u8c61\u3002</li> <li>Handlers are checked in order of appearance \u6309\u987a\u5e8f\u5339\u914d\uff0c\u5148\u5339\u914d\u524d\u9762\u7684\uff0c\u5339\u914d\u6210\u529f\u540e\u4e0d\u4f1a\u5bfb\u6c42\u4e0b\u4e00\u4e2a\u5339\u914d\u3002</li> <li>Check for exact match   Apply base class conversions Reference and pointer types, only</li> <li>\u5bf9\u8c61\u4f1a\u8fdb\u884c\u57fa\u7c7b\u8f6c\u6362\u3002\u4e00\u822c\u628a\u5b50\u7c7b\u653e\u5728\u524d\u9762\u3002</li> <li>Ellipses (...) match all</li> <li><code>new</code> does NOT returned 0 on failure. </li> <li><code>new</code> raises a bad_alloc() exception.</li> </ul>"},{"location":"oop/Exceptions/lec/#void-abcthrow-matherr","title":"<code>void abc():throw (MathErr);</code>","text":"<ul> <li>\u5982\u679c\u6709\u8fd9\u4e2a\u58f0\u660e\uff0c\u90a3\u4e48\u8fd9\u4e2a\u51fd\u6570\u91cc\u9762\u5c31\u4e0d\u80fd\u629b\u51fa\u5176\u4ed6\u5f02\u5e38\uff0c\u53ea\u80fd\u629b\u51fa MathErr \u5f02\u5e38\u3002\u629b\u51fa\u4e86\u5176\u4ed6\u5f02\u5e38\uff0c\u7f16\u8bd1\u5668\u4f1a\u62a5\u9519\uff0c\u7ec8\u6b62\u7a0b\u5e8f\u3002 <pre><code>Printer::print(Document&amp;) : throw(PrinterOffLine, BadDocument) { ... }\nPrintManager::print(Document&amp;) : throw (BadDocument) { ... }// raises or doesn\u2019t handle BadDocument \nvoid goodguy() : throw () { }// handles all exceptions \nvoid average() { } // no spec, no checking,\n</code></pre></li> <li>1.\u8868\u793a\u4f1a\u629b PrinterOffLine, BadDocument \u5f02\u5e38\u3002\uff08\u4e0d\u4e00\u5b9a\u629b\uff0c\u4f46\u53ef\u80fd\uff09</li> <li>3.\u8868\u793a\u4e0d\u4f1a\u629b\u4efb\u4f55\u5f02\u5e38\uff0c\u8fd9\u6837\u8c03\u7528\u7684\u65f6\u5019\u4e0d\u9700\u8981 try catch.</li> <li>4.\u53ef\u80fd\u4f1a\u629b\u5f02\u5e38\uff0c\u4f46\u662f\u7f16\u8bd1\u5668\u4e0d\u4f1a\u8fdb\u884c\u68c0\u67e5\u3002</li> </ul>"},{"location":"oop/Exceptions/lec/#note","title":"Note:","text":"<ul> <li> <ol> <li>in C++ , exception is not a routine and not for good design.</li> </ol> </li> <li> <ol> <li>Exception in constructor : \u5148\u5206\u914d\u5185\u5b58\uff0c\u518d\u6267\u884c\u6784\u9020 <pre><code>f() {\n    A *p = new A();\n    ...\n    delete p;\n}\n</code></pre></li> </ol> </li> <li>\u5982\u679c\u6784\u9020\u7684\u65f6\u5019\u51fa\u5f02\u5e38, p \u65e0\u6cd5\u5f97\u5230\u5206\u914d\u7684\u5730\u5740\uff0c\u4f46\u662f\u5185\u5b58\u5374\u6ca1\u6709\u88ab\u6790\u6784\u3002\u5185\u5b58\u6cc4\u6f0f\uff01 Solve:</li> </ul> <ol> <li>Never New\uff1f</li> <li>Catch error and <code>delete this</code>:\u5fc5\u987b\u662f\u4e00\u4e2a\u5c40\u90e8\u5bf9\u8c61\uff0c\u4e0d\u80fd\u662f\u4e00\u4e2a\u5168\u5c40\u5bf9\u8c61\u3002<ul> <li>\u5982\u679c\u662fnew error\u7c7b,\u9700\u8981\u8bb0\u5f97\u540c\u65f6delete error\u7c7b.    <code>c++    Error *p = new Error();    ...    catch (Error e) {    delete e;    delete this; }</code></li> <li>\u5982\u679c\u662f\u5168\u5c40\u7684error\u7c7b\uff0c\u7b49\u5806\u6808\u6e05\u7a7a\u7684\u65f6\u5019\uff0c\u4f1a\u81ea\u52a8\u6790\u6784\u3002</li> </ul> </li> <li>Altimate: \u4e24\u9636\u6bb5\u6784\u9020:\u6784\u9020\u51fd\u6570\u4e0d\u505a\u4efb\u4f55\u4e8b\u60c5(\u6253\u5f00\u7f51\u7edc\uff0c\u8bfb\u53d6\u6587\u4ef6\u7b49)\uff0c\u53ea\u662f\u5206\u914d\u5185\u5b58\uff0c\u7136\u540e\u7528explicit\u7684init\u51fd\u6570\uff08\u7b2c\u4e8c\u9636\u6bb5\u6784\uff1a\u9700\u8981\u4e3b\u52a8\u8c03\u7528\uff09\u6765\u521d\u59cb\u5316    * \u4e5f\u5c31\u662f\u8bf4\u6784\u9020\u51fd\u6570\u4e0d\u5141\u8bb8\u629b\u5f02\u5e38\uff0c\u53ea\u6709init\u51fd\u6570\u53ef\u4ee5\u629b\u5f02\u5e38\u3002</li> </ol>"},{"location":"oop/Exceptions/lec/#complement-stream","title":"Complement : stream","text":"<pre><code>int get()\nwhile((ch=cin.get())!=EOF) {\n    cout.put(ch);\n}\n</code></pre>"},{"location":"oop/Smart/lec/","title":"Smart Pointer","text":""},{"location":"oop/Smart/lec/#smart-pointers","title":"Smart Pointers","text":"<ul> <li>Smart pointers are objects that store pointers to dynamically allocated (heap) memory.</li> </ul>"},{"location":"oop/Smart/lec/#example","title":"Example","text":"<p><code>String abc(\"abcdefg\");</code></p> <ul> <li>\u8981\u505a\u7684\u662fString\u7c7b\u5185\u90e8\u5b58\u50a8\u7684\u81ea\u52a8\u56de\u6536\u7684\u6307\u9488\uff0c\u800c\u4e0d\u662fString\u7c7b\u7684\u6307\u9488\u3002</li> <li>Whenever a pointer is assigned: p = q; Have to do the following</li> </ul> <p><pre><code>p-&gt;decrement(); // p's count will decrease \np = q; \nq-&gt;increment(); // q/p's count will increase\n</code></pre> </p>"},{"location":"oop/Smart/lec/#ucobject","title":"UCObject","text":"<ul> <li>delete this; \u662f\u5408\u6cd5\u7684\uff0c\u4f46\u4e4b\u540e\u4e0d\u5e94\u8be5\u518d\u4f7f\u7528 this \u6307\u9488(\u4e4b\u540e\u4e0d\u6d89\u53ca\u6210\u5458\u53d8\u91cf) <pre><code>#ifndef UCObject_H_\n#define UCObject_H_\n#include &lt;assert.h&gt; \nclass UCObject { \npublic: \n    UCObject() : m_refCount(0){ } \n    /**\n     * Only destruct when refCount is 0\n     * assert, \u56e0\u4e3a\u4e0d\u662f\u5bf9\u8c61\u7684\u95ee\u9898\uff0c\u662f\u5916\u90e8\u7684\u95ee\u9898\u3002\n     */\n    virtual ~UCObject() { assert(m_refCount == 0);};  \n    /**\n     * \u4e0d\u62f7\u8d1d refcount \n     */ \n    UCObject(const UCObject&amp;) : m_refCount(0) { }      \n    void incr() { m_refCount++; } \n    void decr(); \n    int references() { return m_refCount; } \nprivate: \n    int m_refCount; \n};\ninline void UCObject::decr() { \n    m_refCount -= 1; \n    if (m_refCount == 0) { \n    delete this;  // goto UCObject::~UCObject()\n    } \n} \n#endif\n</code></pre></li> </ul>"},{"location":"oop/Smart/lec/#ucpointer","title":"UCPointer","text":"<ul> <li>\u9690\u542b\u4e86 T \u5fc5\u987b\u7ee7\u627f\u81ea UCObject, \u8fd9\u6837\u624d\u6709 incr \u7684\u6210\u5458\u51fd\u6570</li> <li>\u8fd9\u91cc\u53ea\u8981\u6784\u9020\u4e86\u5bf9\u8c61\uff0c\u5c31\u4f1a\u8c03\u7528 increment \u51fd\u6570</li> <li>\u62f7\u8d1d\u6784\u9020\u540e\u8981\u5bf9\u8ba1\u6570\u52a0\u4e00</li> <li>\u8d4b\u503c\u6211\u4eec\u8981\u5148\u68c0\u67e5\u4e8c\u8005\u6307\u5411\u7684\u662f\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61 <pre><code>#ifndef UCPointer_H_\n#define UCPointer_H_\ntemplate &lt;class T&gt; \nclass UCPointer { \nprivate: \n    T* m_pObj; \n    void increment() { if (m_pObj) m_pObj-&gt;incr(); } \n    void decrement() { if (m_pObj) m_pObj-&gt;decr(); } \npublic: \n    UCPointer(T* r = 0): m_pObj(r) { increment();} \n    ~UCPointer() { decrement(); }; \n    UCPointer(const UCPointer&lt;T&gt; &amp; p); \n    UCPointer&amp; operator=(const UCPointer&lt;T&gt; &amp;); \n    T* operator-&gt;() const; \n    T&amp; operator*() const { return *m_pObj; }; \n}\ntemplate &lt;class T&gt; \nUCPointer&lt;T&gt;::UCPointer(const UCPointer&lt;T&gt; &amp; p){ \n    m_pObj = p.m_pObj; \n    increment(); \n}\ntemplate &lt;class T&gt; \nUCPointer&lt;T&gt;&amp; UCPointer&lt;T&gt;::operator=(const UCPointer&lt;T&gt;&amp; p){ \n    if (m_pObj != p.m_pObj){ \n        decrement(); \n        m_pObj = p.m_pObj; \n        increment(); \n    } \n    return *this; \n}\ntemplate&lt;class T&gt; \nT* UCPointer&lt;T&gt;::operator-&gt;() const { \n    return m_pObj; \n}\ntemplate &lt;class T&gt;\nT&amp; UCPointer&lt;T&gt;::operator*() const { \n    return *m_pObj; \n}\n#endif\n</code></pre> <pre><code>Ellipse elly(200F, 300F); \nUCPointer&lt;Shape&gt; p(&amp;elly); \np-&gt;render(); // calls Ellipse::render() on elly!\n</code></pre> <code>p-&gt;render();</code> \u4f1a\u8c03\u7528 <code>m_pObj-&gt;render()</code> </li> <li>Actually p has no render function, but the class m_pObj points to has render function.</li> </ul>"},{"location":"oop/Smart/lec/#stringrep","title":"StringRep","text":"<ul> <li>\u8865: C++ \u5185\u5b57\u7b26\u4e32\u4e0d\u662f\u901a\u8fc7 char \u7684\u65b9\u5f0f\u5b9e\u73b0(\u6ca1\u6709 \\0), \u4e00\u4e2a\u5b57\u7b26\u4e32\u548c\u4e00\u4e2a\u957f\u5ea6\u53d8\u91cf\u3002</li> <li>\u62f7\u8d1d\u6784\u9020\u65f6\u4f1a\u8c03\u7528 UCObject \u7684\u62f7\u8d1d\u6784\u9020\u3002</li> <li>UCObject\u7684\u62f7\u8d1d\u6784\u9020\u6c38\u8fdc\u662f\u5236\u9020\u65b0\u7684\u4e1c\u897f\uff0c\u662f\u6307\u5411UCObject\u7684\u62f7\u8d1d\u6784\u9020 <pre><code>abc = \"Hello World\"\n</code></pre> <pre><code>#ifndef StringRep_H_\n#define StringRep_H_\n#include &lt;cstring.h&gt;\n#include \"UCObject.h\" \nclass StringRep : public UCObject { \npublic: \n    StringRep(const char *); \n    ~StringRep(); \n    StringRep(const StringRep&amp;); \n    int length() const{ return strlen(m_pChars); } \n    int equal(const StringRep&amp;) const; \nprivate: \n    char *m_pChars; \n    // reference semantics -- no assignment op! \n    // \u79c1\u6709\uff0c\u5916\u754c\u4e0d\u80fd\u505a StringRep \u7684\u8d4b\u503c\n    void operator=(const StringRep&amp;) {}\n};\n/**\n * 1. \u4f20\u5165\u7684\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u90a3\u4e48\u53ea\u6709\u4e00\u4e2a \\0 \n */\nStringRep::StringRep(const char *s) { \n    if (s) { \n        int len = strlen(s) + 1; \n        m_pChars = new char[len]; \n        strcpy(m_pChars , s); \n    } \n    else { \n        m_pChars = new char[1]; \n        *m_pChars = '\\0'; \n    } \n} \nStringRep::~StringRep() { \n    delete [] m_pChars ; \n}\nStringRep::StringRep(const StringRep&amp; sr) { \n    int len = sr.length(); \n    m_pChars = new char[len + 1]; \n    strcpy(m_pChars , sr.m_pChars ); \n} \nint StringRep::equal(const StringRep&amp; sp) const { \n    return (strcmp(m_pChars, sp.m_pChars) == 0); \n}\n#endif\n</code></pre></li> </ul>"},{"location":"oop/Smart/lec/#string","title":"String","text":"<p><pre><code>class String { \npublic: \n    String(const char *); \n    ~String(); \n    String(const String&amp;); \n    String&amp; operator=(const String&amp;); \n    int operator==(const String&amp;) const; \n    String operator+(const String&amp;) const; \n    int length() const; \n    operator const char*() const; \nprivate: \n    UCPointer&lt;StringRep&gt; m_rep; \n};\nString::String(const char *s) : m_rep(0) { \n    m_rep = new StringRep(s); \n} \nString::~String() {} \n// Again, note constructor for rep in list. \nString::String(const String&amp; s) : m_rep(s.m_rep) {  \n    // \u505a UCPointer&lt;StringRep&gt; \u7684\u62f7\u8d1d\u6784\u9020\n} \nString&amp; String::operator=(const String&amp; s) { \n    m_rep = s.m_rep; // let smart pointer do work! \n    return *this; \n}\nint String::operator==(const String&amp; s) const { \n    // overloaded -&gt; forwards to StringRep \n    return m_rep-&gt;equal(*s.m_rep); // smart ptr * \n} \nint String::length() const { \n    return m_rep-&gt;length(); \n}\n</code></pre> * \u8fd9\u91cc m_rep(0) \u5b9e\u9645\u4e0a\u662f\u7528 0 \u53bb\u505a UCP \u7684\u6784\u9020(\u4e5f\u53ef\u4ee5\u4e0d\u5199\uff0c\u56e0\u4e3a\u9ed8\u8ba4 0).  * new \u8fd4\u56de\u7684\u662f StringRep *, \u800c\u5de6\u8fb9\u662f UCP, \u8fd9\u91cc\u8d4b\u503c\u65f6\u5c31\u4f1a\u628a StringRep * \u8f6c\u5316\u4e3a UCP, \u518d\u8d4b\u503c"},{"location":"oop/Smart/lec/#main","title":"Main","text":"<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n#include \"String.h\"\nint main(){\n    cout &lt;&lt; \"Hello\\n\";\n    /**\n     * 1. Construct a StringRep object with \"Hello\"\n     * 2. Construct a UCP&lt;StringRep&gt; object with the StringRep object\n     * 3. overlaoded '=' operator for UCP&lt;StringRep&gt; object\n     * (m_rep = new StringRep(\"Hello\");)\n     * 4. Destructor for UCP&lt;StringRep&gt; object\n     */\n    String a = \"Hello\";\n    /**\n     * Copy constructor for String object\n     * 1.String::String(const String&amp; s) : m_rep(s.m_rep) { //\u505a UCPointer&lt;StringRep&gt; \u7684\u62f7\u8d1d\u6784\u9020} \n     * 2.Copy constructor for UCP&lt;StringRep&gt; object\n     * (1) m_pObj = p.m_pObj; \n     * (2)increment(); \n     */\n    String b=a;\n    /**\n     * Overloaded '=' operator for String object\n     * 1.Overloaded '=' operator for UCP&lt;StringRep&gt; object\n     * So actually nothing beacuse b and a are pointing to the same object\n     */\n    b = a;\n    b = 'bye';\n    /**\n     * Overloaded '=' operator for String object\n     * 1.Overloaded '=' operator for UCP&lt;StringRep&gt; object\n     */\n    b = a;\n    cout(a==b)&lt;&lt;endl;\n}\n</code></pre> <ul> <li>UCPointer maintains reference counts</li> <li>UCObject hides the details of the count</li> <li>String is very clean</li> <li>StringRep deals only with string storage and manipulation</li> <li>UCObject and UCPointer are reusable</li> <li>Objects with cycles of UCPointer will never be deleted</li> <li>UCP \u6307\u5411\u7684\u5bf9\u8c61\u6c38\u8fdc\u4e0d\u88ab\u5220\u9664</li> </ul> <p>\u5728UCPointer\u505a<code>increase</code>\u548c<code>decrease</code>\u5728UCObject\u5224\u65ad\u662f\u5426<code>ref=0</code>\u4e4b\u540e\u5220\u9664</p>"},{"location":"oop/Smart/lec/#cast","title":"Cast","text":"<p>\u5728 C++ \u4e2d\uff0c\u6709\u56db\u79cd\u7c7b\u578b\u8f6c\u6362\u8fd0\u7b97\u7b26\uff1a<code>static_cast</code>\u3001<code>dynamic_cast</code>\u3001<code>const_cast</code> \u548c <code>reinterpret_cast</code>\u3002\u5b83\u4eec\u5404\u81ea\u6709\u4e0d\u540c\u7684\u7528\u9014\u548c\u9650\u5236\u3002\u4ee5\u4e0b\u662f\u5bf9\u5b83\u4eec\u7684\u8be6\u7ec6\u89e3\u91ca\uff1a</p>"},{"location":"oop/Smart/lec/#1-static_cast","title":"1. <code>static_cast</code>","text":"<p><code>static_cast</code> \u7528\u4e8e\u5728\u76f8\u5173\u7c7b\u578b\u4e4b\u95f4\u8fdb\u884c\u663e\u5f0f\u8f6c\u6362\u3002\u5b83\u4e3b\u8981\u7528\u4e8e\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\uff1a</p> <ul> <li>\u57fa\u672c\u6570\u636e\u7c7b\u578b\u4e4b\u95f4\u7684\u8f6c\u6362\uff0c\u4f8b\u5982 <code>int</code> \u5230 <code>float</code>\u3002</li> <li>\u7c7b\u5c42\u6b21\u7ed3\u6784\u4e2d\u5411\u4e0a\u8f6c\u6362\uff08\u4ece\u6d3e\u751f\u7c7b\u5230\u57fa\u7c7b\uff09\u548c\u5411\u4e0b\u8f6c\u6362\uff08\u4ece\u57fa\u7c7b\u5230\u6d3e\u751f\u7c7b\uff09\u3002</li> <li>\u5c06 <code>void*</code> \u6307\u9488\u8f6c\u6362\u56de\u539f\u7c7b\u578b\u3002</li> <li>\u5728\u7528\u6237\u5b9a\u4e49\u7684\u8f6c\u6362\u64cd\u4f5c\u7b26\u4e2d\u8fdb\u884c\u8f6c\u6362\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Base {};\nclass Derived : public Base {};\n\nint main() {\n    int a = 10;\n    double b = static_cast&lt;double&gt;(a); // \u57fa\u672c\u6570\u636e\u7c7b\u578b\u8f6c\u6362\n    cout &lt;&lt; b &lt;&lt; endl;\n\n    Derived d;\n    Base* basePtr = static_cast&lt;Base*&gt;(&amp;d); // \u5411\u4e0a\u8f6c\u6362\n    Derived* derivedPtr = static_cast&lt;Derived*&gt;(basePtr); // \u5411\u4e0b\u8f6c\u6362\n\n    void* voidPtr = static_cast&lt;void*&gt;(&amp;d); // \u8f6c\u6362\u4e3a void*\n    Derived* derivedPtr2 = static_cast&lt;Derived*&gt;(voidPtr); // \u8f6c\u6362\u56de\u539f\u7c7b\u578b\n}\n</code></pre>"},{"location":"oop/Smart/lec/#2-dynamic_cast","title":"2. <code>dynamic_cast</code>","text":"<p><code>dynamic_cast</code> \u7528\u4e8e\u5728\u7c7b\u5c42\u6b21\u7ed3\u6784\u4e2d\u8fdb\u884c\u5b89\u5168\u7684\u5411\u4e0b\u8f6c\u6362\uff08\u4ece\u57fa\u7c7b\u5230\u6d3e\u751f\u7c7b\uff09\uff0c\u5e76\u4e14\u53ea\u80fd\u7528\u4e8e\u6709\u865a\u51fd\u6570\u7684\u591a\u6001\u7c7b\u578b\u3002\u5982\u679c\u8f6c\u6362\u5931\u8d25\uff0c\u6307\u9488\u7c7b\u578b\u4f1a\u8fd4\u56de <code>nullptr</code>\uff0c\u5f15\u7528\u7c7b\u578b\u4f1a\u629b\u51fa <code>std::bad_cast</code> \u5f02\u5e38\u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Base {\npublic:\n    virtual ~Base() {}\n};\n\nclass Derived : public Base {};\n\nint main() {\n    Base* basePtr = new Derived();\n    Derived* derivedPtr = dynamic_cast&lt;Derived*&gt;(basePtr);\n    if (derivedPtr) {\n        cout &lt;&lt; \"dynamic_cast \u6210\u529f\" &lt;&lt; endl;\n    } else {\n        cout &lt;&lt; \"dynamic_cast \u5931\u8d25\" &lt;&lt; endl;\n    }\n\n    delete basePtr;\n}\n</code></pre>"},{"location":"oop/Smart/lec/#3-const_cast","title":"3. <code>const_cast</code>","text":"<p><code>const_cast</code> \u7528\u4e8e\u5728\u76f8\u540c\u7c7b\u578b\u4e4b\u95f4\u53bb\u6389\u6216\u6dfb\u52a0 <code>const</code> \u6216 <code>volatile</code> \u5c5e\u6027\u3002\u5b83\u901a\u5e38\u7528\u4e8e\u53bb\u6389 <code>const</code> \u5c5e\u6027\uff0c\u4ee5\u4fbf\u4fee\u6539\u539f\u672c\u662f <code>const</code> \u7684\u6570\u636e\u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid modify(const int* p) {\n    int* modifiable = const_cast&lt;int*&gt;(p);\n    *modifiable = 20;\n}\n\nint main() {\n    const int a = 10;\n    cout &lt;&lt; \"\u4fee\u6539\u524d: \" &lt;&lt; a &lt;&lt; endl;\n    modify(&amp;a);\n    cout &lt;&lt; \"\u4fee\u6539\u540e: \" &lt;&lt; a &lt;&lt; endl; // \u672a\u5b9a\u4e49\u884c\u4e3a\n}\n</code></pre>"},{"location":"oop/Smart/lec/#4-reinterpret_cast","title":"4. <code>reinterpret_cast</code>","text":"<p><code>reinterpret_cast</code> \u7528\u4e8e\u5728\u4e0d\u540c\u7c7b\u578b\u4e4b\u95f4\u8fdb\u884c\u4f4e\u7ea7\u522b\u7684\u3001\u53ef\u80fd\u4e0d\u5b89\u5168\u7684\u8f6c\u6362\u3002\u5b83\u4e3b\u8981\u7528\u4e8e\u6307\u9488\u7c7b\u578b\u4e4b\u95f4\u7684\u8f6c\u6362\u3002\u5b83\u4e0d\u4f1a\u6267\u884c\u4efb\u4f55\u5b9e\u9645\u7684\u6570\u636e\u8f6c\u6362\uff0c\u53ea\u662f\u7b80\u5355\u5730\u91cd\u65b0\u89e3\u91ca\u4f4d\u6a21\u5f0f\u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    int a = 42;\n    void* ptr = &amp;a;\n    int* intPtr = reinterpret_cast&lt;int*&gt;(ptr);\n    cout &lt;&lt; *intPtr &lt;&lt; endl;\n\n    // \u5c06\u6574\u6570\u8f6c\u6362\u4e3a\u6307\u9488\n    intptr_t intVal = 0x12345678;\n    void* voidPtr = reinterpret_cast&lt;void*&gt;(intVal);\n    cout &lt;&lt; voidPtr &lt;&lt; endl;\n\n    // \u5c06\u6307\u9488\u8f6c\u6362\u4e3a\u6574\u6570\n    intVal = reinterpret_cast&lt;intptr_t&gt;(voidPtr);\n    cout &lt;&lt; std::hex &lt;&lt; intVal &lt;&lt; endl;\n}\n</code></pre>"},{"location":"oop/Smart/lec/#_1","title":"\u603b\u7ed3","text":"<ul> <li><code>static_cast</code>\uff1a\u7528\u4e8e\u76f8\u5173\u7c7b\u578b\u4e4b\u95f4\u7684\u663e\u5f0f\u8f6c\u6362\uff0c\u7f16\u8bd1\u65f6\u68c0\u67e5\uff0c\u4e0d\u9002\u7528\u4e8e\u6240\u6709\u7c7b\u578b\u4e4b\u95f4\u7684\u8f6c\u6362\u3002</li> <li><code>dynamic_cast</code>\uff1a\u7528\u4e8e\u5b89\u5168\u7684\u5411\u4e0b\u8f6c\u6362\uff0c\u591a\u6001\u7c7b\u578b\u4e2d\u4f7f\u7528\uff0c\u8fd0\u884c\u65f6\u68c0\u67e5\uff0c\u8f6c\u6362\u5931\u8d25\u65f6\u8fd4\u56de <code>nullptr</code> \u6216\u629b\u51fa\u5f02\u5e38\u3002</li> <li><code>const_cast</code>\uff1a\u7528\u4e8e\u6dfb\u52a0\u6216\u53bb\u6389 <code>const</code> \u6216 <code>volatile</code> \u5c5e\u6027\uff0c\u4e0d\u6539\u53d8\u5e95\u5c42\u6570\u636e\u3002</li> <li><code>reinterpret_cast</code>\uff1a\u7528\u4e8e\u5728\u4e0d\u540c\u7c7b\u578b\u4e4b\u95f4\u8fdb\u884c\u4f4e\u7ea7\u522b\u7684\u8f6c\u6362\uff0c\u4e0d\u5b89\u5168\uff0c\u53ea\u662f\u91cd\u65b0\u89e3\u91ca\u4f4d\u6a21\u5f0f\u3002</li> </ul>"},{"location":"oop/copy/lec/","title":"(Copy & Move )Constructor & Overloading","text":""},{"location":"oop/copy/lec/#copy-ctor","title":"Copy Ctor","text":"<pre><code>void f(){\n    Stash students();\n}\n</code></pre> <ul> <li><code>Stash students();</code> is a function prototype, while <code>students</code> is a function that returns a <code>Stash</code> object.</li> </ul> <p><pre><code>#include&lt;iostream&gt;\nusing namespace std;\nclass A{\n    int i;\npublic:\n    A(){cout&lt;&lt;\"A()\"&lt;&lt;endl;}\n    virtual ~A(){cout&lt;&lt;\"~A()\"&lt;&lt;endl;}\n    int getVal(){return i;}\n    void setVal(int i){this-&gt;i=i;}\n};\nvoid f(A aa){\n    cout &lt;&lt; \"aa: \"&lt;&lt;&amp;aa &lt;&lt; endl;\n    cout &lt;&lt; aa.getVal() &lt;&lt; endl;\n}\nint main(){\n    A a;\n    a.setVal(10);\n    cout &lt;&lt; \"a: \"&lt;&lt;&amp;a &lt;&lt; endl;\n    cout &lt;&lt; \"-------------------\\n\";\n    f(a);\n    cout &lt;&lt; \"-------------------\\n\";\n\n    return 0;\n}\n</code></pre> <pre><code>A()\na: 0x16dc9f088\n-------------------\naa: 0x16dc9f068\n10\n~A()\n-------------------\n~A()\n</code></pre></p> <ul> <li> <p>Only one time of constructor is called. <pre><code>#include&lt;iostream&gt;\nusing namespace std;\nclass A{\n    int i;\npublic:\n    A(int i){cout&lt;&lt;i&lt;&lt;endl;}\n    virtual ~A(){cout&lt;&lt;\"~A()\"&lt;&lt;endl;}\n    int getVal(){return i;}\n    void setVal(int i){this-&gt;i=i;}\n};\nvoid f(A aa){\n    cout &lt;&lt; \"aa: \"&lt;&lt;&amp;aa &lt;&lt; endl;\n    cout &lt;&lt; aa.getVal() &lt;&lt; endl;\n}\nint main(){\n    A a(10);\n    a.setVal(10);\n    cout &lt;&lt; \"a: \"&lt;&lt;&amp;a &lt;&lt; endl;\n    cout &lt;&lt; \"-------------------\\n\";\n    f(a);\n    cout &lt;&lt; \"-------------------\\n\";\n\n    return 0;\n}\n</code></pre></p> </li> <li> <p>Without default constructor, still one time of constructor is called. <pre><code>#include&lt;iostream&gt;\nusing namespace std;\nclass A{\n    int i;\npublic:\n    A(int i){cout&lt;&lt;i&lt;&lt;endl;}\n    A(const A&amp; r):i(r.i){cout&lt;&lt;\"A(const A&amp;)\"&lt;&lt;endl;}\n    virtual ~A(){cout&lt;&lt;\"~A()\"&lt;&lt;endl;}\n    int getVal(){return i;}\n    void setVal(int i){this-&gt;i=i;}\n};\nvoid f(A aa){\n    cout &lt;&lt; \"aa: \"&lt;&lt;&amp;aa &lt;&lt; endl;\n    cout &lt;&lt; aa.getVal() &lt;&lt; endl;\n}\nint main(){\n    A a(10);\n    a.setVal(10);\n    cout &lt;&lt; \"a: \"&lt;&lt;&amp;a &lt;&lt; endl;\n    cout &lt;&lt; \"-------------------\\n\";\n    f(a);\n    cout &lt;&lt; \"-------------------\\n\";\n\n    return 0;\n}\n</code></pre> <pre><code>10\na: 0x16b763088\n-------------------\nA(const A&amp;)\naa: 0x16b763068\n10\n~A()\n-------------------\n~A()\n</code></pre></p> </li> <li> <p>in f(), <code>A(const A&amp;)</code> is called.</p> </li> <li><code>A(const A&amp;)</code> is a copy constructor.</li> </ul>"},{"location":"oop/copy/lec/#when-is-copy-ctor-called","title":"When is copy ctor called?","text":"<ul> <li>When an object is constructed. <pre><code>Person baby_a(\"Fred\");\n// these use the copy ctor\nPerson baby_b = baby_a; // not an assignment\nPerson baby_c( baby_a ); // not an assignment\n</code></pre></li> <li>Two implicit cases:<ul> <li>When an object is passed by value.[\u5f15\u7528\u6216\u6307\u9488\u4e0d\u4f1a\u8c03\u7528copy ctor]</li> <li>When an object is returned by value.</li> </ul> </li> </ul>"},{"location":"oop/copy/lec/#cases-when-we-want-to-define-our-own-copy-ctor","title":"Cases when we want to define our own copy ctor","text":"<ul> <li>When we want to do a partial copy.</li> <li>Pointer!!! <p>\u5982\u679c\u6709\u6210\u5458\u53d8\u91cf\u662f\u6307\u9488\uff0c\u4f1a\u548c\u539f\u6765\u5bf9\u8c61\u4e00\u6837\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58! \u5982\u679c\u6709\u4e00\u4e2a\u5bf9\u8c61\u88ab\u6790\u6784\uff0c\u90a3\u4e48\u8fd9\u5757\u5185\u5b58\u5c31\u88ab delete, \u8fd9\u5c31\u53d8\u6210\u4e86\u65e0\u6548\u5185\u5b58!</p> </li> </ul>"},{"location":"oop/copy/lec/#tips","title":"Tips","text":"<ul> <li>In general, be explicit</li> <li>Create your own copy ctor -- don't rely on the default</li> <li>If you don't need one declare a private copy ctor:\u79c1\u6709\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4f7f\u5f97\u5bf9\u8c61\u4e0d\u80fd\u88ab\u62f7\u8d1d\u6784\u9020</li> <li>prevents creation of a default copy constructor</li> <li>generates a compiler error if try to pass-by-value - don't need a defintion</li> </ul> <p><pre><code>#include&lt;iostream&gt;\nusing namespace std;\nclass A{\n    int i;\n    string s;\npublic:\n    A(int i){cout&lt;&lt;i&lt;&lt;endl;}\n    A(const A&amp; r):i(r.i),s(r.s){cout&lt;&lt;\"A(const A&amp;)\"&lt;&lt;endl;}\n    virtual ~A(){cout&lt;&lt;\"~A()\"&lt;&lt;endl;}\n    int getVal(){return i;}\n    void setVal(int i){this-&gt;i=i;}\n};\nA f(A aa){\n   cout &lt;&lt; \"------------\"&lt;&lt;endl;\n    A bb(20);\n    cout &lt;&lt; \"aa: \"&lt;&lt;&amp;aa &lt;&lt; endl;\n    cout &lt;&lt; aa.getVal() &lt;&lt; endl;\n    cout &lt;&lt; \"Destructor for aa\"&lt;&lt;endl;\n    return bb;\n}\nint main(){\n    A a(10);\n    a.setVal(10);\n    cout &lt;&lt; \"a: \"&lt;&lt;&amp;a &lt;&lt; endl;\n    cout &lt;&lt; \"-------------------\\n\";\n    A d = f(a);\n    cout &lt;&lt; \"-------------------\\n\";\n    d.setVal(30);\n    return 0;\n}\n</code></pre> <pre><code>10\na: 0x16b247190\n-------------------\nA(const A&amp;)\n------------\n20\naa: 0x16b247130\n10\nDestructor for aa\n~A()\n-------------------\n~A()\n~A()\n</code></pre></p> <ul> <li> <p>\u7f16\u8bd1\u5668\u5728return\u5904\u4f18\u5316\u4e86\uff0c\u4e5f\u5c31\u662f\u76f4\u63a5\u628abb\u653e\u5728\u8981\u8fd4\u56de\u7684\u5730\u65b9\uff0c\u800c\u4e0d\u662f\u5728\u51fd\u6570\u5185\u90e8\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u5bf9\u8c61\uff0c\u7136\u540e\u518d\u62f7\u8d1d\u5230\u8fd4\u56de\u7684\u5730\u65b9</p> </li> <li> <p>C++ \u4f1a\u505a\u62f7\u8d1d\u6784\u9020\uff0c\u5982\u679c\u7c7b\u4e2d\u5168\u90e8\u90fd\u662f\u5bf9\u8c61\uff0c\u90a3\u4e48\u662fok\u7684\uff0c\u4f46\u662f\u5982\u679c\u6709\u6307\u9488\uff1a</p> </li> <li>\u90a3\u4e48\u7f16\u8bd1\u5668\u4f1a\u505a\u6d45\u62f7\u8d1d\uff0c\u4e5f\u5c31\u662f\u62f7\u8d1d\u6307\u9488\uff0c\u800c\u4e0d\u662f\u6307\u9488\u6307\u5411\u7684\u5185\u5bb9\uff0c\u4e0d\u540c\u6307\u9488\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58\uff0c\u4e00\u4e2a\u6790\u6784\u4e86\uff0c\u53e6\u4e00\u4e2a\u5c31\u662f\u91ce\u6307\u9488\u4e86\u3002</li> </ul>"},{"location":"oop/copy/lec/#types-of-function-parameters-and-return-value","title":"types of function parameters and return value","text":"<p>way in</p> <ul> <li>a new object is to be created in f <code>void f(Student i)</code>;</li> <li>better with const if no intend to modify the object <code>void f(Student *p);</code></li> <li>better with const if no intend to modify the object <code>void f(Student&amp; i);</code></li> </ul> <p>way out</p> <ul> <li>a new object is to be created at returning <code>Student f()</code>;</li> <li>what should it points to?  <code>Student* f()</code>;</li> <li>what should it refers to?  <code>Student&amp; f()</code>;</li> </ul> <pre><code>char *foo() {\n    char *p;    \n    p = new char[10];\n    strcpy(p, \"something\");\n    return p;\n}\nvoid bar() {\n    char *p = foo();\n    printf(\"%s\", p);\n    delete p;\n}\n</code></pre> <ul> <li>p \u672c\u8eab\u662f\u672c\u5730\u53d8\u91cf\uff0c\u4f46\u6307\u5411\u7684\u5730\u65b9\u662f\u5168\u5c40\u7684\u7a7a\u95f4</li> <li>\u8981\u4e0d\u8981\u505a<code>delete p</code>?   1. \u5982\u679c\u4e0d\u505a\uff0c\u51fa\u4e86\u51fd\u6570\u5c31\u627e\u4e0d\u5230\u8fd9\u4e2a\u7a7a\u95f4\u4e86\uff0c\u5185\u5b58\u6cc4\u6f0f:\u5982\u679c\u4e00\u4e2a\u4e00\u76f4\u5728\u8fd0\u884c\u7684\u7a0b\u5e8f\u4e2d\u6709\u5185\u5b58\u6cc4\u6f0f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7a0b\u5e8f\u4f1a\u8d8a\u6765\u8d8a\u6162\uff0c\u56e0\u4e3a\u5185\u5b58\u8d8a\u6765\u8d8a\u5c11\uff01   2. \u90a3\u6211\u600e\u4e48\u77e5\u9053\u6211\u5e94\u8be5delete\u5462\uff1f\u5982\u679c\u662fnew\u51fa\u6765\u7684\uff0c\u90a3\u4e48\u5c31\u8981delete\uff0c\u5982\u679c\u662f\u6307\u5411\u5168\u5c40\u7684\uff0c\u90a3\u4e48\u5c31\u4e0d\u7528delete</li> <li>\u4e5f\u5c31\u662f\u8bf4\u8fd9\u6837\u4f20\u51fa\u6307\u9488\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3a\u4e0d\u77e5\u9053\u662f\u4e0d\u662f\u8981delete\uff01</li> </ul>"},{"location":"oop/copy/lec/#tips_1","title":"Tips:","text":"<ul> <li>Pass in an object if you want to store it : \u51fd\u6570\u8981\u5b58\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4e0d\u7528\u7528\u6307\u9488\u6216\u8005\u5f15\u7528\u4f20\u5165\uff0c\u800c\u662f\u76f4\u63a5\u4f20\u5165</li> <li>\u6bd4\u5982\u505a\u4e86\u4e00\u4e2a\u7c7b\u8981\u4fdd\u5b58\u4e00\u4e2a\u6811\uff0c\u5982\u679c\u4f20\u5165\u7684\u662f\u6307\u9488\uff0c\u90a3\u4e48\u6bcf\u6b21\u90fd\u662f\u540c\u4e00\u4e2a\u5730\u5740! <pre><code>while(){\n    Person p;\n    p.read();\n    s.put(&amp;p);\n}\n</code></pre></li> <li>Pass in a const pointer or reference if you want to get the values</li> <li>Pass in a pointer or reference if you want to do something to it</li> <li>Pass out an object if you create it in the function:\u5982\u679c\u521b\u5efa\u4e86\u65b0\u7684\u5bf9\u8c61\uff0c\u5c31\u8981\u4f20\u5bf9\u8c61\u51fa\u53bb(\u65b0\u7684\u5bf9\u8c61\u662f\u672c\u5730\u53d8\u91cf)</li> <li>Pass out pointer or reference of the passed in only : \u4f20\u51fa\u53bb\u7684\u6307\u9488/\u5f15\u7528\u53ea\u80fd\u662f\u4f20\u5165\u7684\u6307\u9488/\u5f15\u7528</li> <li>Never new something and return the pointer!!!!</li> <li>\u5728\u54ea\u91cc new \u5c31\u5728\u54ea\u91cc delete!!</li> <li>(\u7c7b\u5185\u662f\u53ef\u4ee5\u7684\uff0c\u6bd4\u5982\u5728\u6784\u9020\u7684 new \u5728\u6790\u6784\u7684\u65f6\u5019 delete)</li> </ul> <p>C++\u5bf9\u672c\u5730\u53d8\u91cf\u4f1a\u81ea\u52a8\u56de\u6536\uff0c\u4f46\u662f\u5bf9new\u51fa\u6765\u7684\u4e0d\u4f1a\u81ea\u52a8\u56de\u6536\uff0c\u6240\u4ee5\u5199\u7684\u65f6\u5019\u5c3d\u91cf\u591a\u7528\u672c\u5730\u53d8\u91cf \u8fd4\u56de\u5bf9\u8c61\u7684\u8bdd\uff0c\u8981\u4e0d\u62f7\u8d1d\u6784\u9020\uff0c\u8981\u4e0d\u79fb\u52a8\u6784\u9020\uff0c\u603b\u4f1a\u88ab\u56de\u6536\uff0c\u4e0d\u7528\u62c5\u5fc3\u5185\u5b58\u6cc4\u6f0f</p>"},{"location":"oop/copy/lec/#move-ctor","title":"Move Ctor","text":""},{"location":"oop/copy/lec/#left-value-and-right-value","title":"Left Value and Right Value","text":"<ul> <li>\u53ea\u80fd\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u53f3\u8fb9\u7684\u53eb\u53f3\u503c\uff0c\u53ef\u4ee5\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u5de6\u8fb9\u7684\u53eb\u5de6\u503c</li> <li>\u5de6\u503c\u90fd\u662f\u53f3\u503c</li> <li>\u53ef\u4ee5\u7b80\u5355\u5730\u8ba4\u4e3a\u80fd\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u5de6\u8fb9\u7684\u90fd\u662f\u5de6\u503c\uff1a<ul> <li>\u53d8\u91cf\u672c\u8eab\u3001\u5f15\u7528</li> <li><code>*</code> \u3001 <code>[]</code> \u8fd0\u7b97\u7684\u7ed3\u679c</li> </ul> </li> <li>\u53ea\u80fd\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u53f3\u8fb9\u7684\u90fd\u662f\u53f3\u503c</li> <li>\u5b57\u2faf\u91cf</li> <li>\u8868\u8fbe\u5f0f</li> <li>\u5f15\u7528\u53ea\u80fd\u63a5\u53d7\u5de6\u503c!!\u2014&gt;\u5f15\u7528\u662f\u5de6\u503c\u7684\u522b\u540d</li> <li>\u8c03\u7528\u51fd\u6570\u65f6\u7684\u4f20\u53c2\u76f8\u5f53\u4e8e\u53c2\u6570\u53d8\u91cf\u5728\u8c03\u7528\u65f6\u7684\u521d\u59cb\u5316</li> <li><code>&amp;&amp;</code> \u6210\u4e3a\u53f3\u503c\u5f15\u7528 <pre><code>int x=20;               // \u5de6\u503c\nint&amp;&amp; rx = x * 2;       // x*2\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u53f3\u503c\uff0crx\u5ef6\u957f\u5176\u2f63\u547d\u5468\u671f\nint y = rx + 2;         // \u56e0\u6b64\u4f60\u53ef\u4ee5\u91cd\u7528\u5b83:42\nrx = 100;               // \u4e00\u65e6\u4f60\u521d\u59cb\u5316\u4e00\u4e2a\u53f3\u503c\u5f15\u7528\u53d8\u91cf\uff0c\u8be5\u53d8\u91cf\u5c31\u6210\u4e3a\u4e86\u4e00\u4e2a\u5de6\u503c\uff0c\u53ef\u4ee5\u88ab\u8d4b\u503c\nint&amp;&amp; rrx1 = x;         // \u975e\u6cd5:\u53f3\u503c\u5f15\u7528\u65e0\u6cd5\u88ab\u5de6\u503c\u521d\u59cb\u5316\nconst int&amp;&amp; rrx2 = x;   // \u975e\u6cd5:\u53f3\u503c\u5f15\u7528\u65e0\u6cd5\u88ab\u5de6\u503c\u521d\u59cb\u5316\n</code></pre></li> <li><code>x</code> \u4e0d\u5b58\u5728\u4e86\uff0c\u53f3\u503c\u5f15\u7528\u4f9d\u7136\u53ef\u4ee5\u4f7f\u7528</li> <li>\u53f3\u503c\u5f15\u7528\u672c\u8eab\u662f\u4e2a\u5de6\u503c! <pre><code>int x = 10;\nint &amp;&amp;a = x + 2;\nint y = a + 2;\ncout &lt;&lt; y &lt;&lt; endl;\nx = 5;\ncout &lt;&lt; y &lt;&lt; endl;\na = 40;\ncout &lt;&lt; y &lt;&lt; endl;\ncout &lt;&lt; a &lt;&lt; endl;\nint &amp;&amp;b = x;        // ERR: \u53f3\u503c\u5f15\u7528\u4e0d\u80fd\u7ed1\u5de6\u503c\uff08\u4e3a\u4e86\u533a\u5206\nint &amp;&amp;b = x+0;      // ok\n</code></pre></li> <li><code>c++11</code> :\u63a5\u53d7const\u5de6\u503c\u7684\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u53f3\u503c <pre><code>void fun(int &amp;lref) {\n    cout &lt;&lt; \"l-value\" &lt;&lt; endl;\n}\nvoid fun(int &amp;&amp;rref) {\n    cout &lt;&lt; \"r-value\" &lt;&lt; endl;\n}\nint main() {\n    int x = 10;\n    fun(x);     // l value\n    fun(10);    // r value\n}\n</code></pre></li> </ul>"},{"location":"oop/copy/lec/#move-ctor_1","title":"Move Ctor","text":"<ul> <li> <p>Move ctor is a special constructor that takes an rvalue reference to an object of the same class and moves the resource owned by the rvalue reference to the object being constructed.</p> </li> <li> <p>\u5982\u679c\u6709\u4e00\u4e2a\u5bf9\u8c61\uff0c\u91cc\u9762\u6709\u6307\u9488\u6307\u5411\u4e00\u5757\u5185\u5b58</p> </li> <li>\u62f7\u8d1d\u6784\u9020\u5c31\u662f\u91cd\u65b0\u7533\u8bf7\u4e00\u5757\u5185\u5b58\u5e76\u5c06\u539f\u5185\u5b58\u7684\u6570\u636e\u62f7\u8d1d\u8fc7\u6765</li> <li>\u79fb\u52a8\u6784\u9020\u5c31\u662f\u8ba9\u65b0\u5bf9\u8c61\u7684\u6307\u9488\u6307\u5411\u5185\u5b58\uff0c\u4f46\u539f\u6307\u9488\u4e0d\u518d\u6307\u5411\u8fd9\u4e2a\u5185\u5b58<code>(nullptr)</code>.</li> </ul> <pre><code>DynamicArray(DynamicArray&amp;&amp; rhs) : m_size{rhs.m_size}, m_array{rhs.m_array}\n{\n    rhs.m_size = 0;\n    rhs.m_array = nullptr;\n    cout &lt;&lt; \"Move constructor: dynamic array is moved!\\n\";\n}\n</code></pre> <ul> <li>Move ctor is called when an object is constructed from an rvalue,avoid unnecessary deep copy.</li> </ul>"},{"location":"oop/copy/lec/#when-is-move-ctor-called","title":"When is move ctor called?","text":"<ul> <li>\u7c7b\u5185\u6709\u6307\u9488\uff0c\u800c\u4e14\u5bf9\u8c61\u4f1a\u5728\u51fd\u6570\u5185\u4f20\u8fdb\u4f20\u51fa (\u539f\u6765\u7684\u4e0d\u8981\u4e86)</li> <li>\u5982\u679c\u7c7b\u5185\u6ca1\u6709\u6307\u9488\uff0c\u6839\u672c\u4e0d\u4f1a\u6709\u201c\u79fb\u52a8\u201c\u4e00\u8bf4</li> <li><code>f(P p);</code> : \u4f20\u5165\u4e00\u4e2a\u53f3\u503c\uff0c\u4f1a\u8c03\u7528\u53f3\u503c\u5f15\u7528\u7684\u6784\u9020\u51fd\u6570</li> <li><code>f(P &amp;&amp;p);</code> : \u5982\u679c\u63d0\u4f9b\u4e86\u79fb\u52a8\u6784\u9020\uff0c\u53ef\u4ee5\u4f20\u4e00\u4e2a\u53f3\u503c</li> <li><code>f(const P &amp;p);</code> </li> <li>\u8fd4\u56de\u53f3\u503c:</li> <li>\u53ef\u4ee5\u4f20\u51fa\u53bb<code>f</code>\u5185\u7684\u672c\u5730\u53d8\u91cf</li> <li>\u56e0\u4e3a\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u4e0d\u80fd\u4f20\u51fa\u53bb\u672c\u5730\u53d8\u91cf\uff0c\u4f46\u662f\u53f3\u503c\u662f\u53ef\u4ee5\u7684\uff0c\u53ea\u80fd\u4f20\u51fa\u53bb\u4f20\u8fdb\u6765\u7684\u4e1c\u897f</li> </ul>"},{"location":"oop/copy/lec/#stdmove","title":"<code>std::move</code>","text":"<pre><code>vector&lt;int&gt; v1{1, 2, 3, 4};\nvector&lt;int&gt; v2 = v1;\nvector&lt;int&gt; v3 = std::move(v1);// \u6b64\u65f6\u8c03\u7528\u7528\u79fb\u52a8\u6784\u9020\u51fd\u6570\n</code></pre> <ul> <li>\u6b64\u65f6\u8c03\u7528\u590d\u5236\u6784\u9020\u51fd\u6570\uff0cv2\u662fv1\u7684\u526f\u672c </li> <li>\u901a\u8fc7 <code>std::move</code> \u5c06 v1 \u8f6c\u5316\u4e3a\u53f3\u503c\uff0c\u4ece\u2f7d\u6fc0\u53d1 v3 \u7684\u79fb\u52a8\u6784\u9020\u51fd\u6570\uff0c\u5b9e\u73b0\u79fb\u52a8\u8bed\u4e49</li> </ul>"},{"location":"oop/copy/lec/#c11-new-features","title":"c++11 new features","text":""},{"location":"oop/copy/lec/#_1","title":"\u5bf9\u8c61\u521d\u59cb\u5316","text":"<pre><code>//\u5c0f\u62ec\u53f7\u521d\u59cb\u5316\nstring str(\"hello\");\n//\u7b49\u53f7\u521d\u59cb\u5316\nstring str = \"hello\";\n//\u5927\u62ec\u53f7\u521d\u59cb\u5316\nstruct Studnet{\n    char *name;\n    int age;\n};\nStudnet s = {\"dablelv\", 18};//Plain of Data\u7c7b\u578b\u5bf9\u8c61\nStudnet sArr[] = {{\"dablelv\", 18}, {\"tommy\", 19}}; //POD\u6570\u7ec4\n</code></pre>"},{"location":"oop/copy/lec/#_2","title":"\u5217\u8868\u521d\u59cb\u5316","text":"<pre><code>class Test{\n    int a;\n    int b;\n    public:\n    Test(int i, int j);\n};\nTest t{0, 0}; //C++11 only\uff0c\u76f8\u5f53\u4e8e Test t(0,0);\nTest *pT = new Test{1, 2}; //C++11 only\uff0c\u76f8\u5f53\u4e8e Test* pT=new Test(1,2);\nint *a = new int[3]{1, 2, 0}; //C++11 only\n</code></pre>"},{"location":"oop/copy/lec/#delegating-ctor","title":"Delegating Ctor","text":"<pre><code>class class_c{\npublic:\n    int max;\n    int min;\n    int middle;\n    class c(int my_max){\n        max = my_max&gt;0?my_max:10;\n    }\n    class_c(int my_max, int my_min):class_c(my_max){\n        min = my_min&gt;0&amp;&amp;my_min&lt;max?my_min:1;\n    }\n    class_c(int my_max, int my_min, int my_middle):class_c(my_max, my_min){\n        middle = my_middle&gt;min&amp;&amp;my_middle&lt;max?my_middle:(min+max)/2;\n    }\n};\nint main(){\n    class_c c(10, 5, 7);\n}\n</code></pre>"},{"location":"oop/copy/lec/#overloaded-operators","title":"Overloaded Operators","text":"<ul> <li> <p>Types that cannot be overloaded:</p> <ul> <li><code>::</code> <code>.</code> <code>*</code> <code>?</code> <code>:</code></li> <li><code>sizeof</code> <code>typeid</code></li> <li><code>new</code> <code>delete</code> <code>new[]</code> <code>delete[]</code></li> <li><code>static_cast</code> <code>dynamic_cast</code> <code>const_cast</code> <code>reinterpret_cast</code></li> </ul> </li> <li> <p>Only existing operators can be overloaded.</p> </li> <li>Overloaded operators must Preserve number of operands and Preserve precedence</li> <li>Operators must be overloaded on a class or enumeration type</li> </ul>"},{"location":"oop/copy/lec/#how-to-overload-operators","title":"How to overload operators","text":"<ul> <li>keyword <code>operator</code> followed by the operator to be overloaded</li> </ul>"},{"location":"oop/copy/lec/#as-a-member-function","title":"As a member function","text":"<pre><code>class A {\npublic:\n    A(int ii):i(ii){}\n    int get() {return i;}\n    /* \u8fd4\u56de\u7684\u4e00\u5b9a\u662f A \u7684\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61 */\n    const A operator+(const A &amp;that) const {\n        A c(this-&gt;i+that.i);        /* \u8fd9\u91cc\u53ef\u4ee5\u8bbf\u95ee that. \u79c1\u6709\u662f\u9488\u5bf9\u7c7b\u7684\uff0c\u4e0d\u662f\u9488\u5bf9\u5bf9\u8c61\u7684\u3002 */\n        return c;\n    }\n    //!\u8fd4\u56de\u7684\u5e94\u8be5\u662f\u53f3\u503c\uff0c\u6240\u4ee5const\uff01\n    private:\n        int i;\n}\nint main() {\n    A a = 6;\n    A b = 7;\n    A c = a + b;    /* a + 9 \u4e5f\u662f\u53ef\u4ee5\u7684\uff1b\u4f46 9 + a \u4e0d\u884c */\n    cout &lt;&lt; c.get() &lt;&lt; endl;    /* \u8f93\u51fa 13 */\n}\n</code></pre> <ul> <li>Why use <code>const</code>?<ul> <li><code>const</code> member functions can be called on <code>const</code> objects</li> <li><code>const</code> objects can only call <code>const</code> member functions</li> <li><code>const</code> member functions can't change the object</li> <li><code>const</code> member functions can't call non-const member functions</li> </ul> </li> <li>And we don't want to change the object in <code>operator+</code></li> </ul> <pre><code>#include&lt;iostream&gt;\nusing namespace std;\nclass A{\n    int i;\npublic:\n    A(int i):i(i){cout&lt;&lt;\"A()\"&lt;&lt;i&lt;&lt;endl;}\n    A(const A&amp; r):i(r.i){cout&lt;&lt;\"A(const A&amp;)\"&lt;&lt;endl;}\n    virtual ~A(){cout&lt;&lt;\"~A()\"&lt;&lt;endl;}\n    int getVal(){return i;}\n    void setVal(int i){this-&gt;i=i;}\n    A operator+(const A&amp; r){\n        cout &lt;&lt; \"operator+\" &lt;&lt; endl;\n        A a(this-&gt;i+r.i);\n        return a;\n    }\n};\nint main(){\n    A a(10);\n    A b(20);\n    A c = a+b;\n}\n/*\nA()10\nA()20\noperator+\nA()30\n~A()\n~A()\n~A()\n */\n</code></pre> <ul> <li><code>A c = a+b;</code> is equivalent to <code>A c = a.operator+(b);</code></li> <li><code>A c = a+3;</code> is equivalent to <code>A c = a.operator+(3);</code></li> <li> <p>And when using '3' as the second operand\uff1a   we construct a temporary object of A(3) and pass it to the operator+ function. <pre><code>#include&lt;iostream&gt;\nusing namespace std;\nclass A{\n    int i;\npublic:\n    A(int i):i(i){cout&lt;&lt;\"A()\"&lt;&lt;i&lt;&lt;endl;}\n    A(const A&amp; r):i(r.i){cout&lt;&lt;\"A(const A&amp;)\"&lt;&lt;endl;}\n    virtual ~A(){cout&lt;&lt;\"~A()\"&lt;&lt;endl;}\n    int getVal(){return i;}\n    void setVal(int i){this-&gt;i=i;}\n    A operator+(const A&amp; r){\n        cout &lt;&lt; \"operator+\" &lt;&lt; endl;\n        A a(this-&gt;i+r.i);\n        return a;\n    }\n};\nint main(){\n    A a(10);\n    A b(20);\n    A c = a+3;\n}\n/*\nA()10\nA()20\nA()3\noperator+\nA()13\n~A()\n~A()\n~A()\n~A()\n*/\n</code></pre></p> </li> <li> <p>However, if we want to use <code>3+a</code> , member function can't be used!!!</p> </li> </ul>"},{"location":"oop/copy/lec/#as-a-global-function","title":"As a global function","text":"<ul> <li>Explicit First Argument </li> <li>Developer does not need special access to the classes</li> <li>May need to be a <code>friend</code> of the class</li> <li>Type conversinos performed on BOTH arguments <pre><code>#include&lt;iostream&gt;\nusing namespace std;\nclass A{\n    int i;\npublic:\n    A(int i):i(i){cout&lt;&lt;\"A()\"&lt;&lt;i&lt;&lt;endl;}\n    A(const A&amp; r):i(r.i){cout&lt;&lt;\"A(const A&amp;)\"&lt;&lt;endl;}\n    virtual ~A(){cout&lt;&lt;\"~A()\"&lt;&lt;endl;}\n    int getVal()const{return i;}\n    void setVal(int i){this-&gt;i=i;}\n};\nA operator+(const A&amp; r,const A&amp;l){\n        cout &lt;&lt; \"+outside\" &lt;&lt; endl;\n        A temp(r.getVal()+l.getVal());\n        return temp;\n}\nint main(){\n    A a(10);\n    A b(20);\n    A c = 3+a;\n}\n/*\nA()10\nA()20\nA()3\n+outside\nA()13\n~A()\n~A()\n~A()\n~A()\n*/\n</code></pre></li> </ul>"},{"location":"oop/copy/lec/#vs","title":"VS","text":"<ul> <li>Unary operators should be members.</li> <li>Assignment operators <code>=</code>,<code>()</code>,<code>[]</code> ,<code>-&gt;</code> and <code>-&gt;*</code> must be members.</li> <li>All other binary operators as non-members!</li> </ul> <p>Note : What if A class don't have <code>getVal()</code> function? * We can use <code>friend</code> to access private members of class A. <pre><code>friend const A operator+(const A&amp; r,const A&amp;l); \n</code></pre></p>"},{"location":"oop/copy/lec/#the-prototype-of-operators","title":"The Prototype of operators","text":""},{"location":"oop/copy/lec/#-","title":"<code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code> <code>^</code> <code>&amp;</code> <code>|</code> <code>~</code> :","text":"<ul> <li><code>const T operatorX(const T&amp; l, const T&amp; r);</code></li> <li>\u5e0c\u671b\u4f20reference\uff0c\u56e0\u4e3a\u4e0d\u60f3\u62f7\u8d1d\uff0c\u4f46\u662f\u53c8\u4e0d\u60f3\u6539\u53d8\u539f\u6765\u7684\u5bf9\u8c61,\u6240\u4ee5\u5fc5\u987b\u662fconst </li> </ul>"},{"location":"oop/copy/lec/#_3","title":"<code>!</code> <code>&amp;&amp;</code> <code>||</code> <code>==</code> <code>!=</code> <code>&lt;</code> <code>&gt;</code> <code>&lt;=</code> <code>&gt;=</code> :","text":"<ul> <li><code>bool operatorX(const T&amp; l);</code></li> <li>Relational Operators : <code>==</code> <code>!=</code> <code>&lt;</code> <code>&gt;</code> <code>&lt;=</code> <code>&gt;=</code><ul> <li>implement <code>!=</code> in terms of <code>==</code></li> <li>implement <code>&gt;</code> <code>&gt;=</code> <code>&lt;</code> in terms of <code>&lt;</code> <pre><code>class Integer { \n public: \n ... \n bool operator==( const Integer&amp; rhs ) const; \n bool operator!=( const Integer&amp; rhs ) const; \n bool operator&lt;( const Integer&amp; rhs ) const; \n bool operator&gt;( const Integer&amp; rhs ) const; \n bool operator&lt;=( const Integer&amp; rhs ) const; \n bool operator&gt;=( const Integer&amp; rhs ) const; \n }\nbool Integer::operator==( const Integer&amp; rhs ) const { \n    return i == rhs.i; \n} \n// implement lhs != rhs in terms of !(lhs == rhs) \nbool Integer::operator!=( const Integer&amp; rhs ) const { \n    return !(*this == rhs); \n} \nbool Integer::operator&lt;( const Integer&amp; rhs ) const { \n    return i &lt; rhs.i; \n}\n// implement lhs &gt; rhs in terms of lhs &lt; rhs \nbool Integer::operator&gt;( const Integer&amp; rhs ) const { \n    return rhs &lt; *this; \n} \n// implement lhs &lt;= rhs in terms of !(rhs &lt; lhs) \nbool Integer::operator&lt;=( const Integer&amp; rhs ) const { \n    return !(rhs &lt; *this); \n} \n// implement lhs &gt;= rhs in terms of !(lhs &lt; rhs) \nbool Integer::operator&gt;=( const Integer&amp; rhs ) const { \n    return !(*this &lt; rhs); \n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"oop/copy/lec/#_4","title":"<code>[ ]</code>","text":"<ul> <li>\u4e0d\u80fd\u662fconst\uff0c\u56e0\u4e3a\u53ef\u80fd\u4f5c\u4e3a\u5de6\u503c : <code>a[6]=7</code></li> <li>\u4e0d\u80fd\u8fd4\u56de\u65b0\u5bf9\u8c61\uff0c\u65b0\u5bf9\u8c61\u53ef\u80fd\u88ab\u4e22\u6389\uff0c\u8fd4\u56dereference</li> <li><code>E&amp; T::operator[](int index);</code></li> <li>\u8fd9\u4e2a\u7c7b\u662f\u5bb9\u5668. <pre><code>#include &lt;iostream&gt;\nclass T {\nprivate:\n    int data[10];\npublic:\n    // \u91cd\u8f7d operator[]\n    int&amp; operator[](int index) {\n        return data[index];\n    }\n};\nint main() {\n    T obj;\n    // \u4f7f\u7528 operator[] \u4fee\u6539\u5bf9\u8c61\u7684\u503c\n    obj[6] = 7;\n    std::cout &lt;&lt; obj[6] &lt;&lt; std::endl; // \u8f93\u51fa 7\n    return 0;\n}\n</code></pre> <pre><code>class A {\npublic:\n    A(int s):size(s){\n        buf = new int[s];\n    }\n    int&amp; operator [] (int idx){\n        return buf[index];\n    }\n    virtual ~A(){\n        delete [] buf;\n    }\nprivate:\n    int size;\n    int *buf;\n}\n</code></pre></li> </ul>"},{"location":"oop/copy/lec/#and-","title":"<code>++</code> and <code>--</code>","text":"<ul> <li>Distinction between prefix and postfix</li> <li><code>const Integer&amp; operator++(); // prefix</code><ul> <li> <ol> <li>\u5f15\u7528\u8868\u793a\u8fd4\u56de\u7684\u662f\u539f\u6765\u7684\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u65b0\u7684\u5bf9\u8c61</li> </ol> </li> <li> <ol> <li>const \u8868\u793a\u4e0d\u6539\u53d8\u539f\u6765\u7684\u5bf9\u8c61 \u6bd4\u5982\u4e0d\u80fd\u505a <code>++a.f()</code>,<code>++a=5</code> \u8fd9\u6837\u7684\u64cd\u4f5c <pre><code>class Integer{\npublic:\n    const Integer&amp; operator++(); // prefix \n    const Integer operator++(int); // postfix\n    const Integer&amp; operator--(); // prefix\n    const Integer operator--(int); // postfix\n};\nconst Integer&amp; Integer::operator++() { \n    *this += 1; // increment have to overload +=\n    return *this; // fetch \n} \n// int argument not used so leave unnamed so \n// won't get compiler warnings \nconst Integer Integer::operator++( int ){ \n    Integer old(*this); // fetch \n    ++(*this); // increment \u8c03\u7528\u4e86\u521a\u521a\u7684\u51fd\u6570\n    return old; // return \n}\n\nint main(){\n    ++x; // calls x.operator++(); \n    x++; // calls x.operator++(0); \n    --x; // calls x.operator--(); \n    x--; // calls x.operator--(0); \n\n}\n</code></pre></li> </ol> </li> </ul> </li> </ul>"},{"location":"oop/copy/lec/#stream-extractorinserter","title":"stream extractor/inserter","text":"<ul> <li>\u8fd4\u56de\u7c7b\u578b\u5fc5\u987b\u662fostream&amp;\uff0c\u56e0\u4e3a\u8981\u652f\u6301\u8fde\u7eed\u8f93\u51fa</li> <li>\u9700\u8981\u5728\u7c7b\u7684\u5185\u90e8\u58f0\u660e\u4e3a\u53cb\u5143\u51fd\u6570 <code>friend ostream&amp; operator&lt;&lt;(ostream&amp; os, const A&amp; a);</code> <pre><code>ostream&amp; operator &lt;&lt;(ostream &amp; os, const A &amp;a)\n{\n    cout &lt;&lt; a.size() &lt;&lt; endl;\n    return os;\n}\n</code></pre></li> <li>Defining a stream extractor <pre><code>ostream&amp; manip(ostream&amp; out) { \n    ... \n    return out; \n} \nostream&amp; tab ( ostream&amp; out ) { \n    return out &lt;&lt; '\\t'; \n} \ncout &lt;&lt; \"Hello\" &lt;&lt; tab &lt;&lt; \"World!\" &lt;&lt; endl;\n</code></pre></li> </ul>"},{"location":"oop/copy/lec/#coperator","title":"\u5728C++\u4e2d\uff0c\u91cd\u8f7d\u8d4b\u503c\u8fd0\u7b97\u7b26\uff08<code>operator=</code>\uff09\u65f6\u901a\u5e38\u8fd4\u56de\u4e00\u4e2a\u5bf9\u5f53\u524d\u5bf9\u8c61\u7684\u5f15\u7528\u3002\u8fd9\u79cd\u505a\u6cd5\u6709\u51e0\u4e2a\u91cd\u8981\u7684\u539f\u56e0\uff1a","text":"<ol> <li> <p>\u652f\u6301\u94fe\u5f0f\u8d4b\u503c\uff1a    \u901a\u8fc7\u8fd4\u56de\u5f53\u524d\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u53ef\u4ee5\u652f\u6301\u94fe\u5f0f\u8d4b\u503c\u64cd\u4f5c\u3002\u4f8b\u5982\uff1a    <pre><code>a = b = c;\n</code></pre>    \u5982\u679c\u8d4b\u503c\u8fd0\u7b97\u7b26\u8fd4\u56de\u7684\u662f\u5f53\u524d\u5bf9\u8c61\u7684\u5f15\u7528\uff0c<code>b = c</code> \u4f1a\u8fd4\u56de <code>b</code>\uff0c\u7136\u540e <code>a = b</code> \u5c31\u53ef\u4ee5\u6b63\u5e38\u8fdb\u884c\u3002</p> </li> <li> <p>\u6548\u7387\u8003\u8651\uff1a    \u8fd4\u56de\u5f15\u7528\u907f\u514d\u4e86\u8fd4\u56de\u5bf9\u8c61\u65f6\u7684\u62f7\u8d1d\u5f00\u9500\u3002\u8fd4\u56de\u5bf9\u8c61\u672c\u8eab\u4f1a\u5bfc\u81f4\u5bf9\u8c61\u7684\u590d\u5236\uff0c\u4ece\u800c\u589e\u52a0\u4e0d\u5fc5\u8981\u7684\u5f00\u9500\u3002\u800c\u8fd4\u56de\u5f15\u7528\u53ea\u9700\u8fd4\u56de\u4e00\u4e2a\u5730\u5740\uff0c\u6ca1\u6709\u989d\u5916\u7684\u6027\u80fd\u635f\u8017\u3002</p> </li> <li> <p>\u4e0e\u5185\u7f6e\u7c7b\u578b\u7684\u884c\u4e3a\u4e00\u81f4\uff1a    \u5185\u7f6e\u7c7b\u578b\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26\u4e5f\u8fd4\u56de\u5de6\u503c\uff08\u5373\u5f53\u524d\u5bf9\u8c61\u672c\u8eab\uff09\uff0c\u901a\u8fc7\u8ba9\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26\u884c\u4e3a\u4e00\u81f4\uff0c\u4ee3\u7801\u7684\u884c\u4e3a\u548c\u9884\u671f\u4e00\u81f4\u3002</p> </li> </ol> <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b\uff0c\u5c55\u793a\u4e86\u5982\u4f55\u6b63\u786e\u5730\u91cd\u8f7d\u8d4b\u503c\u8fd0\u7b97\u7b26\uff1a</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n\nclass STRING {\n    char *m_pStr;\n    int m_len;\npublic:\n    // \u6784\u9020\u51fd\u6570\n    STRING(char *str = NULL) {\n        if (str != NULL) {\n            m_len = strlen(str) + 1;\n            m_pStr = new char[m_len];\n            strcpy(m_pStr, str);\n        } else {\n            m_len = 0;\n            m_pStr = NULL;\n        }\n    }\n\n    // \u62f7\u8d1d\u6784\u9020\u51fd\u6570\n    STRING(const STRING&amp; other) {\n        m_len = other.m_len;\n        if (m_len &gt; 0) {\n            m_pStr = new char[m_len];\n            strcpy(m_pStr, other.m_pStr);\n        } else {\n            m_pStr = NULL;\n        }\n    }\n\n    // \u6790\u6784\u51fd\u6570\n    ~STRING() {\n        delete[] m_pStr;\n    }\n\n    // \u8d4b\u503c\u8fd0\u7b97\u7b26\u91cd\u8f7d\n    STRING&amp; operator=(const STRING&amp; other) {\n        if (this != &amp;other) {  // \u9632\u6b62\u81ea\u6211\u8d4b\u503c\n            delete[] m_pStr;\n            m_len = other.m_len;\n            if (m_len &gt; 0) {\n                m_pStr = new char[m_len];\n                strcpy(m_pStr, other.m_pStr);\n            } else {\n                m_pStr = NULL;\n            }\n        }\n        return *this;  // \u8fd4\u56de\u5f53\u524d\u5bf9\u8c61\u7684\u5f15\u7528\n    }\n\n    // \u53cb\u5143\u51fd\u6570\uff0c\u7528\u4e8e\u8f93\u51fa\u5b57\u7b26\u4e32\n    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const STRING&amp; s);\n};\n\nstd::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const STRING&amp; s) {\n    if (s.m_pStr != NULL) {\n        out &lt;&lt; s.m_pStr;\n    }\n    return out;\n}\n\nint main() {\n    STRING s1((char *)\"Hello\"), s2, s3;\n    s3 = s2 = s1;  // \u94fe\u5f0f\u8d4b\u503c\n    std::cout &lt;&lt; \"s1: \" &lt;&lt; s1 &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"s2: \" &lt;&lt; s2 &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"s3: \" &lt;&lt; s3 &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>"},{"location":"oop/copy/lec/#copying-vs-initialization","title":"Copying vs Initialization","text":""},{"location":"oop/copy/lec/#assignment-operator","title":"Assignment Operator","text":"<ul> <li>Assignment operator is a   binary operator</li> <li>Must be a member function \u5fc5\u987b\u662f\u6210\u5458\u51fd\u6570</li> <li>Will be generated for you if you don't provide one \u2013Same behavior as automatic copy ctor -- memberwise assignment</li> <li>Check for assignment to self\u62f7\u8d1d\u6784\u9020\u4e4b\u524d\uff0c\u5185\u5b58\u7684\u6307\u9488 p \u662f\u6ca1\u6709\u503c\u7684\uff0c\u4f46\u662f\u8d4b\u503c\u7684\u65f6\u5019 p \u662f\u6709\u503c\u7684\u3002\u6240\u4ee5\u9700\u8981\u5148 delete p \u518d new. </li> <li>\u4f46\u5982\u679c\u662f\u81ea\u5df1\u8d4b\u503c\u7ed9\u81ea\u5df1\uff0c\u6e90\u64cd\u4f5c\u7684\u5185\u5b58\u5df2\u7ecf\u88ab delete \u6389\u4e86 <p>\u5148\u91ca\u653e\u4e86\u539f\u6709\u7684\u5185\u5b58\uff0c\u7136\u540e\u53c8\u8bd5\u56fe\u4f7f\u7528\u5df2\u7ecf\u88ab\u91ca\u653e\u7684\u5185\u5b58\u8fdb\u884c\u8d4b\u503c\uff0c\u8fd9\u6837\u5c31\u4f1a\u5bfc\u81f4\u5185\u5b58\u6cc4\u6f0f</p> </li> <li> <p>\u5728\u91cd\u8f7d\u8d4b\u503c\u8fd0\u7b97\u7b26\u65f6\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\u9632\u6b62\u81ea\u8d4b\u503c\u7684\u60c5\u51b5\u53d1\u751f!! \u5982\u679c\u4e0d\u52a0\u4ee5\u5904\u7406\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u6216\u5185\u5b58\u6cc4\u6f0f\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u4f1a\u5728\u91cd\u8f7d\u8d4b\u503c\u8fd0\u7b97\u7b26\u7684\u5b9e\u73b0\u4e2d\u6dfb\u52a0\u81ea\u8d4b\u503c\u68c0\u67e5\uff0c\u786e\u4fdd\u5728\u81ea\u8d4b\u503c\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u5bf9\u5bf9\u8c61\u8fdb\u884c\u64cd\u4f5c\u3002</p> </li> <li> <p>Be sure to assign to all data members</p> </li> <li>Return a reference to <code>*this</code> <pre><code>    // \u91cd\u8f7d\u8d4b\u503c\u8fd0\u7b97\u7b26\n    MyClass&amp; operator=(const MyClass&amp; other) {\n        if (this != &amp;other) { // \u68c0\u67e5\u662f\u5426\u81ea\u8d4b\u503c\n            delete data; // \u91ca\u653e\u539f\u6709\u5185\u5b58\n            data = new int(*other.data); // \u6df1\u62f7\u8d1d\u6570\u636e\n        }\n        return *this; // \u8fd4\u56de\u5f15\u7528\n    }\n</code></pre></li> <li>\u9ed8\u8ba4\u8d4b\u503c\u8fd0\u7b97\u7b26\u4e0d\u4f1a\u8fdb\u884c\u6307\u9488\u7684\u6df1\u62f7\u8d1d\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u591a\u4e2a\u5bf9\u8c61\u5171\u4eab\u540c\u4e00\u5757\u5185\u5b58\uff0c\u4ece\u800c\u5f15\u53d1\u6f5c\u5728\u7684\u5185\u5b58\u7ba1\u7406\u95ee\u9898\u3002\u56e0\u6b64\uff0c\u5728\u5305\u542b\u6307\u9488\u6210\u5458\u7684\u7c7b\u4e2d\uff0c\u901a\u5e38\u9700\u8981\u663e\u5f0f\u5730\u91cd\u8f7d\u8d4b\u503c\u8fd0\u7b97\u7b26\uff0c\u4ee5\u786e\u4fdd\u8fdb\u884c\u6df1\u62f7\u8d1d</li> </ul>"},{"location":"oop/copy/lec/#when-we-have-to-overload-assignment-operator","title":"When we have to overload assignment operator?","text":"<ul> <li>When we have pointers in the class!</li> </ul>"},{"location":"oop/copy/lec/#type-conversion","title":"Type Conversion","text":"<pre><code>class PathName {\n string name;\npublic:\n // or could be multi-argument with defaults\n // Or Type Conversion\n PathName(const string&amp;);\n ~ PathName();\n};\n...\nstring abc(\"abc\");\nPathName xyz(abc); // OK!\nxyz = abc; // OK abc =&gt; PathName Type Conversion\n</code></pre> <ul> <li>\u5148\u5229\u7528 abc \u6784\u9020\u4e00\u4e2a PathName \u7684\u5bf9\u8c61\uff0c\u968f\u540e\u8d4b\u503c\u7ed9 xyz.</li> <li>\u4ee5\u5176\u4ed6\u53d8\u91cf\u4e3a\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u505a\u8fd9\u4e2a\u8d4b\u503c\u4e5f\u5c31\u662f\u7c7b\u578b\u8f6c\u6362\uff01\uff01\uff01\uff01</li> <li> <p>\u5728\u6784\u9020\u51fd\u6570\u524d\u9762\u52a0\u4e0a <code>explicit</code> \u5173\u952e\u5b57:  <pre><code>explicit PathName(const string&amp;);\n</code></pre></p> </li> <li> <p>\u8fd9\u65f6\u6211\u4eec\u7684\u6784\u9020\u51fd\u6570\u53ea\u80fd\u7528\u6765\u505a\u6784\u9020\uff01\uff01\uff01 </p> </li> <li>\u6240\u4ee5\u6b64\u65f6\uff0c\u4e0d\u80fd\u628a string \u5bf9\u8c61\u8d4b\u503c\u7ed9 PathName.\u8fd9\u6837\u7f16\u8bd1\u65f6\u5c31\u4f1a\u51fa\u9519\u3002</li> <li>\u5236\u6b62\u4e0d\u5c0f\u5fc3\u7684\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362</li> </ul>"},{"location":"oop/copy/lec/#conversion-operators","title":"Conversion Operators","text":"<ul> <li>Operator name is any type descriptor</li> <li>No explicit arguments</li> <li>No return type</li> <li> <p>Compiler will use it as a type conversion from  <pre><code>class Rational {\npublic:\n ...\n operator double() const; // Rational to double\n}\nRational::operator double() const { \n return numerator_/(double)denominator_;\n}\nRational r(1,3); \ndouble d = r; // r=&gt;double\n</code></pre></p> </li> <li> <p>\u4e0d\u9700\u8981\u5199\u8fd4\u56de\u7c7b\u578b\u3002 \u5982\u679c\u6211\u4eec\u5728\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26\u524d\u9762\u52a0\u4e0a explicit, \u90a3\u4e48\u6211\u4eec\u5c31\u5fc5\u987b\u5199\u4f5c <code>double d = (double)r;</code></p> </li> <li>\u6ce8\u610f\uff1a\u7c7b\u578b\u8f6c\u6362\u7b26\u548c\u6784\u9020\u51fd\u6570\u7684\u91cd\u8f7d\u53ea\u80fd\u6709\u4e00\u4e2a\u5b58\u5728\uff01</li> <li>\u60f3\u5c06 T \u8f6c\u5316\u4e3a C, \u90a3\u4e48\u9700\u8981\u4e00\u4e2a C(T) \u7684\u4e0d\u52a0 explicit\u7684\u6784\u9020\u51fd\u6570\uff0c\u6216\u8005 <code>operator C()</code> \u7684\u91cd\u8f7d\u3002\u5982\u679c\u4e24\u4e2a\u90fd\u6709\uff0c\u7f16\u8bd1\u5668\u4f1a\u51fa\u9519\u3002</li> </ul> <p></p> <ul> <li>Better prevent implicit type conversion?</li> <li><code>&amp;&amp;</code>,<code>||</code>,<code>,</code>\u6700\u597d\u4e0d\u8981\u91cd\u8f7d</li> </ul>"},{"location":"oop/inheritance/lec/","title":"Inheritance & Polymorphism","text":""},{"location":"oop/inheritance/lec/#inheritance","title":"Inheritance","text":"<p>Inheritance is the ability to define the behavior or implementation of one class as a superset of another class.</p> <p>Take a closer look at an example.</p> <p></p> <pre><code>class Database {\n    vector&lt;CD&gt; cds;\n    vector&lt;DVD&gt; dvds;\n    public:\n        void addCD(CD &amp;aCD);\n        void addDVD(DVD &amp;aDVD);\n        void list() {\n            for (auto x:cds) { cd.print(); }\n            for (auto x:dvds) { x.print(); }\n        }\n}\n</code></pre> <p>Solution</p> <p></p>"},{"location":"oop/inheritance/lec/#basic-declaration","title":"Basic Declaration","text":"<p>use std : avoid include a lot of header files.</p> <pre><code>#include&lt;string&gt;\nusing namespace std;\n\n//or\n\nstd::string\n</code></pre> <ul> <li>Descandend class will call parent class's constructor automatically. BUT!!! the constructor is not inherited!!!!</li> <li>Size of descandent class is the \"sum\" of parent class and descandent class.</li> <li>In descandent class, you can access parent class's member by <code>::</code> operator.</li> <li>Descandend class can access parent class's public and protected member, but not private member.   While protected member is like 'private' member for the descandent class.</li> </ul> <pre><code>class Employee{\n  public:\n    Employee(const std::string&amp; name,const std::string&amp; ssn);\n    const std :: string &amp; get_name() const;\n    const string&amp; getName()const{return name;}\n    const string&amp; getSSN()const{return ssn;}\n    void print()const;\n    //void print(std::ostream&amp; out)const;\n    void print(const std::string &amp; msg)const;\n    protected: // Self and descendant can access\n        std::string m_name;\n        std::string m_mssn;\n};\nEmployee::Employee( const string&amp; name, const string&amp; ssn ):m_name(name),m_ssn( ssn){// initializer list sets up the values!}\n\ninline const std::string&amp; Employee::get_name()const{\n  return m_name;\n}\ninline void Employee::print(std::ostream&amp; out)const{\n  out &lt;&lt; m_name&lt;&lt;endl;\n  out &lt;&lt; m_ssn&lt;&lt;endl;\n}\ninline void Employee::print(std::ostream&amp; out,const std::string&amp; msg)const{\n  out &lt;&lt; msg &lt;&lt; endl;\n  print(out);\n}\nclass Manager : public Employee {\n    public:\n        Manager(const std::string&amp; _name, const std::string&amp; _ssn, const std::string&amp; _title);\n        const std::string&amp; get_title() const;\n        void print() const;\n    private:\n        std::string m_title;\n};\nManager::Manager(const string&amp; _name, const string&amp; _ssn, const string&amp; _title = \"\" ):Employee(_name, _ssn), m_title( _title ) {}\n</code></pre> <p>Better to initialize the parent class by calling its constructor instead of </p> <pre><code>Manager(const std::string&amp; name, const std::string&amp; ssn, const std::string&amp;title):name(_name),ssn(_ssn)mtitle(_title){}\n</code></pre> <pre><code>void Manager::print()const{\n  Employee::print();\n  cout &lt;&lt; title &lt;&lt; endl;\n}\n</code></pre> <pre><code>#include \"employee.h\"\n#include \"manager.h\"\nint main()\n{\n    Employee p1(\"John Smith\",\"123123\");\n    Manager p2(\"Tom Jordan\", \"3267\",\"Mr.\");\n    p1.print(); \n    p2.print();\n    p1.print(\"Welcome:\");\n    //p2.print(\"Welcome:\");     \u62a5\u9519\n\n\n    Employee *p = &amp;p1;\n    p-&gt;print();\n    p = &amp;p2; \n    p-&gt;print();             // \u6309 Employee \u91cc\u9762\u7684\u51fd\u6570\u8f93\u51fa\uff0c\u800c\u4e0d\u662f Manager\n}\n</code></pre> <ul> <li>If parent's member is private: it can never be accessible by its descendant!</li> </ul> <pre><code>cout&lt;&lt;name&lt;&lt;endl //supose name(private) is from parent class, ERROR\n</code></pre> <ul> <li><code>protected</code> : only descandents can access.</li> </ul>"},{"location":"oop/inheritance/lec/#name-hide","title":"Name Hide","text":"<p>\u5b50\u7c7b\u91cd\u65b0\u5b9a\u4e49\u4e86\u7236\u7c7b\u7684\u67d0\u4e2a\u51fd\u6570\uff0c\u5c31\u4f1a\u628a\u5176\u4ed6 overload \u7684\u51fd\u6570\u8986\u76d6\u6389\uff08C++ \u72ec\u6709\uff0c\u65e0\u6cd5\u89e3\u91ca\uff09\uff0c\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d, <code>p2.print(\"welcome\")</code> \u4f1a\u62a5\u9519</p> <ul> <li> <p>\u8981\u8c03\u7528\u7236\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u8981 <code>Employee::print()</code>.</p> </li> <li> <p>Failed to inherit:</p> </li> <li>parent's constructor/destructor is not inherited, but constructor/destructor will be called automatically.</li> <li>\u8d4b\u503c\u7684\u8fd0\u7b97\u7b26\u4e0d\u4f1a\u88ab\u7ee7\u627f</li> </ul> <pre><code>class Derived : public Base ...\nclass Derived : protected Base ...\nclass Derived : private Base ..\n</code></pre>"},{"location":"oop/inheritance/lec/#polymorphism","title":"Polymorphism","text":"<pre><code>class A public B{\n\n};\nclass A protected B{\n\n};\nclass A private B{\n\n};\n</code></pre> <ul> <li><code>public</code> : A is a B</li> <li><code>protected</code> : A is a B and A's member is protected(for A's descandent)</li> <li><code>private</code> : A is a B and A's member is private(for A's descandent)</li> </ul> <p>Public Inheritance should imply substitution</p> <p>If B is a A, you can use a B any where an A can be used. if B is a A, then everything that is true for A is also true of B.</p> <p>Be careful if the substitution is not valid!</p> <ul> <li>\\(A \\rightarrow B\\)</li> <li>\\(A^* \\rightarrow B^*\\) </li> <li>\\(A\\&amp; \\rightarrow B\\&amp;\\)</li> </ul>"},{"location":"oop/inheritance/lec/#upcasting","title":"Upcasting","text":"<p><pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass A{\n  public:\n    int i;\n    void f(){cout&lt;&lt;\"A::f()\"&lt;&lt;endl;}\n    A(){i=10;cout&lt;&lt;\"A()\"&lt;&lt;i&lt;&lt;endl;}\n};\nclass B:public A{\n  public:\n    int i;\n    void f(){cout&lt;&lt;\"B::f()\"&lt;&lt;endl;}\n    B(){i=20;cout&lt;&lt;\"B()\"&lt;&lt;i&lt;&lt;endl;}\n};\nint main(){\n    B b;\n    cout &lt;&lt; \"finished creating b\"&lt;&lt;endl;\n    cout &lt;&lt; endl;\n\n    A *p=&amp;b;\n    b.f();\n    cout &lt;&lt; endl;\n    cout &lt;&lt; \"which f() is called by A* p=&amp;b; ?\"&lt;&lt;endl;\n    p-&gt;f();   // A::f()\n    cout &lt;&lt; endl;\n    cout&lt;&lt; sizeof(*p)&lt;&lt;endl;\n    int *pi = (int*)p;\n    cout &lt;&lt; endl;\n\n    cout&lt;&lt; pi[0] &lt;&lt;\",\"&lt;&lt;pi[1]&lt;&lt;endl;\n    cout &lt;&lt; p-&gt;i &lt;&lt;endl;\n    cout &lt;&lt; b.i&lt;&lt;endl;\n}\n</code></pre> <pre><code>A()10\nB()20\nfinished creating b\n\nB::f()\n\nwhich f() is called by A* p=&amp;b; ?\nA::f()\n\n4\n\n10,20\n10\n20\n</code></pre></p> <ul> <li>When accesing <code>f()</code> function using pointer to ites parent class, it will call the parent class's function.<code>&lt;without virtual&gt;</code></li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass A{\n  public:\n    int i;\n    virtual void f(){cout&lt;&lt;\"A::f()\"&lt;&lt;endl;}\n    A(){i=10;cout&lt;&lt;\"A()\"&lt;&lt;i&lt;&lt;endl;}\n};\nclass B:public A{\n  public:\n    int i;\n    void f(){cout&lt;&lt;\"B::f()\"&lt;&lt;endl;}\n    B(){i=20;cout&lt;&lt;\"B()\"&lt;&lt;i&lt;&lt;endl;}\n};\nint main(){ \n    B b;\n    A *p=&amp;b;\n    B *q=&amp;b;\n    cout &lt;&lt; sizeof(b)&lt;&lt;endl; \n    cout &lt;&lt; sizeof(A)&lt;&lt;endl; \n\n    b.f();\n    cout &lt;&lt; \"When virtual is added it will call the derived class function f() else it will call the base class function f()\"&lt;&lt;endl;\n    p-&gt;f();\n    cout&lt;&lt; sizeof(*p)&lt;&lt;endl;\n    cout&lt;&lt; sizeof(*q)&lt;&lt;endl;\n    int *pi = (int*)p;\n    int *qi = (int*)q;\n    cout&lt;&lt; pi[0] &lt;&lt;\",\"&lt;&lt;pi[1]&lt;&lt;','&lt;&lt;pi[2]&lt;&lt;','&lt;&lt;pi[3]&lt;&lt;endl;\n    cout&lt;&lt; qi[0] &lt;&lt;\",\"&lt;&lt;qi[1]&lt;&lt;','&lt;&lt;qi[2]&lt;&lt;','&lt;&lt;qi[3]&lt;&lt;endl;\n\n    cout &lt;&lt; \"p-&gt;i is still A's i\"&lt;&lt;endl;\n    cout &lt;&lt; p-&gt;i &lt;&lt;endl;\n    cout &lt;&lt; b.i&lt;&lt;endl;\n}\n</code></pre> <ul> <li>After adding <code>virtual</code> keyword, it will call the child class's function.</li> </ul> <pre><code>A()10\nB()20\n16\n16\nB::f()\nWhen virtual is added it will call the derived class function f() else it will call the base class function f()\nB::f()\n16\n16\n12550336,1,10,20\n12550336,1,10,20\np-&gt;i is still A's i\n10\n20\n</code></pre>"},{"location":"oop/inheritance/lec/#example-drawing-program","title":"Example : Drawing Program","text":"<pre><code>class XYPos{}\nclass Shape {\npublic: \n    Shape();\n    virtual ~Shape();\n    virtual void render();\n    void move (const XYPos&amp;);\n    virtual void resize();\nprotected:\n    XYPos center;\n}\n</code></pre> <ul> <li>keyword <code>virtual</code> is used to define a function that can be overwritten in a derived class.</li> </ul> <pre><code>class Ellipse : public Shape {\npublic:\n    Ellipse(float maj, float minr);\n    virtual void render(); // will define own\nprotected:\n    float major_axis, minor_axis;\n};\nclass Circle : public Ellipse {\npublic:\n    Circle(float radius) : Ellipse(radius, radius){}\n    virtual void render();\n};\n</code></pre> <ul> <li>Whether is a static or dynamic binding is determined by the type of the pointer or reference.</li> <li>Only virtual functions can be dynamically bound.</li> </ul> <ol> <li>if<code>.render()</code> : static binding</li> <li>if<code>-&gt;render()</code> : dynamic binding</li> <li>if <code>&amp;\u5f15\u7528\u8bbf\u95ee</code> : dynamic binding</li> </ol> <ul> <li>Only C++ default to static binding!</li> <li>static binding is faster than dynamic binding.</li> </ul> <p><pre><code>void render(Shape* p) {\n    p-&gt;render(); // calls correct render function\n} // for given Shape! void func() {\nEllipse ell(10, 20);\nell.render(); // static -- Ellipse::render();\nCircle circ(40);\ncirc.render(); // static -- Circle::render();\nrender(&amp;ell); // dynamic -- Ellipse::render();\nrender(&amp;circ); // dynamic -- Circle::render()\n</code></pre> <pre><code>void render(Shape* p) {\n    p-&gt;render(); // calls correct render function\n} \n</code></pre></p> <ul> <li><code>Shape *p</code> : polymofphic varaible</li> <li>A polymorphic variable has two types: its static type and its dynamic type.</li> </ul>"},{"location":"oop/inheritance/lec/#how-virtual-functions-work","title":"How virtual functions work","text":"<ul> <li>VPTR Any class with a virtual function has a hidden pointer(VPTR) to a table(V table) of function pointers.</li> <li> <p>V table The V table is a table of the addresses of the virtual functions for that class.  </p> </li> <li> <p>Note : Pointer size is 8 bytes in 64-bit system. And We have to consider alignment.</p> </li> <li> <p>Vtable is created at compile time. SO it is static.</p> </li> </ul> <p></p>"},{"location":"oop/inheritance/lec/#see-the-vptr","title":"See the vptr","text":"<ul> <li>Back to the previous example <pre><code>int main(){ \n  B b;\n  A *p=&amp;b;\n  cout &lt;&lt; sizeof(b)&lt;&lt;endl; \n  cout &lt;&lt; sizeof(A)&lt;&lt;endl; \n  b.f();\n  long long **vp = (long long**)p;\n  void (*pf) () = (void (*)())(*(*vp));\n  cout &lt;&lt; \"-------------\"&lt;&lt;endl;\n  pf();\n}\n</code></pre> <pre><code>A()10\nB()20\n16\n16\nB::f()\n-------------\nB::f()\n</code></pre></li> <li>Add <pre><code>class A{\n  public:\n    int i;\n    virtual void f(){cout&lt;&lt;\"A::f()\"&lt;&lt;endl;}\n    A(){i=10;cout&lt;&lt;\"A()\"&lt;&lt;i&lt;&lt;endl;}\n    void g(){f();}//this-&gt;f()\n};\n</code></pre> <pre><code>p-&gt;g();\n</code></pre> <pre><code>B::f()\n</code></pre></li> <li> <p>Add <pre><code>class A{\n  public:\n    int i;\n    virtual void f(){cout&lt;&lt;\"A::f()\"&lt;&lt;endl;}\n    A(){i=10;cout&lt;&lt;\"A()\"&lt;&lt;i&lt;&lt;endl;f();}\n    void g(){f();}//this-&gt;f()\n};\n</code></pre></p> </li> <li> <p>While in constructor, it will call the parent class's function. <code>A::f()</code></p> </li> <li> <p>How dose <code>vptr</code> come?</p> </li> <li> <p>When the object is created, space will be allocated and the constructor will be called. When the constructor is called, the vptr will be set to the <code>vtable</code> of the class!!!</p> </li> <li> <p>Think about the order of the constructor: </p> </li> </ul> <p>When a descendent class is created, the parent class's constructor will be called first. So the vptr will be set to the parent class's vtable first. Then the descendent class's constructor will be called and the vptr will be set to the descendent class's vtable.</p>"},{"location":"oop/inheritance/lec/#what-happens-if","title":"What happens if ?","text":"<pre><code>Ellipse ell(10, 20);\nCircle circ(40);\nelly = circ; \n</code></pre> <ul> <li>Area of circ is sliced off!</li> <li>Only the part of the object that is of the type of the variable is copied.</li> <li>vptr remans to be <code>elly</code> 's vptr.</li> </ul> <pre><code>a = b;\np = &amp;a;\np -&gt; f();\n</code></pre> <ul> <li><code>A::f()</code></li> <li><code>p-&gt;f()</code> will call the parent class's function.</li> </ul> <p>What about?</p> <pre><code>Ellipse *elly = new Ellipse(20F,40F);\nCircle *circ = new Circle(60F);\nelly = circ;\n</code></pre> <ul> <li>The original Ellipse for <code>elly</code> is lost.</li> <li><code>elly -&gt;render();//Circle::render()</code></li> </ul> <p>What about ?</p> <pre><code>void func(Ellipse &amp;elly){\n  elly.render()\n}\nCircle circ(60F);\nfunc(circ);\n</code></pre> <ul> <li>References act like pointers.</li> </ul>"},{"location":"oop/inheritance/lec/#summaryrun-this","title":"Summary:Run this","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass A{\n  public:\n    int i;\n    virtual void f(){cout&lt;&lt;\"A::f()\"&lt;&lt;endl;}\n    A(){i=10;cout&lt;&lt;\"A()\"&lt;&lt;i&lt;&lt;endl;f();}\n    void g(){f();}//this-&gt;f()\n};\nclass B:public A{\n  public:\n    int i;\n    void f(){cout&lt;&lt;\"B::f()\"&lt;&lt;endl;}\n    B(){i=20;cout&lt;&lt;\"B()\"&lt;&lt;i&lt;&lt;endl;}\n};\nint main(){ \n  cout &lt;&lt; \"Creating B object\"&lt;&lt;endl;\n  B b;\n  cout &lt;&lt; \"Creating A object\"&lt;&lt;endl;\n  A a;\n\n  A *p=&amp;b;\n  cout &lt;&lt; \"----------\"&lt;&lt;endl;\n\n  p-&gt;f();\n  cout &lt;&lt; sizeof(b)&lt;&lt;endl; \n  cout &lt;&lt; sizeof(A)&lt;&lt;endl; \n\n  int *pi = (int*)p;\n  cout&lt;&lt; long(pi[0]) &lt;&lt;\",\"&lt;&lt;pi[2]&lt;&lt;\",\"&lt;&lt;pi[3]&lt;&lt;endl;\n\n  long long **vp = (long long**)(p);\n  void (*pf) () = (void (*)())(*(*vp));\n  pf();\n  p-&gt;g();\n\n  cout &lt;&lt; \"-------------\"&lt;&lt;endl;\n  a = b;\n  p = &amp;a;\n  cout &lt;&lt; \"This time p is pointing to A object and a=b is sliced from b to a(meaning that the B part of b is copied to a and original A is preserved)\"&lt;&lt;endl;\n\n  pi = (int*)p;\n  cout&lt;&lt; long(pi[0]) &lt;&lt;\",\"&lt;&lt;pi[2]&lt;&lt;endl;\n\n  long long **vp1 = (long long**)(p);\n  void (*pf1) () = (void (*)())(*(*vp1));\n  pf1();\n\n  cout&lt;&lt;\"-----------\"&lt;&lt;endl;\n  b.f();\n  a.f();\n  p -&gt; f();\n  cout &lt;&lt;\"----------\"&lt;&lt;endl;\n\n  A *x1 = new A();\n  B *x2 = new B();\n\n  x1 = x2; \n  cout &lt;&lt; \"x1 = x2 and x1 is pointing to B object now\"&lt;&lt;endl;\n  cout &lt;&lt; \"-----------\"&lt;&lt;endl;\n  x1-&gt;f(); \n}\n</code></pre>"},{"location":"oop/inheritance/lec/#virtual-destructors","title":"Virtual Destructors","text":"<ul> <li>Make the destructor virtual IF they might be inherited!</li> </ul> <p><pre><code>Shape *p = new Ellipse(100.0F, 200.0F); ...\ndelete p;\n</code></pre> p \u7684\u9759\u6001\u7c7b\u578b\u662f Shape, \u5982\u679c\u4e0d\u5b9a\u4e49\u865a\u51fd\u6570\uff0c\u90a3\u4e48 p \u53ea\u4f1a\u53d1\u751f\u9759\u6001\u7ed1\u5b9a\uff0c\u5373\u8c03\u7528 Shape\u7684\u6790\u6784\u51fd\u6570\uff0c\u65e0\u6cd5\u8c03\u7528Ellipse\u7684\u6790\u6784\u51fd\u6570!</p> <ul> <li>\u53ea\u8981\u4e00\u4e2a\u7c7b\u53ef\u80fd\u4f1a\u88ab\u7ee7\u627f\uff0c\u5c31\u5e94\u8be5\u5b9a\u4e49\u865a\u6790\u6784\u51fd\u6570\uff01</li> </ul>"},{"location":"oop/inheritance/lec/#overriding","title":"Overriding","text":"<ul> <li>Must be parent and child class</li> <li>Must have the same name and signature[\u540d\u79f0\u548c\u53c2\u6570\u8868\u76f8\u540c!]</li> <li>parent class's function must be virtual\uff01</li> <li>\u8fd9\u65f6\u5b50\u7c7b\u53ef\u4ee5\u4e0d\u52a0 <code>virtual</code> \u5173\u952e\u5b57\uff0c\u9ed8\u8ba4\u662f virtual \u7684\uff0c\u4f46\u662f\u63a8\u8350\u52a0\uff0c\u4e3a\u4e86\u5b59\u7c7b\u3002</li> <li>\u8fd4\u56de\u7c7b\u578b\u76f8\u540c\u6216\u8005\u662f\u534f\u53d8\u7684(\u5b50\u7c7b\u7684\u8fd4\u56de\u7c7b\u578b\u662f\u7236\u7c7b\u7684\u5b50\u7c7b)(\u8fd4\u56de\u7684\u662f\u7236\u7d2f\u8fd4\u56de\u7c7b\u578b\u7684\uff0c\u5b50\u7c7b\u578b) <pre><code>class Expr {\npublic: \n    virtual Expr* newExpr();\n    virtual Expr&amp; clone();\n    virtual Expr self();\n}\nclass BinaryExpr : public Expr {\npublic:\n    virtual BinaryExpr* newExpr();  // ok\n    virtual BinaryExpr&amp; clone();    // ok\n    virtual BinaryExpr self();      // Error!\n}\n</code></pre> <p>\u6307\u5411\u5b50\u7c7b\u7684\u5bf9\u8c61\u53ef\u4ee5\u88ab\u770b\u505a\u662f\u4e00\u4e2a\u6307\u5411\u7236\u7c7b\u7684\u5bf9\u8c61\u3002\u4f46\u662f\u5b50\u7c7b\u7684\u5bf9\u8c61\u548c\u7236\u7c7b\u7684\u5bf9\u8c61\u662f\u4e0d\u540c\u7684</p> </li> <li>\u53ef\u4ee5\u5728\u5b50\u7c7b\u4e2d\u8c03\u7528\u7236\u7c7b\u7684\u88ab overide \u7684\u51fd\u6570\u3002 <pre><code>void Derived::func() {\n    cout &lt;&lt; \"In Derived::func!\";\n    Base::func(); // call to base class\n}\n</code></pre> <pre><code>class Base {\npublic:\n    virtual void func();\n    virtual void func(int);\n};\n</code></pre></li> <li>If you override an overloaded function, you must override all of of the variants !</li> <li>If you don't override all of the variants, the other variants will be hidden!</li> </ul> <p>\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u4f60\u5728\u6d3e\u751f\u7c7b\u4e2d\u53ea\u91cd\u5199\u4e86 <code>func()</code>\uff0c\u800c\u6ca1\u6709\u91cd\u5199 <code>func(int)</code>\uff0c\u90a3\u4e48 <code>func(int)</code> \u5c31\u4f1a\u5728\u6d3e\u751f\u7c7b\u4e2d\u4e0d\u53ef\u89c1\uff0c\u56e0\u4e3a\u57fa\u7c7b\u4e2d\u7684 <code>func(int)</code> \u88ab\u9690\u85cf\u4e86\u3002\u8fd9\u53ef\u80fd\u5bfc\u81f4\u4f60\u5728\u6d3e\u751f\u7c7b\u4e2d\u65e0\u6cd5\u8c03\u7528 <code>func(int)</code>\uff0c\u9664\u975e\u4f60\u4f7f\u7528\u4e86\u663e\u5f0f\u7684\u4f5c\u7528\u57df\u89e3\u6790\u7b26\u6765\u6307\u5b9a\u8c03\u7528\u57fa\u7c7b\u4e2d\u7684\u51fd\u6570\u3002</p>"},{"location":"oop/inheritance/lec/#summary","title":"Summary","text":"<ul> <li>Never redefine an inherited non-virtual function</li> <li>Never redefine an inherited default parameter value</li> <li>They\u02bcre statically bound too!</li> <li>And what would it mean? <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass A {\n    public:\n        A() { f(); }\n        virtual void f() { cout &lt;&lt; \"A::f()\"; }\n};\nclass B : public A {\n    public:\n        B() { f(); }\n        void f() { cout &lt;&lt; \"B::f()\"; }\n};\nint main() {\n    B b;\n}\n//A::f()B::f()\n</code></pre></li> <li>VPTR \u4f1a\u5728\u6784\u9020\u51fd\u6570\u7684 initialized list \u91cc\u521d\u59cb\u5316\u3002\u6211\u4eec\u4f1a\u6267\u884c A \u7684\u6784\u9020\u51fd\u6570\uff0c\u8fd9\u4e2a\u65f6\u5019 VPTR \u662f A \u7684\uff0c\u56e0\u6b64\u4f1a\u8c03\u7528 A \u4e2d\u7684 f \u51fd\u6570</li> <li>\u7236\u7c7b\u7ed3\u675f\u540e\u56de\u5230 B \u7684\u6784\u9020\u51fd\u6570\uff0c\u8fd9\u65f6\u628a VPTR \u6539\u5199\u4e3a\u6307\u5411 B \u7684\u8868\uff0c\u8fd9\u65f6\u7684\u52a8\u6001\u7ed1\u5b9a\u5c31\u53d8\u4e3a B \u7684 f \u51fd\u6570</li> </ul>"},{"location":"oop/inheritance/lec/#abstract-classes","title":"Abstract Classes","text":"<ul> <li>\u6211\u4eec\u4e0d\u5e94\u8be5\u5236\u9020 Shape \u7684\u5bf9\u8c61\uff0c\u4ed6\u7684\u4f5c\u7528\u53ea\u5728\u4e8e\u63d0\u4f9b\u4e00\u4e2a\u62bd\u8c61\u7684\u6982\u5ff5\u548c\u516c\u5171\u63a5\u53e3!!</li> <li>\u4e00\u4e2a\u7c7b\u4e2d\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u7eaf\u865a\u51fd\u6570\uff0c\u8fd9\u4e2a\u7c7b\u5c31\u662f\u62bd\u8c61\u7c7b</li> <li>\u7eaf\u865a\u51fd\u6570\uff1a</li> </ul> <p><pre><code>virtual void render() = 0;\n</code></pre> <pre><code>class XYPos{ ... }; // x,y point\nclass Shape {\npublic:\n    Shape();\n    virtual void render() = 0; \n    void move(const XYPos&amp;);\n    virtual void resize();\nprotected:\n    XYPos center;\n};\n</code></pre></p>"},{"location":"oop/inheritance/lec/#multiple-inheritance","title":"Multiple Inheritance","text":"<ul> <li>C++ \u662f\u552f\u4e00\u4e00\u4e2a\u652f\u6301\u591a\u91cd\u7ee7\u627f\u7684\u9762\u5411\u5bf9\u8c61\u8bed\u8a00 <pre><code>class B1 { int m_i; };\nclass D1 : public B1 {};\nclass D2 : public B1 {};\nclass M : public D1, public D2 {};\nvoid main() {\n    M m; //OK\n    B1* p = new M; // ERROR: which B1\n    B1* p2 = dynamic_cast&lt;D1*&gt;(new M); // OK\n}\n</code></pre></li> <li>Refer to https://note.hobbitqia.cc/OOP/oop7/#protocol-classes <p>Say No to Multiple Inheritance </p> </li> </ul>"},{"location":"oop/template/lec/","title":"Template & STL","text":""},{"location":"oop/template/lec/#template","title":"Template","text":""},{"location":"oop/template/lec/#function-template","title":"Function Template","text":"<p>\u51fd\u6570\u6a21\u677f\uff1a\u7528\u4e8e\u5236\u9020\u51fd\u6570\u7684\u6a21\u677f!\u4e5f\u5c31\u662f\u8bf4\u5b83\u4e0d\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u800c\u662f\u4e00\u4e2a\u51fd\u6570\u7684\u6a21\u677f\uff0c\u7f16\u8bd1\u5668\u4f1a\u6839\u636e\u53c2\u6570\u7c7b\u578b\u751f\u6210\u5bf9\u5e94\u7684\u51fd\u6570\u3002</p> <ul> <li>\u6211\u4eec\u4e0d\u9700\u8981\u544a\u8bc9\u7f16\u8bd1\u5668\u53bb\u5236\u9020\u51fd\u6570\uff0c\u8c03\u7528\u7684\u65f6\u5019\u81ea\u7136\u4f1a\u6839\u636e\u53c2\u6570\u7c7b\u578b\u751f\u6210\u5bf9\u5e94\u7684\u51fd\u6570\u3002</li> <li> <p>\u5982\u679c\u8fd9\u4e2a\u65f6\u5019\u5df2\u7ecf\u6709\u4e86\u67d0\u4e00\u4e2a\u51fd\u6570\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u4f1a\u4f18\u5148\u8c03\u7528\u5df2\u6709\u7684\u51fd\u6570\u3002 <pre><code>void swap( int&amp; x, int&amp; y ) { \n    T temp = x; \n    x = y; \n    y = temp; \n}\n</code></pre> <pre><code>template &lt; class T &gt; \nvoid swap( T&amp; x, T&amp; y ) { \n    T temp = x; \n    x = y; \n    y = temp; \n}\n</code></pre></p> </li> <li> <p>The class <code>T</code> specifies a parameterized type name </p> </li> <li>class means any built-in type or user-defined type</li> <li>Inside the template, use T as a type name</li> <li>\u6709\u6a21\u677f\u4e4b\u540e\u8fdb\u884c\u5b9e\u4f8b\u5316</li> <li> <p>\u53ef\u4ee5\u7406\u89e3\u4e3a\uff0c\u6a21\u677f\u9ad8\u901f\u7f16\u8bd1\u5668\u8fd9\u4e2a\u51fd\u6570\u4f1a\u6709\u5f88\u591a\u91cd\u8f7d\u7248\u672c\uff0c\u7f16\u8bd1\u5668\u4f1a\u6839\u636e\u53c2\u6570\u7c7b\u578b\u751f\u6210\u5bf9\u5e94\u7684\u51fd\u6570\u3002 <pre><code>int main() { \n    int a = 1, b = 2; \n    swap( a, b ); \n    cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; endl; \n    return 0; \n}\n</code></pre> <pre><code>int i = 3; int j = 4; \nswap(i, j); // use explicit int swap \nfloat k = 4.5; float m = 3.7; \nswap(k, m); // instanstiate float swap \nstd::string s(\"Hello\"); \nstd::string t(\"World\"); \nswap(s, t); // std::string swap \n</code></pre></p> </li> <li> <p>\u8fd9\u91cc <code>swap(k,m)</code> \u4f1a\u8c03\u7528\u51fd\u6570\u6a21\u677f\uff0c\u968f\u540e\u751f\u6210 <code>float swap</code>, \u7f16\u8bd1\u5668\u4f1a\u63d2\u5165\u51fd\u6570\uff0c\u8c03\u7528\u3002</p> </li> <li>\u5728 C++ \u4e2d\u7f16\u8bd1\u540e\u91cd\u8f7d\u51fd\u6570\u7684\u540d\u5b57\u4e0d\u518d\u662f f, \u800c\u662f _f_int/_f_double/_f_void..., \u628a\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u578b\u7f16\u5165\u51fd\u6570\u7684\u540d\u5b57</li> <li>Only exact match on types is used</li> <li>No conversion operations are applied</li> <li> <p>\u5fc5\u987b\u7c7b\u578b\u76f8\u540c\uff01 <pre><code>swap(int, int); // ok \nswap(double, double); // ok \nswap(int, double); // error!\n</code></pre></p> </li> <li> <p>Even implicit conversions are ignored!</p> </li> <li>Template functions and regular functions coexist <pre><code>void swap(&amp;int, &amp;int);\ntemplate &lt;class T&gt; void swap(&amp;T, &amp;T);\nswap(1, 2); //Wrong!:should be left value reference\nint a = 1, b = 2;\nswap(a, b); //OK\n</code></pre> <pre><code>template &lt;class T&gt;\nvoid f(int i){\n    T a;\n    a = i;\n}\n//Use in this way:\nf&lt;int&gt;(3);\nf&lt;double&gt;(1.0);\n</code></pre></li> </ul>"},{"location":"oop/template/lec/#class-template","title":"Class Template","text":"<pre><code>template &lt;class T&gt; \nclass Vector { \npublic: \n Vector(int); \n ~Vector(); \n Vector(const Vector&amp;); \n Vector&amp; operator=(const Vector&amp;); \n T&amp; operator[](int); \nprivate: \n T* m_elements; \n int m_size; \n};\n</code></pre> <ul> <li>\u7c7b\u6a21\u677f\u4e00\u5b9a\u662f\u663e\u5f0f\u7684(\u5982 STL \u6a21\u677f)</li> <li>\u7c7b\u6a21\u677f\u91cc\u7684\u6240\u6709\u51fd\u6570\u90fd\u662f\u7c7b\u6a21\u677f\uff0c\u6240\u4ee5\u5982\u679c\u5728\u5916\u9762\u5b9a\u4e49\u7684\u65f6\u5019\uff0c\u4e5f\u8981\u52a0\u4e0a\u6a21\u677f!!! <pre><code>template&lt;class T&gt;\nT&amp; vector&lt;T&gt;::operator[](int i){ //Note this &lt;T&gt;!!!\n    return m_elements[i];\n}\n</code></pre></li> </ul> <pre><code>Vector&lt;int&gt; v1(100); \nVector&lt;Complex&gt; v2(256); \nv1[20] = 10; \nv2[20] = v1[20]; // ok if int-&gt;Complex define\n</code></pre> <p>A simple sort function</p> <p></p> <ul> <li>\u9700\u8981\u652f\u6301 <code>operator&lt;</code> \u91cd\u8f7d</li> <li> <p>\u7c7b\u6a21\u677f\u7684\u51fd\u6570\u662f\u58f0\u660e\u800c\u4e0d\u662f\u5b9a\u4e49\uff0c\u6ca1\u6709\u5206\u79bb\u7684 .h \u6587\u4ef6\u3002\uff08\u4e0d\u9700\u8981 inline \u5173\u952e\u5b57\uff09</p> <pre><code>template&lt; class Key, class Value&gt; \nclass HashTable { \nconst Value&amp; lookup(const Key&amp;) const; \nvoid install(const Key&amp;, const Value&amp;); \n... \n}; \n</code></pre> </li> <li> <p>Templates nest \u2014 they\u2019re just new types!   <pre><code>Vector&lt; Vector&lt; double *&gt; &gt; // note space &gt; &gt;\n</code></pre></p> </li> <li>Type arguments can be complicated    <pre><code>Vector&lt; int (*)(Vector&lt;double&gt;&amp;, int)&gt;\n</code></pre></li> </ul>"},{"location":"oop/template/lec/#note","title":"Note : \u51fd\u6570\u6307\u9488","text":"<p>\u5728C++\u4e2d\uff0c\u51fd\u6570\u6307\u9488\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6307\u9488\uff0c\u5b83\u6307\u5411\u51fd\u6570\u800c\u4e0d\u662f\u6307\u5411\u53d8\u91cf\u3002\u51fd\u6570\u6307\u9488\u53ef\u4ee5\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u52a8\u6001\u5730\u6307\u5411\u4e0d\u540c\u7684\u51fd\u6570\uff0c\u4ece\u800c\u5b9e\u73b0\u7a0b\u5e8f\u7684\u7075\u6d3b\u6027\u548c\u53ef\u6269\u5c55\u6027\u3002</p> <p>\u8981\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6307\u9488\uff0c\u9700\u8981\u6307\u5b9a\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u548c\u53c2\u6570\u7c7b\u578b\uff0c\u5e76\u4f7f\u7528\u6307\u9488\u58f0\u660e\u7b26 <code>*</code> \u6765\u58f0\u660e\u6307\u9488\u3002\u51fd\u6570\u6307\u9488\u7684\u4e00\u822c\u5f62\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>return_type (*pointer_name)(arg_type1, arg_type2, ...);\n</code></pre> <p>\u5176\u4e2d\uff1a - <code>return_type</code> \u662f\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\uff1b - <code>pointer_name</code> \u662f\u51fd\u6570\u6307\u9488\u7684\u540d\u79f0\uff1b - <code>arg_type1, arg_type2, ...</code> \u662f\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u578b\u3002</p> <p>\u4f8b\u5982\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a\u51fd\u6570 <code>int add(int a, int b)</code>\uff0c\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u6307\u5411\u8be5\u51fd\u6570\u7684\u6307\u9488\u5982\u4e0b\uff1a</p> <pre><code>int (*ptr)(int, int);  // \u5b9a\u4e49\u4e00\u4e2a\u6307\u5411\u8fd4\u56de\u7c7b\u578b\u4e3a int\uff0c\u63a5\u53d7\u4e24\u4e2a int \u7c7b\u578b\u53c2\u6570\u7684\u51fd\u6570\u6307\u9488\n</code></pre> <p>\u7136\u540e\uff0c\u53ef\u4ee5\u5c06\u51fd\u6570 <code>add</code> \u7684\u5730\u5740\u8d4b\u7ed9\u6307\u9488 <code>ptr</code>\uff0c\u4f7f\u5176\u6307\u5411 <code>add</code> \u51fd\u6570\uff1a</p> <pre><code>ptr = add;\n</code></pre> <p>\u73b0\u5728\uff0c\u53ef\u4ee5\u901a\u8fc7\u6307\u9488\u8c03\u7528\u51fd\u6570 <code>add</code>\uff1a</p> <pre><code>int result = (*ptr)(2, 3);  // \u7b49\u4ef7\u4e8e int result = add(2, 3);\n</code></pre> <p>\u6216\u8005\u53ef\u4ee5\u7b80\u5316\u4e3a\uff1a</p> <pre><code>int result = ptr(2, 3);  // \u4e5f\u7b49\u4ef7\u4e8e int result = add(2, 3);\n</code></pre> <p>\u8fd9\u6837\uff0c\u51fd\u6570\u6307\u9488\u5c31\u53ef\u4ee5\u7528\u6765\u52a8\u6001\u5730\u6307\u5411\u4e0d\u540c\u7684\u51fd\u6570\uff0c\u5e76\u8c03\u7528\u76f8\u5e94\u7684\u51fd\u6570\u3002\u5728\u793a\u4f8b\u4e2d\uff0c<code>Vector&lt;int (*)(Vector&lt;double&gt;&amp;, int)&gt;</code> \u5c31\u662f\u4e00\u4e2a\u5411\u91cf\uff0c\u5176\u5143\u7d20\u662f\u6307\u5411\u63a5\u53d7 <code>Vector&lt;double&gt;</code> \u548c <code>int</code> \u53c2\u6570\u7684\u51fd\u6570\u7684\u6307\u9488\uff0c\u5e76\u8fd4\u56de <code>int</code> \u7c7b\u578b\u503c\u3002</p>"},{"location":"oop/template/lec/#expression-parameters","title":"Expression parameters","text":"<pre><code>template &lt;class T, int bound=100&gt;\nclass FixedVector {\npublic:\n    FixedVector();\n    FixedVector(int);\n    FixedVector(const FixedVector&amp;);\n    FixedVector&amp; operator=(const FixedVector&amp;);\n    T&amp; operator[](int);\nprivate:\n    T m_elements[bound];\n    int m_size;\n};\n</code></pre> <ul> <li>Usage: <pre><code>FixedVector&lt;int, 200&gt; v1;\nFixedVector&lt;int&gt; v2; // bound=100\n</code></pre></li> </ul>"},{"location":"oop/template/lec/#template-and-inheritance","title":"Template and Inheritance","text":"<ul> <li>Template can inherit from a non-template class <pre><code>template &lt;class T&gt;\nclass Derived : public Base&lt;T&gt; {\npublic:\n    Derived();\n    Derived(const Derived&amp;);\n    Derived&amp; operator=(const Derived&amp;);\n    T&amp; operator[](int);\n};\n</code></pre></li> <li>Template can inherit from a template class <pre><code>template &lt;class T&gt;\nclass Derived : public Base&lt;T&gt; {\npublic:\n    Derived();\n    Derived(const Derived&amp;);\n    Derived&amp; operator=(const Derived&amp;);\n    T&amp; operator[](int);\n};\n</code></pre></li> <li>Non-template class can inherit from a template class <pre><code>template &lt;class T&gt;\nclass Base {\npublic:\n    Base();\n    Base(const Base&amp;);\n    Base&amp; operator=(const Base&amp;);\n    T&amp; operator[](int);\n};\nclass Derived : public Base&lt;int&gt; {\npublic:\n    Derived();\n    Derived(const Derived&amp;);\n    Derived&amp; operator=(const Derived&amp;);\n    int&amp; operator[](int);\n};\n</code></pre></li> <li>\u6a21\u677f\u7684\u6240\u6709\u4e1c\u897f\u90fd\u9700\u8981\u5728\u5934\u6587\u4ef6\u4e2d\u5b9a\u4e49\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u9700\u8981\u770b\u5230\u6a21\u677f\u7684\u5b9a\u4e49\u624d\u80fd\u751f\u6210\u5bf9\u5e94\u7684\u51fd\u6570\u3002</li> <li>\u9759\u6001\u6210\u5458\u53d8\u91cf\u5fc5\u987b\u5728\u7c7b\u5916\u5b9a\u4e49\uff0c\u56e0\u4e3a\u9759\u6001\u6210\u5458\u53d8\u91cf\u662f\u7c7b\u7684\u4e00\u4e2a\u5c5e\u6027\uff0c\u800c\u4e0d\u662f\u5bf9\u8c61\u7684\u5c5e\u6027\u3002\u4e5f\u5c31\u662f\u653e\u5728.cpp\u6587\u4ef6\u4e2d\u5b9a\u4e49\u3002</li> <li>\u4e0d\u540c\u7f16\u8bd1\u5355\u5143\u5982\u679c\u51fa\u73b0\u540c\u4e00\u4e2a\u6a21\u677f\u7684\u5b9e\u4f8b\u5316\uff0c\u4f1a\u51fa\u73b0\u91cd\u590d\u5b9a\u4e49\u7684\u95ee\u9898\uff0c\u7528<code>weak</code>\u5173\u952e\u5b57\u89e3\u51b3?</li> </ul>"},{"location":"optimization/lec1/lec/","title":"Lec","text":"<p>"},{"location":"optimization/lec1/lec/#lecture-1-introduction-to-optimization","title":"Lecture 1: Introduction to Optimization","text":""},{"location":"optimization/lec1/lec/#relaxation-and-optimization","title":"Relaxation and Optimization","text":""},{"location":"optimization/lec1/lec/#classes-of-differentiable-functions","title":"Classes of differentiable functions","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap1/chap1/","title":"Chap1","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap1/chap1/#breif-intro","title":"Breif Intro","text":"<ul> <li>\u505a\u5b58\u50a8\u7684\u65f6\u5019\uff0c\u8bbf\u95ee\u9700\u8981\u5b57\u5bf9\u9f50\uff0c\u6309\u7167\u5b57\u53bb\u53d6</li> <li>Cache \u5c40\u90e8\u6027\u539f\u7406</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap1/chap1/#signal","title":"Signal","text":"<p>The most commonly used two-valued information is an electrical signal - voltage or current typically two discrete values represented  by the voltage range of values.</p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap1/chap1/#digital-systems","title":"Digital Systems","text":"<p>Takes a set of discrete information inputs and discrete internal information (system state) and generates a set of discrete information outputs.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap1/chap1/#types-of-digital-systems","title":"Types of Digital Systems","text":"<ul> <li> <p>Combinational Logic System:No state present , one input just decide one output(one to one , no state)</p> </li> <li> <p>Sequential System</p> </li> </ul> <p>State present</p> <p>State updated at discrete times -- Synchronous Sequential System [Periodic]</p> <p>State updated att any time -- Asychronous Sequential System</p> <p>State function : \\(f_{state}=Function(State,Input)\\)</p> <p>Output function : \\(f_{output}=Function(State)\\) or \\(f_{output}=Function(State,Input)\\)</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap1/chap1/#organization-of-computer","title":"Organization of Computer","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap1/chap1/#embedded-systems","title":"Embedded Systems","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap1/chap1/#number-systems-codes","title":"Number Systems &amp; Codes","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap1/chap1/#covert","title":"Covert","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap1/chap1/#decimal-to-binary","title":"Decimal To Binary","text":"<ul> <li> <p>\u6574\u6570\u2014\u2014\u6743\u5c55\u5f00\u5f0f\u96642\uff0c\u4f59\u6570\u6784\u6210\u6700\u4f4e\u4f4d\u2014\u2014\u96642\u53d6\u4f59</p> </li> <li> <p>\u5c0f\u6570\u2014\u2014\u6743\u5c55\u5f00\u5f0f\u4e582\uff0c\u6574\u6570\u6784\u6210\u6700\u9ad8\u4f4d\u2014\u2014\u4e582\u53d6\u6574</p> </li> </ul> <p></p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap1/chap1/#binary-numbers-and-binary-coding","title":"Binary Numbers and Binary Coding","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap1/chap1/#non-numeric-binary-codes","title":"Non-numeric Binary Codes","text":"<p>Given n binary digits (called bits), a binary code is a mapping from a set of represented elements to a subset of the \\(2^n\\)  binary numbers.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap1/chap1/#number-of-elements-represented","title":"Number of Elements Represented","text":"<ul> <li> <p>You can represent 4 elements in radix r = 2 with n = 2 digits: (00, 01, 10, 11).</p> </li> <li> <p>You can represent 4 elements in radix \\(r=2\\) with \\(n=4\\) digits (0001,0010,0100,1000) \\(One\\ Hot\\ Code\\)</p> </li> <li> <p>Other Examples</p> </li> </ul> <p></p> <ul> <li>For \\(8\\ 4\\ -2\\ -1\\) \\(\\&amp;\\) \\(Excess\\ 3\\) code -- \"Symmetric\"(complement) Same Probability for \\(0\\) and \\(1\\)</li> <li>\\(Excess\\ 3\\) code -- (real binary value plus 3)</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap1/chap1/#binary-coded-decimal-bcd","title":"Binary Coded Decimal (BCD)","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap1/chap1/#arithmetic","title":"Arithmetic","text":"<p>Add Six</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap1/chap1/#ascii","title":"ASCII","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap1/chap1/#parity-bit-error-detection-codes","title":"Parity Bit Error-Detection Codes","text":"<p>Redundancy (e.g. extra information), in the form of extra bits, can be incorporated into binary code words to detect and correct errors.</p> <p>A simple form of redundancy is parity, an extra bit appended onto the code word to make the number of 1\u2019s odd or even. </p> <p>Parity can detect all single-bit errors and some multiple-bit errors.</p> <ul> <li> <p>A code word has even parity if the number of 1\u2019s in the code word is even.</p> </li> <li> <p>A code word has odd parity if the number of 1\u2019s in the code word is odd.</p> </li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap1/chap1/#gray-code","title":"Gray Code","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap1/chap1/#optical-shaft-encoder","title":"Optical Shaft Encoder","text":"<p>Suppose we want to know the angle shifted by the machine.</p> <p>If Use Binary Code-- \u5982\u679c\u4e09\u4e2a\u4f20\u611f\u5668\u4f4d\u7f6e\u4e0d\u7edf\u4e00\uff0c\u5728\u4ece000-111\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u51fa\u73b0\uff1a000-100-110-111 -- \u4e2d\u95f4\u8fc7\u7a0b\u7578\u53d8</p> <p></p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/","title":"Chap2","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#binary-logic-and-gates","title":"Binary Logic and Gates","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#gate-delay","title":"Gate Delay","text":"<ul> <li>In actual physical gates, if one or more input changes causes the output to change, the output change does not occur instantaneously.</li> <li>The delay between an input change(s) and the resulting output change is the gate delay denoted by \\(t_{G}\\)</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#t_pd-propagation-delay","title":"\\(t_{pd}\\) [Propagation Delay]","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#inertial-delay","title":"Inertial Delay","text":"<ul> <li>Rejection Time [\"Thin\" Pulse cannot take place in real-time circumstances]</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#nmos-and-pmos","title":"NMOS and PMOS","text":"<ul> <li>When an \\(NMOS\\) transistor receives a non-negligible voltage, the connection from the source to the drain acts as a wire. Electricity will flow from the source to the drain uninhibited. This is referred to as a closed circuit. </li> </ul> <p>On the other hand, when an nMOS transistor receives a voltage at around 0 volts, the connection from the source to the drain will be broken, which is referred to as an open circuit.</p> <p></p> <ul> <li>The p-type transistor works counter to the n-type transistor. </li> </ul> <p>Whereas the nMOS will form a closed circuit with the source when the voltage is non-negligible, the pMOS will form an open circuit with the source when the voltage is non-negligible.</p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#tristate-gate","title":"Tristate gate","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#common-logic-gate-circuit","title":"Common logic gate circuit","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#nand-operation","title":"NAND operation","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#nor-operation","title":"NOR operation","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#and-or-invert-operation","title":"AND-OR-INVERT operation","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#exclusive-or","title":"Exclusive OR","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#exclusive-nor","title":"Exclusive NOR","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#basic-concepts-of-boolean-algebra","title":"Basic concepts of Boolean algebra","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#the-xor-identities","title":"The XOR identities","text":"<ul> <li>\\(X\\oplus0=X\\ X\\oplus1=\\bar{X}\\)</li> <li>\\(X\\oplus X=0\\ X\\oplus\\bar{X}=1\\)</li> <li>\\(X\\oplus\\bar{Y}=\\bar{X}\\oplus Y=\\overline{X\\oplus Y}\\)</li> <li>\\(X\\oplus Y=Y\\oplus X=X\\bar{Y}+\\bar{X}Y\\)</li> <li>\\(\\overline{X\\oplus Y}=XY+\\bar{X}\\bar{Y}\\)</li> <li>\\((X\\oplus Y)\\oplus Z=X\\oplus(Y\\oplus Z)=X\\oplus Y\\oplus Z\\)</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#basic-properties-of-boolean-algebra","title":"Basic properties of Boolean algebra","text":"<ul> <li>\\((X+Y)(X+Z)=X+YZ\\)</li> <li>\\(\\overline{X+Y}=\\bar{X}\u00b7\\bar{Y}\\)</li> <li>\\(\\overline{X\u00b7Y}=\\bar{X}+\\bar{Y}\\)</li> <li>\\(A(A+B)=A\\)</li> <li>\\(A+AB=A\\)</li> <li>\\(A(\\bar{A}+B)=AB\\)</li> <li>\\(A+\\bar{A}B=A+B\\)</li> <li>\\((A+B)(\\bar{A}+C)(B+C)=(A+B)(\\bar{A}+C)\\)</li> <li>\\(AB+\\bar{A}C+BC=AB+\\bar{A}C\\)</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#complementing-and-duality-rules","title":"Complementing and Duality rules","text":"<ul> <li>For logic function F, interchange AND and OR operators ;complement each constant value and literal, then obtained the new function is the inverse function of the original function is referred to as: \\(\\bar{F}\\)</li> </ul> <p>Note the following two points:</p> <p>The holding operation priority unchanged, if necessary, add brackets indicate.</p> <p>Within converting, public non-operation remains unchanged for several variables</p> <p></p> <ul> <li>Duality rules: For logic function F ,AND \\(\\Leftrightarrow\\) OR 0 \\(\\Leftrightarrow\\) 1 </li> </ul> <p>If F\u2018 is the F Duality, then F is also F\u2019 of Duality. F and F\u2018 is mutually Duality formula .</p> <p>If the two logical functions F and G are equal, then the Duality formula F' and G' are also equal.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#substitution-rules","title":"Substitution rules","text":"<p>Any logical equation that contains a variable A, and if all occurrences of A's position** are replaced with a logical function F, the equation still holds.</p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#shannon-formula","title":"Shannon formula","text":"<p>\u2013 Assuming: Function F contained variables \\(x\\)\u3001\\(\\bar{x}\\), at \"x AND F\" operation, variable \\(x\\) may be replaced by 1 , variable \\(\\bar{x}\\) can be replaced by 0. </p> <p>\u2013 At \"x AND F\" operation, \\(x\\) can be  \"0\", \\(\\bar{x}\\) can be replaced with \"1\" .</p> <p>\\(xf(x,\\overline{x},y...)=xf(1,0,y\u2026)\\)</p> <p>\\(\\overline{x}f(x,\\overline{x},y...)=\\overline{x} f(0,1,y...)\\)</p> <p>Similarly</p> <p>\\(x+f(x,\\bar{x},y\u2026\u2026z)=x+f(0,1,y\u2026\u2026z)\\)</p> <p>\\(\\bar{x}+f(x,\\bar{x},y\u2026\u2026z)=\\bar{x}+f(1,0,y\u2026\u2026,z)\\)</p> <p></p> <p>If the function F contains the both of the variables \\(x,\\bar{x}\\) may be follow:</p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#simplification","title":"Simplification","text":"<ul> <li>Example</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#or-and-style-simplification","title":"OR-AND style simplification","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#standard-forms","title":"Standard Forms","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#canonical-forms","title":"Canonical Forms","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#miniterms","title":"Miniterms","text":"<p>Minterms are AND terms with every variable present in either true or complemented form.</p> <p>Given that each binary variable may appear normal (e.g., x) or complemented (e.g., x ), there are \\(2^n\\) minterms for n variables. denoted as \\(m_i\\)</p> <ul> <li>only one set of variables value make to 1 for any one minterm . </li> <li>any two minterms multiplied equal to 0 </li> <li>Sum of all minterms equal to 1</li> <li>Any one minterm is not contained in the original function F,it can be seen as inAnti-function \\(\\bar{F}\\) \u3002</li> </ul> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#maxterms","title":"Maxterms","text":"<p>Maxterms are OR terms with every variable in true or complemented form.</p> <p>Given that each binary variable may appear normal (e.g., x) or complemented (e.g., x), there are \\(2^n\\) maxterms for n variables. denoted as \\(M_i\\)</p> <ul> <li>only one set of variables value make to 0 for any one Maxterm</li> <li>sum of any two Maxterms equal to \\(M_i+M_j=1 \\ i\\ne j\\)</li> <li>Product of all Maxterms equal to 0 </li> <li>Any one Maxterm is not contained in the original function F,it can be seen as inAnti-function \\(\\bar{F}\\)</li> </ul> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#minterm-and-maxterm-relationship","title":"Minterm and Maxterm Relationship","text":"<ul> <li>\\(M_i\\) and \\(m_i\\) is complement \\(\\overline{M_i}=m_i\\)</li> <li>\\(F=\\sum m_i = \\overline{\\Pi M_i}\\)</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#function-of-the-canonical-forms","title":"Function of the canonical forms","text":"<ul> <li>Sum of Minterms(SOM)</li> <li>Product of Maxterms (POM)</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#standard-forms_1","title":"Standard Forms","text":"<ul> <li>Standard Sum-of-Products (SOP) : Equations are written as OR of AND terms</li> <li>Standard Product-of-Sums (POS) : Equations are written as AND of OR terms</li> </ul> <p>For a logical function SOP or POS is the optimized\uff08\u4e24\u7ea7\u95e8\uff0c\u95e8\u7ea7\u6570\u6700\u5c0f\uff09</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#karnaugh-map-of-functio","title":"Karnaugh map of Functio","text":"<p>\u7565.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#multi-level-circuit-optimization","title":"Multi-level circuit optimization","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#cost","title":"COST","text":"<ul> <li> <p>Literal Cost  : Just Literal Appearances</p> </li> <li> <p>Gate Input Cost \\(G\\) : Add AND OR term but exclude one-literal term</p> </li> </ul> <p>AB+CD+E -- 7</p> <p>BD+ABC+ACD --11</p> <ul> <li>\\(GN\\) Add inverters [For the same variable only count once]</li> </ul> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#other-gate-types","title":"Other Gate Types","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#primitive-gates","title":"Primitive Gates","text":"<p>A gate that can be described using a single primitive operation type (AND or OR) plus an optional inversions.</p> <ul> <li>BUFFER</li> </ul> <p>The same as a connection -- improve circuit voltage levels and increase the speed of circuit operation.(decrease propagation delay)</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#complex-gates","title":"Complex Gates","text":"<p>Requires more than one primitive operation type for its description.</p> <ul> <li>XOR Impletations</li> </ul> <p></p> <ul> <li>Odd Functions and Even Functions</li> </ul> <p>XOR -- Odd Functions</p> <p>Use inversions -- Even Functions</p> <p></p> <ul> <li> <p>P -- Generate the Parity bit</p> </li> <li> <p>E--Decide whether the translated inf is Error</p> </li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#high-resistance-output-tristate-gate","title":"High-Resistance output (tristate gate)","text":"<p>Three-state logic adds a third logic value, Hi-Impedance (\\(Hi-Z\\)), giving three states: \\(0, 1, and\\ Hi-Z\\) on the outputs.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#the-3-state-buffer","title":"The 3-State Buffer","text":"<ul> <li>Resolving 3-State Values on a Connection</li> </ul> <p>Connection of two 3-state buffer outputs, B1 and B0, to a wire, OUT:</p> <p></p> <ul> <li>Data Selection Function with 3-state buffers</li> </ul> <p></p> <ul> <li>Last Row of the table will never occur</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap2/chap2/#transmission-3-state-gate","title":"Transmission 3-state gate","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/","title":"Chap3","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#design-procedure","title":"Design Procedure","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#design-example","title":"Design Example","text":"<ul> <li>BCD to Excess 3 --Refer to PPT</li> </ul> <ul> <li>NOTE: The '1' comes from -- \\(\\bar{T_1}\\)</li> </ul> <p>We can neglect the inversion of input iterals ; but the intermediate varaible\u2019s inversions cannot be neglected</p> <ul> <li> <p>For the first --  3\u7ea7 but high cost </p> </li> <li> <p>For the latter-- 4\u7ea7 but low cost</p> </li> </ul> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#technology-mapping","title":"Technology Mapping","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#decoder","title":"Decoder","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#3-to-8-line-decoder","title":"3-to-8 line decoder","text":"<ul> <li> <p>Basic Form : \\((2^3)\\) 8-3-input AND gates. </p> </li> <li> <p>Split to 2-to-4-line decoder and 1-to-2-line decoder. [Simplify]</p> </li> </ul> <p></p> <p>Another Example</p> <p></p> <ul> <li> <p>Basic \\(128*7\\)</p> </li> <li> <p>3-to-8 &amp; 4-to-16. -- \\(128*2 + 8*3+16*4\\)</p> </li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#decoder-with-enable","title":"Decoder with Enable","text":"<ul> <li>Or to interpret in this way : Use \\(A_1\\) and \\(A_0\\) to decide \\(EN\\) was allocated to which output (\\(D_0\\ D_1\\ D_2\\ D_3\\))</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#decoder-and-or-gate","title":"Decoder and OR gate","text":"<p>Theoratically realize all logic functions \\((SOM)\\) </p> <ul> <li>Example Refer to PPT</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#display-decoder","title":"Display Decoder","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#7-segment-displayer","title":"7-segment Displayer","text":"<p>To decrease count of the pins</p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#encoding","title":"Encoding","text":"<ul> <li>Example Decimal to BCD</li> </ul> <p>If two signals are high simultaneously ? -- Meaningless</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#priority-encoder","title":"Priority Encoder","text":"<p>If more than one input value is \\(1\\), then the encoder just designed does not work.</p> <p>One encoder that can accept all possible combinations of  input values and produce a meaningful result is a priority encoder</p> <ul> <li>Among the \\(1s\\) that appear, it selects the most significant input position (or the least significant input position)containing a 1 and responds with the corresponding binary code for that position.</li> </ul> <p>To process \u4e2d\u65ad\u4e8b\u4ef6</p> <p></p> <ul> <li> <p>Could use a K-map to get equations</p> </li> <li> <p>Also can be read directly from table and manually optimized if careful</p> </li> </ul> <p>\\(A_2=D_4\\)</p> <p>\\(A_1=\\bar{D_4}D_3+\\bar{D}_4\\bar{D}_3D_2=\\bar{D_4}F_1. F_1=(D_3+D_2)\\)</p> <p>\\(A_0=\\bar{D}_4D_3+\\bar{D_4}\\bar{D_3}\\bar{D_2}D_1=\\bar{D_4(D_3+\\bar{D_2}D_1)}\\)</p> <p>\\(V=D_4+F_1+D_1+D_0\\)</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#multiplexers","title":"Multiplexers","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#multiplexer-width-expansion","title":"Multiplexer Width Expansion","text":"<ul> <li> <p>GN(22) </p> </li> <li> <p>Three State can connect all output to one line. --GN=18 (a)</p> </li> <li> <p>GN=14 (b)</p> </li> </ul> <p>Disadvantages : Takes much time . </p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#example","title":"Example","text":"<ul> <li>Gray to Binary Code</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#approach-1","title":"Approach 1","text":"<p>Refer to \\(PPT\\)</p> <p></p> <p>Note that the multiplexer with fixed inputs is identical to a ROM with 3-bit addresses and 2-bit data!</p> <ul> <li>Full adder</li> </ul> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#approach-2","title":"Approach 2","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#arithmetic-functions","title":"Arithmetic Functions","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#half-adder","title":"Half-Adder","text":"<p>The most COMMON: </p> <ul> <li>\\(S=X\\oplus Y\\ C=XY\\)</li> <li>\\(S=(X+Y)\\bar{C}\\ C=\\overline{(\\overline{XY})}\\)</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#full-adder","title":"Full-Adder","text":"<p>\\(X\\oplus Y\\) only different from \\(X+Y\\) when \\(XY=1\\) </p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#binary-adders","title":"Binary Adders","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#carry-lookhead","title":"Carry Lookhead","text":"<ul> <li>To get \\(C_n\\) not dependent on \\(C_{n-1}\\)</li> </ul> <p>\\(P_i=A_i\\oplus B_i\\ \\ \\ G_i=A_iB_i\\\\S_i=P_i\\oplus C_i\\ \\ \\ C_{i+1}=G_i+P_iC_i\\)</p> <p>Thus,we have</p> <p></p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#group-carry-lookahead-logic","title":"Group Carry Lookahead Logic","text":"<p>Disadvantages : </p> <ul> <li>Too many Fan-Outs(propagation delay increase)</li> <li>High Cost</li> </ul> <p>So Simple copy the CLA to more bits is not practical.</p> <ul> <li>\u4f7f\u7528\u7b2c\u4e8c\u5c42CLA \u51cf\u5c11\u4f20\u8f93\u5ef6\u8fdf</li> </ul> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#unsigned-subtraction","title":"Unsigned Subtraction","text":"<ul> <li>TOO Complicated!</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#complements","title":"Complements","text":"<ul> <li>1's Complement</li> </ul> <ul> <li>2's Complement</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#subtraction-with-2s-complement","title":"Subtraction with 2\u2019s Complement","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#signed-integers","title":"Signed Integers","text":"<ul> <li>Signed-Magnitude</li> <li>Signed-Complement</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#2s-complement-addersubtractor","title":"2\u2019s Complement Adder/Subtractor","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#overflow-detection","title":"Overflow Detection","text":"<p>Overflow V = \\(C_n\\oplus C_{n-1}\\)</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#incrementing-decrementing","title":"Incrementing &amp; Decrementing","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#incrementing","title":"Incrementing","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#multiplicationdivision-by-2n","title":"Multiplication/Division by \\(2^n\\)","text":"<ul> <li>Zero Fill</li> <li>Filling usually is applied to the MSB end of the operand, but can also be done on the LSB end</li> <li>Extension- increase in the number of bits at the MSB end of an operand by using a complement representation</li> </ul> <p>Copies the MSB of the operand into the new positions</p> <p>Positive operand example - 01110101 extended to 16 bits:0000000001110101</p> <p>Negative operand example - 11110101 extended to 16 bits:1111111111110101</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#arithmetic-logic-unitalu-implementation","title":"Arithmetic Logic Unit(ALU) implementation","text":"<p>\\(Y_i=B_iS_0+\\bar{B_i}S_1\\)</p> <p></p> <p></p> <p>The Above Part -- (Basic ALU like above)</p> <p>The below Part -- AND OR XOR NOT (one bit)</p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap3/chap3/#combinational-shifter-parameters","title":"Combinational Shifter Parameters","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/","title":"Chap4","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#storage-elements-and-sequential-circuit-analysis","title":"Storage Elements and Sequential Circuit Analysis","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#types-of-sequential-circuits","title":"Types of Sequential Circuits","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#synchronous","title":"Synchronous","text":"<ul> <li>Behavior defined from knowledge of its signals at discrete instances of time</li> <li>Storage elements observe inputs and can change state only in relation to a timing signal (clock pulses from a clock)</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#asynchronous","title":"Asynchronous","text":"<ul> <li> <p>Behavior defined from knowledge of inputs an any instant of time and the order in continuous time in which inputs change</p> </li> <li> <p>If clock just regarded as another input, all circuits are asynchronous!</p> </li> <li> <p>Nevertheless, the synchronous abstraction makes complex designs tractable!</p> </li> </ul> Circuit Delay Model"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#latches","title":"Latches","text":"<ul> <li>Long term maintaining a given stable state</li> <li>There are two stable states, \"0\", \"1\"</li> <li>Under certain conditions, can change state at anytime</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#basicnand-bars-barr-latch","title":"Basic(NAND) \\(\\bar{S}-\\bar{R}\\) Latch","text":"<ul> <li>So RS state 00 is forbidden!</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#basicnor-s-r-latch","title":"Basic(NOR) \\(S-R\\) Latch","text":"<ul> <li>So RS state 11 is forbidden!</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#clocked-s-r-latch","title":"Clocked S-R Latch","text":"<ul> <li>Adding two NAND gates to the basic S - R NAND latch gives the clocked S \u2013 R latch</li> <li>Has a time sequence behavior similar to the basic S-R latch except that the S and R inputs are only observed when the line C is high.</li> </ul> Details"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#d-latch","title":"D Latch","text":"<ul> <li>Adding an inverter to the S-R Latch, gives the D Latch  -- No indeterminate states</li> </ul> Q D Q(t+1) Comment 0 0 0 No Change 0 1 1 Set Q 1 0 0 Clear Q 1 1 1 No Change"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#the-latch-timing-problem","title":"The Latch Timing Problem","text":"<ul> <li>We CANNOT be sure what value will Y output when C=0</li> <li>This is the Latch Timing Problem.</li> <li>In one Clock Pulse, Y can change many times if the Input Changes.</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#flip-flops","title":"Flip-Flops","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#s-r-master-slave-flip-flop","title":"S-R Master-Slave Flip-Flop","text":"<ul> <li>The Problem of 1s Catching</li> </ul> <p>While \\(C=1\\) \\(S\\) \\(and/or\\) \\(R\\) are permited to change.</p> <ul> <li>Suppose \\(Q\\) =\\(0\\) and \\(S\\) goes to \\(1\\) and then back to \\(0\\) with \\(R\\) remaining at \\(0\\)</li> </ul> <p>The master latch sets to \\(1\\)</p> <p>A \\(1\\) is transferred to the slave</p> <ul> <li>Suppose \\(Q\\) = \\(0\\) and \\(S\\) goes to \\(1\\) and back to \\(0\\) and \\(R\\) goes to \\(1\\) and back to \\(0\\)</li> </ul> <p>The master latch sets and then resets</p> <p>A \\(0\\) is transferred to the slave</p> <ul> <li>Personally main problem: The hold state when \\(S=R=0\\)</li> </ul> Details"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#edge-triggered-d-flip-flop","title":"Edge-Triggered D Flip-Flop","text":"<ul> <li>The delay of the S-R master-slave flip-flop can be avoided since the 1s-catching behavior is not present with D replacing S and R inputs</li> <li>The change of the D flip-flop output is associated with the negative edge at the end of the pulse </li> <li>It is called a negative-edge triggered flip-flop</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#flip-flop-timing-parameters","title":"Flip-Flop Timing Parameters","text":"<ul> <li>\\(t_s\\) -- Setup Time</li> </ul> <p>Master-slave - Equal to the width of the triggering pulse (Because of the 1's Catching the triggering pulse once arrives is forbidden to change)</p> <p>Edge-triggered - Equal to a time interval that is generally much less than the width of the the triggering pulse</p> <ul> <li> <p>\\(t_h\\) Hold Time -- often equal to zero</p> </li> <li> <p>\\(t_w\\) Clock Pulse Width</p> </li> <li> <p>\\(t_{px}\\)</p> </li> </ul> <p>Same parameters as for gates except that measured from clock edge that triggers the output change to the output change.</p> <p>More Specifically</p> <ul> <li>\u8fd9\u51e0\u4e2a\u65f6\u95f4\u70b9\u8d77\u70b9/\u7ec8\u70b9\u90fd\u662f\u89e6\u53d1\u8fb9\u7f18\uff1b</li> <li>Propagation Time \u4e00\u5b9a\u957f\u4e8e Hold Time\uff0c\u56e0\u6b64\u5728\u8ba1\u7b97\u7535\u8def\u5ef6\u8fdf\u65f6\u53ea\u8003\u8651 Propagation Time\uff1b</li> <li>Pulse-trigger \u548c Edge-trigger \u5728\u8868\u73b0\u4e0a\u7684\u533a\u522b\u5728\u4e8e Setup Time\uff0c\u524d\u8005\u9700\u8981\u8986\u76d6\u6574\u4e2a pulse(<code>pos</code> or <code>neg</code>)\uff1b</li> </ul> <p></p> Summary"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#sequential-circuit-design","title":"Sequential Circuit Design","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#state-table","title":"State Table","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#state-diagrams","title":"State Diagrams","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#moore-models","title":"Moore Models","text":"<p>Outputs are a function ONLY of states</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#mealy-models","title":"Mealy Models","text":"<p>Outputs are a function of inputs AND states</p> Details"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#equivalent-state","title":"Equivalent State","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#circuit-and-system-level-timing","title":"Circuit and System Level Timing","text":"<ul> <li>\\(t_p\\) clock period  --The interval between occurrences of a specific clock edge in a</li> </ul> <p>periodic clock</p> <ul> <li>\\(t_{pd,COMB}\\) -- total delay of combinational logic along the path from flip-flop output to</li> </ul> <p>flip-flop input</p> <ul> <li>\\(t_{slack}\\) -- extra time in the clock period in addition to the sum of the delays and</li> </ul> <p>setup time on a path : Must be greater than or equal to zero on all paths for correct operation</p> <ul> <li>\\(t_{pd,FF}\\) -- Flip-Flop's delay</li> </ul> <p></p> <ul> <li>Timing Equations</li> </ul> <p>\\(t_p=t_{slack}+(t_{pd,FF}+t_{pd,COMB}+t_s)\\)</p> <p>\\(t_{stack}\\) must be greater than or equal to zero  so \\(t_{p} \\ge max(t_{pd,FF}+t_{pd,COMB}+t_s)\\)</p> <p>from all paths from flip-flop output to flip-flop input</p> <ul> <li> <p>Can be calculated more precisely by using \\(t_{PHL}\\) and \\(t_{PLH}\\) values instead of \\(t_{pd}\\) values, but requires consideration of inversions on paths</p> </li> <li> <p>Calculation[Refer to PPT]</p> </li> </ul> Example Recognize 1101 Milley Model Moore Model <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#state-assignment","title":"State Assignment","text":"<ul> <li>Each of the m states must be assigned a unique code</li> <li>Minimum member of bits required is n such that \\(n\\ge[log_2m]\\)</li> </ul> <p>The task of state assignment involves determining the encoding length and finding an optimal (often challenging) or near-optimal state assignment scheme, leading to different expressions for output functions and activation functions, and consequently varying circuit complexities. The basic principles of state assignment are:</p> <ol> <li>Determine the length of the encoding.</li> <li>Seek an optimal (difficult to find) or near-optimal state assignment scheme.</li> </ol> <p>The fundamental principles of assignment are as follows:</p> <ul> <li>Under the same input conditions, states with the same next states should preferably be assigned adjacent binary codes.</li> <li>Under adjacent input conditions, the next states of the same current state should preferably be assigned adjacent binary codes.</li> <li>Current states with identical outputs should preferably be assigned adjacent binary codes.</li> <li>Minimize the occurrence of the most frequently appearing states in the state table, or assign logic 0 to initial states.</li> </ul> <p>Generally, the first principle is of greater importance and should be prioritized. Subsequently, consideration should be given to the frequency of occurrence of state pairs resulting from the first three principles, with a preference for assigning adjacent binary codes to state pairs with higher frequencies.</p> <ul> <li> <p>EXAMPLE -- Refer to the PPT</p> </li> <li> <p>Design a sequential modulo 3 accumulator for 2-bit operands</p> </li> </ul> Details"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#other-flip-flop-types","title":"Other Flip-Flop Types","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#j-k-flip-flop","title":"J-K Flip-Flop","text":"<p>Same as S-R flip-flop with J analogous to S and K analogous to R</p> <ul> <li>J=K=1 is allowed ; the flip-flop changes to opposite state</li> <li>As a master-slave, has same \u201c1s catching\u201d behavior as S-R flip-flop</li> <li>To avoid 1s catching behavior,one solution used is to use an edge-triggered D as the core of the flip-flop</li> </ul> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#t-flip-flop","title":"T Flip-flop","text":"<p>Has a single input T</p> <ul> <li>For T = 0, no change to state</li> <li>For T = 1, changes to opposite state</li> </ul> <p>Same as a J-K flip-flop with J = K = T</p> <ul> <li>As a master-slave, has same \u201c1s catching\u201d behavior as J-K flip-flop</li> <li> <p>Cannot be initialized to a known state using the T input</p> </li> <li> <p>To avoid 1s catching behavior,one solution used is to use an edge-triggered D as the core of the flip-flop</p> </li> </ul> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#basic-flip-flop-descriptors","title":"Basic Flip-Flop Descriptors","text":"<ul> <li>Characteristic Table</li> <li>Excitation Table</li> </ul> <p>Eg.</p> <p></p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chap4/chap4/#flip-flop-behavior-example","title":"Flip-Flop Behavior Example","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/DHI/Digital%20Hardware%20Implementation/","title":"Digital Hardware Implementation","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/DHI/Digital%20Hardware%20Implementation/#programmable-logic","title":"Programmable Logic","text":"<ol> <li>Economies of Large-Scale Production: Large-scale production of integrated circuits reduces the cost per chip as production costs can be spread across a greater number of chips. Initial setup and tooling expenses incurred during the production process can be amortized over a larger quantity, resulting in lower costs per chip.</li> <li>Small-Scale Design Requirements: While large-scale production is generally more economical, some designs may require only a relatively small number of chips. This could be due to the customized nature of specific applications or limitations in market size.</li> <li>Need for ICs that can be Produced in Large Volumes and Handle Small-Scale Designs: This indicates a requirement for integrated circuits that can be both mass-produced efficiently and effectively accommodate multiple designs.</li> <li>Programmable Logic Devices: These are a specialized category of integrated circuits that can be programmed after manufacturing. They can be divided into two types: field-programmable logic devices (FPLDs), which can be programmed outside the manufacturing environment, and erasable/reprogrammable logic devices.</li> <li>Erasable and Reprogrammable Nature: Most programmable logic devices possess the ability to be erased and reprogrammed. This feature allows for updating devices, correcting errors, and reusing the device for different designs, showcasing a high level of reusability.</li> <li>Used for Prototyping and Laboratory Teaching: Programmable logic devices are well-suited for prototyping as they enable engineers to make adjustments and modifications after the initial design is completed. Additionally, they serve as ideal tools in laboratory settings for demonstrating various designs and concepts.</li> <li>Utilized in Prototype Verification for Design: Programmable logic devices are often employed to verify design prototypes, allowing for debugging and testing before the final manufacturing of regular integrated circuits. For instance, complete Intel Pentium designs were prototyped using specialized systems based on a large number of VLSI programmable devices.</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/DHI/Digital%20Hardware%20Implementation/#programming-technologies","title":"programming technologies","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/DHI/Digital%20Hardware%20Implementation/#permanent","title":"Permanent","text":"<ul> <li>Mask Programming</li> <li>Fuse</li> <li>Antiques</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/DHI/Digital%20Hardware%20Implementation/#not-permanent","title":"Not Permanent","text":"<ul> <li>Volatile - Programming lost if chip power lost</li> </ul> <p>SIngle-bit-storge element</p> <ul> <li>Non-volatile</li> </ul> <p>\u200b   Reasable</p> <p>\u200b   Eletrically erasable</p> <p>\u200b   Flash</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/DHI/Digital%20Hardware%20Implementation/#read-only-memoryrom","title":"Read Only Memory(ROM)","text":"<ul> <li>OR Gate Changable</li> </ul> <ul> <li>\u4e5f\u53ef\u4ee5\u5c06\u8f93\u5165\u770b\u4f5c addr, \u8f93\u51fa\u770b\u4f5c data,\u6765\u4f5c\u50a8\u5b58\u529f\u80fd</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/DHI/Digital%20Hardware%20Implementation/#programmable-array-logicpal","title":"Programmable Array Logic(PAL)","text":"<ul> <li>AND Gate Changable</li> </ul> <p>\u53ef\u5c06\u9996\u6b21\u4e0e\u6216\u5f53\u4f5c\u8f93\u5165\u56de\u5230AND gates input \u53ef\u5b9e\u73b0\u591a\u53d8\u91cf\u4e0e\u6216.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/DHI/Digital%20Hardware%20Implementation/#programmable-logic-array-pla","title":"Programmable Logic Array (PLA)","text":"<ul> <li>And Or gates all changable</li> </ul> <ul> <li> <p>\\(And\\) Gates limited</p> <p></p> <p>\u9002\u5f53\u53d6\u53cd\uff0c\u5c06\u9700\u89816\u4e2a\u4e0e\u9879\u2192 \u9700\u89814\u4e2a\u4e0e\u9879</p> </li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/DHI/Digital%20Hardware%20Implementation/#complex-programmable-logic-device-cpld-or-field-programmable-gate-arrayfpga","title":"Complex Programmable Logic Device (CPLD) or Field-Programmable Gate Array(FPGA)","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/DHI/Digital%20Hardware%20Implementation/#look-up-tables","title":"Look up tables","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/MB/MB/","title":"MB","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/MB/MB/#memory-organization","title":"Memory Organization","text":"<ul> <li>Access is based on words as the access unit.</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/MB/MB/#basic-memory-operations","title":"Basic Memory Operations","text":"<ul> <li>Read Memory </li> </ul> Chip select Read/not Write memory operation 0 None 1 0 Write to selected word 1 1 Read from selected word <ul> <li>Write Memory</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/MB/MB/#memory-opertion-timing","title":"Memory opertion timing","text":"<p>65ns -- 'read speed'--is critical for the whole speed.</p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/MB/MB/#ram","title":"RAM","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/MB/MB/#types-of-random-access-memory","title":"Types of Random Access Memory","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/MB/MB/#static-ram-cell","title":"Static RAM -- Cell","text":"<p>Information stored in Latches</p> <p></p> <p>Select = 0 HOLD</p> <p>Select = 1 OUTPUT DATA. \u300cINPUT depends on \\(B\\) and \\(\\bar{B}\\)\u300d</p> <p></p> <ul> <li> <p>Bit select = 0 : NO WRITING or READING -- Bit Slice Disabled</p> </li> <li> <p>Word select : only one allowed to be ONE</p> </li> <li> <p>Bit select = 1:</p> </li> </ul> Read/not Write B not B Word select Result 1 0 0 1 One piece of information stored in one selected latch output  0 Data not Data 1 The input information is stored in the one selected latch  <ul> <li>\\(2^{n-1}\\) Word using 1-Bit RAM IC</li> </ul> <p></p> <p>Chip Select : When CS=0 Data Output \u9ad8\u963b\u6001</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/MB/MB/#cell-arrays-and-coincident-selection","title":"Cell Arrays and Coincident Selection","text":"<ul> <li>Uses two decoders, one for words and one for bits</li> <li>Word select becomes Row select</li> <li>Bit select becomes Column select</li> </ul> <p>16x1</p> <p></p> <ul> <li>Still one ONE chosen</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/MB/MB/#ram-ics-with-1-bitword","title":"RAM ICs with &gt; 1 Bit/Word","text":"<p>8x2</p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/MB/MB/#making-larger-memories-word-extension","title":"Making Larger Memories: Word extension","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/MB/MB/#making-wider-memories-bit-extension","title":"Making Wider Memories: Bit extension","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/MB/MB/#dynamic-ram","title":"Dynamic RAM","text":"<p>information stored as electrical charges</p> <p></p> <ul> <li>Read will affect the stored information(has to write again)</li> </ul> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/MB/MB/#read-write","title":"Read &amp; Write","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/MB/MB/#types","title":"Types","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/MB/MB/#synchronous-dram-sdram","title":"Synchronous DRAM (SDRAM)","text":"<p>Transfers to and from the DRAM are synchronize with a clock</p> <p>Synchronous registers appear on:</p> <ul> <li>Address input</li> <li>Data input</li> <li>Data output</li> </ul> <p>Column address counter</p> <ul> <li>for addressing internal data to be transferred on each clock cycle</li> <li>beginning with the column address counts up to column address + burst size \u2013 1</li> </ul> <p>Example: Memory data path width: 1 word = 4 bytes</p> <p></p> <p>SDRAM burst time-- burst size=4 </p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/MB/MB/#double-data-rate-sdram-ddr-sdram","title":"Double Data Rate SDRAM (DDR SDRAM)","text":"<ul> <li> <p>Transfers data on both edges of the clock</p> </li> <li> <p>Provides a transfer rate of 2 data words perclock cycle</p> </li> <li> <p>Example: Same as for synchronous DRAM</p> </li> </ul> <p>Read cycle time = 60 ns</p> <p>Memory Bandwidth: (2 x 32)/(60 x 10-9) = 1.066 Mbytes/sec</p> <ul> <li>SRAM as Cache -- read more memory than expected makes CPU reads faster when asking for other data(CPU reads from SRAM)</li> </ul> <p>SPEED UP!</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/MB/MB/#rambus-dram-rdram","title":"RAMBUS\u00ae DRAM (RDRAM)","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/MB/MB/#dependence-on-power-supply","title":"Dependence on Power Supply","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/MB/MB/#volatile","title":"Volatile","text":"<p>Loses stored information when power turned off</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/MB/MB/#non-volatile","title":"Non-volatile","text":"<p>Retains information when power turned off</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register/","title":"Registers and Register Transfers","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register/#registers","title":"Registers","text":"Example"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register/#storage-and-load-enable","title":"Storage and Load Enable","text":"<ul> <li> <p>Load = 0  : Store</p> </li> <li> <p>Load = 1  :  Load</p> </li> </ul> <p>The Problem is : Clock Skew  \u300cAnd Gate Delay\u300d</p> <p>\u52d8\u8bef Load = 0 \u65f6 \u8109\u51b2\u6d88\u5931\uff0c\u5bc4\u5b58\u5668\u65e0\u6cd5\u88ab\u8f7d\u5165</p> Example <p> </p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register/#register-transfer","title":"Register Transfer","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register/#microoperations","title":"Microoperations","text":"<p>Logical Groupings:</p> <ul> <li>Transfer - move data from one register to another</li> <li>Arithmetic - perform arithmetic on data in registers </li> <li>Logic - manipulate data or use bitwise logical operations</li> <li>Shift - shift data in registers</li> </ul> <p></p> <p></p> <p>\\(if\\ \\ (K_1=1)\\ then\\ \\ (R_2\u2190R_1)\\)  \u8868\u793a\u4e3a \\(K_1 : R_2\u2190R_1\\)</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register/#register-transfer-structures","title":"Register Transfer structures","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register/#multiplexer-based-transfers","title":"Multiplexer-Based Transfers","text":"<p>note : clocks are omitted for clarity</p> <p>\\(K_1 : R_0\u2190R_1\\)</p> <p>\\(K2\\bar{K1}: R_0\u2190R_2\\)</p> <ul> <li>\\(R_0\\) 's Load : \\(K_1+K2\\bar{K1}=K_1+K_2\\)</li> </ul> <p></p> Detailed-logic <p> </p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register/#register-cell-design","title":"Register Cell Design","text":"<ul> <li> <p>Example 1 Not encoded \u300cone hot code\u300d</p> </li> <li> <p>Example 2 Encoded.        \u300cBinary or Gray\u300d</p> </li> </ul> <p>EG1: Example</p> <p>Register A (m-bits) Sepecification:</p> <p>Data input B</p> <p>Control input \\(C_x \\ C_y\\) with combinations\\((0,0)\\ (0,1)\\ (1,0)\\)</p> <p>Register Transfers:</p> <p>\\(C_x : A \\leftarrow A\\ or\\ B\\)</p> <p>\\(C_y\\)  : \\(A \\leftarrow A\\ xor\\ B\\)</p> <p>Hold State : \\((0,0)\\)</p> <p>Multiplexer Approach</p> <p></p> <p>Thus , we have :</p> <p>\\(Load = C_x + C_y\\)</p> <p>Cost : 6+3+2(or)+8(xor) = 19</p> <p>Sequential Circuit Design Approach</p> <ul> <li>State table\u300cCost Less\u300d</li> </ul> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register/#bus-based-transfers","title":"Bus-Based Transfers","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register/#dedicated-mux-based-transfers","title":"Dedicated Mux-Based Transfers","text":"<p>Similar to using a MUX, the MUX in this case is no longer dedicated logic for a specific register but is shared logic used by three registers. </p> <p>The MUX in the bus selects one input among all registers and outputs it to all registers. The bus controls which (or how many) registers receive this signal by manipulating the Load signal.</p> <p>Advantages:</p> <ol> <li>The circuit is more streamlined, resulting in lower costs, and this advantage becomes more apparent as the number of registers increases.</li> <li>Cost-effectiveness is improved with the shared logic, as opposed to dedicated logic for each register.</li> </ol> <p>Disadvantages:</p> <ol> <li>At any given moment, the bus can only transmit one piece of data, meaning there is only one data source.</li> <li>Only one data transfer is possible to other locations within the same clock cycle. For instance, performing a swap operation requires at least two buses to implement.\u300c\u65e0\u6cd5\u505a\u5e76\u884c\u4f20\u8f93\u300d</li> <li>Due to these characteristics, the requirements must be carefully evaluated, and the appropriate structure chosen for implementation.</li> </ol> <p>Gate Cost. (increase linearly)</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register/#three-state-bus","title":"Three-State Bus","text":"<p>The 3-input MUX can be replaced by a 3-state node (bus) and 3-state buffers.</p> <ul> <li>Cost is further reduced, but transfers are limited.</li> <li>Characterize the simultaneous transfers possible with this structure.</li> <li>Characterize the cost savings and compare.</li> <li>The input and output can share the same line, requiring only n pins.</li> </ul> <p>Gate Cost Only 2n (suppose cost for three-state is 2)</p> Example <p> </p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register/#shift-registers","title":"Shift Registers","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register/#_1","title":"\u4e32\u884c\u5b9e\u73b0","text":"<p>\u5047\u8bbe\u73b0\u5728\u6211\u4eec\u6709 4 \u4e2a <code>FF</code> \u9996\u5c3e\u76f8\u8fde\uff0c\u73b0\u5728\u4e32\u884c\u8f93\u5165 <code>1001</code> \u8fd9 4bits \u7684\u6570\u636e\uff08\u5f53\u7136\uff0c\u5b8c\u5168\u8f93\u5165\u9700\u8981 4 \u4e2a\u65f6\u949f\u5468\u671f\uff09\u3002</p> <p>\u5047\u8bbe\u7b2c 1 \u4e2a\u5468\u671f\u7ed3\u675f\u540e\uff0c<code>1001</code> \u6700\u53f3\u4fa7\u7684 <code>1</code> \u88ab\u5b58\u5728\u4e86\u7b2c\u4e00\u4e2a FF\uff0c\u5219\uff1a</p> \u5468\u671f \u5f85\u8f93\u5165 FF1 FF2 FF3 FF4 SO 1 <code>100</code> <code>1</code> ? ? ? <code>1???</code> 2 <code>10</code> <code>0</code> <code>1</code> ? ? <code>01??</code> 3 <code>1</code> <code>0</code> <code>0</code> <code>1</code> ? <code>001?</code> 4 <code>1</code> <code>0</code> <code>0</code> <code>1</code> <code>1001</code> 5 ? <code>1</code> <code>0</code> <code>0</code> <code>?100</code> 6 ? ? <code>1</code> <code>0</code> <code>??10</code> 7 ? ? ? <code>1</code> <code>???1</code> <ul> <li> <p>\u8fd9\u91cc\u7684 SO \u6307\u7684\u662f\u4ece\u5f53\u524d\u8f6e\u6b21\u5f00\u59cb\uff0c\u8bfb\u5165 4bits \u6570\u636e\u5f97\u5230\u7684\u4e32\u884c\u8f93\u51fa\u7ed3\u679c\uff0c\u8fd9\u91cc\u7684 4bits \u5f53\u7136\u662f\u5bf9\u5e94\u8f93\u5165\u7684 4bits\u3002</p> </li> <li> <p>\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u7b2c\u56db\u8f6e\u524d\u540e\u7684\u7ed3\u679c\u5206\u522b\u662f\u5de6\u79fb\u548c\u53f3\u79fb\u7684\u7ed3\u679c\uff0c\u5f53\u7136\uff0c\u5982\u679c\u662f\u8981\u8003\u8651\u5177\u6709\u5b9e\u9645\u8ba1\u7b97\u4ef7\u503c\u7684\u4f4d\u79fb\uff0c\u6211\u4eec\u5f53\u7136\u9700\u8981\u586b\u5145 <code>?</code> \u7684\u503c\uff0c\u4e0d\u8fc7\u8fd9\u90fd\u662f\u5c0f\u4e8b\u60c5\u3002</p> </li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register/#parallel-load-shift-registersmux","title":"Parallel Load Shift Registers\u300cMux\u300d","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register/#shift-registers-with-additional-functions","title":"Shift Registers with Additional Functions","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register/#counters","title":"Counters","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register/#ripple-counter","title":"Ripple Counter","text":"Example <ul> <li>The operating frequency gradually reduces to half of the previous layer.</li> </ul> <ul> <li>Also, there is an intermediate process, eg.  the transition from 111 to 000 has to go through 010 </li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register/#synchronous-counter","title":"Synchronous Counter","text":"<p>Internal details =&gt; Incrementer</p> <p>Internal Logic</p> <ul> <li>\ufeff\ufeffXOR complements each bit</li> <li>\ufeff\ufeffAND chain causes complement of a bit if all bits toward LSB from it equal 1</li> </ul> <p>Count Enable</p> <ul> <li>Forces all outputs of AND chain to 0 to \"hold\" the state</li> </ul> <p>Carry Out</p> <ul> <li> <p>Added as part of incrementer</p> </li> <li> <p>Connect to Count Enable of additional 4-bit counters to form larger counters</p> </li> </ul> <p>\u4e3a\u4e86\u5b9e\u73b0\u9006\u5411\u8ba1\u6570\u5668\uff0c\u6211\u4eec\u5219\u9700\u8981\u5c06\u81ea\u589e\u5668\u6362\u4e3a\u81ea\u51cf\u5668\u3002\u505a\u6cd5\u53ea\u4e0d\u8fc7\u662f\u5c06\u5f02\u6216\u95e8\u7684\u63a7\u5236\u4fe1\u53f7\u53d6\u53cd</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register/#counter-with-parallel-load","title":"Counter with parallel load","text":"count Load Operation 0 0 Hold 0 1 Load Parallel data 1 x count"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register/#design-example","title":"Design Example","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register/#synchronous-bcd","title":"Synchronous BCD","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register/#counting-modulo-n","title":"Counting Modulo N","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register/#serial-transforms-and-microoperations","title":"Serial Transforms and Microoperations","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register_%E5%89%AF%E6%9C%AC/","title":"Registers and Register Transfers","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register_%E5%89%AF%E6%9C%AC/#registers","title":"Registers","text":"Example"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register_%E5%89%AF%E6%9C%AC/#storage-and-load-enable","title":"Storage and Load Enable","text":"<ul> <li> <p>Load = 0  : Store</p> </li> <li> <p>Load = 1  :  Load</p> </li> </ul> <p>The Problem is : Clock Skew  \u300cAnd Gate Delay\u300d</p> <p>\u52d8\u8bef Load = 0 \u65f6 \u8109\u51b2\u6d88\u5931\uff0c\u5bc4\u5b58\u5668\u65e0\u6cd5\u88ab\u8f7d\u5165</p> Example <p> </p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register_%E5%89%AF%E6%9C%AC/#register-transfer","title":"Register Transfer","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register_%E5%89%AF%E6%9C%AC/#microoperations","title":"Microoperations","text":"<p>Logical Groupings:</p> <ul> <li>Transfer - move data from one register to another</li> <li>Arithmetic - perform arithmetic on data in registers </li> <li>Logic - manipulate data or use bitwise logical operations</li> <li>Shift - shift data in registers</li> </ul> <p></p> <p></p> <p>\\(if\\ \\ (K_1=1)\\ then\\ \\ (R_2\u2190R_1)\\)  \u8868\u793a\u4e3a \\(K_1 : R_2\u2190R_1\\)</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register_%E5%89%AF%E6%9C%AC/#register-transfer-structures","title":"Register Transfer structures","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register_%E5%89%AF%E6%9C%AC/#multiplexer-based-transfers","title":"Multiplexer-Based Transfers","text":"<p>note : clocks are omitted for clarity</p> <p>\\(K_1 : R_0\u2190R_1\\)</p> <p>\\(K2\\bar{K1}: R_0\u2190R_2\\)</p> <ul> <li>\\(R_0\\) 's Load : \\(K_1+K2\\bar{K1}=K_1+K_2\\)</li> </ul> <p></p> Detailed-logic <p> </p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register_%E5%89%AF%E6%9C%AC/#register-cell-design","title":"Register Cell Design","text":"<ul> <li> <p>Example 1 Not encoded \u300cone hot code\u300d</p> </li> <li> <p>Example 2 Encoded.        \u300cBinary or Gray\u300d</p> </li> </ul> <p>EG1: Example</p> <p>Register A (m-bits) Sepecification:</p> <p>Data input B</p> <p>Control input \\(C_x \\ C_y\\) with combinations\\((0,0)\\ (0,1)\\ (1,0)\\)</p> <p>Register Transfers:</p> <p>\\(C_x : A \\leftarrow A\\ or\\ B\\)</p> <p>\\(C_y\\)  : \\(A \\leftarrow A\\ xor\\ B\\)</p> <p>Hold State : \\((0,0)\\)</p> <p>Multiplexer Approach</p> <p></p> <p>Thus , we have :</p> <p>\\(Load = C_x + C_y\\)</p> <p>Cost : 6+3+2(or)+8(xor) = 19</p> <p>Sequential Circuit Design Approach</p> <ul> <li>State table\u300cCost Less\u300d</li> </ul> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register_%E5%89%AF%E6%9C%AC/#bus-based-transfers","title":"Bus-Based Transfers","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register_%E5%89%AF%E6%9C%AC/#dedicated-mux-based-transfers","title":"Dedicated Mux-Based Transfers","text":"<p>Similar to using a MUX, the MUX in this case is no longer dedicated logic for a specific register but is shared logic used by three registers. </p> <p>The MUX in the bus selects one input among all registers and outputs it to all registers. The bus controls which (or how many) registers receive this signal by manipulating the Load signal.</p> <p>Advantages:</p> <ol> <li>The circuit is more streamlined, resulting in lower costs, and this advantage becomes more apparent as the number of registers increases.</li> <li>Cost-effectiveness is improved with the shared logic, as opposed to dedicated logic for each register.</li> </ol> <p>Disadvantages:</p> <ol> <li>At any given moment, the bus can only transmit one piece of data, meaning there is only one data source.</li> <li>Only one data transfer is possible to other locations within the same clock cycle. For instance, performing a swap operation requires at least two buses to implement.\u300c\u65e0\u6cd5\u505a\u5e76\u884c\u4f20\u8f93\u300d</li> <li>Due to these characteristics, the requirements must be carefully evaluated, and the appropriate structure chosen for implementation.</li> </ol> <p>Gate Cost. (increase linearly)</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register_%E5%89%AF%E6%9C%AC/#three-state-bus","title":"Three-State Bus","text":"<p>The 3-input MUX can be replaced by a 3-state node (bus) and 3-state buffers.</p> <ul> <li>Cost is further reduced, but transfers are limited.</li> <li>Characterize the simultaneous transfers possible with this structure.</li> <li>Characterize the cost savings and compare.</li> <li>The input and output can share the same line, requiring only n pins.</li> </ul> <p>Gate Cost Only 2n (suppose cost for three-state is 2)</p> Example <p> </p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register_%E5%89%AF%E6%9C%AC/#shift-registers","title":"Shift Registers","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register_%E5%89%AF%E6%9C%AC/#_1","title":"\u4e32\u884c\u5b9e\u73b0","text":"<p>\u5047\u8bbe\u73b0\u5728\u6211\u4eec\u6709 4 \u4e2a <code>FF</code> \u9996\u5c3e\u76f8\u8fde\uff0c\u73b0\u5728\u4e32\u884c\u8f93\u5165 <code>1001</code> \u8fd9 4bits \u7684\u6570\u636e\uff08\u5f53\u7136\uff0c\u5b8c\u5168\u8f93\u5165\u9700\u8981 4 \u4e2a\u65f6\u949f\u5468\u671f\uff09\u3002</p> <p>\u5047\u8bbe\u7b2c 1 \u4e2a\u5468\u671f\u7ed3\u675f\u540e\uff0c<code>1001</code> \u6700\u53f3\u4fa7\u7684 <code>1</code> \u88ab\u5b58\u5728\u4e86\u7b2c\u4e00\u4e2a FF\uff0c\u5219\uff1a</p> \u5468\u671f \u5f85\u8f93\u5165 FF1 FF2 FF3 FF4 SO 1 <code>100</code> <code>1</code> ? ? ? <code>1???</code> 2 <code>10</code> <code>0</code> <code>1</code> ? ? <code>01??</code> 3 <code>1</code> <code>0</code> <code>0</code> <code>1</code> ? <code>001?</code> 4 <code>1</code> <code>0</code> <code>0</code> <code>1</code> <code>1001</code> 5 ? <code>1</code> <code>0</code> <code>0</code> <code>?100</code> 6 ? ? <code>1</code> <code>0</code> <code>??10</code> 7 ? ? ? <code>1</code> <code>???1</code> <ul> <li> <p>\u8fd9\u91cc\u7684 SO \u6307\u7684\u662f\u4ece\u5f53\u524d\u8f6e\u6b21\u5f00\u59cb\uff0c\u8bfb\u5165 4bits \u6570\u636e\u5f97\u5230\u7684\u4e32\u884c\u8f93\u51fa\u7ed3\u679c\uff0c\u8fd9\u91cc\u7684 4bits \u5f53\u7136\u662f\u5bf9\u5e94\u8f93\u5165\u7684 4bits\u3002</p> </li> <li> <p>\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u7b2c\u56db\u8f6e\u524d\u540e\u7684\u7ed3\u679c\u5206\u522b\u662f\u5de6\u79fb\u548c\u53f3\u79fb\u7684\u7ed3\u679c\uff0c\u5f53\u7136\uff0c\u5982\u679c\u662f\u8981\u8003\u8651\u5177\u6709\u5b9e\u9645\u8ba1\u7b97\u4ef7\u503c\u7684\u4f4d\u79fb\uff0c\u6211\u4eec\u5f53\u7136\u9700\u8981\u586b\u5145 <code>?</code> \u7684\u503c\uff0c\u4e0d\u8fc7\u8fd9\u90fd\u662f\u5c0f\u4e8b\u60c5\u3002</p> </li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register_%E5%89%AF%E6%9C%AC/#parallel-load-shift-registersmux","title":"Parallel Load Shift Registers\u300cMux\u300d","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register_%E5%89%AF%E6%9C%AC/#shift-registers-with-additional-functions","title":"Shift Registers with Additional Functions","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register_%E5%89%AF%E6%9C%AC/#counters","title":"Counters","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register_%E5%89%AF%E6%9C%AC/#ripple-counter","title":"Ripple Counter","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Register/register_%E5%89%AF%E6%9C%AC/#synchronous-counter","title":"Synchronous Counter","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec1/Lecture1/","title":"Lecture 1 - Finite Automata","text":"<p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec1/Lecture1/#lecture-1-finite-automata","title":"Lecture 1 - Finite Automata","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec1/Lecture1/#example","title":"Example :","text":"<p>Given a weighted graph G :</p> <ul> <li>What's the MST?</li> <li>What's the weight of the MST?</li> <li>Does G have a ST with wieght at most k(k is a given integer)? -- Decision Problem</li> </ul> <p>Given a string w, is \\(w\\in L=\\{encode(G,k) | G\\ is\\ a\\ graph,that\\ has\\ a\\ ST\\ with\\ weight\\ at\\ most\\ k\\}\\)? </p> <ul> <li>Decision Problem \\(\\Rightarrow\\) A Laguanage</li> <li>A Laguanage \\(\\Rightarrow\\) A Formal Language</li> <li>Therefore, a Decision Problem P \\(\\Leftrightarrow\\) A Language L</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec1/Lecture1/#definition","title":"Definition :","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec1/Lecture1/#alphabet","title":"Alphabet","text":"<ul> <li>A finite set of symbols</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec1/Lecture1/#string","title":"String","text":"<ul> <li>A finite sequence of symbols from an alphabet \\(\\Sigma\\)</li> <li>concatenation: \\(w_1w_2\\)</li> <li>exponentiation: \\(w^n\\)</li> <li>empty string: \\(e\\)</li> <li>reverse: \\(w^R\\)</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec1/Lecture1/#language","title":"Language","text":"<ul> <li>A set of strings over an alphabet \\(\\Sigma\\)</li> <li>concatenation: \\(L_1L_2 = \\{w_1w_2 | w_1\\in L_1,w_2\\in L_2\\}\\)</li> <li>exponentiation: \\(L^n = \\{w^n | w\\in L\\}\\)</li> <li>\\(A^0 = \\{e\\}\\)</li> <li>\\(A^* = \\bigcup_{i=0}^{\\infty}A^i\\)</li> <li>\\(A^+ = \\bigcup_{i=1}^{\\infty}A^i\\)</li> <li>\\(\\Sigma^* = \\bigcup_{i=0}^{\\infty}\\Sigma^i\\)</li> <li>\\(\\Sigma^+ = \\bigcup_{i=1}^{\\infty}\\Sigma^i\\)</li> <li>\\(\\Sigma^i = \\{w | w\\ is\\ a\\ string\\ of\\ length\\ i\\}\\)</li> <li>Language Reverse: \\(L^R = \\{w^R | w\\in L\\}\\)</li> <li>\\(\\{\\}\\) vs \\(\\{e \\}\\) : size of \\(\\{\\}\\) is 0, size of \\(\\{e\\}\\) is 1</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec1/Lecture1/#computable-model","title":"Computable Model","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec1/Lecture1/#finite-automata","title":"Finite Automata","text":"<p>A finite automaton is a 5-tuple \\((K,\\Sigma,\\delta,s,F)\\) where:</p> <ul> <li>\\(K\\) is a finite set of states</li> <li>\\(\\Sigma\\) is an alphabet</li> <li>\\(\\delta:K\\times\\Sigma\\rightarrow K\\) is the transition function</li> <li>\\(s \\in K\\) is the start state</li> <li>\\(F\\subseteq K\\) is the set of accept states</li> </ul> <p>A configuration of an FA is a pair \\((q,w)\\) where \\(q\\in Q\\) and \\(w\\in\\Sigma^*\\) where \\(q\\) is the current state and \\(w\\) is the remaining input.</p> <ul> <li>yeild in one step: \\((q,w)\\vdash_M(q',w')\\) if \\(w = aw'\\) and \\(\\delta(q,a) = q'\\)</li> <li>yeild in zero or more steps: \\((q,w)\\vdash_M^*(q',w')\\) if \\((q,w)\\vdash_M(q_1,w_1)\\vdash_M(q_2,w_2)\\vdash_M\\cdots\\vdash_M(q',w')\\)</li> </ul> <p>M accepts a language L if (two conditions):</p> <ul> <li>M accepts all strings in L</li> <li>Or M rejects all strings not in L</li> <li>M accepts a UNIQUE Language</li> <li>\\(L(M) = \\{w | M \\ accepts\\ w\\}\\)</li> </ul> <p>A language is regular if it is accepted by a finite automaton.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec1/Lecture1/#theorem","title":"Theorem","text":"<p>If A and B are regular languages, so is \\(A\\cup B\\). Proof:</p> <ul> <li>Let \\(M_A\\) and \\(M_B\\) be FAs that accept A and B respectively.</li> <li>\\(M_A = (K_A,\\Sigma,\\delta_A,s_A,F_A)\\)</li> <li>\\(M_B = (K_B,\\Sigma,\\delta_B,s_B,F_B)\\)</li> <li>Construct a new FA \\(M\\) that accepts \\(A\\cup B\\):</li> <li>\\(K_v = K_A\\times K_B\\)</li> <li>\\(s_v = (s_A,s_B)\\)</li> <li>\\(F_v =(F_A\\times K_B)\\cup(K_A\\times F_B)\\)</li> <li>\\(\\delta_v((q_A,q_B),a) = (\\delta_A(q_A,a),\\delta_B(q_B,a))\\) for any \\((q_A,q_B)\\in K_A\\times K_B\\) and \\(a\\in\\Sigma\\)</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec1/Lecture1/#non-deterministic-finite-automata","title":"Non-deterministic Finite Automata","text":"<ul> <li>next state is not uniquely determined by the current state and the input symbol</li> <li>e-transitions: \\(\\delta(q,e)\\)</li> </ul> <p>A NFA is a 5-tuple \\((K,\\Sigma,\\Delta,s,F)\\) where:</p> <ul> <li>K is a finite set of states</li> <li>\\(\\Sigma\\) is an alphabet</li> <li>\\(\\Delta:K\\times(\\Sigma\\cup\\{e\\})\\times K\\) is the transition relation</li> <li>\\(s\\in K\\) is the start state</li> <li>\\(F\\subseteq K\\) is the set of accept states</li> </ul> <p>Acceptance of a string by a NFA:</p> <ul> <li>M on input w accepts if \\((s,w)\\vdash_M^*(q,e)\\) for some \\(q\\in F\\)</li> <li>M accepts a language L if M accepts every string w in L</li> </ul> <p>Example: Construct a NFA that accepts the language \\(\\{w | w \\in \\{a,b\\}^*\\),the second symbol from the end of w is b\\(\\}\\)</p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec1/Lecture1/#theorem_1","title":"Theorem","text":"<ul> <li>Given a NFA M, there exists a DFA M' such that \\(L(M) = L(M')\\).</li> <li> <p>Given a DFA M, there exists a NFA M' such that \\(L(M) = L(M')\\).</p> </li> <li> <p>DFA M simulates \"tree-like\" computation of NFA M.</p> <p>A NFA \\(M = (K,\\Sigma,\\Delta,s,F)\\) can be simulated by a DFA \\(M' = (K',\\Sigma,\\delta,s',F')\\) where:</p> <ul> <li>\\(K' = 2^K\\) </li> <li> <p>\\(2^K = \\{q_1,q_2,\\cdots,q_n,\\{q_1\\},\\{q_2\\},\\cdots,\\{q_n\\},\\{q_1,q_2\\},\\cdots,\\{q_1,q_2,\\cdots,q_n\\}\\}\\)</p> </li> <li> <p>\\(F' = \\{q\\in K' | q\\cap F \\neq \\emptyset\\}\\)</p> </li> <li> <p>\\(\\delta(q,a) = \\bigcup_{p\\in q}\\Delta(p,a)\\) for any \\(q\\in K'\\) and \\(a\\in\\Sigma\\)</p> </li> <li> <p>\\(s' = E(s)\\) where \\(\\forall q \\in K, E(q)=\\{p \\in K:(q,e)\\vdash_M^*(p,e)\\}\\)</p> </li> <li> <p>\\(\\delta(Q,a) = \\bigcup_{q\\in Q}\\bigcup_{p:(p,a,q)\\in\\Delta}E(p)\\) for any \\(Q\\subseteq K'\\) and \\(a\\in\\Sigma\\)</p> </li> </ul> </li> <li> <p>A language is regular if and only if it is accepted by a NFA.</p> </li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec1/Lecture1/#proof","title":"Proof","text":"<ul> <li>If A and B are regular languages, so is \\(AB\\).</li> </ul> <p>Let \\(M_A\\) and \\(M_B\\) be FAs that accept A and B respectively.</p> <p>\\(M_A = (K_A,\\Sigma,\\delta_A,s_A,F_A)\\)</p> <p>\\(M_B = (K_B,\\Sigma,\\delta_B,s_B,F_B)\\)</p> <p>Construct a new FA \\(M\\) that accepts \\(A\\cdot B\\):</p> <p>\\(M = (K,\\Sigma,\\delta,s,F)\\) where</p> <ul> <li> <p>\\(K = K_A\\bigcup K_B\\)</p> </li> <li> <p>\\(s = s_A\\)</p> </li> <li> <p>\\(F = F_B\\)</p> </li> <li> <p>\\(\\delta(q,a) = \\delta_A(q,a)\\bigcup\\delta_B(q,a)\\bigcup\\{(q,e,s_B):q\\in F_A\\}\\)</p> </li> </ul> <ul> <li>If A is a regular language, so is \\(A^+\\).</li> </ul> <p></p> <ul> <li>If A is a regular language, so is \\(A^*\\).</li> </ul> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec1/Lecture1/#complemetary-material","title":"Complemetary Material","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec1/Lecture1/#cantors-theorem-countable-sets-and-string-representations-of-the-real-numbers","title":"Cantor's Theorem, Countable Sets, and String Representations of the Real Numbers","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec1/Lecture1/#cantors-theorem","title":"Cantor's Theorem","text":"<ul> <li>There does not exits a one-to-one function RtS: \\(\\mathbb{R}\\rightarrow\\{0,1\\}^*\\)</li> <li>(equivalently) The Real numbers are uncountable.That is, there does not exist a one-to-one function \\(f:\\mathbb{N}\\rightarrow\\mathbb{R}\\)</li> </ul> <p>Proof:</p> <ul> <li>See Book page 94</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec1/Lecture1/#boolean-functions-are-uncountable","title":"Boolean functions are uncountable","text":"<p>The set of all boolean functions(mapping \\(\\{0,1\\}^*\\rightarrow\\{0,1\\}\\)) is uncountable. * Proof see book page 99</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec1/Lecture1/#equivalent-conditions-for-countability","title":"Equivalent conditions for countability","text":"<ul> <li>The set S is countable</li> <li>There exits a one-to-one map from  \\(\\mathbb{N}\\) to S</li> <li>There exits an onto map from \\(\\{0,1\\}^*\\) to S</li> <li>There exits a one-to-one map from S to \\(\\{0,1\\}^*\\)</li> <li>There exits a one-to-one map from S to \\(\\mathbb{N}\\)</li> <li>There exits an onto map from some countable set T to S</li> <li>There exits a one-to-one map from S to some countable set T</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec1/Lecture1/#representing-objects-beyond-numbers","title":"Representing Objects Beyond Numbers","text":"<p>Lemma: Suppose that \\(E: O \\rightarrow \\{0,1\\}^*\\) is a one-to-one function. Then there exists a function \\(D:\\{0,1\\}^*\\rightarrow O\\) such that \\(D(E(o)) = o\\) for all \\(o\\in O\\).</p> <p>Proof: Let \\(o_0\\) be an arbitrary object in O. Let \\(w_0 = E(o_0)\\). Let \\(w_0 = w_1w_2\\cdots w_n\\) be the string representation of \\(w_0\\). Let \\(o_1 = D(w_1)\\), \\(o_2 = D(w_1w_2)\\), \\(\\cdots\\), \\(o_n = D(w_1w_2\\cdots w_n)\\). Then \\(D(w_0) = o_n\\).</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec1/Lecture1/#finite-representations","title":"Finite Representations","text":"<p>if \\(O\\) is finite, then we can represent every object in \\(O\\) as a string of length at most some number \\(n\\) if and only if \\(|O|\\leq 2^{n+1}-1\\).</p> <p>Lemma: For every two finite sets S and T, there exists a one-to-one function \\(E:S\\rightarrow T\\) if and only if \\(|S|\\leq|T|\\).</p> <ul> <li>Proof see book page 101</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec1/Lecture1/#prefix-free-encoding","title":"Prefix-Free encoding","text":"<ul> <li>Proof see book page 103</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec1/Lecture1/#making-representations-prefix-free","title":"Making Representations prefix-free","text":"<ul> <li>Proof see book page 104</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec10/Lecture10/","title":"Lecture 10 - Complexity - Space","text":"<p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec10/Lecture10/#lecture-10-complexity-theory-space-complexity","title":"Lecture 10: Complexity Theory -- Space Complexity","text":"<p>Let M be a standard DTM. M runs in space \\(S(n)\\) if, for any input of length \\(n\\), M uses at most \\(S(n)\\) tape cells.</p> <p>Let N be a standard NTM. N runs in space \\(S(n)\\) if, for any input of length \\(n\\), every branch of N uses at most \\(S(n)\\) tape cells.</p> <p>PSPACE = \\(\\{A | A\\) is decided by some DTM using a polynomial amount of space \\(\\}\\)</p> <p>NPSPACE = \\(\\{A | A\\) is decided by some NTM using a polynomial amount of space \\(\\}\\)</p> <p>EXP = \\(\\{A | A\\) is decided by some DTM using within 2<sup>p(n)</sup> time \\(\\}\\)</p> <p>Because the number of configurations of a DTM is at most 2<sup>p(n)</sup>, where p(n) is a polynomial.</p> <p>More specifically, the number of configurations of a DTM is at most 2<sup>p(n)</sup>  because the number of tape cells is at most p(n)</p> <ul> <li> <p>P \\(\\subseteq\\) PSPACE \\(\\subseteq\\) EXP</p> <p>If a problem can be solved in polynomial time, it can be solved in polynomial space.</p> </li> <li> <p>NP \\(\\subseteq\\) PSPACE \\(\\subseteq\\) NPSPACE</p> </li> </ul> <p>NP \\(\\subseteq\\) PSPACE 1. \\(\\exists\\) NTM N that decides A in polynomial time </p> <ol> <li> <p>Simulate every branch of N : Polynomial space</p> </li> <li> <p>Mark \u5206\u652f\u7684\u9009\u62e9\u60c5\u51b5(\u6bcf\u4e2a\u7ed3\u70b9\u4e00\u4e2a)\uff1aPolynomial space()</p> </li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec10/Lecture10/#theorem-1","title":"Theorem 1","text":"<p>NPSPACE = PSPACE</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec10/Lecture10/#savitchs-theorem","title":"Savitch's Theorem","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec10/Lecture10/#space-hirachical-theorem","title":"Space Hirachical Theorem","text":"<p>\\({\\displaystyle {\\mathsf {SPACE}}\\left(o(f(n))\\right)\\subsetneq {\\mathsf {SPACE}}(f(n))}\\)</p> <p></p> <p>Construct a DTM D</p> <ol> <li>D decides some language A in space \\(O(f(n))\\)</li> <li>For any DTM M that decides A in space \\(o(f(n))\\)</li> </ol> <p>D and M differs on at least one input</p> <pre><code>We want to construct D such that\n\n    M1  M2 M3  M4  M5  M6  ...\nM1  +  \nM2  -   +\nM3  -   -   -\nM4  -   -   -   +\nM5  -   +   -   -   -\nM6  -   -   -   -   -   +\n...\nD   -   -   +   -   +   -   ...\n</code></pre> <p></p> <p>D runs in space \\(O(f(n))\\) D decides some language  -- will halt</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec10/Lecture10/#time-hierarchy-theorem","title":"Time Hierarchy Theorem","text":"<p>\\({\\displaystyle {\\mathsf {DTIME}}\\left(o\\left(f(n)\\right)\\right)\\subsetneq {\\mathsf {DTIME}}(f(n){\\log f(n)})}\\)</p> <p></p> <ul> <li>Have to update COUNTER every time -- \\(log f(n)\\) time</li> </ul> <p></p> <p></p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec2/Lecture2/","title":"Lecture 2 - Regular Language","text":"<p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec2/Lecture2/#lecture-2-regular-expressions","title":"Lecture 2 - Regular Expressions","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec2/Lecture2/#definition","title":"Definition :","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec2/Lecture2/#regular-expression","title":"Regular Expression","text":"<p>\\(a(a\\cup b)^nb\\) is a regular expression over \\(\\{a,b\\}\\)</p> <p>\\(L(R) = \\{w \\in \\{a,b\\}^* | w\\ is\\ a\\ string\\ that\\ starts\\ with\\ a\\ and\\ ends\\ with\\ b\\}\\)</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec2/Lecture2/#automic-regular-expression","title":"Automic Regular Expression","text":"<ul> <li>\\(\\emptyset\\) : \\(L(\\emptyset) = \\emptyset\\)</li> <li>\\(a\\in \\Sigma\\) : \\(L(a) = \\{a\\}\\)</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec2/Lecture2/#composition-of-regular-expression","title":"Composition of Regular Expression","text":"<ul> <li>\\(R_1\\cup R_2\\) : \\(L(R_1\\cup R_2) = L(R_1)\\cup L(R_2)\\)</li> <li>\\(R_1R_2\\) : \\(L(R_1R_2) = L(R_1)L(R_2)\\)</li> <li>\\(R_1^*\\) : \\(L(R_1^*) = [L(R_1)]^*\\)</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec2/Lecture2/#precedence-of-regular-expression","title":"Precedence of Regular Expression","text":"<ul> <li>\\(* &gt;  \\cdot &gt; \\cup\\)</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec2/Lecture2/#proof","title":"Proof","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec2/Lecture2/#theorem-1","title":"Theorem 1:","text":"<p>\\(RE \\rightarrow NPA\\)</p> <ul> <li>We can simply prove that \\(RE \\rightarrow NPA\\) by constructing a NPA from a regular expression.</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec2/Lecture2/#state-elimination","title":"State Elimination","text":"<p>\\(NPA \\rightarrow RE\\)</p> <ul> <li>Prove by using the idea of <code>state elimination</code> and <code>dynamic programming</code>.</li> </ul> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec2/Lecture2/#theorem-2","title":"Theorem 2:","text":"<p>Let \\(L\\) be a regular language,there must exist an integer \\(p\\geq 1\\) such that every string \\(w\\in L\\) with \\(|w|\\geq p\\) can be written as \\(w = xyz\\) with </p> <ul> <li>\\(|xy|\\leq p\\)</li> <li>\\(|y|\\geq 1\\) </li> <li>for all \\(i\\geq 0\\), \\(xy^iz\\in L\\).</li> </ul> <p>Here \\(p\\) is called the pumping length.</p> <p>Proof</p> <p>If \\(L\\) is a regular language and it is finite, then we can set \\(p\\) to be the maximum length +1 of the strings in \\(L\\).</p> <p>If \\(L\\) is a regular language and it is infinite, there exits a NFA \\(N\\) that accepts \\(L\\). Let \\(N = (Q,\\Sigma,\\delta,q_0,F)\\), where \\(Q = \\{q_0,q_1,\\cdots,q_n\\}\\).</p> <ul> <li>Suppose \\(N\\) has \\(n\\) states, then we can set \\(p = n+1\\).</li> <li>consider \\(q_0 \\ to\\ q_p\\) [\\(q_i\\) is state after reading \\(a_i\\)], then there must \\(\\exists i,j\\) such that \\(i\\neq j\\) and \\(q_i = q_j\\). Then we can set \\(x = w[0,i-1]\\), \\(y = w[i,j-1]\\), \\(z = w[j,p-1]\\).</li> </ul> <p>Example</p> <ol> <li>\\(L = \\{0^n1^n | n\\geq 0\\}\\) is not a regular language.</li> </ol> <ul> <li>Proof by contradiction</li> <li>Assume \\(L\\) is a regular language, then there must exist a pumping length \\(p\\).</li> <li>Consider \\(w = 0^p1^p\\), then \\(w = xyz\\) with   1. \\(|xy|\\leq p\\)   2. \\(|y|\\geq 1\\)    3.  \\(xy^iz\\in L\\).</li> <li>from i and ii, we can know that \\(y = 0^k\\) for some \\(k\\geq 1\\).</li> <li>from iii, we can know that \\(xy^2z = 0^{p+k}1^p \\notin L\\), which is a contradiction.</li> </ul> <ol> <li>\\(L = \\{w\\in \\{0,1\\}^* | w\\ contains\\ an\\ equal\\ number\\ of\\ 0's\\ and\\ 1's\\}\\) is not a regular language.</li> </ol> <p>Assume \\(L\\) is a regular language, then \\(L \\cap 0^*1^* = \\{0^n1^n | n\\geq 0\\}\\) is a regular language, which is a contradiction.</p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec3/Lecture3/","title":"Lecture 3 - Context-Free Language","text":"<p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec3/Lecture3/#lecture-3-context-free-grammar-cfg","title":"Lecture 3 - Context-Free Grammar CFG","text":"<p>A context-free grammar (CFG) is a set of recursive rules used to generate patterns of strings.  A CFG \\(G = (V, \\Sigma, R, S)\\) consists of:</p> <ul> <li>A finite set of variables (non-terminal symbols) \\(V\\).</li> <li>A finite set of terminal symbols \\(\\Sigma\\).</li> <li>S \\(\\in\\) \\(V-\\Sigma\\) is the start symbol.</li> <li>R \\(\\in\\) \\((V-\\Sigma) \\times (U)^*\\) is a finite set of rules.</li> </ul> <p>Define in one step \\(\\Rightarrow\\).</p> <p>For any \\(x,y,u \\in V^*\\), for any \\(A \\in V - \\Sigma\\),  \\(xAy \\Rightarrow xuy\\) if \\((A,u) \\in R\\).</p> <p>Define in multiple steps \\(\\Rightarrow^*\\).</p> <p>For any \\(x,y,u \\in V^*\\), for any \\(A \\in V - \\Sigma\\),  \\(w \\Rightarrow^* u\\) if \\(w=u\\) or \\(w \\Rightarrow u_1 \\Rightarrow u_2 \\Rightarrow \\cdots \\Rightarrow u_k \\Rightarrow u\\).</p> <p>G generates \\(w\\in \\Sigma^*\\) if \\(S \\Rightarrow^* w\\).   * L(G) = {w \\(\\in \\Sigma ^*\\)| G generates w} is a context-free language.</p> <p>Example:</p> <ul> <li>\\(\\{a^nb^n|n\\geq 0\\}\\) is a context-free language.</li> <li>Rule: \\(S \\rightarrow aSb | e\\).</li> <li>\\(\\{w\\in {a,b}^*|w = w^R\\}\\) is a context-free language.</li> <li>Rule: \\(S \\rightarrow aSa | bSb | e | a | b\\).</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec3/Lecture3/#leftmost-derivation","title":"Leftmost Derivation","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec3/Lecture3/#pumping-theorem-for-cfl","title":"Pumping Theorem for CFL","text":"<p>If L is a context-free language, then there exists a positive integer p such that any string \\(s \\in L\\) with \\(|s| \\geq p\\) can be written as \\(s = uvxyz\\) such that:</p> <ol> <li>\\(|vxy| \\leq p\\).</li> <li>\\(|v|+|y| \\geq 1\\).</li> <li>\\(uv^ixy^iz \\in L\\) for all \\(i \\geq 0\\).</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec3/Lecture3/#proof","title":"Proof","text":"<ul> <li>See link</li> <li>See link </li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec3/Lecture3/#example","title":"Example","text":"<ul> <li>\\(\\{a^nb^nc^n|n\\geq 0\\}\\) is not a context-free language.</li> </ul> <p>If L is a context-free language, then there exists a positive integer p such that any string \\(s \\in L\\) with \\(|s| \\geq p\\) can be written as \\(s = uvxyz\\) such that:</p> <ol> <li>\\(|vxy| \\leq p\\).</li> <li>\\(|v|+|y| \\geq 1\\).</li> <li>\\(uv^ixy^iz \\in L\\) for all \\(i \\geq 0\\).</li> </ol> <p>From 2. and 1., we have \\(vxy\\) contains at most two types of symbols from \\(\\{a,b,c\\}\\).</p> <ul> <li>Suppose \\(v\\) and \\(y\\) contain only one type of symbols or two types of symbols.</li> <li>\\(uv^2xy^2z\\) will not have the same number of \\(a,b,c\\).</li> </ul> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec4/Lecture4/","title":"Lecture 4 - Push-Down-Automata","text":"<p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec4/Lecture4/#lecture-4-pushdown-automata","title":"Lecture 4 - Pushdown Automata","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec4/Lecture4/#pushdown-automata","title":"Pushdown Automata","text":"<ul> <li>Pushdown automata (PDA) is a non-deterministic finite automaton with a stack.</li> </ul> <p>A PDA is a 6-tuple \\(P = (K, \\Sigma, \\Gamma, \\Delta, s, F)\\), where </p> <ul> <li>\\(K\\) is a finite set of states.</li> <li>\\(\\Sigma\\) is tape alphabet.</li> <li>\\(\\Gamma\\) is stack alphabet.</li> <li>\\(\\Delta\\) is a set of transition rules.</li> <li>\\(s\\) is the initial state.</li> <li>\\(F\\) is the set of final states.</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec4/Lecture4/#delta-transition-rules","title":"\\(\\Delta\\) Transition Rules","text":"<p>\\(\\Delta\\) is a \"finite\" subset of \\(K \\times ((\\Sigma \\cup \\{\\epsilon\\}) \\times \\Gamma^*) \\times (K \\times \\Gamma^*)\\). where</p> <ul> <li>\\(K\\) is the current state.</li> <li>\\(\\Sigma \\cup \\{\\epsilon\\}\\) is the current input symbol.</li> <li>\\(\\Gamma^*\\) is the current stack top symbol.</li> <li>\\(K\\) is the next state.</li> <li>\\(\\Gamma^*\\) is the stack top symbol to be pushed.</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec4/Lecture4/#configuration-of-pda","title":"Configuration of PDA","text":"<p>A configuration of PDA is a member of \\(K \\times \\Sigma^* \\times \\Gamma^*\\).</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec4/Lecture4/#yeild-in-one-step","title":"yeild in one step","text":"<p>\\((q, x, \\alpha) \\vdash_P (p, y, \\beta)\\) if \\(\\exists( (q, a, r), (p, b) ) \\in \\Delta\\) such that \\(x = ay\\) and \\(\\alpha = r\\tau\\) and \\(\\beta = b\\tau\\). for some \\(\\tau \\in \\Gamma^*\\).</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec4/Lecture4/#yeild-in-multiple-steps","title":"yeild in multiple steps","text":"<p>\\((q, x, \\alpha) \\vdash_P^* (p, y, \\beta)\\) if \\((q, x, \\alpha) \\vdash_P (p_1, y_1, \\beta_1) \\vdash_P \\cdots \\vdash_P (p, y, \\beta)\\) or \\((q, x, \\alpha) = (p, y, \\beta)\\).</p> <p>PDA accepts a string \\(x\\) if \\((s, x, \\epsilon) \\vdash_P^* (p, \\epsilon, \\epsilon)\\) for some \\(p \\in F\\).</p> <p>Language of PDA \\(P\\) is \\(L(P) = \\{x \\in \\Sigma^* | (s, x, \\epsilon) \\vdash_P^* (p, \\epsilon, \\epsilon) \\text{ for some } p \\in F\\}\\).</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec4/Lecture4/#example","title":"Example","text":"<p>Construct a PDA that accepts the language \\(\\{w \\in \\{0, 1\\}^* | \\#0's = \\#1's\\}\\).</p> <ul> <li>\\(K = \\{s,q,f\\}\\).</li> <li>\\(S = s\\).</li> <li>\\(F = {f}\\).</li> <li>\\(\\Sigma = \\{0, 1\\}\\).</li> <li>\\(\\Gamma = \\{ \\$, 0, 1\\}\\).</li> </ul> \\[\\begin{align*} \\Delta = \\{ &amp;((s, \\epsilon, \\epsilon) , (q, \\$)), \\\\ &amp;( (q, 0, \\$), (q, 0\\$)), \\\\ &amp;( (q, 0, 0), (q, 00)), \\\\ &amp;( (q, 0, 1), (q, \\epsilon)), \\\\ &amp;( (q, 1, \\$), (q, 1\\$)), \\\\ &amp;( (q, 1, 0), (q, \\epsilon)), \\\\ &amp;( (q, 1, 1), (q, 11)), \\\\ &amp;( (q, \\epsilon, \\$), (f, \\epsilon)) \\} \\end{align*}\\]"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec4/Lecture4/#cfg-and-pda","title":"CFG and PDA","text":"<p>\\(CFG \\Rightarrow PDA\\). and \\(PDA \\Rightarrow CFG\\).</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec4/Lecture4/#cfg-rightarrow-pda","title":"CFG \\(\\Rightarrow\\) PDA","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec4/Lecture4/#only-give-an-example","title":"Only Give an Example","text":"<p>Given a CFG with \\(R = \\{S \\rightarrow aSb | \\epsilon\\}\\), construct a PDA \\(P\\) that accepts \\(L(G)\\).</p> <ul> <li>\\(K = \\{s, f\\}\\).</li> <li>\\(S = s\\).</li> <li>\\(F = \\{f\\}\\).</li> <li>\\(\\Gamma =V\\).</li> </ul> \\[\\begin{align*} \\Delta = \\{ &amp;((s, e, e), (f, S)), \\\\ &amp;((f,e,A),(f,u)) \\text{ for all } (A,u) \\in R \\  (\\text{generate step}) \\\\ &amp;((f, a, a), (f, \\epsilon)) \\text{for all a} \\in \\Sigma   \\  (\\text{Matching step}) \\}\\end{align*}\\]"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec4/Lecture4/#pda-rightarrow-cfg","title":"PDA \\(\\Rightarrow\\) CFG","text":"<p>The idea is to first convert the PDA to a simple PDA, then convert the simple PDA to a CFG.</p> <ul> <li>See notes</li> </ul> <p> </p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec4/Lecture4/#theorem","title":"Theorem","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec4/Lecture4/#theorem-1","title":"Theorem 1","text":"<p>Every Regular Language is a Context-Free Language.</p> <ul> <li>NFA \\(\\Rightarrow\\) PDA. [simple]</li> <li>DFA \\(\\Rightarrow\\) CFG. </li> </ul> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec4/Lecture4/#theorem-2","title":"Theorem 2","text":"<p>The family of context-free languages is closed under \\(\\cup, \\cdot, *\\). but not closed under \\(\\cap, -\\).</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec4/Lecture4/#cup","title":"\\(\\cup\\)","text":"<ul> <li>Add \\(S \\rightarrow S_1 | S_2\\).</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec4/Lecture4/#cdot","title":"\\(\\cdot\\)","text":"<ul> <li>Add \\(S \\rightarrow S_1S_2\\).</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec4/Lecture4/#_1","title":"\\(*\\)","text":"<ul> <li>Add \\(S \\rightarrow SS_A | \\epsilon\\).</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec4/Lecture4/#cap-and-","title":"\\(\\cap\\) and \\(-\\)","text":"<ul> <li>\\(A = \\{a^ib^jc^k:i = j\\}\\) is a context-free language.</li> <li>\\(B = \\{a^ib^jc^k:j = k\\}\\) is a context-free language.</li> <li>\\(A \\cap B = \\{a^ib^jc^k:i = j = k\\}\\) is not a context-free language.</li> </ul> <p>Proof: \\(A \\cap B = \\overline{\\bar{A} \\cup \\bar{B}}\\).</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec4/Lecture4/#examples","title":"Examples","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec4/Lecture4/#example-1","title":"Example 1","text":"<p>Construct a PDA that accepts the language \\(\\{w \\in \\{a, b\\}^* | \\#a's = 2\\#b's\\}\\).</p> <p>Idea: Stack \\(\\Rightarrow\\) Unary Counter.</p> <ul> <li>\\(K = \\{s\\}\\).</li> <li>\\(S = s\\).</li> <li>\\(F = \\{s\\}\\).</li> <li>\\(\\Sigma = \\{a, b\\}\\).</li> <li>\\(\\Gamma = \\{+,-\\}\\).</li> </ul> \\[\\begin{align*} \\Delta = \\{ &amp;((s, b, e),(s,++)), \\\\ &amp;((s, b, -),(s,+)), \\\\ &amp;((s, b, --),(s,e)), \\\\ &amp;((s, a, e),(s,-)), \\\\ &amp;((s, a, +),(s,e)) \\} \\end{align*}\\] <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/","title":"Lecture 5 - Turing Machine","text":"<p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#lecture-5-turing-machine","title":"Lecture 5 - Turing Machine","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#turing-machine","title":"Turing Machine","text":"<p>A Turing machine is a mathematical model of computation that defines an abstract machine. It was invented by Alan Turing in 1936. A Turing machine can simulate the logic of any computer algorithm, and is therefore the theoretical foundation of all modern computers.</p> <p>A Turing machine is a 5-tuple \\((K, \\Sigma, \\delta, s, H)\\), where:</p> <ul> <li>\\(K\\) is a finite set of states.</li> <li>\\(\\Sigma\\) is a finite set of symbols.</li> <li>s \\(\\in\\) \\(K\\) is the start state.</li> <li>\\(H\\) \\(\\in\\) \\(K\\) is the halt state.</li> <li>\\(\\delta\\) is the transition function, which maps \\((K - H)(\\text{current state}) \\times \\Sigma\\) to \\(K (\\text{next state})\\times (\\Sigma(\\text{write})\\cup\\{L,R\\}(\\text{moving}))\\).</li> </ul> <p>The transition function \\(\\delta\\) satisfies the following properties:</p> <ul> <li>\\(\\forall q \\in K - H, \\delta(q,\\triangleright) = (p,L)\\) for some \\(p \\in K\\).</li> <li>\\(\\forall q \\in K - H, \\forall a \\in \\Sigma, if\\ \\delta(q,a) = (p,b)\\), then \\(|b| \\neq 0\\). -- Do something.</li> </ul> <p>leftend \\(\\triangleright\\) is a special symbol that is used to indicate the left end of the tape.</p> <p>blank symbol \\(\\cup\\) is a special symbol that is used to indicate the blank symbol.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#configuration","title":"configuration","text":"<p>A configuration of a Turing machine is a member of </p> \\[(K \\times \\triangle(\\Sigma-\\{\\triangleright\\})^*) \\times ((\\Sigma-\\{\\triangleright\\})^* (\\Sigma - \\{\\triangleright,\\cup\\})\\cup \\{e\\})\\] <ul> <li>\\(\\Sigma - \\{\\triangleright,\\cup\\}\\) is the last symbol that is not \\(\\cup\\)</li> <li>{e} represents the following all symbols are \\(\\cup\\).</li> </ul> <p>We say \\((q_1,\\triangleright w_1a_1u_1) \\vdash_M (q_2,\\triangleright w_2a_2u_2)\\) if </p> <ul> <li> <p>writing : \\(\\delta(q_1,a_1) = (q_2,a_2) and\\ a_2 \\in \\Sigma - \\{\\triangleright\\}\\) and \\(w_2 = w_1\\) and \\(u_2 = u_1\\).</p> </li> <li> <p>moving left : \\(\\delta(q_1,u_1) = (q_2,L)\\) and \\(w_1=w_2a_2\\) and \\(u_2 = a_1u_1\\).</p> </li> </ul> <p>M halts if it reaches a halting configuration</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#acceptance-and-rejection","title":"Acceptance and Rejection","text":"<p>A Turing machine M accepts a string w if \\((s,\\triangleright\\cup w) \\vdash^* (yes,\\triangleright\\cup aw)\\) </p> <p>A Turing machine M rejects a string w if \\((s,\\triangleright\\cup w) \\vdash^* (no,\\triangleright\\cup aw)\\)</p> <p>Given a Turing machine M, we can define the language accepted by M as \\(L(M) = \\{w \\in \\Sigma^* | M \\text{ accepts w}\\}\\).</p> <ul> <li>M seme-decides L</li> <li>But M does not decide L</li> <li>Adding a condition: If M halts on all inputs, then M decides L.</li> </ul> <p>M decides a language \\(L\\) if M accepts all strings in L and rejects all strings not in L.</p> <p>M semi-decides a language \\(L\\) if M accepts all strings in L and may loop (or reject) on strings not in L.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#reccursive-language","title":"Reccursive Language","text":"<p>A language \\(L\\) is recursive if there exists a Turing machine that decides \\(L\\).</p> <p>Every recursive language is recursively enumerable.</p> <ul> <li>Explanation: A language \\(L\\) is recursively enumerable if there exists a Turing machine that semi-decides \\(L\\).</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#multi-tape-turing-machine","title":"Multi-tape Turing Machine","text":"<ul> <li>link</li> </ul> <p>A multi-tape Turing machine is a Turing machine with multiple tapes. Each tape has its own head and can move independently.</p> \\[\\delta: (K - H) \\times \\Sigma^k \\rightarrow K \\times ((\\Sigma -\\triangleright)\\cup \\{L,R\\})^k.\\]"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#two-way-infinite-tape","title":"Two-way Infinite Tape","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#multi-head-turing-machine","title":"Multi-head Turing Machine","text":"<p>A multi-head Turing machine is a Turing machine with multiple heads on a single tape.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#2d-tape-turing-machine","title":"2D-Tape Turing Machine","text":"<ul> <li>Simulate a 2D-Tape Turing machine with a 1D-Tape Turing machine.</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#random-access-turing-machine","title":"Random Access Turing Machine","text":"<ul> <li>A Turing machine which can move to any position on the tape in a single step.</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#example","title":"Example","text":"<ul> <li>\\(L = \\{a^nb^nc^n|n\\geq 0\\}\\) can be decided by a Turing machine.</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#turing-machine-construction","title":"Turing Machine Construction","text":"<p>Here is a high-level description of a Turing machine that can decide \\( L \\):</p> <ol> <li> <p>Check if the string consists of only \\( a \\)'s, \\( b \\)'s, and \\( c \\)'s:    - The TM scans the input tape to ensure that it only contains \\( a \\)'s, \\( b \\)'s, and \\( c \\)'s in that order. If any other character is found, the machine rejects the string.</p> </li> <li> <p>Match \\( a \\)'s, \\( b \\)'s, and \\( c \\)'s:    - Start by marking the leftmost \\( a \\) and replace it with a special symbol (say \\( X \\)).    - Then, scan the tape to find the leftmost \\( b \\). If one is found, mark it with a different special symbol (say \\( Y \\)).    - Next, scan to find the leftmost \\( c \\), and mark it with another symbol (say \\( Z \\)).    - Now, go back to the left end of the tape and repeat the process, continuing to match one \\( a \\), one \\( b \\), and one \\( c \\) at a time, until either:</p> <ul> <li>All \\( a \\)'s, \\( b \\)'s, and \\( c \\)'s are matched, or</li> <li>A mismatch is found (i.e., a character cannot be found when needed).</li> </ul> </li> <li> <p>Verify the end condition:    - Once all the symbols have been marked, check the tape:</p> <ul> <li>If all symbols are marked and the tape only contains \\( X \\)'s, \\( Y \\)'s, and \\( Z \\)'s, then the string is in the language \\( L \\).</li> <li>If there are any unmarked \\( a \\)'s, \\( b \\)'s, or \\( c \\)'s remaining, or if the order of \\( a \\)'s, \\( b \\)'s, and \\( c \\)'s is incorrect, the string is rejected.</li> </ul> </li> <li> <p>Empty string check:    - The empty string \\( \\epsilon \\) is trivially in \\( L \\), as it satisfies the condition \\( a^n b^n c^n \\) where \\( n = 0 \\).</p> </li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#non-deterministic-turing-machine-ntm","title":"Non-deterministic Turing Machine (NTM)","text":"<ul> <li>Deterministic TM: At each step, there is one possible next state, symbols to be written and direction to move the head, or the TM may halt. </li> <li>Nondeterministic TM: At each step, there are finitely many possibilities. </li> <li>So formally, \\(M = (K,\\Sigma,\\Delta \\delta,s,H)\\), where</li> <li>\\(K, \\Sigma, s, H\\) are the same as in a deterministic TM.</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#decides","title":"Decides","text":"<ul> <li>If there is a computation path that leads to \\(q_{acc}\\), then \\(M\\) accepts \\(w\\).</li> <li>If every computation path leads to \\(q_{rej}\\), then \\(M\\) rejects \\(w\\).</li> </ul> <p>M decides a language \\(L\\) if </p> <ul> <li>Fir all \\(w \\in L\\), there is a integer \\(N\\), depending on \\(w\\) and \\(M\\) such that every branch halts in at most N steps.</li> <li>If \\(w \\in L\\), then there exists a branch that halts in an accepting state.</li> <li>If \\(w \\notin L\\), then every branch halts in a rejecting state.</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#semi-decides","title":"Semi-decides","text":"<p>M semi-decides a language \\(L\\) if for any \\(w \\in L\\):</p> <ul> <li>If \\(w \\in L\\), then there exists a branch that halts in an accepting state.</li> <li>If \\(w \\notin L\\), then no branch halts in a accepting state. -- No branch accepts \\(w\\).</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#example_1","title":"Example","text":"<p>Let \\(C = {100,110,1000,...}\\) C is composed of all binary numbers that are not prime. -- Construct a NTM that semi-decides C.</p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#theorem","title":"Theorem","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#theorem-1","title":"Theorem 1","text":"<p>Every NTM can be simulated by a DTM.</p> <p>A NTM semi-decides a language \\(L\\) if and only if there exists a DTM that semi-decides \\(L\\).</p> <ul> <li> <p>A NTM semi-decides a language \\(L\\) \\(\\Rightarrow\\) There exists a DTM that semi-decides \\(L\\).</p> </li> <li> <p>Use a three-tape DTM to simulate a NTM.</p> </li> </ul> <p> </p> <ul> <li>see link</li> <li>see link</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#church-turing-thesis","title":"Church-Turing Thesis","text":"<ul> <li>Every algorithm can be simulated by a Turing machine.</li> <li>Intuition of Algorithm is equivalent to Turing machine.</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#description-of-a-turing-machine","title":"Description of a Turing Machine","text":"<p>A Turing machine can be described by high-level pseudocode.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#fact","title":"Fact","text":"<ul> <li>Any Finite Set can be encoded.</li> <li>Any Finite Tuple whose elemnets are finite stes can be encoded.</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#example_2","title":"Example","text":"<ul> <li>\\(G = (V,E)\\) is a graph. \\(V\\) is a finite set of vertices and \\(E\\) is a finite set of edges.</li> <li>\\(L = \\{G|G \\text{ is connected}\\}\\)</li> </ul> <p>M on input \\(G\\):</p> <ol> <li>If the input is illegal (not a graph), reject.</li> <li>select a node of G and mark it.</li> <li>repeat the following until no new nodes are marked:    * For each marked node, mark all its neighbors.</li> <li>If all nodes are marked, accept; otherwise, reject.</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#exercise","title":"Exercise","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#a_dfa","title":"\\(A_{DFA}\\)","text":"<p>Input: \\(\\langle D,w \\rangle\\), where \\(D\\) is a DFA and \\(w\\) is a string.</p> <p>Output: Accept if \\(D\\) accepts \\(w\\); reject otherwise.</p> <p>Solution:Construct a Turing machine that simulates the DFA \\(D\\) on input \\(w\\).</p> <p>\\(M_{R_1}\\) = on input \\(\\langle D,w \\rangle\\):</p> <ol> <li>run D on input \\(w\\).</li> <li>If D accepts \\(w\\), accept; otherwise, reject.</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#a_nfa","title":"\\(A_{NFA}\\)","text":"<p>Input: \\(\\langle B,w \\rangle\\), where \\(B\\) is a NFA and \\(w\\) is a string.</p> <p>Output: Accept if \\(B\\) accepts \\(w\\); reject otherwise.</p> <p>Solution: Construct a Turing machine that simulates the NFA \\(B\\) on input \\(w\\).</p> <p>\\(M_{R_2}\\) = on input \\(\\langle B,w \\rangle\\):</p> <ol> <li>Convert NFA \\(B\\) to a DFA \\(B'\\).</li> <li>run \\(M_{R_1}\\) on input \\(\\langle B',w \\rangle\\).</li> <li>If \\(M_{R_1}\\) accepts, accept; otherwise, reject.</li> </ol> <p>This involves the process of reduction. </p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#a_rex","title":"\\(A_{REX}\\)","text":"<p>Input: \\(\\langle R,w \\rangle\\), where \\(R\\) is a regular expression and \\(w\\) is a string.</p> <p>Output: Accept if \\(R\\) accepts \\(w\\); reject otherwise.</p> <p>Solution: Construct a Turing machine that simulates the NFA \\(B\\) on input \\(w\\).</p> <ul> <li>A REX can be converted to a NFA.</li> <li>Use \\(M_{R_2}\\) to simulate the NFA.</li> </ul> <p>\\(M_{R_3}\\) = on input \\(\\langle R,w \\rangle\\):</p> <ol> <li>Convert REX \\(R\\) to a NFA \\(B\\).</li> <li>run \\(M_{R_2}\\) on input \\(\\langle B,w \\rangle\\).</li> <li>If \\(M_{R_2}\\) accepts, accept; otherwise, reject.</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#e_dfa","title":"\\(E_{DFA}\\)","text":"<p>Input: \\(\\langle B \\rangle\\), where \\(B\\) is a DFA.</p> <p>Output: Accept if \\(L(B) = \\emptyset\\); reject otherwise.</p> <p>Solution: Construct a Turing machine that simulates the DFA \\(B\\) on input \\(w\\).</p> <p>\\(M_{R_4}\\) = on input \\(\\langle B \\rangle\\):</p> <ol> <li>Run DFS on the state diagram of \\(B\\).</li> <li>If there is a path from the start state to an accepting state, reject; otherwise, accept.</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#eq_dfa","title":"\\(EQ_{DFA}\\)","text":"<p>Input: \\(\\langle B_1,B_2 \\rangle\\), where \\(B_1\\) and \\(B_2\\) are DFAs.</p> <p>Output: Accept if \\(L(B_1) = L(B_2)\\); reject otherwise.</p> <p>Solution: Construct a Turing machine that simulates the DFA \\(B\\) on input \\(w\\).</p> <ul> <li>Symmetric difference -- \\((L(B_1) \\cup L(B_2) )- (L(B_1) \\cap L(B_2))\\)</li> <li>Convert the problem to whether the symmetric difference is empty.</li> </ul> <p>\\(M_{R_5}\\) = on input \\(\\langle B_1,B_2 \\rangle\\):</p> <ol> <li>Construct a DFA \\(B\\) that recognizes the symmetric difference of \\(L(B_1)\\) and \\(L(B_2)\\). \\((L(B) = (L(B_1) \\cup L(B_2)) - (L(B_1) \\cap L(B_2))\\)</li> <li>Run \\(M_{R_4}\\) on input \\(\\langle B \\rangle\\).</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#a_cfg","title":"\\(A_{CFG}\\)","text":"<p>Input: \\(\\langle G,w \\rangle\\), where \\(G\\) is a CFG and \\(w\\) is a string.</p> <p>Output: Accept if \\(G\\) generates \\(w\\); reject otherwise.</p> <p>\\(A_{CFG} = \\{ \\langle G,w \\rangle | G \\text{ is a CFG and G generates w}\\}\\)</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#chonsky-normal-form","title":"Chonsky Normal Form","text":"<p>A CFG \\(G\\) is in Chonsky Normal Form if every rule is of the form:</p> <ul> <li>\\(S \\rightarrow e\\)</li> <li>\\(A \\rightarrow BC\\)  B and C are non-terminal symbols. BC \\(\\in V-\\Sigma-{S}\\)</li> <li>\\(A \\rightarrow a\\).</li> </ul> <p>So if final \\(w\\) has length \\(n\\), the number of steps of subtitution is \\(2n-1\\).</p> <p>\\(M_{C1}\\) = on input \\(\\langle G,w \\rangle\\): 1. Convert CFG \\(G\\) to Chonsky Normal Form \\(G'\\). 2. Enumerate all derivations of length at most \\(|R'|^{2n-1}\\). 3. Acscept if any derivation generates \\(w\\); otherwise, reject.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#a_pda","title":"\\(A_{PDA}\\)","text":"<p>Input: \\(\\langle P,w \\rangle\\), where \\(P\\) is a PDA and \\(w\\) is a string.</p> <p>Output: Accept if \\(P\\) accepts \\(w\\); reject otherwise.</p> <p>\\(A_{PDA} = \\{ \\langle P,w \\rangle | P \\text{ is a PDA and P accepts w}\\}\\)</p> <p>\\(M_{C_2}\\) = on input \\(\\langle P,w \\rangle\\): 1. Convert PDA \\(P\\) to a CFG \\(G\\). 2. Run \\(M_{C_1}\\) on input \\(\\langle G,w \\rangle\\). 3. If \\(M_{C_1}\\) accepts, accept; otherwise, reject.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#e_cfg","title":"\\(E_{CFG}\\)","text":"<p>Input: \\(\\langle G \\rangle\\), where \\(G\\) is a CFG.</p> <p>Output: Accept if \\(L(G) = \\emptyset\\); reject otherwise.</p> <p>\\(E_{CFG} = \\{ \\langle G \\rangle | L(G) = \\emptyset\\}\\)</p> <p>\\(M_{C_3}\\) = on input \\(\\langle G \\rangle\\): 1. Mark all terminals and \\(e\\). 2. Look through all rules and if there is a rule that all symbols on the right side are marked , mark the left side. 3. Repeat step 2 until no new symbols are marked. 4. If \\(S\\) is marked, reject; otherwise, accept.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec5/Lecture5/#e_pda","title":"\\(E_{PDA}\\)","text":"<p>Input: \\(\\langle P \\rangle\\), where \\(P\\) is a PDA.</p> <p>Output: Accept if \\(L(P) = \\emptyset\\); reject otherwise.</p> <p>\\(E_{PDA} = \\{ \\langle P \\rangle | L(P) = \\emptyset\\}\\)</p> <p>\\(M_{C_4}\\) = on input \\(\\langle P \\rangle\\): 1. Convert PDA \\(P\\) to a CFG \\(G\\). 2. Run \\(M_{C_3}\\) on input \\(\\langle G \\rangle\\). 3. If \\(M_{C_3}\\) accepts, accept; otherwise, reject.</p> <p>\\(A_{DFA}\\) is recursive  \\(\\rightarrow\\) \\(L(D)\\) is recursive.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec6/Lecture6/","title":"Lecture 6 - Containments properties of languages","text":"<p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec6/Lecture6/#containments-properties-of-languages","title":"Containments properties of languages","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec6/Lecture6/#summary","title":"Summary","text":"<p>\\(\\text{regular languages}\\in \\text{context-free languages} \\in \\text{recursively languages} \\in \\text{recursively enumerable languages}(semi-decidable)\\)</p> <ul> <li>from regular languages to context-free languages:real subset   \\(L = \\{a^nb^n|n\\geq 0\\}\\)</li> <li>from context-free languages to recursively languages:real subset   \\(L = \\{a^nb^nc^n|n\\geq 0\\}\\)</li> </ul> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec6/Lecture6/#proof-of-the-containments","title":"Proof of the containments","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec6/Lecture6/#countable","title":"Countable:","text":"<p>A set A is countable if it is finite or \\(\\exists\\) a bijection between A and \\(\\mathbb{N}\\).</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec6/Lecture6/#lemma-1","title":"Lemma 1","text":"<p>A set A is countable if and only if there is an injection from A to \\(\\mathbb{N}\\). </p> <ul> <li> <p>injection: \\(f:A \\rightarrow \\mathbb{N}\\) is an injection if \\(f(a) = f(b) \\Rightarrow a = b\\).</p> </li> <li> <p>(\\(\\Leftarrow\\))  If bijection exists, then injection exists.</p> </li> <li>(\\(\\Rightarrow\\))     First, suppose there exists an injection \\( f: A \\to \\mathbb{N} \\) from \\( A \\) to \\( \\mathbb{N} \\).    Then, we can \"sort\" the elements of \\( A \\) according to the values of \\( f \\) (in increasing order).    Based on this order, we can define a bijection \\( g \\) from \\( A \\) to \\( \\mathbb{N} \\). Specifically, we map the \\( k \\)-th element of \\( A \\) (in the sorted order) to \\( g(a) = k \\).</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec6/Lecture6/#collary-1","title":"Collary 1","text":"<p>Any subset of a countable set A is countable.</p> <p>Proof:</p> <ul> <li>\\(\\exists\\) an injection from A to \\(\\mathbb{N}\\).</li> <li>Therefore, any subset of A can be mapped to a subset of \\(\\mathbb{N}\\). </li> </ul> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec6/Lecture6/#lemma-2","title":"Lemma 2","text":"<p>Any language \\(\\Sigma^*\\) is countable.</p> <p>Proof:</p> <p></p> <ul> <li>See link -- Proposition 2.1.</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec6/Lecture6/#collary-2","title":"Collary 2","text":"<p>\\(\\{M: \\text{M is a Turing Machine}\\}\\) is countable.</p> <ul> <li>See link</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec6/Lecture6/#lemma-3","title":"Lemma 3","text":"<p>Let \\(\\Sigma\\) be an alphabet. Let \\(L\\) be a language over \\(\\Sigma\\). Then, \\(L\\) is uncountable.</p> <ul> <li> <p>See link</p> </li> <li> <p>Another Proof: </p> </li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec6/Lecture6/#from-lemma-3-and-collary2-we-can-conclude-that-some-languages-are-not-recursively-enumerable","title":"From Lemma 3 and Collary2, we can conclude that some languages are not recursively enumerable.","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec6/Lecture6/#atm","title":"ATM","text":"<p>\\(A_{TM} = \\{&lt;M,w&gt;|M \\text{ is a TM and M accepts w}\\}\\)</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec6/Lecture6/#theorem1","title":"Theorem1","text":"<p>\\(A_{TM}\\) is recursively enumerable.</p> <p>Proof:</p> <p>Suppose \\(A_{TM}\\) is recursively enumerable. Then, there exists a TM \\(E\\) that semi-decides \\(A_{TM}\\).</p> <p>E = On input : 1. Simulate M on w. 2. If M accepts w, accept; if M rejects w, reject. 3. Loop if M loops on w. 4. If M rejects w, reject."},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec6/Lecture6/#theorem2","title":"Theorem2","text":"<p>\\(A_{TM}\\) is not recursive.</p> <p></p> <p>Proof:</p> <p>Suppose \\(A_{TM}\\) is recursive. Then, there exists a TM \\(H\\) that decides \\(A_{TM}\\).</p> <p>H = On input : 1. Run M on w. 2. If M accepts w, accept; if M rejects w, reject. <p>Consider the following TM D:</p> <p>D = On input : 1. Run H on &lt;M,\\. 2. If H accepts, reject; if H rejects, accept. <p>In this condition, it means that D can decide D so D is recursive. --  \\(A_{TM}\\) is recursive \\(\\Rightarrow\\) \\(D (A_d)\\) is recursive.</p> <p>Consider what happens when we run D on \\&lt;D&gt;.</p> <ol> <li>If D accepts \\&lt;D&gt;, then H rejects &lt;D,\\. <li>If D rejects \\&lt;D&gt;, then H accepts &lt;D,\\. <li>Therefore, D cannot exist.</li> <p>So, \\(A_{TM}\\) is not recursive.</p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec6/Lecture6/#ad","title":"Ad","text":"<p>\\(A_d = \\{&lt;\"M\"&gt;|M \\text{ is a TM that does not accept \"M\"}\\}\\) -- See Above.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec6/Lecture6/#theorem3","title":"Theorem3","text":"<p>\\(A_d\\) is not recursively enumerable.</p> <p>Proof:</p> <p>Suppose \\(A_d\\) is recursively enumerable. Then, there exists a TM \\(D\\) that semi-decides \\(A_d\\).</p> <p>D = On input : 1. Accept if \\(M \\in A_d\\). (M rejects \"M\") 2. Reject or Loop if \\(M \\notin A_d\\).\" (M accepts \"M\") <p>Consider what happens when we run D on \\&lt;D&gt;.</p> <ol> <li>If D accepts \\&lt;D&gt;, then \\(D \\in A_d\\). -- D rejects \"D\".</li> <li>If D rejects or loops on \\&lt;D&gt;, then \\(D \\notin A_d\\). </li> </ol> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec6/Lecture6/#summary_1","title":"Summary","text":"<p>\\(A_{TM}\\) is recursively enumerable but not recursive. \\(A_d\\) is not recursively enumerable.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec6/Lecture6/#theorem4","title":"Theorem4","text":"<p>If \\(L\\) and \\(\\overline{L}\\) are both recursively enumerable, then \\(L\\) is recursive.</p> <p>Proof: </p> <ol> <li>Let \\(M_1\\) be a TM that semi-decides \\(L\\).</li> <li>Let \\(M_2\\) be a TM that semi-decides \\(\\overline{L}\\).</li> </ol> <p>D = On input w: 1. Run \\(M_1\\) and \\(M_2\\) parallelly on w. 2. If \\(M_1\\) accepts w, accept; if \\(M_2\\) accepts w, reject.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec6/Lecture6/#theorem5","title":"Theorem5","text":"<p>\\(\\overline{A_{TM}}\\) is not recursively enumerable.</p> <p>Proof:</p> <p>Suppose \\(\\overline{A_{TM}}\\) is recursively enumerable. Then, there exists a TM \\(D\\) that semi-decides \\(\\overline{A_{TM}}\\).</p> <p>Also we know that \\(A_{TM}\\) is recursively enumerable. Then, there exists a TM \\(E\\) that semi-decides \\(A_{TM}\\).</p> <p>But \\(A_{TM}\\) is not recursive. So, \\(\\overline{A_{TM}}\\) is not recursively enumerable.</p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec7/Lecture7/","title":"Lecture 7 - Decidability","text":"<p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec7/Lecture7/#problems-that-are-not-recursive","title":"Problems That Are Not Recursive","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec7/Lecture7/#examples","title":"Examples","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec7/Lecture7/#1-the-halting-problem","title":"1. The Halting Problem","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec7/Lecture7/#proof-1","title":"Proof 1","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec7/Lecture7/#proof-2","title":"Proof 2","text":"<p>\\(A_{TM} = \\{&lt;M, w&gt;|M\\text{ is a TM and M accepts w}\\}\\)</p> <ul> <li>\\(A_{TM}\\) is not recursive</li> </ul> <p>Construct a TM \\(M^*\\  H_{TM}\\) to solve \\(A_{TM}\\):</p> <p>\\(H_{TM} = {&lt;M, w&gt;|M\\text{ is a TM and M halts on w}}\\)</p> <p>\\(M^* =\\) On input x:</p> <ol> <li>run M on w</li> <li>If M accepts w, accept</li> <li>If M rejects w, reject</li> <li>If M loops on w, \\(M^*\\) is looping on w</li> </ol> <p>Suppose \\(M^*\\) is a recursive TM, then we can construct a TM \\(M_{H}\\) to decide \\(H_{TM}\\):</p> <p>\\(M_{A} =\\) On input : <ol> <li>Construct a TM \\(M^*\\) as above using M </li> <li>Run \\(M_{H}\\) on \\(M^*\\), w</li> <li>If \\(M_{H}\\) accepts, accept</li> <li>If \\(M_{H}\\) rejects, reject</li> </ol> <p>If all this is true, then \\(M_A\\) can decide \\(A_{TM}\\) </p> <ul> <li>But \\(A_{TM}\\) is not recursive</li> <li>So \\(M^*\\) is not recursive</li> <li>So the halting problem is not recursive</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec7/Lecture7/#1-l-mtextm-is-a-tm-that-accepts-e-is-not-recursive","title":"1. \\(L = \\{\"M\"|\\text{M is a TM that accepts e}\\}\\) is not recursive","text":"<ul> <li>Use \\(A_{TM}\\) to prove this</li> </ul> <p>A Turing machine \\(M\\) accepts \\(w\\) if and only if \\(M^*\\) accepts \\(e\\)</p> <p>\\(M^* =\\) On input x:</p> <ol> <li>Run M on w</li> <li>If M accepts w, accept</li> <li>If M rejects w, reject</li> </ol> <p>If M accepts w, then \\(M^*\\) accepts all inputs, including e</p> <p>If M rejects or loops on w, then \\(M^*\\) rejects all inputs, including e</p> <p>Suppose \\(L\\) is recursive, then we can construct a TM \\(M_{L}\\) to decide \\(L\\):</p> <p>\\(M_{A} =\\) On input : <ol> <li>Construct a TM \\(M^*\\) as above using M </li> <li>Run \\(M_{L}\\) on \\(M^*\\), w</li> <li>If \\(M_{L}\\) accepts, accept</li> <li>If \\(M_{L}\\) rejects, reject</li> </ol> <p>If all this is true, then \\(M_A\\) can decide \\(A_{TM}\\) </p> <ul> <li>But \\(A_{TM}\\) is not recursive</li> <li>So \\(M_L\\) is not recursive</li> <li>So \\(L\\) is not recursive</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec7/Lecture7/#2-l_2-mtextm-is-a-tm-that-accepts-all-strings-is-not-recursive","title":"2. \\(L_2 = \\{\"M\"|\\text{M is a TM that accepts all strings}\\}\\) is not recursive","text":"<ul> <li>Same as above</li> </ul> <p>A Turing Machine accepts w if and only if \\(M^*\\) accepts all strings</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec7/Lecture7/#3-l_3-m1-m2textm1-and-m2-accept-the-same-set-of-strings-is-not-recursive","title":"3. \\(L_3 = \\{\"M1, M2\"|\\text{M1 and M2 accept the same set of strings}\\}\\) is not recursive","text":"<p>Suppose that \\(L_3\\) is recursive, \\(\\exist M_3\\) that decides \\(L_3\\)</p> <p>Use \\(M_3\\) to construct \\(M_2\\) that deides \\(L_2\\)</p> <p>\\(M_2\\) = on input \"M\"</p> <ol> <li>construct \\(M_E\\) as follows:    \\(M_E\\) = on input x<ol> <li>Accept</li> </ol> </li> <li>Run \\(M_3\\) on \"\\(M\\)\",\"\\(M_E\\)\" -- check whether \\(M\\) and \\(M_E\\) accepts the same set of strings</li> <li>If \\(M_3\\) accepts, accepts \\(M\\)</li> <li>If \\(M_3\\) rejects, rejects \\(M\\)</li> </ol> <p>So \\(M_2\\) decides \\(L_2\\) but \\(L_2\\) is not recursive</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec7/Lecture7/#4-l_4-mtextm-is-a-tm-with-lm-is-regular-is-not-recursive","title":"4. \\(L_4 = \\{\"M\"|\\text{M is a TM with L(M) is regular}\\}\\) is not recursive","text":"<p>Proof: \\(L_4\\) is not recursive</p> <p>Suppose that \\(L_4\\) is recursive, \\(\\exist M_4\\) that decides \\(L_4\\)</p> <ol> <li>Construction of \\( M^* \\):    - Define a modified Turing machine \\( M^* \\) which takes two inputs: a string \\( w \\) and a separate input \\( x \\).    - \\( M^* \\) operates as follows: On input x<ol> <li>It first runs \\( M \\) on \\( w \\).</li> <li>If \\( M \\) accepts on \\( w \\), \\( M^* \\) then runs a universal Turing machine \\( U \\) on \\( x \\).<ol> <li>If U accepts,accept</li> <li>If U rejects, reject</li> </ol> </li> <li>If \\( M \\) does not halt on \\( w \\), \\( M^* \\) does nothing (or rejects all inputs).</li> </ol> </li> </ol> <p>Universal Turing Machine U : On input : 1. Run M on w 2. If M accepts w, accept 3. else reject <ol> <li>Language of \\( M^* \\):     The language \\( L(M^*) \\) is constructed so that:</li> </ol> <ul> <li>\\( L(M^*) \\) is non-empty if \\( M \\) accepts \\( w \\).</li> <li>\\( L(M^*) \\) = \\(L(U)\\) = \\(A_{TM}\\) Not regular/Not Context-Free /Not Recursive</li> <li>\\( L(M^*) = \\emptyset \\) if \\( M \\) does not accept \\( w \\). -- Regular/Contex-Free/Recursive</li> </ul> <ol> <li>Conclusion:</li> </ol> <ul> <li>If \\( L(M^*) \\) is non-regular, it implies that \\( M \\) accepts \\( w \\).</li> <li>If \\( L(M^*) \\) is regular, then \\( M \\) does not accept \\( w \\).</li> <li>Since determining whether \\( L(M^*) \\) is regular would solve the Halting Problem, it follows that \\( R_{TM} \\) is undecidable.</li> </ul> <p>The undecidability of \\( R_{TM} = \\{ \\langle M \\rangle : M \\text{ is a Turing machine with } L(M) \\text{ regular} \\} \\) (i.e., determining if a Turing machine \\( M \\) has a regular language \\( L(M) \\)) stems from the fact that if we could decide \\( R_{TM} \\), we could also decide the Halting Problem, which is known to be undecidable.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec7/Lecture7/#heres-a-step-by-step-explanation-of-why-this-leads-to-undecidability","title":"Here\u2019s a step-by-step explanation of why this leads to undecidability:","text":"<ol> <li> <p>Assume \\( R_{TM} \\) is Decidable:    Suppose there exists a Turing machine \\( D \\) that decides \\( R_{TM} \\), meaning that \\( D \\) can take as input any Turing machine \\( M \\) and decide if \\( L(M) \\) is regular.</p> </li> <li> <p>Reduction from the Halting Problem:    We know that the Halting Problem (determining whether a Turing machine \\( M \\) halts on an input \\( w \\)) is undecidable. To show that \\( R_{TM} \\) is also undecidable, we construct a new Turing machine \\( M^* \\) based on \\( M \\) and \\( w \\) and show that if we could decide whether \\( L(M^*) \\) is regular, we could solve the Halting Problem.</p> </li> <li> <p>Construction of \\( M^* \\):    Define \\( M^* \\) as a Turing machine that:    - First simulates \\( M \\) on \\( w \\).    - If \\( M \\) halts on \\( w \\), \\( M^* \\) then simulates a universal Turing machine \\( U \\) on any additional input \\( x \\).    - If \\( M \\) does not halt on \\( w \\), \\( M^* \\) simply rejects all inputs or does not accept any string beyond a certain structure.</p> </li> <li> <p>Behavior of \\( L(M^*) \\):    - If \\( M \\) halts on \\( w \\), then \\( L(M^*) \\) becomes non-regular (since it depends on \\( L(U) \\), the language of a universal Turing machine, which is non-regular).    - If \\( M \\) does not halt on \\( w \\), \\( L(M^*) \\) is regular (e.g., it could be empty or finite, depending on the construction).</p> </li> <li> <p>Implication:    If we had a way to determine whether \\( L(M^*) \\) is regular using the hypothetical decider \\( D \\) for \\( R_{TM} \\), we could answer whether \\( M \\) halts on \\( w \\):    - If \\( D \\) tells us that \\( L(M^*) \\) is regular, then \\( M \\) does not halt on \\( w \\).    - If \\( D \\) tells us that \\( L(M^*) \\) is non-regular, then \\( M \\) halts on \\( w \\).</p> </li> <li> <p>Contradiction:    Since this method would solve the Halting Problem (which is known to be undecidable), the assumption that \\( R_{TM} \\) is decidable must be incorrect. Therefore, \\( R_{TM} \\) is undecidable.</p> </li> </ol> <p>In short, if we could decide whether \\( L(M) \\) is regular for any Turing machine \\( M \\), we could also solve the Halting Problem by constructing \\( M^* \\) as described. This leads to a contradiction, proving that \\( R_{TM} \\) is undecidable.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec7/Lecture7/#41-l_5-mtextm-is-a-tm-with-lm-is-context-free-is-not-recursive","title":"4.1. \\(L_5 = \\{\"M\"|\\text{M is a TM with L(M) is context-free}\\}\\) is not recursive","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec7/Lecture7/#42-l_6-mtextm-is-a-tm-with-lm-is-recursive-is-not-recursive","title":"4.2. \\(L_6 = \\{\"M\"|\\text{M is a TM with L(M) is recursive}\\}\\) is not recursive","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec7/Lecture7/#rices-theorem","title":"Rice's Theorem","text":"<ul> <li>See Link</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec7/Lecture7/#all_pda-is-not-recursive","title":"\\(All_{PDA}\\) is not recursive","text":"<p>\\(All_{PDA} = \\{&lt;M&gt;|M\\text{ is a PDA and }L(M) = \\Sigma^*\\}\\) </p> <ul> <li>Turn into proving \\(NOTAll_{PDA} = \\{&lt;M&gt;|M\\text{ is a PDA and }L(M) \\neq \\Sigma^*\\}\\) is not recursive</li> </ul> <p>Construct a TM \\(M\\) to solve \\(NOTAll_{PDA}\\): * M halts on w if and only if \\(L(P) \\neq \\Sigma^*\\)</p> <p></p> <ul> <li>Turn the computing history of M that halts on w to a string</li> </ul> <p>Construct P accepts all strings that are not computing history of M that halts on w.</p> <ul> <li>Given a string \\(C_1\\#C_2\\#...\\#C_k\\), where \\(C_i\\) is a configuration.</li> <li>The string is not a computing history of M if:   1. \\(C_1\\) is not the start configuration of M   2. \\(C_k\\) is not the accept configuration of M   3. There exists \\(C_i\\) and \\(C_{i+1}\\) such that \\(C_i\\) does not lead to \\(C_{i+1}\\)</li> </ul> <p></p> <p>If \\(NOTAll_{PDA}\\) is recursive, then \\(H_{TM}\\) is recursive, which is not true.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec7/Lecture7/#reduction","title":"Reduction","text":"<p>Let A, B be two languages, A reduces to B if there is a computable function f \\(\\Sigma^* \\to \\Sigma^*\\) such that:</p> <p>\\(x \\in A \\Leftrightarrow f(x) \\in B\\)</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec7/Lecture7/#lemma-1","title":"Lemma 1","text":"<p>Suppose \\(\\exist f\\) that reduces A to B:</p> <ol> <li>If B is recursive, then A is recursive</li> </ol> <ul> <li>B is recursive, then we can construct a TM \\(M_B\\) to decide B</li> <li>\\(\\exist f\\) that reduces A to B</li> <li>\\(M_A\\) = On input x:   1. Compute f(x)   2. Run \\(M_B\\) on f(x)   3. If \\(M_B\\) accepts, accept   4. If \\(M_B\\) rejects, reject</li> </ul> <ol> <li>If A is not recursive, then B is not recursive</li> </ol> <ul> <li>If B is recursive, then A is recursive, which is not true(Clearly)</li> </ul> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec8/Lecture8/","title":"Lecture 8 - G\u00f6del's Incompleteness Theorems","text":"<p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec8/Lecture8/#godels-incompleteness-theorems","title":"G\u00f6del's Incompleteness Theorems","text":"<p>Construct a Turing machine \\(M\\) prints \"M\" itself on its tape.</p> <ul> <li>A  -- Write B on the tape</li> <li>B  -- Write A on the tape and swap it with B function q : \\(\\Sigma^* \\rightarrow \\Sigma^*\\) such that \\(q(w) = \"M_w\"\\) </li> <li>\\(M_w\\) = on any input x:   1. Print w on the tape</li> </ul> <p>Given any string w\" 1. Construct \\(M_w\\) as above 2. Return \\(M_w\\)</p> <p>B = on input w 1. Compute \\(q(w)\\) 2. write \\(q(w)\\) on the tape and swap it with w</p> <p>A = on input w 1. Write \"B\" on the tape</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec8/Lecture8/#recursion-theorem","title":"Recursion Theorem","text":"<p>For any TM T, there exists a TM R such that for any input w, the computation of R on w is equivalent to the computation of T on \\(&lt;R, w&gt;\\).</p> <p>T = on input M,w: ...</p> <p>R = on input w : </p> <ol> <li>Run T on"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec8/Lecture8/#proof","title":"Proof","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec8/Lecture8/#another-proof-of-a_tm-not-recursive","title":"Another Proof of \\(A_{TM}\\) not recursive","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec8/Lecture8/#godels-incompleteness-theorems_1","title":"G\u00f6del's Incompleteness Theorems","text":"<p>\\(V(x,t) = \\begin{cases} 1 &amp; \\text{if t is a valid for x} \\\\ 0 &amp; \\text{otherwise} \\end{cases}\\)</p> <p>Let \\(\\Tau\\) be a language (the set of statements) A proof system for \\(\\Tau\\) is a TM V such that</p> <ul> <li> <ol> <li>Effectiveness : For x,y \\(\\in \\Sigma^*\\), V either accepts or rejects \\(V(x,y)\\)</li> </ol> </li> <li> <ol> <li>Soundness : For x \\(\\notin \\Tau\\), \\(\\forall y, V(x,y) = 0\\)</li> </ol> </li> </ul> <p>V is a complete proof system for \\(\\Tau\\) if for x \\(\\in \\Tau\\), \\(\\exists y, V(x,y) = 1\\)</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec8/Lecture8/#theorem-1","title":"Theorem 1","text":"<p>Some language \\(\\Tau\\) does not have a complete proof system.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec8/Lecture8/#lemma-1","title":"Lemma 1","text":"<p>A has a complete proof system if and only if A is recursively enumerable</p> <p>\\(\\Rightarrow\\) : \\(\\exists\\) a complete proof system V for A</p> <p>M = on input x:</p> <ol> <li> <p>For y \\(\\in \\Sigma^*\\) in increasing order of length:</p> </li> <li> <p>If \\(V(x,y) = 1\\), accept</p> </li> </ol> <p>\\(\\Leftarrow\\) : \\(\\exists\\) a TM M that semi-decides A</p> <p>V = on input x,y:</p> <ol> <li> <p>Run M on x for y steps</p> </li> <li> <p>If M accepts x within y steps, accept</p> </li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec8/Lecture8/#theorem-2","title":"Theorem 2","text":"<p>\\(\\overline{A_{TM}}\\) is not recursively enumerable</p> <ul> <li>Or \\(\\overline{A_{TM}}\\) does not have a complete proof system</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec8/Lecture8/#proof_1","title":"Proof","text":"<p>If \\(\\overline{A_{TM}}\\) is recursively enumerable, then \\(\\overline{A_{TM}}\\) has a complete proof system</p> <p>Suppose \\(\\overline{A_{TM}}\\) has a complete proof system V</p> <p>R = on input x:</p> <ol> <li> <p>Obtain \"R\"</p> </li> <li> <p>For y \\(\\in \\Sigma^*\\) in increasing order of length:</p> </li> <li> <p>If \\(V(\"R\"x,y) = 1\\), halt and accept x</p> </li> </ol> <p>If V is a complete proof system for \\(\\overline{A_{TM}}\\), then R is a complete proof system for \\(A_{TM}\\)</p> <ul> <li>\\(R\\) accepts x if and only if \\(\\exists y, V(\"R\"x,y) = 1\\)</li> <li>\\(V(\"R\"x,y) = 1\\) if and only if \\(\"R\"x\\) \\(\\in \\overline{A_{TM}}\\)</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec8/Lecture8/#enumerator","title":"Enumerator","text":"<p>We say a TM M enumerates a language L if for some state q, \\(L = \\{w: (s\\triangleright U) \\vdash^*_M (q,DUw)\\}\\) where q is output state and w is output w </p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec8/Lecture8/#theorem-3","title":"Theorem 3","text":"<p>A is Turing enumerable if and only if A is recursively enumerable</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec8/Lecture8/#proof_2","title":"Proof","text":"<p>Assume that A is a finite set.</p> <p>\\(\\Rightarrow\\) :  By definition, A is recursively enumerable \\(\\Leftarrow\\) :</p> <p>\\(\\exists\\) a TM M that semi-decides A</p> <p>for s \\(\\in \\Sigma^*\\) in increasing order of length:     1. Run M on s     2. If M accepts s, output s</p> <pre><code>For i = 1,2,3,...\n    For j = 1,2,3,...,i\n        Run M on s_j for i steps\n        If M accepts s_j, output s_j\n</code></pre>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec8/Lecture8/#theorem-4","title":"Theorem 4","text":"<p>A TM M is minimal if \\(|N|\\) &lt; \\(|M|\\) implies \\(L(N) \\neq L(M)\\)</p> <p></p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec9/Lecture9/","title":"Lecture 9 - Complexity - Time","text":"<p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec9/Lecture9/#lecture-9-complexity-theory-time-complexity","title":"Lecture 9: Complexity Theory -- Time Complexity","text":"<p>Let M be a standard DTM that halts on all inputs. </p> <ul> <li>The running time of M is the function \\(f: \\mathbb{N} \\to \\mathbb{N}\\) [input length] \\(\\to\\) [number of steps]. </li> <li>On any input of length \\(n\\), M halts within \\(f(n)\\) steps.</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec9/Lecture9/#theorm","title":"Theorm","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec9/Lecture9/#dtimefn-l-l-is-decided-by-some-standard-dtm-with-running-time-otn","title":"\\(DTIME(f(n)) = \\{L | L\\) is decided by some standard DTM with running time \\(O(t(n))\\}\\)","text":"<ol> <li>\\(\\{0^k1^k | k \\geq 0\\}\\) \\(\\in\\) \\(DTIME(nlogn)\\)</li> <li>\\(\\{0^k1^k | k \\geq 0\\}\\) \\(\\in\\) \\(DTIME(n)\\)</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec9/Lecture9/#the-cobham-edmonds-thesis","title":"The Cobham-Edmonds Thesis","text":"<p>Any \"reasonable\" and \"general\" deterministic model of computation is polynomially related.</p> <ul> <li>\\(P = \\{L | L\\) is decided by some standard DTM with running time \\(O(n^k)\\}\\)</li> <li>\\(P = \\cup_{k \\geq 0} DTIME(n^k)\\)</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec9/Lecture9/#1-every-context-free-language-is-in-p","title":"1. Every context-free language is in P.","text":"<p>Step 1: Chonsky Normal Form</p> <p>For any CFG G, there is an equivalent CFG G' in Chonsky Normal Form.</p> <p>Chonsky Normal Form: Every production is of the form \\(A \\to BC\\) or \\(A \\to a\\).</p> <p>Given a string \\(x = x_1x_2...x_n\\), we want to know whether \\(x \\in L(G)\\).</p> <ul> <li>Enumerate all derivations of length \\(\\leq 2|w|-1\\).</li> <li> <p>We can determine in \\(|R|^{2|w|-1}\\) steps.</p> <p>\u8fd9\u53ef\u4ee5\u7528\u4e8c\u53c9\u6811\u7684\u6027\u8d28\u8bc1\u660e</p> </li> <li> <p>But we cannot determine whether \\(x \\in L(G)\\) in polynomial time.</p> </li> </ul> <p>Step 2: Use Dynamic Programming</p> <p>Subproblem: For \\(1 \\leq i \\leq j \\leq n\\) Define, \\(T[i,j] = \\{A \\in V-\\Sigma | A \\to^* a_{i}...a_j\\}\\)</p> <p>\u8fd9\u662f\u53ef\u4ee5\u751f\u6210\u5b50\u4e32\u7684\u975e\u7ec8\u7ed3\u7b26\u7684\u96c6\u5408</p> <ul> <li>Base Case: \\(T[i,i] = \\{A \\in V-\\Sigma | A \\to a_i\\}\\)</li> <li>Recurrence: \\(T[i,j] = \\cup_{i \\leq k &lt; j} \\{A \\in V-\\Sigma | A \\to BC, B \\in T[i,k], C \\in T[k+1,j]\\}\\)</li> </ul> <p>Subproblem: \\(O(n^2)\\) subproblems,  * each subproblem can be solved :   * Enumerate k from i to j-1: \\(O(n)\\)   * \\(A \\to BC\\) can be checked in \\(O(|R|)\\)   * \\(B \\in T[i,k]\\) and \\(C \\in T[k+1,j]\\) can be checked in \\(O(|V|-|\\Sigma|)\\)</p> <ul> <li>Total time: \\(O(n^3|R|(||V|-|\\Sigma|)^2)\\)</li> <li>Therefore, we can determine in \\(O(n^3)\\) time.</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec9/Lecture9/#2-np","title":"2. NP","text":"<p>Let U be a non-deterministic TM, running time of U is a function \\(f: \\mathbb{N} \\to \\mathbb{N}\\).</p> <p>For any input of length \\(n\\), Every branch of U halts within \\(f(n)\\) steps.</p> <p>NP = \\(\\{L | L\\) is decided by some non-deterministic TM U with polynomial running time \\(O(n^k)\\}\\)</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec9/Lecture9/#3-polynomial-verifiable","title":"3. Polynomial Verifiable","text":"<p>A language L is polynomial verifiable if there exists a polynomial time verifier V such that:</p> <ul> <li>It Satisfies: Efficient, Soundness, Completeness</li> <li>\\(V\\) must have polynomial running time.</li> <li>For any \\(x \\in A\\), there exists a \\(y\\) such that \\(V(x,y) = \\text{accept}\\) WITH \\(|y| \\leq poly(|x|)\\)</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec9/Lecture9/#4-a-language-l-is-in-np-if-and-only-if-l-is-polynomial-verifiable","title":"4. A language L is in NP if and only if L is polynomial verifiable.","text":"<p>4.1 A language L is in NP \\(\\Rightarrow\\) L is polynomial verifiable</p> <p>If L is in NP, there exists a non-deterministic TM U that decides L in polynomial time.</p> <p>Construct a verifier V:</p> <ul> <li>certificate y = the branch of U that accepts x</li> </ul> <p>V = on input x, y:</p> <ol> <li>Run U on x deterministically on the guidance of y</li> <li>If U accepts, accept</li> <li>Else, reject</li> </ol> <p>4.2 A language L is polynomial verifiable \\(\\Rightarrow\\) L is in NP</p> <p>If L is polynomial verifiable, Construct a non-deterministic TM U:</p> <p>U = on input x:</p> <ol> <li>Non-deterministically generate a certificate y of length \\(\\leq poly(|x|)\\)</li> <li>Run V on x, y</li> <li>If V accepts, accept</li> <li>Else, reject</li> </ol> <p>Since V is polynomial time, U can decide L in polynomial time.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec9/Lecture9/#sat-problem","title":"SAT Problem","text":"<p>Let X be a set of boolean variables</p> <ul> <li>literal: \\(x_i\\) or \\(\\overline{x_i}\\)</li> <li>clause: disjunction of literals: \\(x_1 \\vee x_2 \\vee \\overline{x_3}\\)</li> <li>boolean formula: conjunction of clauses: \\((x_1 \\vee x_2) \\wedge (\\overline{x_1} \\vee x_3)\\)</li> <li>Truth assignment of X is a function \\(f: X \\to \\{0,1\\}\\)</li> <li>T satisfies F if F is true under T</li> </ul> <p>SAT Problem: Given a boolean formula F, does there exist a truth assignment T that satisfies F?</p> <p>2.1 Non-deterministic Polynomial Time</p> <p>M = on input F:</p> <ol> <li>Non-deterministically guess a truth assignment T</li> <li>If T satisfies F, accept</li> <li>Otherwise, reject</li> </ol> <p>2.2 Polynomial Verifiable</p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec9/Lecture9/#1-sat-is-in-p-if-and-only-if-p-np","title":"1. SAT is in P if and only if P = NP","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec9/Lecture9/#polynomial-time-reduction","title":"Polynomial Time Reduction","text":"<p>Let A, B be two languages, A can be polynomially reduced to B [\\(A \\leq_p B\\)] if there is a computable function f: \\(\\Sigma^* \\to \\Sigma^*\\) such that:</p> <ol> <li>\\(x \\in A \\Leftrightarrow f(x) \\in B\\)</li> <li>\\(f\\) is computable in polynomial time</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec9/Lecture9/#lemma-1","title":"Lemma 1","text":"<p>If A \\(\\leq_p B\\) and B is in P, then A is in P.  </p> <p>\\(x \\rightarrow f(x) \\rightarrow\\) B \\(\\rightarrow\\) P</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec9/Lecture9/#np-completeness","title":"NP-Completeness","text":"<p>A language A is NP-complete if: 1. A is in NP 2. For any language B in NP, \\(B \\leq_p A\\)</p>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec9/Lecture9/#cook-levin-theorem","title":"Cook Levin Theorem","text":"<p>SAT is NP-complete.</p> <p>Proof:</p> <ul> <li>See link</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec9/Lecture9/#lemma-2","title":"Lemma 2","text":"<p>If A is NP-complete and \\(A\\) \\(\\leq_p B\\), then B is NP-complete.</p> <p>Proof:</p> <ol> <li>B is in NP</li> <li>For any language C in NP, \\(C \\leq_p A \\leq_p B\\)</li> <li>Therefore, B is NP-complete.</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec9/Lecture9/#3-sat","title":"3-SAT","text":""},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec9/Lecture9/#cliques","title":"Cliques","text":"<p>Given a graph G = (V, E), a clique is a subset of V such that every pair of vertices in the subset is connected by an edge.</p> <ul> <li>CLIQUES = \\(\\{&lt;G, k&gt; | G\\) has a clique of size \\(k\\}\\)</li> </ul> <p>Theorem: CLIQUES is NP-complete.</p> <ul> <li>Proof: 3-SAT \\(\\leq_p\\) CLIQUES See link</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/lec9/Lecture9/#vertex-cover","title":"Vertex Cover","text":"<p>Given a graph G = (V, E), a vertex cover is a subset of V such that every edge in E is incident to at least one vertex in the subset.</p> <ul> <li>VERTEX-COVER = \\(\\{&lt;G, k&gt; | G\\) has a vertex cover of size \\(k\\}\\)</li> </ul> <p> </p> <p></p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/","title":"Chapter2","text":"<p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#chap2language-of-the-computerrisc-v","title":"Chap2:Language of the Computer(RISC V)","text":"Summary"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#instruction-characteristics","title":"Instruction Characteristics","text":"<ul> <li> <p>\u64cd\u4f5c\u6570\u4f4d\u5bbd\u53ef\u4ee5\u4e0d\u540c\uff0c\u53ef\u4ee5\u662f\u7acb\u5373\u6570/\u5bc4\u5b58\u5668/\u5185\u5b58</p> </li> <li> <p>Load/Store \u7ed3\u6784</p> </li> <li> <p>\u6307\u4ee4\u5206\u7c7b\uff1aLoad/Store\u7ed3\u6784\u5c06\u6307\u4ee4\u5206\u4e3a\u4e24\u7c7b\uff1a\u52a0\u8f7d\uff08Load\uff09\u6307\u4ee4\u548c\u5b58\u50a8\uff08Store\uff09\u6307\u4ee4\u3002\u8fd9\u4e24\u7c7b\u6307\u4ee4\u5206\u522b\u7528\u4e8e\u4ece\u5185\u5b58\u4e2d\u52a0\u8f7d\u6570\u636e\u5230\u5bc4\u5b58\u5668\u6216\u5c06\u5bc4\u5b58\u5668\u4e2d\u7684\u6570\u636e\u5b58\u50a8\u5230\u5185\u5b58\u4e2d</p> </li> <li> <p>\u6570\u636e\u4f20\u8f93\uff1a\u5728Load/Store\u7ed3\u6784\u4e2d\uff0c\u53ea\u6709Load\u548cStore\u6307\u4ee4\u80fd\u591f\u76f4\u63a5\u8bbf\u95ee\u5185\u5b58\u3002\u5176\u4ed6\u6307\u4ee4\uff0c\u5982\u7b97\u672f\u8fd0\u7b97\u6307\u4ee4\u6216\u903b\u8f91\u6307\u4ee4\uff0c\u5fc5\u987b\u9996\u5148\u5c06\u6570\u636e\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\u4e2d\uff0c\u7136\u540e\u6267\u884c\u64cd\u4f5c\uff0c\u6700\u540e\u518d\u5c06\u7ed3\u679c\u5b58\u56de\u5185\u5b58</p> </li> </ul>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#operations-of-the-computer-hardware","title":"Operations of the Computer Hardware","text":"<p>Example</p> <ul> <li>C code <pre><code>f = (g + h) - (i + j);\n</code></pre></li> <li>RISC-V code <pre><code>add t0, g, h\nadd t1, i, j\nsub f, t0, t1\n</code></pre></li> </ul> <pre><code>;Not good for parallel opeartions\nadd t0, g, h\nsub t0, t0, i\nsub f, t0, j\n</code></pre>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#regisers","title":"Regisers","text":"<ul> <li>32 registers in RISC-V</li> <li>64 bits for each register in RISC-V</li> </ul> Sumary <ul> <li>\u4e3a\u4ec0\u4e48\u5185\u5b58\u662f \\(2^{61}\\) \u4e2a doublewords?   \u53ef\u4ee5\u8868\u793a\u7684\u5730\u5740\u6709\u8fd9\u4e48\u591a\uff0c\u56e0\u4e3a\u6211\u4eec\u4ee5 64 \u4f4d\u5bc4\u5b58\u5668\u4e3a\u57fa\u5740\uff0c\u53ef\u4ee5\u8868\u793a\u7684\u53cc\u5b57\u5c31\u662f \\(2^{64}/2^3=2^{61}\\) (\u8fd9\u91cc \\(2^3\\) \u8868\u793a 8 \u4e2a\u5b57\u8282\uff0c\u5373\u53cc\u5b57). \u5373\u6211\u4eec\u7684 <code>load</code> \u6307\u4ee4\u53ef\u4ee5\u8bbf\u95ee\u7684\u8303\u56f4\u6709\u8fd9\u4e48\u5927\u3002 </li> <li>for <code>x0</code> : \u56e0\u4e3a\u7ecf\u5e38\u6709 0 \u53c2\u4e0e\u8ba1\u7b97\uff0c\u5c06\u5176\u5b58\u5728\u4e00\u4e2a\u5bc4\u5b58\u5668\u4e2d\uff0c\u4fbf\u4e8e\u8ba1\u7b97</li> </ul> <pre><code>add x5,x20,x21\nadd x6,x22,x23\nsub x19,x5,x6\n</code></pre>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#memory-operands","title":"Memory Operands","text":"<p>Data transfer instructions * Load: Load values from memory to register * Store: Store result from register to memory; store doubleword</p> <p>Memory is byte addressed.</p> <ul> <li> <p>RISC-V is Little Endian </p> <p></p> </li> <li> <p>RISC-V dose not require words to be aligned in memory  : To Save Memory</p> </li> </ul> <p>words align: A word is 4 byte</p> <p>\u6211\u4eec\u8981\u6c42\u5b57\u7684\u8d77\u59cb\u5730\u5740\u4e00\u5b9a\u8981\u662f 4 \u7684\u500d\u6570 : \u8bbf\u5b58\u66f4\u52a0\u65b9\u4fbf</p> <p></p> <pre><code>LW t0,[0,4,8,...] \nLD t0,[0,8,16,32...]\n</code></pre>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#data-transfer-instruction","title":"Data Transfer instruction","text":"<ul> <li>store \u6307\u4ee4\u6ca1\u6709\u76ee\u7684\u5bc4\u5b58\u5668.</li> <li>Array are in the memory -- Stack.</li> </ul> Example <pre><code>g = h + A[i]\n//assume g,h,i - x18,x19,x20 base address of A -x22\n</code></pre> <ul> <li>note <code>0(x5)</code> <code>x5</code> is for \u504f\u79fb</li> </ul> <pre><code>add x5,x20,x20\nadd x5,x5,x5\nadd,x5,x5,x5\nadd,x5,x5,x22\nld,x6,0(x5) \nadd x18,x19,x6\n</code></pre>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#registers-vs-memory","title":"Registers vs. Memory","text":"<ul> <li>Registers are faster to access than memory  </li> <li>Operating on memory data requires loads and stores  </li> <li>Compiler must use registers for variables as much as  possible  </li> <li>Spilling Registers : putting less comonly used variables into memory</li> </ul>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#constant-or-immediate-operands","title":"Constant or Immediate Operands","text":"<p>Immediate: Other method for adding constant  </p> <ul> <li> <p>Avoids the load instruction  </p> </li> <li> <p>Offer versions of the instruction  e.g. <code>addi x22, x22, 4</code> </p> </li> </ul> <p> </p> <ul> <li>Design Principle 3 - Make the common case fast.  </li> </ul>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#representing-instructions-in-the-computer","title":"Representing Instructions in the Computer","text":"Translating assembly into machine instruction"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#r-format-instructions","title":"R-format instructions","text":"<ul> <li>opcode: operaion code</li> <li>rd: destination register number</li> <li>funct3: 3-bit function code(additional opcode)  eg. <code>load byte / load half</code></li> <li>rs1/rs2: the first/second source register number</li> <li>funct7: 7-bit function code(additional opcode)</li> </ul>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#i-format-instructions","title":"I-format Instructions","text":"<ul> <li>Immediate arithmetic and load instructions  </li> </ul> <p>e.g. <code>addi</code>, <code>ld</code> </p> <ul> <li> <p>rs1: source or base address register number</p> </li> <li> <p>immediate: constant operand, or offset added to base  address  <code>\u5c06 rs2, funct7 \u5408\u5e76\u4e86\uff0c\u5f97\u5230 12 \u4f4d\u7acb\u5373\u6570</code></p> </li> </ul> <p></p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#s-format","title":"S-format","text":"<ul> <li>rs1: base address register number</li> <li>rs2: source opearand register number</li> <li>immediate:  Split so that rs1 and rs2 fields always in the same place.  </li> </ul> Sumary Example <p>Stored Program Computer </p> <p></p> <ul> <li>See Slides Trojan \u5bc6\u7801\u7a83\u53d6 \u62f3\u51fb\u6e38\u620f</li> </ul> Sumary <p> </p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#logical-operations","title":"Logical Operations","text":"Operation C Java RISC-V Shift left &lt;&lt; &lt;&lt; <code>slli</code> Shift right &gt;&gt; &gt;&gt;&gt; <code>srli</code> Bit-by-by AND &amp; &amp; <code>and, andi</code> Bit-by-by OR | | <code>or, ori</code> Bit-by-by XOR ^ ^ <code>xor, xori</code> Bit-by-by NOT ~ ~ - <ul> <li>note <code>0(x5)</code> <code>x5</code> is for \u504f\u79fb</li> </ul>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#shift","title":"Shift","text":"<ul> <li>I \u578b\u6307\u4ee4</li> <li>\u4e3a\u4ec0\u4e48\u8fd8\u6709 <code>funct6</code> : \u79fb\u4f4d\u4e0d\u9700\u8981\u8fd9\u4e48\u591a\u7acb\u5373\u6570\uff0c\u53ea\u8981\u516d\u4f4d (\\(2^6=64\\)) \u5373\u53ef\u3002</li> <li>\u5de6\u79fb i \u4f4d\u76f8\u5f53\u4e8e\u4e58 \\(2^i\\), \u53f3\u79fb i \u4f4d\u76f8\u5f53\u4e8e\u9664 \\(2^i\\).  </li> </ul>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#and","title":"AND","text":""},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#or","title":"OR","text":""},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#xor","title":"XOR","text":"<ul> <li>Useful for <code>not--xor 1111111...</code></li> </ul>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#instructions-for-making-decisions","title":"Instructions for making decisions","text":""},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#branch-instructions","title":"Branch instructions","text":"<pre><code> beq  register1, register2, L1\n bne  register1, register2, L1\n</code></pre> <p>RISC-V assembly code</p> <pre><code>bne         x22, x23, ELSE   ; go to ELSE if  i != j\nadd     x19, x20, x21    ; f = g  + h  ( skipped if  i  not equals  j)\nbeq     x0, x0,  EXIT    ; as  jump  (unconditional branch)\nELSE: sub   x19, x20, x21; f  =  g  -  h  ( skipped if  i  equals  j )\nEXIT:\n</code></pre> <pre><code>bne  \nbeq\nblt rs1, rs2, L1;if (rs1 &lt; rs2) branch to instruction labeled L1\nbge rs1, rs2, L1;if (rs1 &gt;= rs2) branch to instruction labeled L1\n</code></pre> Example <p> </p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#_1","title":"Chapter2","text":"<ul> <li>Decide by considering which part (A or B) is more likely to be executed.</li> </ul>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#compare-operations","title":"Compare Operations","text":"<pre><code>Signed integer\nslt  \uff1aSet on less than\nslti \uff1aSet on less than immediate\nUnsigned integer\nsltu  \uff1a Set on less than\nsltiu \uff1a Set on less than immediate \n</code></pre> <p>Slt\u8fd8\u6709\u4e0e\u7acb\u5373\u6570\u7684\u6bd4\u8f83</p> <p>Slt, slti\u9488\u5bf9\u6709\u7b26\u53f7\u6570\uff0csltu sltiu\u9488\u5bf9\u65e0\u7b26\u53f7\u6570\u4e0d\u540c\u7684\u6bd4\u8f83\u6307\u4ee4\u8fd0\u884c\u5230\u540c\u4e00\u4e2a\u64cd\u4f5c\u6570\u4e0a\uff0c\u7ed3\u679c\u4e5f\u662f\u4e0d\u4e00\u6837\u7684\u5c06\u6709\u7b26\u53f7\u6570\u4f5c\u4e3a\u65e0\u7b26\u53f7\u6570\u6765\u5904\u7406\uff0c\u662f\u68c0\u9a8c0&lt;=x&lt;y\u7684\u4f4e\u5f00\u9500\u65b9\u6cd5\uff0c\u5e38\u7528\u4e8e\u68c0\u67e5\u6570\u7ec4\u7684\u4e0b\u6807\u662f\u5426\u8d8a\u754c\u3002</p> <ul> <li>MIPS\u91cc\u8fdb\u884c\u5206\u652f\u5224\u65ad\u662f\u7528<code>slt</code> \u6839\u636e\u6bd4\u8f83\u7ed3\u679c\u8bbe\u7f6e\u5bc4\u5b58\u5668\uff0c\u7136\u540e\u7528<code>beq</code> \u6216\u8005<code>bne</code> \u6765\u8fdb\u884c\u5206\u652f\u5224\u65ad\uff0c<code>blt</code>, <code>bge</code>\u8fd9\u4e9b\u6307\u4ee4\u662f\u4f5c\u4e3a\u4f2a\u6307\u4ee4</li> <li>MIPS\u7684\u8fd9\u79cd\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u5904\u7406\u5668\u6570\u636e\u901a\u8def\u7b80\u5355\u4e00\u4e9b\uff0c\u4f46\u662f\u9700\u8981\u66f4\u591a\u7684\u6307\u4ee4\u6765\u6267\u884c\u7a0b\u5e8f</li> <li>Mips\u4f53\u7cfb\u7ed3\u6784\u6ca1\u6709\u5305\u62ec\u4e13\u95e8\u7684\u201c\u5c0f\u4e8e\u65f6\u5206\u652f\u201d\u6307\u4ee4\uff0c\u56e0\u4e3a\u5b83\u592a\u590d\u6742\u4e86\uff0c\u4e0d\u7b26\u5408\u8bbe\u5907\u7b80\u5355\u6027\uff1a\u5b83\u4e0d\u4ec5\u4f1a\u5ef6\u957f\u65f6\u949f\u5468\u671f\uff0c\u4e5f\u4f1a\u589e\u52a0\u5e73\u5747\u6267\u884c\u6bcf\u4e2a\u6307\u4ee4\u7684\u5468\u671f\u6570: \u4e24\u6761\u66f4\u5feb\u7684\u6307\u4ee4\uff08beq, bne\uff09\u66f4\u6709\u7528</li> </ul> <pre><code>slt x5, x6, x7        ; x5 = 1  if  x6  &lt; x7   ( a &lt; b)    \nbne x5, x0, Less     ; go to Less  if  x5 !=  0 (that is,  if  a  &lt;  b)\n       \u2026\u2026  \nLess:\n</code></pre> <p>Reduce an index-out-of-bounds check</p> <p>\u5c06\u6709\u7b26\u53f7\u6570\u5f53\u4f5c\u65e0\u7b26\u53f7\u6570\u5904\u7406\uff0c\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u79cd\u4f4e\u6210\u672c\u7684\u65b9\u5f0f\u68c0\u67e5\u662f\u5426<code>0&lt;=x&lt;y</code>\u5e38\u7528\u4e8e\u68c0\u67e5\u6570\u7ec4\u4e0b\u6807\u662f\u5426\u8d8a\u754c</p> <ul> <li>\u65e0\u7b26\u53f7\u6570\u6bd4\u8f83<code>x&lt;y</code>\uff0c\u5728\u68c0\u6d4b<code>x&lt;y</code>\u7684\u540c\u65f6\uff0c\u4e5f\u68c0\u6d4b\u4e86<code>x</code>\u662f\u5426\u4e3a\u8d1f\u6570</li> <li>RISC-V version:  <code>bgeu x20, x11,   IndexOutofBounds</code></li> </ul> <pre><code>sltu $t0, $a1, $t2     ; x20 &lt; x11   \nbeq  $t0, $zero, IndexOutofBounds   \n</code></pre>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#loop-statements","title":"Loop statements","text":"Example"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#caseswitch","title":"Case/Switch","text":"<ul> <li> <p>\u5b9e\u73b0switch\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u501f\u52a9\u4e00\u4e2a\u6761\u4ef6\u5224\u65ad\u5e8f\u5217,\u628aswitch\u8f6c\u5316\u4e3a\u4e00\u7cfb\u5217\u7684 <code>if-then-else</code></p> </li> <li> <p>\u53e6\u4e00\u79cd\u66f4\u6709\u6548\u7684\u65b9\u6cd5\u662f\u901a\u8fc7\u7f16\u7801\u5f62\u6210\u4e00\u4e2a\u8f6c\u79fb\u5730\u5740\u8868\uff0c\u5c31\u662f\u5206\u652f\u6307\u4ee4\u5e8f\u5217\u5730\u5740\u8868\uff1b\u7a0b\u5e8f\u901a\u8fc7\u67e5\u627e\u8f6c\u79fb\u5730\u5740\u8868\u6765\u83b7\u53d6\u76ee\u6807\u5730\u5740\uff0c\u5e76\u8df3\u8f6c\u5230\u76f8\u5e94\u7684\u5206\u652f\u6307\u4ee4\u5e8f\u5217</p> </li> </ul> <p>\u8f6c\u79fb\u5730\u5740\u8868\u5c31\u662f\u4e00\u4e2a\u5b57\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5bf9\u5e94\u4e8e\u4ee3\u7801\u4e2d\u5404\u4e2a\u6807\u53f7\u7684\u5730\u5740</p> <p>\u4e3a\u652f\u6301\u8fd9\u79cd\u60c5\u51b5\uff0c\u6709\u4e00\u6761\u95f4\u63a5\u8df3\u8f6c\u6307\u4ee4\uff0c<code>jalr</code> : \u65e0\u6761\u4ef6\u5730\u8f6c\u79fb\u5230\u67d0\u4e2a\u5bc4\u5b58\u5668\u6307\u5b9a\u7684\u5730\u5740.</p> <p></p> <p>A basic block is a sequence of instructions with</p> <ul> <li>No embedded branches (except at end)</li> <li>No branch targets (except at beginning)</li> </ul> <p>A compiler identifies basic blocks for optimization.</p> <p>An advanced processor can accelerate execution of basic blocks.</p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#supporting-procedures-in-computer-hardware","title":"Supporting Procedures in Computer Hardware","text":""},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#procedure-call-instructions","title":"Procedure Call Instructions","text":"<p>Procedure call: jump and link   </p> <p><code>jal x1</code>, ProcedureLabe</p> <ul> <li>lAddress of following instruction put in x1</li> <li>Jumps to target address</li> </ul> <p>\u5982\u679c\u6211\u4eec\u6709\u4e00\u4e2a\u8fc7\u7a0b\u7684\u6807\u7b7e\u4e3a <code>MyProcedure</code>\uff0c\u5219 <code>jal x1, MyProcedure</code> \u5c06\u4f1a\u5c06\u5f53\u524d\u5730\u5740\u4fdd\u5b58\u5230\u5bc4\u5b58\u5668 <code>x1</code> \u4e2d\uff0c\u5e76\u8df3\u8f6c\u5230 <code>MyProcedure</code> \u6807\u7b7e\u6240\u4ee3\u8868\u7684\u4ee3\u7801\u5904\u6267\u884c</p> <p>Procedure return: jump and link register    </p> <p><code>jalr x0, 0(x1)</code></p> <ul> <li>Like jal, but jumps to 0 + address in x1</li> <li>Use <code>x0</code> as <code>rd</code> (x0 cannot be changed)</li> <li>Can also be used for computed jumpse.g., for case/switch statements</li> </ul> <p>\u65e0\u6761\u4ef6\u8df3\u8f6c\uff1a <code>jal x0, Label</code>\uff0c\u56e0\u4e3ax0\u786c\u8fde\u7ebf\u52300\uff0c\u6548\u679c\u7b49\u540c\u4e8e\u4e22\u5f03\u8fd4\u56de\u5730\u5740</p> <p>\u4f7f\u7528 <code>x0</code> \u5bc4\u5b58\u5668\u4f5c\u4e3a\u76ee\u6807\u5bc4\u5b58\u5668\uff08<code>rd</code>\uff09\uff0c\u5373\u8fd4\u56de\u5730\u5740\u5c06\u88ab\u5b58\u50a8\u5728 <code>x0</code> \u4e2d\u3002\u7531\u4e8e <code>x0</code> \u5bc4\u5b58\u5668\u7684\u503c\u6c38\u8fdc\u662f <code>0</code>\uff0c\u56e0\u6b64\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u89c6\u4e3a\u5c06\u8fd4\u56de\u5730\u5740\u4e22\u5f03</p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#using-more-registers","title":"Using More Registers","text":"<p>Registers for procedure calling </p> <p><code>x10~ x17</code>: 8 argument registers to pass parameters or return values </p> <p><code>x1</code>: one return address register to return to origin point.</p> <ul> <li>\u628a\u6570\u636e\u653e\u5165\u6808\u53ebpush\uff0c\u79fb\u9664\u6570\u636e\u79f0\u4e3a\u51fa\u6808,pop\uff0c\u6808\u6307\u9488\uff0c\u4e00\u4e2a\u7279\u6b8a\u7684\u5bc4\u5b58\u5668\uff0csp\uff08x2)\uff0c\u7528\u4e8e\u4fdd\u5b58\u88ab\u8c03\u7528\u8005\u6240\u9700\u7684\u5bc4\u5b58\u5668</li> </ul> <p>\u6808\u662f\u5185\u5b58\u91cc\u7684\u4e00\u5757\u5b58\u50a8\u7ed3\u6784\uff0c\u6808\u5e95\u662f\u9ad8\u5730\u5740\uff0c\u6808\u589e\u957f\u662f\u5730\u5740\u4ece\u9ad8\u5230\u4f4e\uff0cpush\u7684\u65f6\u5019\uff0csp\u51cf\u5c0f\uff0cpop, sp\u589e\u5927</p> <p></p> <ul> <li>\u5148\u653e i \u7136\u540e A[2] A[1].. ---\u7b26\u5408\u9ad8\u7ea7\u8bed\u8a00\u8bbf\u95ee\u987a\u5e8f</li> </ul> <p>C code</p> <pre><code>long long int leaf_example (\n  long long int g, long long int h,\n  long long int i, long long int j) {\n  long long int f;\n  f = (g + h) - (i + j);\n  return f;\n}\n</code></pre> <p>Arguments <code>g, \u2026, j</code>  in  <code>x10, \u2026, x13</code>.</p> <p><code>f</code>in <code>x20</code> temporaries .</p> <p><code>x5</code>, <code>x6</code> .</p> <p>Need to save <code>x5</code>, <code>x6</code>, <code>x20</code> on stack.</p> <p>Assembly</p> <pre><code>leaf_example:\n  ;Save x5, x6, x20 on stack\n    addi sp,sp,-24\n    sd   x5,16(sp)\n    sd   x6,8(sp)\n    sd   x20,0(sp)\n\n    add  x5,x10,x11  ;x5 = g + h\n    add  x6,x12,x1   ;x6 = i + j\n    sub  x20,x5,x6   ;f = x5 \u2013 x6\n    addi x10,x20,0   ;copy f to return register\n\n    ;Restore x5, x6, x20 from stack\n    ld   x20,0(sp)\n    ld   x6,8(sp)\n    ld   x5,16(sp)\n    addi sp,sp,24\n    jalr x0,0(x1)\n</code></pre>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#non-leaf-procedures","title":"Non-Leaf Procedures","text":"<p>Caller save\uff1a </p> <ul> <li>return address </li> <li>arguments  </li> <li>important temporaries ( T  registers) that will be used after call</li> </ul> <p>Callee save:  any <code>S</code> registers used  for local variables</p> <p><code>x5 \u2013 x7, x28 \u2013 x31</code>:  temporary registers. Not preserved by the callee.</p> <p><code>x8 \u2013 x9, x18 \u2013 x27:</code>  saved registers. If used, the callee saves and restores them.</p> <ul> <li>Nested:</li> </ul> <pre><code>long long   fact ( long long   n )   {\n       if ( n  &lt;  1 )   return  ( 1 ) ;\n           else  return   ( n  *  fact ( n  -  1 ) ) ;\n} \n</code></pre> <pre><code>Main:\n....\n;n is reg x28\nadd x10,x0,x28\nJal fact\n\n;Nonleaf : save return address\nfact:    addi sp, sp,-16    ;adjust stack for 2 items\n         sd   x1, 8(sp)     ;save the return address\n         sd   x10, 0(sp)    ;save the argument  n\n         addi x5, x10, -1   ;x5 = n  -  1\n         bge  x5, x0, L1    ;if  n  &gt;=  1, go to L1(else)\n             addi x10, x0, 1    ;return 1 if n &lt;1\n         addi sp, sp, 16    ;Recover sp (Why not recover x1and x10 ?)\n         jalr x0, 0(x1)     ;return to caller\n\nL1:          addi x10, x10, -1  ;n  &gt;=  1: argument gets ( n - 1 )\n         jal  x1, fact      ;call fact with ( n - 1 )\n\n             add  x6, x10, x0   ;x6 = fact(n-1)\n         ld   x10, 0(sp)    ;restore argument n\n         ld   x1, 8(sp)     ;restore the return address\n         addi sp, sp, 16    ;adjust stack pointer to pop 2 items\n\n         mul  x10, x10, x6  ;return  n*fact ( n - 1 )\n         jalr  x0,  0(x1)   ;return to the  caller\n</code></pre> <p></p> <p></p> <ol> <li><code>X10-x17</code> returen</li> </ol> <p></p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#summaries-of-proceduremips","title":"Summaries of procedure(MIPS)","text":"<ul> <li>The <code>jal</code> instruction is used to jump to the procedure and  save the current PC+4 into the return address register <code>X0</code></li> <li>Arguments are passed in <code>$a0-$a3</code> return values in <code>$v0-$v1</code></li> <li>Since the callee may over-write the caller\u2019s registers,   relevant values may have to be copied into memory </li> <li>Each procedure may also require memory space for local variables \u2013 a stack is used to organize the memory   needs for each procedure</li> </ul> <p>\u6808\u8fd8\u9700\u8981\u5b58\u50a8\u4e00\u4e9b\u5c40\u90e8\u53d8\u91cf\uff0c\u4f8b\u5982\u5c40\u90e8\u6570\u7ec4\u6216\u7ed3\u6784, \u8fd9\u4e9b\u53d8\u91cf\u65f6\u5c40\u90e8\u4e8e\u8fc7\u7a0b\uff0c\u4e0d\u9002\u7528\u4e8e\u5bc4\u5b58\u5668\uff0c\u800c\u662f\u4fdd\u5b58\u5728\u6808\u4e2d</p> <p>\u6808\u4e2d\u5305\u542b\u8fc7\u7a0b\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668\u548c\u5c40\u90e8\u53d8\u91cf\u7684\u6bb5\u79f0\u4e3a\u8fc7\u7a0b\u5e27(frame)\u6216\u8005\u6d3b\u52a8\u8bb0\u5f55(activation record)</p> <p>\u5728\u8fc7\u7a0b\u4e2d\u6808\u6307\u9488\u53ef\u80fd\u6539\u53d8\uff0c\u5982\u679c\u5229\u7528\u6808\u6307\u9488\u548c\u5730\u5740\u8fd0\u7b97\u6765\u5b8c\u6210\u5bf9\u5c40\u90e8\u53d8\u91cf\u7684\u5f15\u7528\uff0c\u975e\u5e38\u4e0d\u65b9\u4fbf,\u56e0\u6b64\uff0c\u5b9a\u4e49\u4e00\u4e2a\u5e27\u6307\u9488<code>fp(x8)</code>\uff0c\u6307\u5411\u8fc7\u7a0b\u5e27\u7684\u7b2c\u4e00\u4e2a\u53cc\u5b57\uff0c\u8fd9\u6837\u5e27\u6307\u9488\u5c31\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7a33\u5b9a\u7684\u57fa\u5bc4\u5b58\u5668\uff0c\u5bf9\u5c40\u90e8\u53d8\u91cf\u7684\u5f15\u7528\u5c31\u53d8\u5f97\u975e\u5e38\u7b80\u5355</p> <p>\u5982\u679c\u8fc7\u7a0b\u4e2d\u6808\u5185\u6ca1\u6709\u5c40\u90e8\u53d8\u91cf\uff0c\u7f16\u8bd1\u5668\u4e00\u822c\u4e0d\u8bbe\u7f6e\u548c\u4e0d\u6062\u590d\u5e27\u6307\u9488\u4ee5\u8282\u7701\u65f6\u95f4,\u5f53\u4f7f\u7528\u5e27\u6307\u9488\u65f6\uff0c\u5728\u8c03\u7528\u4e2d\u4f7f\u7528sp\u6765\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u4e14\u53ef\u4ee5\u4f7f\u7528<code>fp</code> \u6062\u590d <code>sp</code>.</p> <p>\u6ce8\u610f, \u4e0d\u7ba1\u662f\u5426\u4f7f\u7528\u663e\u5f0f\u7684\u5e27\u6307\u9488\uff0c\u6808\u4e0a\u90fd\u4f1a\u663e\u793a\u4e00\u6761\u6d3b\u52a8\u8bb0\u5f55\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ef4\u62a4\u7a33\u5b9a\u7684sp\u6765\u51cf\u5c11\u5bf9fp\u7684\u4f7f\u7528</p> <p></p> <ul> <li>Have to PUSH FP</li> <li>Then, we access local variables or.. by accessing FP pointer</li> </ul>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#memory-layout","title":"Memory Layout","text":"<p>\u9664\u4e86\u52a8\u6001\u53d8\u91cf\uff0cC\u7a0b\u5e8f\u5458\u8fd8\u9700\u8981\u4e3a\u9759\u6001\u53d8\u91cf\u548c\u52a8\u6001\u6570\u636e\u7ed3\u6784\u5206\u914d\u5185\u5b58\u7a7a\u95f4</p> <p>\u8fd9\u4e2a\u56fe\u5c55\u793a\u4e86\u8fd0\u884clinux OS\u65f6\u7a0b\u5e8f\u548c\u6570\u636e\u5728RISC-V\u5185\u5b58\u5206\u914d\u7684\u7ea6\u5b9a,\u8fd9\u4e9b\u5730\u5740\u53ea\u662f\u4e00\u79cd\u8f6f\u4ef6\u89c4\u5b9a\uff0c\u5e76\u4e0d\u662fRISC-V\u4f53\u7cfb\u7ed3\u6784\u7684\u4e00\u90e8\u5206\u3002</p> <p>\u6808\u7531\u5185\u5b58\u9ad8\u5730\u5740\u5f00\u59cb\uff0c\u5411\u4e0b\u589e\u957f:\u5185\u5b58\u4f4e\u5730\u5740\u6bb5\u5148\u662f\u4fdd\u7559\u533a\u57df\uff0c\u7136\u540e\u65f6\u673a\u5668\u4ee3\u7801\u7684\u5b58\u50a8\u533a\u57df\uff0c\u79f0\u4e3a\u6b63\u6587\u6bb5\uff0c\u4e4b\u4e0a\u662f\u9759\u6001\u6570\u636e\u6bb5\uff0c\u7528\u4e8e\u5b58\u50a8\u5e38\u91cf\u548c\u5176\u4ed6\u9759\u6001\u53d8\u91cf\u7684\u7a7a\u95f4\u3002\u7c7b\u4f3c\u94fe\u8868\u7684\u6570\u636e\u7ed3\u6784\u901a\u5e38\u4f1a\u968f\u7740\u751f\u547d\u671f\u589e\u957f\u6216\u8005\u7f29\u77ed\uff0c\u8fd9\u7c7b\u6570\u636e\u7ed3\u6784\u5bf9\u5e94\u7684\u6bb5\u79f0\u4e3a\u5806(heap),\u5b83\u653e\u5728\u5185\u5b58\u4e2d,\u4f4d\u4e8e\u9759\u6001\u6570\u636e\u4e4b\u540e</p> <p>\u6808\u548c\u5806\u76f8\u4e92\u589e\u957f\uff0c\u5728\u4e24\u4e2a\u6bb5\u6b64\u6d88\u5f7c\u957f\u7684\u8fc7\u7a0b\u4e2d\u8fbe\u5230\u5185\u5b58\u7684\u9ad8\u6548\u4f7f\u7528,C\u8bed\u8a00\u901a\u8fc7\u663e\u793a\u51fd\u6570malloc(), free()\u5206\u914d\u548c\u91ca\u653e\u7a7a\u95f4\uff0c\u5bb9\u6613\u5bfc\u81f4\u6f0f\u6d1e\u3002\u5fd8\u8bb0\u91ca\u653e\u4f1a\u5bfc\u81f4\u201c\u5185\u5b58\u6cc4\u6f0f\u201d\uff08\u6d88\u8017\u6389\u592a\u591a\u5185\u5b58\u5bfc\u81f4\u64cd\u4f5c\u7cfb\u7edf\u5d29\u6e83\uff09\uff0c\u8fc7\u65e9\u7684\u91ca\u653e\u4f1a\u5bfc\u81f4\u201c\u60ac\u7a7a\u6307\u9488\u201d\uff08\u6307\u9488\u6307\u5411\u7a0b\u5e8f\u4ece\u672a\u8bbf\u95ee\u7684\u4f4d\u7f6e\uff09</p> <p>Jave\u4f7f\u7528\u81ea\u52a8\u5185\u5b58\u5206\u914d\u548c\u5783\u573e\u56de\u6536\u673a\u5236\u6765\u907f\u514d\u8fd9\u7c7b\u9519\u8bef</p> <p></p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#communication-with-people","title":"communication with people","text":""},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#bytehalfwordword-operations","title":"Byte/Halfword/Word Operations","text":"<p>Load byte/halfword/word: Sign extend to 64 bits in rd \u2022 lb rd, offset(rs1) \u2022 lh rd, offset(rs1) \u2022 lw rd, offset(rs1) Load byte/halfword/word unsigned: Zero extend to 64 bits in rd \u2022 lbu rd, offset(rs1) \u2022 lhu rd, offset(rs1) \u2022 lwu rd, offset(rs1) Store byte/halfword/word: Store rightmost 8/16/32 bits \u2022 sb rs2, offset(rs1) \u2022 sh rs2, offset(rs1) \u2022 sw rs2, offset(rs1)</p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#string","title":"String","text":"<p>Three choices for representing a string *  Place the length of the string in the first position *  An accompanying variable has the length *  A character in the  last position to mark the end of a string <pre><code>void    strcpy ( char    x[  ] ,    char    y[  ] )\n      {\n              size_t    i ;\n              i  =  0 ;\n              while ( ( x[ i ]  =  y[ i ] )  != \u2018\\ 0\u2019 )       /* copy and test byte  */\n                          i  +=  1 ;\n      }\n</code></pre> Assume : i--x19, x's base--x10, y's base--x11 <pre><code>strcpy :\n      addi sp,sp,-8\n      sd   x19,0(sp)\n      add  x19,x0,x0\nL1:\n      add x5,x11,x19  ;x5 = &amp;y[i]\n      lbu x6,0(x5)    ;x6 = y[i]\n      add x7,x10,x19  ;x7 = &amp;x[i]\n      sb  x6,0(x7)    ;x[i] = y[i]\n      beq x6,x0,Exit  ;if y[i] == 0, exit\n      addi x19,x19,1  ;i += 1\n      jal  x0,L1\nExit:\n      ld   x19,0(sp)\n      addi sp,sp,8\n      jalr x0,0(x1)\n</code></pre> For a leaf procedure * The compiler exhausts all temporary registers  * Then use the registers it must save</p> <p>x5 \u2013 x7, x28 \u2013 x31:  temporary registers : Not preserved by the callee</p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#risc-v-addressing-for-wide-immediate-addresses","title":"RISC-V Addressing for Wide Immediate &amp; Addresses","text":"<p>For occasional 32-bit constant <code>lui rd,constant</code>  * copy the 20-bit constant to the upper 20 bits of rd * Extends the constant to 64 bits by setting the lower 12 bits to 0   Better: * <code>lui rd,constant[31:12]</code> * <code>ori rd,rd,constant[11:0]</code></p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#branch-addressing","title":"Branch Addressing","text":"<ul> <li>Use offset addressing for branches</li> <li>The lowest bit of the offset is always 0! Not stored.  <p>More specifically  <code>beq x0,x0 Loop</code>  OP + func3 \u2192 beq  rs1 \u2192 x0  rs2 \u2192 x0  offset = -20 = 111111101100 \u622a\u65ad\u6700\u540e\u4e00\u4f4d\uff0c\u5f97\u5230 11111110110 im[12] + im[10:5] + im[4:1] + im[11] + 0 rd/offset -&gt; im[4:1]+im[11] im[12] : sign bit</p> </li> <li> <p>Offset &gt; 12 bits ? Rewrite it to offer a much greater branching distance: <pre><code>bne    x10, x0, L2\njal     x0,   L1\nL2:...\n</code></pre> <code>JAL</code> instruction: 20-bit offset  How to know the offset?</p> </li> <li> <p>Label Table</p> </li> </ul>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#decoding-machine-language","title":"Decoding Machine Language","text":""},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#parallelism-and-instructions-synchronizatio","title":"Parallelism and Instructions : Synchronizatio","text":""},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#translating-and-starting-a-program","title":"Translating and Starting a Program","text":"<ul> <li>Compiler translates high-level language to assembly</li> <li>Assembler translates assembly to machine language</li> <li>pseudo-instructions</li> <li>symbol table:a table that mathches labels to addresses</li> <li>Producing an object file of UNIX</li> </ul> <p>Object File: Linking Object modules Dynamic Linking Only link/load the needed library routines when it is called * Requires procedure code to be relocatable * Avoids image bloat caused by static linking of all (transitively) referenced libraries * Automatically picks up new library versions</p> <p>Lazy Linkage  Second time the link is called,much faster.</p> <p>\u6267\u884c\u6587\u4ef6 * \u5728\u786c\u76d8\u4e0a\uff0c\u975e\u6267\u884c\u6001\uff1a\u5982\u75c5\u6bd2\u6837\u672c \u8fdb\u7a0b * \u8f6c\u8f7d\u5230\u5185\u5b58 * \u53ef\u4ee5\u7ec6\u5206\u4e3a\u591a\u4e2a\u53ef\u4ee5\u5e76\u53d1\u6267\u884c\u7684\u7ebf\u7a0b\uff1a\u5982\u6fc0\u6d3b\u6001\u75c5\u6bd2 * \u5982\u4f55\u770b\u7ebf\u7a0b: \u4efb\u52a1\u7ba1\u7406\u5668</p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap2/lec/#example","title":"Example","text":"<p><pre><code>void   swap ( long  long    v[  ] ,    size_t  k )\n     {\n            long  lon   temp ;\n            temp  =  v[ k ] ;\n            v[ k ] =  v[ k + 1 ] ;\n            v[ k + 1 ]  =  temp ;\n     }\n</code></pre> <pre><code>swap:\n    slli x6,x11,3     //x6 = k*8\n    add  x6,x10,x6    //x6 = &amp;v[k]\n    ld   x5,0(x6)     //x5 = v[k]\n    ld   x7,8(x6)     //x7 = v[k+1]\n    sd   x7,0(x6)     //v[k] = v[k+1]\n    sd   x5,8(x6)     //v[k+1] = v[k]\n    jalr x0,0(x1)     //return\n</code></pre> <pre><code>void  sort (long  long    v[  ] ,    size_t    n )\n     {\n             size_t    i ,  j ;\n             for ( i  =  0 ; i  &lt;  n ; i + =  1 ) {\n                    for ( j  =  i  -  1 ; j  &gt;=  0  &amp;&amp;  v[j]  &gt;  v[j+1] ; j -=  1 )\n                             swap ( v ,  j ) ;\n             }\n     }\n</code></pre> <pre><code>sort:\n  addi sp,sp,-40\n  sd x1 ,32(sp)\n  sd x22,24(sp)\n  sd x21,16(sp)\n  sd x20,8(sp)\n  sd x19,0(sp)\nfor1tst:\n  bge x19,x20,exit1\n  ....\nexit2:\n  addi x19,x19,1\n  j for1tst\nexit1:\n  ld x19,0(sp)\n  ld x20,8(sp)\n  ld x21,16(sp)\n  ld x22,24(sp)\n  ld x1,32(sp)\n  addi sp,sp,40\n  jalr x0,0(x1)\n</code></pre></p> <p></p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/","title":"Chapter3","text":"<p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#chap3arithmetic-for-computer","title":"Chap3.Arithmetic for computer","text":"Introduction"},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#numbers","title":"Numbers","text":""},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#signed-and-unsigned-numbers-possible-representations","title":"Signed and Unsigned Numbers  Possible Representations","text":"Example <ul> <li>Sign Magnitude. Positive &amp; Negative Zero (Problem !)</li> <li>One's Complement : \u53d6\u53cd. Positive &amp; Negative Zero (Problem !)</li> <li>Two's Complement : \u53d6\u53cd+1. </li> </ul> Def <p>To know a negative num's definite value : also invert and plus one</p> <p>Biased notation </p> <ul> <li><code>1000 0000</code> \\(=\\) minimal negative value(\\(-2^7\\))        </li> <li><code>0111 1111</code> \\(=\\) maximal positive value (\\(2^7-1\\))</li> </ul> <p></p> <p>Sign Extention <code>lbu</code>  vs. <code>lb</code></p> <p></p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#operations","title":"Operations","text":""},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#operations_1","title":"Operations","text":"<p>Signed integer</p> <p><code>slt</code> Set when less than</p> <p><code>slti</code> Set when less than immediate</p> <p>Unsigned integer</p> <p><code>sltu</code> Set when less than</p> <p><code>sltiu</code> Set when less than immediate </p> <p>\"sltu\"\u548c\"sltiu\"\u90fd\u662fMIPS\u6c47\u7f16\u8bed\u8a00\u4e2d\u7684\u6307\u4ee4\uff0c\u4f46\u5b83\u4eec\u4e4b\u95f4\u6709\u4e00\u4e9b\u91cd\u8981\u7684\u533a\u522b\uff1a</p> <p>sltu\uff1a</p> <ul> <li>\"sltu\"\u4ee3\u8868\"set less than unsigned\"\uff0c\u7528\u4e8e\u65e0\u7b26\u53f7\u6bd4\u8f83\u3002</li> <li>\u5b83\u5c06\u4e24\u4e2a\u5bc4\u5b58\u5668\u4e2d\u7684\u65e0\u7b26\u53f7\u6574\u6570\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u5c0f\u4e8e\u7b2c\u4e8c\u4e2a\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\uff0c\u5219\u7ed3\u679c\u4e3a1\uff1b\u5426\u5219\u7ed3\u679c\u4e3a0\u3002</li> </ul> <p>sltiu\uff1a</p> <ul> <li>\"sltiu\"\u4ee3\u8868\"set less than immediate unsigned\"\uff0c\u4e5f\u7528\u4e8e\u65e0\u7b26\u53f7\u6bd4\u8f83\u3002</li> <li>\u4e0e\"sltu\"\u7c7b\u4f3c\uff0c\u4f46\u662f\u5b83\u5c06\u7b2c\u4e00\u4e2a\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u4e0e\u4e00\u4e2a\u7acb\u5373\u6570\uff08\u5e38\u6570\uff09\u8fdb\u884c\u6bd4\u8f83\uff0c\u800c\u4e0d\u662f\u4e0e\u53e6\u4e00\u4e2a\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u8fdb\u884c\u6bd4\u8f83\u3002</li> </ul> Example <p> </p> <p>New RISC V instructions</p> <ul> <li><code>lbu</code>  load byte unsigned : </li> </ul> <p>Loads a byte into the lowest 8 bit of a register</p> <p>Fills the remaining bits with <code>0</code></p> <ul> <li><code>Lb</code> load byte (signed)</li> </ul> <p>Loads a byte into the lowest 8 bit of a register</p> <p>Extends the highest bit into the remaining 24 bits</p> <ul> <li><code>sltu</code>: set on less than unsigned</li> <li><code>slti</code>:  set on less than immediate</li> <li><code>sltiu</code>: set on less than unsigned immediate</li> </ul> <p>Logical Operations</p> <p></p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#arithmetic","title":"Arithmetic","text":""},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#addition-subtraction","title":"Addition &amp; subtraction","text":""},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#overflow","title":"Overflow","text":"<ul> <li>\\(XOR\\)\u200b Most significant bit <code>^</code> Carry bit</li> <li>Actually we should \\([MSB\\)<code>^</code>\\(Carry] and \\ Operation_{add\\ or\\ sub}\\)</li> </ul> <ul> <li>Overflows in signed arithmetic instructions cause exceptions:</li> </ul> <p><code>addadd immediate (addi)</code></p> <p><code>subtract (sub)</code></p> <ul> <li>Overflows in unsigned arithmetic instructions don\u2019t cause exceptions</li> </ul> <p><code>add unsigned (addu)</code></p> <p><code>add immediate unsigned (addiu)</code></p> <p><code>Subtract unsigned (subu)</code></p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#constructing-an-alu","title":"Constructing an ALU","text":"<ul> <li>Half Adder:</li> </ul> <p>\\(S=X\\oplus Y\\\\  C=XY\\)</p> <ul> <li>Full Adder :</li> </ul> <p>\\(Sum = X\\oplus Y\\oplus Carry_{in}\\)\u200b </p> <p>\\(Carry_{out} = XY +(X+Y)Carry_{in}\\)\u200b</p> <p>\\(X\\oplus Y\\) only different from \\(X+Y\\) when \\(XY=1\\) </p> <p></p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#overflow-detection","title":"Overflow Detection","text":"<ul> <li>Overflow V = \\(C_n\\oplus C_{n-1}\\)</li> </ul> <pre><code>module alu(A, B, ALU_operation, res, zero, overflow );\n    input [31:0] A, B;\n    input [2:0] ALU_operation;\n    output [31:0] res;\n    output zero, overflow ;\n    wire [31:0] res_and,res_or,res_add,res_sub,res_nor,res_slt;\n    reg [31:0] res;\n    parameter one = 32'h00000001, zero_0 = 32'h00000000;\n       assign res_and = A&amp;B;\n     assign res_or = A|B;\n     assign res_add = A+B;\n     assign res_sub = A-B;\n     assign res_slt =(A &lt; B) ? one : zero_0;\n     always @ (A or B or ALU_operation)\n            case (ALU_operation)\n                3'b000: res=res_and;    \n                3'b001: res=res_or; \n                3'b010: res=res_add;    \n                3'b110: res=res_sub;    \n            3'b100: res=~(A | B);\n            3'b111: res=res_slt;\n            default: res=32'hx;\n            endcase\n     assign zero = (res==0)? 1: 0;\nendmodule\n</code></pre> <ul> <li>Overflow code ?</li> <li>What is the difference The codes in the Synthesize?</li> </ul>"},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#speed-up","title":"Speed up","text":"<p>\\(P_i = A_i\\oplus B_i \\ \\ \\ \\ G_i = A_iB_i\\)\u200b</p> <p>\\(S_i = P_i\\oplus C_i\\ \\ \\ \\ C_{i+1} = G_i + P_iC_i\\)\u200b\u200b</p> <p></p> Improvement -- Reduce FAN-OUT <p> </p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#carry-skip-adder","title":"Carry Skip Adder","text":""},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#carry-select-adder-csa","title":"Carry Select Adder (CSA)","text":"<p>Already caclulate(parallel) different situations,once the \\(C_0\\)\u200b is delivered, the result can be output.</p> <p></p> <p></p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#multiplexer","title":"Multiplexer","text":"<p>Look at current bit position</p> <ul> <li>If multiplier is \\(1\\) then add multiplicand Else add 0</li> <li>shift multiplicand left by 1 bit</li> </ul> Example <p> </p> Multiplexter V1 <p> </p> Multiplexter V2 <p> </p> Multiplexter V3 <p> </p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#booths-algorithm","title":"Booth's Algorithm","text":"<p>Idea: </p> <ul> <li>If you have a sequence of <code>1s</code> subtract at first <code>'1'</code> in multiplier</li> <li>shift for the sequence of <code>'1s'</code></li> <li>add where prior step had last <code>'1\u2018</code></li> </ul> <p>Action</p> <ul> <li><code>1</code> <code>0</code> : subtract multiplicand from left</li> <li><code>1</code> <code>1</code>  no arithmetic operation</li> <li><code>0</code> <code>1</code>   add multiplicand to left half</li> <li><code>0</code> <code>0</code> no arithmetic operation</li> </ul> <p>\\(Bit_{-1} = 0\\)</p> <p>Arithmetic shift right:</p> <ul> <li>keeps the leftmost bit constant</li> <li>no change of sign bit !</li> </ul> <p></p> <p></p> <ul> <li>\u4ecd\u7136\u662f\u653e\u5728\u5de6\u8fb9\u4e00\u8def\u53f3\u79fb</li> <li>\u6ce8\u610fsigned shift right</li> <li>least significant bit\u521d\u59cb\u52a0\u4e2a\u96f6</li> </ul>"},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#division","title":"Division","text":"Division V1 <ul> <li>Reduction of Divisor and ALU width by half</li> <li>Shifting of the remainderSaving 1 iteration</li> </ul> Division V2 Division V3 <p> <p>4.1 \u5df2\u7ecf\u7ed3\u675f\u4e86\u9664\u6cd5\u64cd\u4f5c\uff0c\u6b64\u65f6\u7684\u9ad8\u4f4d\u5c31\u662f\u6211\u4eec\u7684\u4f59\u6570\uff0c\u4f46\u662f\u8fd9\u6700\u540e\u4e00\u6b21\u7684\u7ed3\u679c\u8fd8\u6ca1\u6709\u653e\u56de\u5230 Reminder \u4e2d\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u518d\u5f80\u5de6\u79fb\u4e00\u4f4d\u4e3a\u5546\u7559\u51fa\u7a7a\u95f4\uff0c\u653e\u5165\u540e\uff0c\u518d\u628a\u9ad8\u4f4d\u4f59\u6570\u5f80\u53f3\u79fb\u52a8\u4ee5\u62b5\u6d88\u5f71\u54cd  </p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#signed-division","title":"Signed division","text":"<ul> <li>\u9664\u96f6\u4f1a\u4ea7\u751f\u6ea2\u51fa\uff0c\u7531\u8f6f\u4ef6\u68c0\u6d4b</li> </ul>"},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#floating-point-numbers","title":"Floating point numbers","text":"<p>Standardized format  IEEE 754</p> <ul> <li>Single precision <code>8 bit exp, 23 bit significant</code></li> <li>Double precision <code>11 bit exp, 52 bit significant</code></li> <li>Both formats are supported by MIPS</li> </ul> <p></p> <ul> <li> <p>Leading '1' bit of significand  is implicit</p> </li> <li> <p>M: \u5c3e\u6570. \u5373\u9ed8\u8ba4<code>.xxx</code>\u662f<code>1.xxx</code>(\u56e0\u4e3a\u79d1\u5b66\u8ba1\u6570\u6cd5\uff0c\u6ca1\u6709<code>0.xxx</code>)</p> </li> <li> <p>Exponent is biased(\u79fb\u7801)</p> </li> </ul> <p>Bias 127 for single precision</p> <p>Bias 1023 for double precision</p> <p>Have to be transfered back,but treated like unsigned inside</p> <p>NOTE :\\((-1)^{sign} \u2022 (1 + significand) \u2022 2^{exponent - bias}\\)\u200b</p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#limitations","title":"Limitations","text":"<p>Overflow:  &amp;. Underflow</p> <p></p> <p></p> EXAMPLE <p> </p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#floating-point-addition","title":"Floating Point Addition","text":"<ul> <li>Alignment</li> <li>The proper digits have to be added</li> <li>Addition of significant</li> <li>Normalization of the result  [\u91cd\u65b0\u89c4\u683c\u5316]</li> <li>Rounding</li> </ul> EXAMPLE"},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#floating-point-multiplication","title":"Floating Point multiplication","text":"<p>Algorithm</p> <ul> <li> <p>Add exponents - bias.</p> </li> <li> <p>Multiply the significands.</p> </li> <li> <p>Normalize.</p> </li> <li> <p>Over- underflow.</p> </li> <li> <p>Rounding.</p> </li> <li> <p>Sign.</p> </li> </ul> <p></p> EXAMPLE <p> </p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#float-devision","title":"float devision","text":"<ul> <li>Subtraction of exponents</li> <li>Division of the significants</li> <li>Normalisation</li> <li>Rounding</li> <li>Sign</li> </ul>"},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#accurate-arithmetic","title":"Accurate Arithmetic","text":"<ul> <li>IEEE 754 always keeps two extra bits on the right during intermediate additions, called guard and round</li> </ul> <p>\u4e3a\u4e86\u4fdd\u8bc1\u56db\u820d\u4e94\u5165\u7684\u7cbe\u5ea6,\u7ed3\u679c\u6ca1\u6709,\u53ea\u5728\u8fd0\u7b97\u7684\u8fc7\u7a0b\u4e2d\u4fdd\u7559</p> EXAMPLE <p> </p> <ul> <li>sticky bit</li> </ul> <p>A bit used in rounding in addition to guard and round that is set whenever there are nonzero bits to the right of the round bit. </p> <ul> <li>allows the computer to see the difference between \\(0.50 ... 00_{ten}\\) and \\(0.50 ... 01_{ten}\\)\u200b when rounding.</li> </ul> EXAMPLE for guard,round and sticky bit. <p> </p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#round-modes","title":"Round Modes","text":"EXAMPLE"},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#parallelism-and-computer-arithmetic-associativity","title":"Parallelism and Computer Arithmetic: Associativity","text":"<p>if   \\(x + (y+ z) = (x + y) + z  ?\\)</p> <ul> <li>\\(x = -1.5_{ten} \\times 10^{38},y= 1.5_{ten} \\times 10^{38}, and\\ z = 1.0\\)</li> <li>\\(x + (y + z) = 0.0\\)</li> <li>\\((x+y) + z = 1.0\\)</li> </ul>"},{"location":"%E8%AE%A1%E7%BB%84/Chap3/lec/#exercise","title":"Exercise","text":"<p>\u5df2\u77e5\\(F(n) = \u03a32^i = 2^{n+1} -1 = 111\u20261B\\)</p> <ul> <li>n+1\u4e2a1\u8ba1\u7b97F(n)\u7684C\u8bed\u8a00\u51fd\u6570f1\u5982\u4e0b</li> </ul> <pre><code>int  f1\uff08 unsigned n){   \n    int  sum = 1, power = 1;\n    for ( unsigned i=0;  i&lt;=n-1;  i++ ){    \n         power * = 2;\n        sum += power;\n   }\n   return sum;\n}\n</code></pre> <ul> <li>\u5c06f1\u4e2d\u7684int\u90fd\u6539\u4e3afloat\uff0c\u53ef\u5f97\u5230\u8ba1\u7b97f(n)\u7684\u53e6\u4e00\u4e2a\u51fd\u6570f2.</li> </ul> <p>\u5047\u8bbeunsigned\u548cint\u578b\u6570\u636e\u90fd\u536032\u4f4d\uff0cfloat\u91c7\u7528IEEE 754\u5355\u7cbe\u5ea6\u6807\u51c6(IEEE 754\u91c7\u7528\u7684\u662f\u6700\u8fd1\u820d\u5165<code>round to nearest</code>\u7684\u65b9\u5f0f) , \u56de\u7b54\u4e00\u4e0b\u95ee\u9898\uff1a</p> <ul> <li> <p>\u5f53n=0\u65f6\uff0c\\(f1\\)\u4f1a\u51fa\u73b0\u6b7b\u5faa\u73af\uff0c\u4e3a\u4ec0\u4e48\uff1f\u82e5\u5c06\\(f1\\)\u4e2d\u53d8\u91cf\\(i\\)\u548c\\(n\\)\u90fd\u5b9a\u4e49\u4e3aint\u578b\uff0c\u5219\\(f1\\)\u200b\u662f\u5426\u8fd8\u4f1a\u51fa\u73b0\u6b7b\u5faa\u73af\uff1f\u4e3a\u4ec0\u4e48\uff1f</p> <ul> <li> <p><code>unsigned 0 -1</code> -- \u5927\u6570\uff0c<code>i&lt;=n-1</code> \u6c38\u771f\uff0c\u6240\u4ee5\u6b7b\u5faa\u73af.</p> </li> <li> <p>\u82e5i\u548cn\u6539\u4e3aint\u7c7b\u578b\uff0c\u4e0d\u4f1a\u6b7b\u5faa\u73af:<code>n=0</code>\u65f6\uff0c<code>n-1</code>\u7684\u503c\u4e3a<code>-1</code>\uff0c\u6545<code>i&lt;=n-1</code> \u4e0d\u6210\u7acb\uff0c\u9000\u51fa\u5faa\u73af</p> </li> </ul> </li> <li> <p>f1(23)\u548cf2(23) \u7684\u8fd4\u56de\u503c\u662f\u5426\u76f8\u7b49\uff1f\u673a\u5668\u6570\u5404\u662f\u4ec0\u4e48\uff08\u7528\u5341\u516d\u8fdb\u5236\u8868\u793a)</p> <p>Signle presion <code>bias = 127</code></p> <p>\\(f1(23)=00FFFFFFh\\)</p> <p>\\(f2(23)=0_{sign}10010110_{exponent(bias)}....=0100\\ 1011\\ 0111\\ 1111\\ 1111\\ 1111\\ 1111\\ 1111=47BFFFFFH\\)</p> </li> <li> <p>\\(f1(24)\\)\u548c\\(f2(24)\\)\u7684\u8fd4\u56de\u503c\u5206\u522b\u4e3a\\(33554431\\)\u548c\\(33554432.0\\)\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u76f8\u7b49\uff1f</p> <p>\u5f53\\(n=24\\)\u65f6\uff0c\\(f(24)=11\u2026.1B\\),float\u53ea\u670924\u4f4d\u6709\u6548\u4f4d\uff0c\u820d\u5165\u540e\u6570\u503c\u589e\u5927\uff0c\u6240\u4ee5\\(f2(24)\\)\u6bd4\\(f1(24)\\)\u5927\\(1\\).</p> </li> <li> <p>\\(f(31) = 2^{32} -1\\), \u800c\\(f1(31)\\)\u7684\u8fd4\u56de\u503c\u5374\u4e3a\\(-1\\)\uff0c\u4e3a\u4ec0\u4e48\uff1f\u82e5\u4f7f\\(f1(n)\\)\u7684\u8fd4\u56de\u503c\u4e0e\\(f(n)\\)\u200b\u76f8\u7b49\uff0c\u6700\u5927\u7684n\u662f\u591a\u5c11\uff1f</p> <p>\\(F(31)\\)\u8d85\u51faint\u6570\u636e\u7684\u8868\u793a\u8303\u56f4\uff0c\u7528\\(f1(31)\\)\u5b9e\u73b0\u65f6\u5f97\u5230\u673a\u5668\u6570\u4e3a32\u4e2a1\uff0c\u4f5c\u4e3aint\u89e3\u91ca\u65f6\u5176\u503c\u4e3a<code>-1</code></p> <p>\u56e0\u4e3a<code>int</code>\u6700\u5927\u53ef\u8868\u793a\u6570\u4e3a0\u540e\u8ddf31\u4e2a1\uff0c\u6240\u4ee5\\(f1(n)\\)\u7684\u8fd4\u56de\u503c\u4e0e\\(f(n)\\)\u76f8\u7b49\u7684\u6700\u5927\\(n\\)\u503c\u662f30\u3002</p> </li> <li> <p>\\(f2(127)\\)\u7684\u673a\u5668\u6570\u4e3a\\(7F80 0000H\\)\uff0c\u5bf9\u5e94\u7684\u503c\u662f\u4ec0\u4e48\uff1f\u82e5\u4f7f\\(f2(n)\\)\u7684\u7ed3\u679c\u4e0d\u6ea2\u51fa\uff0c\u5219\u6700\u5927\u7684n\u662f\u591a\u5c11\uff1f\u82e5\u4f7f\\(f2(n)\\)\u7684\u7ed3\u679c\u7cbe\u786e\uff08\u65e0\u820d\u5165\uff09\uff0c\u5219\u6700\u5927\u7684\\(n\\)\u200b\u662f\u591a\u5c11\uff1f</p> <ul> <li>IEEE\u7528<code>\u9636\u7801\u51681,\u5c3e\u6570\u4e3a0</code>\u8868\u793a\u65e0\u7a77\u5927</li> </ul> <p>F2\u8fd4\u56de\u503c\u4e3afloat\uff0c\u673a\u5668\u6570\u4e3a\\(7F80 0000H\\)\u5bf9\u5e94\u7684\u503c\u662f\\(+\u221e\\)</p> <ul> <li><code>n=126</code>\u65f6\uff0c\u5bf9\u5e94\u9636\u7801\u4e3a253\uff0c\u5c3e\u6570\u90e8\u5206\u820d\u5165\u540e\u9636\u7801\u52a01\uff0c\u6700\u7ec8\u9636\u7801\u4e3a254\uff0c\u4e0d\u6ea2\u51fa\u7684\u6700\u5927n\u503c\u4e3a<code>126</code>.</li> </ul> <p><code>N=23</code>\u65f6\uff0cf(23)\u4e3a24\u4f4d1\uff0cfloat\u670924\u4f4d\u6709\u6548\u4f4d\uff0c\u6240\u4ee5\u4e0d\u9700\u820d\u5165\uff0c\u7ed3\u679c\u7cbe\u786e</p> <p>\u6545\u4f7ff2\u83b7\u7cbe\u786e\u7ed3\u679c\u7684\u6700\u5927n\u503c\u4e3a 23.</p> </li> </ul> <p></p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap4/lec/","title":"Lec","text":""},{"location":"%E8%AE%A1%E7%BB%84/Chap4/lec/#basic-operations","title":"Basic Operations","text":""},{"location":"%E8%AE%A1%E7%BB%84/Chap4/lec/#interruption-exception","title":"Interruption &amp; Exception","text":""},{"location":"%E8%AE%A1%E7%BB%84/Chap4/lec/#handling-exceptions","title":"Handling Exceptions","text":"<ul> <li>Save PC of offending (or interrupted) instruction   <p>In RISC-V: Supervisor Exception Program Counter (SEPC) (P316, 7<sup>th</sup>  line)</p> </li> <li>Save indication of the problem <p>In RISC-V: Supervisor Exception Cause Register (SCAUSE) 64 bits, but most bits unused</p> </li> <li>Exception code field: 2 for undefined opcode, 12 for hardware malfunction, ...</li> <li>Jump to handler <p>Assume at 0000 0000 1C09 0000hex Entry address in a special register  :Suptervisor Trap Vector (STVEC), which can be loaded by OS.</p> </li> </ul>"},{"location":"%E8%AE%A1%E7%BB%84/Chap4/lec/#vectored-interrupts","title":"Vectored Interrupts","text":"<ul> <li>Handler address determined by the cause</li> </ul>"},{"location":"%E8%AE%A1%E7%BB%84/Chap4/lec/#handler-actions","title":"Handler Actions","text":"<p>Close interrupts * Read cause, and transfer to relevant handler * Determine action required * If  restartable     \u2013 Take corrective action     \u2013 use SEPC to return to program  (mret) * Otherwise     \u2013 Terminate program     \u2013 Report error using SEPC, SCAUSE, ...     \u2013 OS  make the choice to transfer to another ready process</p>"},{"location":"%E8%AE%A1%E7%BB%84/Chap4/lec/#csr","title":"CSR","text":""},{"location":"%E8%AE%A1%E7%BB%84/Chap4/lec/#8-important-csr-for-exception-handling","title":"8 important CSR for exception handling","text":"<ol> <li><code>mtvec</code>    * ( Machine Trap Vector): jump to this address when exception     </li> <li><code>mepc</code>    *  (Machine Exception PC): the instruction raise the exception    *  When Interruption or Exception, the current PC will be saved in <code>mepc</code> </li> <li><code>mcause</code> * (Machine Cause): the cause of the exception,which kind</li> <li><code>mie</code> * (Machine Interrupt Enable): enable or disable the interrupt</li> <li><code>mip</code> * (Machine Interrupt Pending): the interrupt is pending or not</li> <li><code>mtval</code> * (Machine Trap Value): the value of the exception * error address , illegal instruction, or  0</li> <li><code>mscrach</code> * (Machine Scratch): a temporary register</li> <li><code>mstatus</code> * (Machine Status): the status of the machine   * MPIE: Machine Previous Interrupt Enable <p>Save the previous status of the interrupt * Exceptions \u7acb\u523b\u5904\u7406\uff0c\u6ca1\u6709exception \u624d\u8003\u8651 interrupts</p> </li> </ol>"},{"location":"%E8%AE%A1%E7%BB%84/Chap4/lec/#csr-for-supervisor-mode","title":"CSR for Supervisor Mode","text":""},{"location":"%E8%AE%A1%E7%BB%84/Chap4/lec/#how-control-checks-for-exceptions","title":"How Control Checks for Exceptions","text":"<ul> <li>Add test logic \u2013 illegal  instruction, load address misaligned, store address misaligned </li> <li>add control signal \u2013 CauseWrite for mcause  \u2013 EPCWrite for mepc \u2013 TVALWrite for mtval</li> <li>process of control  \u2013 mepc &lt;- PC( exception / interruption)  \u2013 mcause  &lt;-  set  correspondent bit \u2013 mtval &lt;- memory address  or  illegal instruction  \u2013 mstatus.mpie &lt;- Mstatus.mie;  mstatus.mie&lt;-0;    mstatus.mpp&lt;-mp;  mp&lt;-11 \u2013 PC&lt;-address of process routine ( mtvec, ex. 1c090000)</li> <li>jump when <code>mstatus.MIE = 1  &amp;&amp;  mie[i] = 1 &amp;&amp;  mip [i]= 1</code></li> </ul>"},{"location":"%E8%AE%A1%E7%BB%84/Intro/intro/","title":"Chapter1","text":""},{"location":"%E8%AE%A1%E7%BB%84/Intro/intro/#performance","title":"Performance","text":"<ul> <li>Response time: How long it takes to do a task.</li> <li>Throughput (\u541e\u5410\u91cf): Total work done per unit time. \\(Performance = \\frac{1}{Executation time}\\)</li> </ul>"},{"location":"%E8%AE%A1%E7%BB%84/Intro/intro/#cpi","title":"CPI","text":"<p>CPI \u8868\u793a\u7684\u662f \"Clocks Per Instruction\"\uff0c\u5373\u6bcf\u6761\u6307\u4ee4\u7684\u65f6\u949f\u5468\u671f\u6570\u3002\u5b83\u662f\u8861\u91cf\u8ba1\u7b97\u673a\u5904\u7406\u5668\u6027\u80fd\u7684\u91cd\u8981\u6307\u6807\u4e4b\u4e00\u3002CPI \u6570\u503c\u8d8a\u4f4e\uff0c\u8868\u793a\u5904\u7406\u5668\u5728\u6267\u884c\u6307\u4ee4\u65f6\u9700\u8981\u7684\u65f6\u949f\u5468\u671f\u8d8a\u5c11\uff0c\u6027\u80fd\u8d8a\u597d\u3002</p> <ul> <li>CPI \u7684\u8ba1\u7b97\u65b9\u5f0f\u662f\u5c06 CPU \u6267\u884c\u6307\u4ee4\u6240\u9700\u7684\u65f6\u949f\u5468\u671f\u6570\u603b\u548c\u9664\u4ee5\u6267\u884c\u7684\u603b\u6307\u4ee4\u6570\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0cCPI \u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u516c\u5f0f\u8ba1\u7b97\uff1a\\(CPI = \\frac{Total\\ Clock\\ Cycles}{Total\\ Instructions\\ Executed}\\)</li> </ul> <p>\u5176\u4e2d\uff0c\"Total Clock Cycles\" \u8868\u793a\u6267\u884c\u6240\u6709\u6307\u4ee4\u6240\u9700\u7684\u603b\u65f6\u949f\u5468\u671f\u6570\uff0c\"Total Instructions Executed\" \u8868\u793a\u6267\u884c\u7684\u603b\u6307\u4ee4\u6570\u3002</p> <p>\u901a\u8fc7\u76d1\u6d4b\u548c\u4f18\u5316(\u51cf\u5c11) CPI\uff0c\u53ef\u4ee5\u6539\u5584\u5904\u7406\u5668\u7684\u6027\u80fd\uff0c\u4f8b\u5982\u51cf\u5c11\u6307\u4ee4\u6267\u884c\u65f6\u95f4\uff0c\u63d0\u9ad8\u5904\u7406\u901f\u5ea6\uff0c\u4ee5\u53ca\u964d\u4f4e\u80fd\u8017\u3002</p>"},{"location":"%E8%AE%A1%E7%BB%84/Intro/intro/#cpu-time","title":"CPU Time","text":"<p>Clock cycle: This refers to the basic unit of time used by a computer's CPU (Central Processing Unit) in executing instructions. It's the time it takes for one complete pulse of the CPU's clock signal. All operations in a computer, such as fetching instructions, decoding them, executing them, and storing results, are synchronized by this clock signal. Clock cycles are typically measured in units like milliseconds (ms), microseconds (\u03bcs), or nanoseconds (ns), depending on the speed of the processor.</p> <p>Clock rate: Also known as clock speed or clock frequency, this is the rate at which a CPU executes instructions, measured in cycles per second (Hz). For example, a CPU with a clock rate of 2 gigahertz (GHz) performs 2 billion clock cycles per second. Higher clock rates generally mean faster processing speeds, assuming other factors remain constant.</p> <p>CPU time: This represents the total time taken by a CPU to complete a task or process. It's typically measured in seconds. CPU time is influenced by factors such as the clock rate, the number of clock cycles required to execute each instruction, and the total number of instructions executed.</p> <p></p> <p></p> <p>Performance improved by * Reducing number of clock cycles * Increasing clock rate * Hardware designer must often trade off clock rate against cycle count</p>"}]}