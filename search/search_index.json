{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to Lily's Notebook!","text":""},{"location":"#about-me","title":"About me","text":""},{"location":"#my-github","title":"My GitHub","text":""},{"location":"#my-gmail-and-my-zju-email","title":"My Gmail  and My ZJU Email","text":""},{"location":"CV/ML-4360/BS/lec2/","title":"Lec2 for ML-4360","text":""},{"location":"CV/ML-4360/BS/lec2/#21-primitives-transformations","title":"2.1 Primitives &amp; Transformations","text":""},{"location":"CV/ML-4360/BS/lec2/#homogeneous","title":"\\(Homogeneous\\)","text":"<ul> <li>homogeneous coordinates &amp; inhomogeneous coordinates</li> <li>argmented vector[one element out of the whole equivalent class],homogeneous vectors,homogeneous vectors</li> <li>points at infinity </li> <li>In homogeneous coordinates, the intersection of two lines is given by: <p>\\(\\tilde{x}\\)=\\(\\tilde{l1}\\) \u00d7 \\(\\tilde{l2}\\) </p> </li> <li>the line joining two points can be compactly written as: <p>\\(\\tilde{l}\\)=\\(\\tilde{x1}\\) \u00d7 \\(\\tilde{x2}\\) </p> </li> </ul>"},{"location":"CV/ML-4360/BS/lec2/#transformations","title":"\\(Transformations\\)","text":"<ul> <li>translation 2DOF</li> <li>Euclidean 3DOF \\(RR^T=I \\ der(R)=1\\) </li> <li>\u6b63\u4ea4\u77e9\u9635\\(A^TA=I\\)</li> </ul> <p>\\(A^{-1}=A^T\\)</p> <p>\\(\\left|A\\right|\\) = +-1</p> <p>A\u7684\u884c\uff08\u5217\uff09\u5411\u91cf\u7ec4\u4e3an\u7ef4\u5355\u4f4d\u6b63\u4ea4\u5411\u91cf\u7ec4 * Similarity 4DOF * Affine: 6DOF arbitrary \\(2\u00d72\\) matrix</p> <p>Parallels Remain! * Projective :8DOF\u2014\u2014preserve straight lines</p> <p>DOF\uff082D\uff09:n(n-1)/2</p> <p></p> <p>\\(\\tilde{l}'\\) = \\((\\tilde{H}^T)^{-1}\\)\\(\\tilde{l}\\)</p>"},{"location":"CV/ML-4360/BS/lec2/#direct-linear-transform-for-homography-estimationalgorithm-dlt","title":"Direct Linear Transform for Homography Estimation[algorithm DLT","text":"<ul> <li>UDV\uff01 SVD!</li> </ul>"},{"location":"CV/ML-4360/BS/lec2/#22-geometric-image-formation","title":"2.2 Geometric Image Formation","text":"<p>Orthographic projection</p> <p>Perspective\u3000projection</p> <p> * Complete perspective projection</p> <p></p> <p>lens distortion</p> <ul> <li>radial and tangential distortion</li> </ul>"},{"location":"CV/ML-4360/BS/lec2/#23-photometric-image-formation","title":"2.3 Photometric Image Formation","text":""},{"location":"CV/ML-4360/BS/lec2/#rendering-equation","title":"\\(Rendering Equation\\)","text":"<ul> <li>intensity :power per solid angle <p>\\(dw=\\sin\\theta\\)\\(d\\theta\\)\\(d\\phi\\)</p> </li> <li>Irradiance \uff1a power per unit area <p>E(x)=d\\(\\Phi(x)\\)/dA</p> </li> <li>Radiannce <p>L(p,w)=\\(d^2\\Phi(p,\\omega)\\)/\\(d\\omega\\)\\(dAcos\\theta\\) </p> </li> </ul>"},{"location":"CV/ML-4360/BS/lec2/#brdf-radiance_outirradiance_in","title":"\\(BRDF\\) \"\\(Radiance_{out}/Irradiance_{in}\\)\"","text":""},{"location":"CV/ML-4360/BS/lec2/#the-reflection-equation","title":"\\(The Reflection Equation\\)","text":""},{"location":"CV/ML-4360/BS/lec2/#back-to-cameras","title":"Back To Cameras","text":""},{"location":"CV/ML-4360/BS/lec2/#chromatic-aberration","title":"\\(Chromatic Aberration\\)","text":""},{"location":"CV/ML-4360/BS/lec2/#24-image-sensing-pipeline","title":"2.4 Image Sensing Pipeline","text":""},{"location":"DIP/lab1/DIP/","title":"Lab1:\u7070\u5ea6\u56fe\u4ee5\u53ca\u4eae\u5ea6\u8c03\u6574","text":""},{"location":"DIP/lab1/DIP/#_1","title":"\u4e00\u3001\u5b9e\u9a8c\u76ee\u7684\u548c\u8981\u6c42","text":""},{"location":"DIP/lab1/DIP/#_2","title":"\u5b9e\u9a8c\u76ee\u7684","text":""},{"location":"DIP/lab1/DIP/#1bmp","title":"1.\u7406\u89e3BMP\u56fe\u50cf\u7684\u6587\u4ef6\u7ed3\u6784\u548c\u50cf\u7d20\u70b9\u8272\u5f69\u5b58\u50a8\u65b9\u5f0f\u3002","text":""},{"location":"DIP/lab1/DIP/#2rgbyuvyuvrgb","title":"2.\u638c\u63e1RGB\u5230YUV\uff0cYUV\u5230RGB\u7684\u8f6c\u6362\u539f\u7406\u548c\u65b9\u6cd5\u3002","text":""},{"location":"DIP/lab1/DIP/#_3","title":"\u5b9e\u9a8c\u8981\u6c42","text":""},{"location":"DIP/lab1/DIP/#1bmprgbyuvyuvrgb","title":"1.\u7f16\u5199\u7a0b\u5e8f\u5b8c\u6210BMP\u56fe\u50cf\u7531RGB\u5230YUV\u548c\u7531YUV\u5230RGB\u7684\u8f6c\u6362\u3002","text":""},{"location":"DIP/lab1/DIP/#2bmp","title":"2.\u8bfb\u53d6\u5f69\u8272BMP\u56fe\u50cf\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u7070\u5ea6\u56fe\u50cf\u3002","text":""},{"location":"DIP/lab1/DIP/#30-255","title":"3.\u5c06\u7070\u5ea6\u56fe\u50cf\u7684\u7070\u5ea6\u503c\u91cd\u65b0\u6620\u5c04\u5230[0, 255]\u8303\u56f4\u5185\uff0c\u4fdd\u5b58\u7070\u5ea6\u56fe\u50cf\u3002","text":""},{"location":"DIP/lab1/DIP/#4-y-yuv-rgb","title":"4.\u4fee\u6539\u7070\u5ea6\u56fe\u50cf\u4e2d\u7684\u4eae\u5ea6\u901a\u9053 Y \uff08\u4f8b\u5982\u589e\u52a0\u6216\u51cf\u5c0f\u4eae\u5ea6\uff09\uff0c\u5c06\u4fee\u6539\u540e\u7684YUV \u56fe\u50cf\u91cd\u65b0\u8f6c\u6362\u56de RGB \u989c\u8272\u5e76\u4fdd\u5b58\u3002","text":""},{"location":"DIP/lab1/DIP/#_4","title":"\u4e8c\u3001\u5b9e\u9a8c\u5185\u5bb9\u548c\u539f\u7406","text":""},{"location":"DIP/lab1/DIP/#1bmp_1","title":"1.BMP\u7684\u6587\u4ef6\u683c\u5f0f\uff1a","text":"<p>\u200b   BMP\uff08Bitmap\uff09\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u56fe\u50cf\u6587\u4ef6\u683c\u5f0f\uff0c\u662fWindows\u7cfb\u7edf\u7684\u4e00\u79cd\u6807\u51c6\u6587\u4ef6\u683c\u5f0f\u3002BMP \u4f4d\u56fe\u6587\u4ef6\u9ed8\u8ba4\u7684\u6587\u4ef6\u6269\u5c55\u540d\u662f bmp \u6216\u8005 dib\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0cBMP \u56fe\u50cf\u91c7\u7528\u975e\u538b\u7f29\u65b9\u5f0f\uff1b\u7136\u800c\uff0c\u5b83\u4e5f\u652f\u6301\u56fe\u50cf\u538b\u7f29\uff0c\u4f8b\u5982 RLE \u683c\u5f0f\u3002\u4e0b\u9762\u4ecb\u7ecdBMP\u6587\u4ef6\u7684\u5177\u4f53\u6587\u4ef6\u7ed3\u6784\u3002</p> <p>BMP \u56fe\u50cf\u6bcf\u4e00\u884c\u626b\u63cf\u7531\u8868\u793a\u56fe\u50cf\u50cf\u7d20\u7684\u8fde\u7eed\u7684\u5b57\u8282\u7ec4\u6210\uff0c\u6bcf\u4e00\u884c\u4ee5\u56db\u5b57\u8282\u5bf9\u9f50\uff08\u4ee50\u8865\u9f50\uff09\u3002\u56fe\u50cf\u7684\u626b\u63cf\u884c\u662f\u7531\u5e95\u5411\u4e0a\u5b58\u50a8\u7684\uff0c\u8fd9\u5c31\u662f\u8bf4\uff0c\u9635\u5217\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u8868\u793a\u4f4d\u56fe\u5de6\u4e0b\u89d2\u7684\u50cf\u7d20\uff0c\u800c\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u8868\u793a\u4f4d\u56fe\u53f3\u4e0a\u89d2\u7684\u50cf\u7d20\u3002</p>"},{"location":"DIP/lab1/DIP/#1bmp_2","title":"\uff081\uff09BMP\u6587\u4ef6\u6574\u4f53\u7ed3\u6784\uff1a","text":""},{"location":"DIP/lab1/DIP/#_5","title":"Lab1:\u7070\u5ea6\u56fe\u4ee5\u53ca\u4eae\u5ea6\u8c03\u6574","text":"<p>\u200b   BMP \u6587\u4ef6 \u5927\u4f53\u4e0a\u5206\u4e3a\u56db\u4e2a\u90e8\u5206:\u56fe\u50cf\u6587\u4ef6\u5934\uff08Image file header\uff09\u3001\u56fe\u50cf\u4fe1\u606f\u5934\uff08Image information header\uff09\u3001\u8c03\u8272\u677f\uff08Palette\uff09\u3001\u56fe\u50cf\u6570\u636e\u5b57\u8282\u9635\u5217\uff08Image data\uff09\u3002\u5bf9\u7528\u5230\u8c03\u8272\u677f\u7684\u4f4d\u56fe\uff0c\u56fe\u50cf\u6570\u636e\u4e3a\u8be5\u50cf\u7d20\u989c\u8272\u5728\u8c03\u8272\u677f\u4e2d\u7684\u7d22\u5f15\u503c\u3002\u5bf9\u4e8e\u771f\u5f69\u8272\u56fe\uff0c\u56fe\u50cf\u6570\u636e\u5c31\u662f\u5b9e\u9645\u7684 R\u3001G\u3001B \u503c\u3002</p>"},{"location":"DIP/lab1/DIP/#2bmpimage-file-header","title":"\uff082\uff09BMP\u56fe\u50cf\u6587\u4ef6\u5934\uff08Image file header\uff09","text":"Start Size(Byte) Name Purpose 1 2 bfType Must always be set to 'BM' to declare that this is a .bmp-file 3 4 bfSize Specifies the size of the file in bytes. 7 2 bfReserved1 Must always be set to zero. 9 2 bfReserved2 Must always be set to zero. 11 4 bfOffBits Specifies the offset from the beginning of the file to the bitmap data"},{"location":"DIP/lab1/DIP/#3bmpimage-information-header","title":"\uff083\uff09BMP\u56fe\u50cf\u4fe1\u606f\u5934\uff08image information header\uff09","text":"Size(Byte) Name Purpose 4 biSize Number of bytes to define BITMAPINFOHEADER structure 4 biWidth Image width (number of pixels) 4 biHeight Image height (number of pixels).  2 biPlane Number of planes. Always be 1. 2 biBitCount Bits per pixel (Bits/pixel), which is 1, 4, 8, 16, 24 or 32.  4 biCompression Compression type. Only non-compression is discussed here: BI_RGB. 4 biSizeImage Image size with bytes. When biCompression=BI_RGB, biSizeImage=0. 4 biXPelsPerMeter Horizontal resolution, pixels/meter. 4 biYPelsPerMeter Vertical resolution, pixels/meter 4 biClrUsed Number of color indices used in the bitmap (0-&gt;all the palette items are used). 4 biClrImportant Number of important color indices for image display. 0-&gt;all items are important. <ul> <li>\u6ce8\u660e  \\(biHeight\\) \u53ef\u4ee5\u8868\u793a\u56fe\u50cf\u662f\u5426\u5012\u7f6e\uff0c\\(biHeight\\) \u4e3a\u6b63\u6570\u8868\u793a\u5012\u7f6e\uff08inverted\uff09\uff0c \u8d1f\u6570\u8868\u793a\u6b63\u5e38\uff08upright)\uff0c\u5927\u591a\u6570BMP\u6587\u4ef6\u662f\u5012\u7f6e\u7684\u4f4d\u56fe\uff0c\u5373 \\(biHeight\\)&gt;0\u3002</li> </ul> <p>\uff084\uff09\u8c03\u8272\u677f\uff08Palette\uff09</p> <p>\u8c03\u8272\u677f\u7684\u5927\u5c0f\u4e3a\\(N*4\\) (bytes)\u3002\u8c03\u8272\u677f\u4e2d\u7684\u6bcf\u4e00\u9879\u75281 \u5b57\u8282\u8868\u793a\u84dd\u8272\u5206\u91cf\u30011 \u5b57\u8282\u8868\u793a\u7eff\u8272\u5206\u91cf\u30011 \u5b57\u8282\u8868\u793a\u7ea2\u8272\u5206\u91cf\u30011 \u5b57\u8282\u7528\u4e8e\u586b\u5145\u7b26 (\u8bbe\u7f6e\u4e3a 0)\u3002</p>"},{"location":"DIP/lab1/DIP/#5image-data","title":"\uff085\uff09\u56fe\u50cf\u6570\u636e\u5b57\u8282\u9635\u5217\uff08Image data\uff09","text":"<p>\u56fe\u50cf\u6570\u636e\u5b57\u8282\u9635\u5217\u5b58\u50a8\u4e86\u8c03\u8272\u677f\u7684\u7d22\u5f15\u53f7\uff0c\u6216\u8005\u53d6\u51b3\u4e8e\u989c\u8272\u6df1\u5ea6\u7684RGB\u503c\u3002\u5176\u5927\u5c0f\u53d6\u51b3\u4e8e\u56fe\u50cf\u5927\u5c0f\u548c\u989c\u8272\u6df1\u5ea6\u3002</p>"},{"location":"DIP/lab1/DIP/#2bmp_1","title":"2.BMP\u6587\u4ef6\u7684\u8bfb\u5165\u548c\u5b58\u50a8","text":"<p>\u5229\u7528 C \u8bed\u8a00\u4e2d\u7684 fopen fread fwrite \u8fdb\u884c\u8bfb\u5165\u3001\u5199\u51fa\u5373\u53ef\u3002\u5728\u8bfb\u5165\u4e0e\u5199\u51fa\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u6ce8\u610f BMP\u6587\u4ef6\u4fe1\u606f\u7684\u8c03\u6574\uff0c\u4f8b\u5982\u753124\u4f4d\u5f69\u8272BMP\u8f6c\u4e3a\u7070\u8272\u56fe\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u8c03\u8272\u677f\u3001\u4f4d\u6df1\u7b49\u7684\u8c03\u6574\u3002</p>"},{"location":"DIP/lab1/DIP/#3rgb-yuv","title":"3.RGB \u548c YUV \u7684\u76f8\u4e92\u8f6c\u5316","text":"<p>RGB\uff08\u7ea2\u7eff\u84dd\uff09\u548cYUV\u662f\u4e24\u79cd\u989c\u8272\u8868\u793a\u65b9\u5f0f\uff0c\u5e38\u7528\u4e8e\u56fe\u50cf\u548c\u89c6\u9891\u5904\u7406\u4e2d\u3002RGB\u662f\u4e00\u79cd\u76f4\u63a5\u8868\u793a\u989c\u8272\u7684\u65b9\u5f0f\uff0c\u5176\u4e2d\u7ea2\u8272\uff08R\uff09\u3001\u7eff\u8272\uff08G\uff09\u548c\u84dd\u8272\uff08B\uff09\u5206\u91cf\u7684\u503c\u51b3\u5b9a\u4e86\u989c\u8272\u7684\u5177\u4f53\u5916\u89c2\u3002RGB\u53ef\u4ee5\u6d6e\u70b9\u8868\u793a\u65b9\u5f0f\uff1a\u53d6\u503c\u8303\u56f4\u4e3a <code>0.0 ~ 1.0</code>\uff1b\u6216\u4ee5\u6574\u6570\u8868\u793a\uff1a\u53d6\u503c\u8303\u56f4\u4e3a <code>0 ~ 255</code> \u6216\u8005 <code>00 ~ FF</code>\u3002RGB \u989c\u8272\u6a21\u578b \u901a\u5e38\u7528\u4e8e\u5f69\u8272\u9634\u6781\u5c04\u7ebf\u7ba1\u548c\u5f69\u8272\u5149\u6805\u56fe\u5f62\u663e\u793a\u5668(\u8ba1\u7b97\u673a\u548c\u7535\u89c6\u673a\u91c7\u7528)\u3002</p> <p>YUV\u662f\u4e00\u79cd\u989c\u8272\u7a7a\u95f4\uff0c\u57fa\u4e8e <code>YUV</code> \u7684\u989c\u8272\u7f16\u7801\u662f\u6d41\u5a92\u4f53\u7684\u5e38\u7528\u7f16\u7801\u65b9\u5f0f\uff0c\u8fd9\u79cd\u8868\u8fbe\u65b9\u5f0f\u8d77\u521d\u662f\u4e3a\u4e86\u5f69\u8272\u7535\u89c6\u4e0e\u9ed1\u767d\u7535\u89c6\u4e4b\u95f4\u7684\u4fe1\u53f7\u517c\u5bb9\uff1b\u5176\u4e2d\uff1aY\uff1a\u8868\u793a\u660e\u4eae\u5ea6\uff08Luminance \u6216 Luma\uff09\uff0c\u4e5f\u79f0\u7070\u5ea6\u56fe\u3002U\u3001V\uff1a\u8868\u793a\u8272\u5ea6\uff08Chrominance \u6216 Chroma\uff09\uff0c\u4f5c\u7528\u662f\u63cf\u8ff0\u5f71\u50cf\u7684\u8272\u5f69\u53ca\u9971\u548c\u5ea6\uff0c\u7528\u4e8e\u6307\u5b9a\u50cf\u7d20\u7684\u989c\u8272\u3002</p> <ul> <li>RGB\u8f6c\u5316\u4e3aYUV\u7684\u516c\u5f0f\u5982\u4e0b\uff1a</li> </ul> <p>\\(\\begin{gathered}\\begin{bmatrix} Y  \\\\ U \\\\ V\\end{bmatrix}=\\begin{bmatrix} 0.299 &amp; 0.587 &amp; 0.114  \\\\ \u22120.147&amp; \u22120.289 &amp;0.435 \\\\0.615 &amp;\u22120.515&amp; \u22120.100\\end{bmatrix}\\begin{bmatrix} R \\\\ G\\\\ B\\end{bmatrix}\\quad\\end{gathered}\\)</p> <ul> <li>YUV \u8f6c\u5316\u4e3aRGB\u7684\u516c\u5f0f\u5982\u4e0b\uff1a</li> </ul> <p>\\(\\begin{gathered}\\quad\\quad\\begin{bmatrix} R  \\\\ G \\\\ B\\end{bmatrix}=\\begin{bmatrix} 1.0000 &amp;0.0000&amp; 1.3707  \\\\1.0000&amp; \u22120.3376 &amp;-0.6980 \\\\ 1.0000&amp;1.7324&amp; 0.0000\\end{bmatrix}\\begin{bmatrix} Y \\\\ U\\\\ V\\end{bmatrix}\\quad\\end{gathered}\\)</p> <p>\u7531BMP\u5f69\u8272\u56fe\u8f6c\u4e3a\u7070\u5ea6\u56fe\u65f6\uff0c\u53ea\u9700\u5c06RGB\u8f6c\u4e3aYUV\uff0c\u5e76\u53ea\u4fdd\u7559 Y\u5206\u91cf \u5373\u53ef\u5f97\u5230\u7070\u5ea6\u56fe\u5728\u8c03\u8282BMP\u56fe\u7247\u4eae\u5ea6\u65f6\uff0c\u53ea\u9700\u5c06RGB\u8f6c\u4e3aYUV\uff0c\u6539\u53d8 Y \u5206\u91cf\u7684\u503c\uff0c\u968f\u540e\u5c06 YUV \u8f6c\u56de RGB \u5373\u53ef\u5f97\u5230\u88ab\u66f4\u6539\u8fc7\u4eae\u5ea6\u7684\u56fe\u7247\u3002</p>"},{"location":"DIP/lab1/DIP/#_6","title":"\u56db\u3001\u5b9e\u9a8c\u7ed3\u679c\u5c55\u793a","text":""},{"location":"DIP/lab1/DIP/#24bmp","title":"\u8f93\u516524\u4f4d\u5f69\u8272bmp\u56fe\u50cf\uff1a","text":""},{"location":"DIP/lab1/DIP/#_7","title":"\u8f93\u51fa\u7070\u5ea6\u56fe\uff1a","text":""},{"location":"DIP/lab1/DIP/#yy05","title":"\u8c03\u6574\u4eae\u5ea6\u53d8\u6697\uff08Y=Y*0.5\uff09","text":""},{"location":"DIP/lab1/DIP/#yy15","title":"\u8c03\u6574\u4eae\u5ea6\u53d8\u4eae\uff08Y=Y*1.5\uff09","text":""},{"location":"DIP/lab1/DIP/#_8","title":"\u4e94\u3001\u5fc3\u5f97\u4f53\u4f1a","text":"<p>\u200b   \u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u6700\u5f00\u59cb\u8fdb\u884c\u7070\u5ea6\u56fe\u8f6c\u6362\u7684\u65f6\u5019\u4e00\u76f4\u4e0d\u6210\u529f\uff0c\u9996\u5148\u7b80\u5355\u770b\u8f93\u51fa\u7070\u5ea6\u56fe\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u53d1\u73b0\u53ea\u6709header\u4fe1\u606f\uff0c\u53d1\u73b0\u662f\u7531\u4e8einput.bmp\u539f\u59cb\u7684imageSize\u4e3a\u96f6\uff0c\u5728\u7a0b\u5e8f\u4e2d\u8fdb\u884c\u4e86\u91cd\u65b0\u8ba1\u7b97\u3002\u4f46\u4e4b\u540e\u4ecd\u7136\u8f6c\u6362\u4e0d\u6210\u529f\uff0c\u53d1\u73b0\u662f\u7531\u4e8e\u4f7f\u7528\u4e86\u9519\u8bef\u7684input.bmp(\u6700\u5f00\u59cb\u6211\u9519\u8bef\u5730\u4f7f\u7528\u4e8632\u4f4d\u7684input.bmp)\uff0c\u5229\u7528\\(Hex Fxiend\\) \u4ed4\u7ec6\u67e5\u770b\u540e\u53d1\u73b0\u9519\u8bef\uff0c\u8f6c\u6362\u4e86input.bmp\u7684\u683c\u5f0f\uff0c\u5f97\u4ee5\u987a\u5229\u8f93\u51fa\u7070\u5ea6\u56fe\u3002</p> <p>\u200b   \u5728\u8c03\u6574\u8272\u56fe\u4eae\u5ea6\u7684\u8fc7\u7a0b\u4e2d\uff0c\u7531\u4e8e\u6700\u5f00\u59cb\u6ca1\u6709\u6ce8\u610f\u5230\u8c03\u6574\u540e\u7684RGB\u4f1a\u8d8a\u754c\u7684\u95ee\u9898\u5bfc\u81f4\u8f93\u51fa\u7684\u56fe\u7247\u4e25\u91cd\u5931\u771f\uff0c\u589e\u52a0\u4e86Adjust\u51fd\u6570\u540e\u6210\u529f\u8f93\u51fa\u3002</p> <p></p>"},{"location":"DIP/lab2/lab2/","title":"Lab2:\u7070\u5ea6\u56fe\u4e8c\u503c\u5316\u4ee5\u53ca\u5f62\u6001\u5b66\u64cd\u4f5c","text":""},{"location":"DIP/lab2/lab2/#_1","title":"\u4e00\u3001\u5b9e\u9a8c\u76ee\u7684\u548c\u8981\u6c42","text":""},{"location":"DIP/lab2/lab2/#1","title":"1.\u56fe\u50cf\u4e8c\u503c\u5316","text":"<ul> <li>\u4f7f\u7528\u9002\u5f53\u7684\u9608\u503c\u6280\u672f\uff08\u5927\u6d25\u7b97\u6cd5\uff09\u5c06\u4e00\u5f20\u7070\u5ea6\u56fe\u50cf\u8f6c\u6362\u4e3a\u4e8c\u503c\u56fe\u50cf\u3002</li> <li>\u8bb0\u5f55\u5e76\u5206\u6790\u9009\u62e9\u7684\u9608\u503c\u65b9\u6cd5\u5bf9\u4e8c\u503c\u5316\u7ed3\u679c\u7684\u5f71\u54cd\u3002</li> </ul>"},{"location":"DIP/lab2/lab2/#2","title":"2.\u4e8c\u503c\u56fe\u50cf\u8150\u8680","text":"<ul> <li>\u5bf9\u4e8c\u503c\u56fe\u50cf\u5e94\u7528\u8150\u8680\u64cd\u4f5c</li> </ul>"},{"location":"DIP/lab2/lab2/#3","title":"3.\u4e8c\u503c\u56fe\u50cf\u81a8\u80c0","text":"<ul> <li>\u5bf9\u4e8c\u503c\u56fe\u50cf\u5e94\u7528\u81a8\u80c0\u64cd\u4f5c</li> </ul>"},{"location":"DIP/lab2/lab2/#4","title":"4.\u4e8c\u503c\u56fe\u50cf\u5f00\u8fd0\u7b97","text":"<ul> <li>\u5b9e\u73b0\u4e8c\u503c\u56fe\u50cf\u7684\u5f00\u8fd0\u7b97\uff0c\u5373\u8150\u8680\u540e\u81a8\u80c0\u3002</li> <li>\u89c2\u5bdf\u5f00\u8fd0\u7b97\u5bf9\u53bb\u9664\u5c0f\u566a\u58f0\u548c\u5206\u79bb\u7269\u4f53\u7684\u6548\u679c\u3002</li> </ul>"},{"location":"DIP/lab2/lab2/#5","title":"5.\u4e8c\u503c\u56fe\u50cf\u95ed\u8fd0\u7b97","text":"<ul> <li>\u5b9e\u73b0\u4e8c\u503c\u56fe\u50cf\u7684\u95ed\u8fd0\u7b97\uff0c\u5373\u81a8\u80c0\u540e\u8150\u8680\u3002</li> <li>\u89c2\u5bdf\u95ed\u8fd0\u7b97\u5bf9\u586b\u5145\u7a7a\u6d1e\u548c\u8fde\u63a5\u7269\u4f53\u7684\u6548\u679c\u3002</li> </ul>"},{"location":"DIP/lab2/lab2/#_2","title":"\u4e8c\u3001\u5b9e\u9a8c\u5185\u5bb9\u548c\u539f\u7406","text":""},{"location":"DIP/lab2/lab2/#1_1","title":"1.\u56fe\u50cf\u4e8c\u503c\u5316\uff1a","text":""},{"location":"DIP/lab2/lab2/#1_2","title":"\uff081\uff09\u4e8c\u503c\u56fe\u50cf","text":"<p>\u4e8c\u503c\u56fe\u50cf\uff08Binary Image\uff09\u4e2d\uff0c\u50cf\u7d20\u503c\u9650\u5b9a\u4e3a \\(0\\) \u6216 \\(1\\)\uff08\u7f16\u7a0b\u4e2d\u4e00\u822c\u7528 \\(0\\) \u548c\\(255\\) \u6765\u6784\u9020\u4e8c\u503c\u56fe\u50cf)\u3002</p> <ul> <li>\u4f18\u70b9\uff1a\u5360\u7528\u66f4\u5c11\u5185\u5b58\u3001\u66f4\u9ad8\u6548\uff0c\u6709\u65f6\u53ef\u5e94\u7528\u4e8e\u7070\u5ea6\u56fe\u50cf\uff0c\u540c\u65f6\u66f4\u52a0\u4fbf\u5b9c\u3002</li> <li>\u7f3a\u70b9\uff1a\u5e94\u7528\u9886\u57df\u6709\u9650\uff0c\u4e0d\u80fd\u7528\u4e8e\u4e09\u7ef4\u6570\u636e\uff0c\u8868\u8fbe\u80fd\u529b\u8f83\u5f31\uff0c\u96be\u4ee5\u4f20\u8fbe\u89c6\u89c9\u7ec6\u8282\uff0c\u4e5f\u4e0d\u80fd\u63a7\u5236\u5bf9\u6bd4\u5ea6\u3002</li> </ul>"},{"location":"DIP/lab2/lab2/#2otsus-algorithm","title":"\uff082\uff09\u5927\u6d25\u7b97\u6cd5\uff08Otsu's algorithm\uff09","text":"<p>\u5728\u628a\u7070\u5ea6\u56fe\u8f6c\u6362\u4e3a\u4e8c\u503c\u56fe\u50cf\u7684\u65f6\u5019\uff0c\u4e00\u4e2a\u57fa\u672c\u7684\u60f3\u6cd5\u662f\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684\u9608\u503c\uff08Threshold\uff09\uff0c\u50cf\u7d20\u70b9\u503c\u6bd4\u9608\u503c\u5927\u7684\u8bbe\u4e3a\\(255\\)\uff0c\u6bd4\u9608\u503c\u5c0f\u7684\u8bbe\u4e3a\\(0\\)\u3002\u5373\u4e3a\u5982\u4e0b\uff1a</p> <p>\\(\\left\\{                \\begin{array}{**lr**}                   I(x,y) = 0\\ if\\ I(x,y)\\leq Threshold  \\\\              I(x,y) = 255\\ if\\ I(x,y)\\geq Threshold \\\\                 \\end{array}   \\right.\\)</p> <p>\u800c\u5927\u6d25\u7b97\u6cd5\u5c31\u662f\u4e00\u79cd\u81ea\u52a8\u786e\u5b9a\u8be5\u5408\u9002\u9608\u503c\u7684\u65b9\u6cd5\uff0c\u65e8\u5728\u627e\u5230\u4e00\u4e2a\u9608\u503c\uff0c\u5c06\u56fe\u50cf\u5206\u6210\u4e24\u4e2a\u7c7b\u522b\uff08\u524d\u666f\u548c\u80cc\u666f\uff09\uff0c\u4ee5\u4f7f\u4e24\u4e2a\u7c7b\u522b\u5185\u7684\u65b9\u5dee\u6700\u5c0f\uff0c\u540c\u65f6\u4e24\u4e2a\u7c7b\u522b\u4e4b\u95f4\u7684\u65b9\u5dee\u6700\u5927\uff0c\u6b65\u9aa4\u5982\u4e0b\u3002</p> <p>a.\u7edf\u8ba1\u50cf\u7d20\u70b9\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c</p> <p>b.\u5bf9\u4e8e\u6bcf\u4e2a\u53ef\u80fd\u7684\u9608\u503c\uff0c\u8ba1\u7b97\u5206\u6210\u4e24\u4e2a\u7c7b\u522b\u540e\u7684\u80cc\u666f\u548c\u524d\u666f\u7684\u5185\u90e8\u534f\u65b9\u5dee\u548c\u5916\u90e8\u534f\u65b9\u5dee\u3002</p> <p>c.\u9009\u62e9\u6700\u5927\u5916\u90e8\u548c\u6700\u5c0f\u5185\u90e8\u534f\u65b9\u5dee\u5bf9\u5e94\u7684 threshold\u4f5c\u4e3a\u4e8c\u503c\u5316\u9608\u503c\u3002</p> <p>d.\u5e94\u7528\u9009\u62e9\u7684\u9608\u503c\u5c06\u56fe\u50cf\u5206\u5272\u6210\u524d\u666f\u548c\u80cc\u666f\u3002</p> <p>\u5176\u4e2d\uff0c\u6700\u5927\u5916\u90e8\u65b9\u5dee\u548c\u6700\u5c0f\u5185\u90e8\u65b9\u5dee\u662f\u7b49\u4ef7\u7684\uff0c\u6211\u4eec\u9009\u62e9\u627e\u5230\u6700\u5927\u5916\u90e8\u65b9\u5dee\uff0c\u63a8\u5bfc\u8fc7\u7a0b\u5982\u4e0b\uff1a</p> <p>\u8bbe\u56fe\u50cf\u5c3a\u5bf8\u4e3a\\(M\\ *\\ N\\)\uff0c\u5176\u4e8c\u503c\u5316\u7684\u6700\u4f73\u9608\u503c\u4e3a\\(T\\)\uff0c\u8be5\u9608\u503c\u5c06\u56fe\u50cf\u5206\u4e3a\u80cc\u666f\u548c\u76ee\u6807\u4e24\u4e2a\u7c7b\u522b\u3002\u5176\u4e2d\u5c5e\u4e8e\u80cc\u666f\u7684\u50cf\u7d20\u70b9\u6570\u91cf\u4e3a\\(N0\\),\u5c5e\u4e8e\u76ee\u6807\u7684\u50cf\u7d20\u70b9\u6570\u91cf\u4e3a\\(N1\\),\u80cc\u666f\u50cf\u7d20\u70b9\u6570\u5360\u6574\u5e45\u56fe\u50cf\u7684\u6bd4\u4f8b\\(\\omega0\\),\u5176\u7070\u5ea6\u5747\u503c\\(\u03bc0\\),\u76ee\u6807\u50cf\u7d20\u70b9\u6570\u5360\u6574\u5e45\u56fe\u50cf\u7684\u6bd4\u4f8b\u4e3a\\(\u03c91\\),\u5176\u7070\u5ea6\u5747\u503c\u4e3a\\(\u03bc1\\) \uff0c\u6574\u5e45\u56fe\u50cf\u7684\u7070\u5ea6\u5747\u503c\u4e3a\\(\\mu\\)\u3002</p> <p>\\(\\omega_0=\\frac{N0}{M*N}\\\\\\)</p> <p>\\(\\omega_1=\\frac{N1}{M*N}\\\\\\)</p> <p>\\(N0+N1=M*N\\\\\\)</p> <p>\\(\\omega0\\ + \\omega1\\ = 1\\\\\\)</p> <p>\\(\\mu = \\frac{\\mu0*N0+\\mu1*N1}{M*N}=\\mu0\\omega0\\ + \\mu1\\omega1\\\\\\)</p> <p>\\(\u7c7b\u5185\u65b9\u5dee(Within-class\\ variance)\u516c\u5f0f:\\)</p> <p>\\(\\sigma_{Withen}^{2}=\\omega_{0} \\sigma_{0}^{2}+\\omega_{1} \\sigma_{1}^{2} \\\\\\)</p> <p>\\(\u7c7b\u95f4\u65b9\u5dee(Between-class\\ variance)\u7684\u516c\u5f0f:\\sigma_{Between}^{2}=\\sigma^{2}-\\sigma_{Within}^{2}\\\\\\)</p> <p>\\(\u6709\u6b64\u53ef\u63a8\u5bfc\u5f97\u5230\\)</p> <p>\\(\\sigma_{Between}^{2}=\\omega_{0}(\\mu_{0}-\\mu)^{2}+\\omega_{1}(\\mu_{1}-\\mu)^{2}\\)</p> <p>\\(\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\omega0(\\mu0-\\omega0\\mu0-\\omega1\\mu1)^{2}+\\omega1(\\mu1-\\omega0\\mu0-\\omega1\\mu1)^{2}\\) \\(\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\omega0(\\omega1\\mu0-\\omega1\\mu1)^{2}+\\omega1(\\omega0\\mu1-\\omega0\\mu0)^{2}\\\\\\) \\(\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =(\\omega0\\omega1^{2}+\\omega1\\omega0^{2})(\\mu1-\\mu0)^{2}\\\\\\)</p> <p>\\(\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\omega0\\omega1(\\mu0-\\mu1)^{2}\\\\\\)</p> <ul> <li>\u5373\u5728\u8ba1\u7b97\u6700\u5927\u5916\u90e8\u548c\u6700\u5c0f\u5185\u90e8\u65b9\u5dee\u65f6\uff0c\u53ea\u9700\u5224\u65ad\\(\\omega0\\omega1(\\mu0-\\mu1)^{2}\\)\u53d6\u5f97\u6700\u5927\u503c\u5373\u53ef</li> </ul>"},{"location":"DIP/lab2/lab2/#1_3","title":"1.\u5f62\u6001\u5b66\u64cd\u4f5c\uff1a","text":"<p>\u200b   \u6570\u5b66\u5f62\u6001\u5b66\uff08\u4e5f\u79f0\u56fe\u50cf\u4ee3\u6570\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u5206\u6790\u56fe\u50cf\u5f62\u6001\u548c\u7ed3\u6784\u7684\u5de5\u5177\u3002\u5176\u57fa\u672c\u601d\u60f3\u662f\u901a\u8fc7\u5229\u7528\u7ed3\u6784\u5143\u7d20\u6765\u5ea6\u91cf\u548c\u63d0\u53d6\u5f62\u72b6\uff0c\u4ece\u800c\u5b9e\u73b0\u5bf9\u56fe\u50cf\u7684\u5206\u6790\u548c\u8bc6\u522b\u3002\u56fe\u50cf\u5f62\u6001\u5b66\u64cd\u4f5c\u57fa\u4e8e\u96c6\u5408\u8bba\uff0c\u53ef\u4ee5\u7b80\u5316\u56fe\u50cf\uff0c\u53bb\u9664\u4e0d\u9700\u8981\u7684\u7ed3\u6784\uff0c\u540c\u65f6\u4fdd\u7559\u4e3b\u8981\u7684\u5f62\u72b6\u7279\u5f81\u3002\u5728\u8fd9\u91cc\u6709\u56db\u79cd\u5f62\u6001\u5b66\u64cd\u4f5c\u7b26\uff1a\u81a8\u80c0\u3001\u8150\u8680\u3001\u5f00\u8fd0\u7b97\u548c\u95ed\u8fd0\u7b97\u3002</p> <p>\u200b   \u5728\u4e0b\u9762\u7684\u4ecb\u7ecd\u4e2d\uff0c\u6211\u4eec\u7684 A \u6307\u4e8c\u503c\u56fe\u50cf; B \u6307\u4e8c\u503c\u6a21\u677f\uff0c\u79f0\u4e3a\u7ed3\u6784\u5143(structure element)\u3002</p>"},{"location":"DIP/lab2/lab2/#1_4","title":"\uff081\uff09\u81a8\u80c0","text":"<p>\u200b   \u5f62\u6001\u5b66\u7684\u81a8\u80c0\u64cd\u4f5c\u662f\u56fe\u50cf\u5904\u7406\u4e2d\u7684\u4e00\u79cd\u57fa\u672c\u64cd\u4f5c\uff0c\u901a\u5e38\u7528\u4e8e\u589e\u5f3a\u56fe\u50cf\u4e2d\u7684\u7279\u5b9a\u76ee\u6807\u6216\u7ed3\u6784\uff0c\u4f7f\u5176\u66f4\u52a0\u663e\u8457\u548c\u5bb9\u6613\u68c0\u6d4b\u3002\u81a8\u80c0\u64cd\u4f5c\u7684\u4e3b\u8981\u601d\u60f3\u662f\u5229\u7528\u4e00\u4e2a\u79f0\u4e3a\u7ed3\u6784\u5143\u7d20\u7684\u5c0f\u7a97\u53e3\u6216\u6a21\u677f\uff0c\u6cbf\u7740\u56fe\u50cf\u7684\u5404\u4e2a\u65b9\u5411\u626b\u63cf\uff0c\u5e76\u6839\u636e\u7ed3\u6784\u5143\u7d20\u4e0e\u56fe\u50cf\u7684\u91cd\u53e0\u7a0b\u5ea6\u6765\u6539\u53d8\u56fe\u50cf\u7684\u50cf\u7d20\u503c\u3002</p> <p>\u200b   \u81a8\u80c0\u64cd\u4f5c\u7684\u7ed3\u679c\u901a\u5e38\u662f\u589e\u5f3a\u4e86\u539f\u59cb\u56fe\u50cf\u4e2d\u7684\u76ee\u6807\u6216\u7279\u5b9a\u7ed3\u6784\u3002\u8fd9\u662f\u56e0\u4e3a\u5b83\u53ef\u4ee5\u5c06\u76ee\u6807\u533a\u57df\u6269\u5c55\uff0c\u586b\u5145\u7a7a\u6d1e\uff0c\u4f7f\u8fb9\u7f18\u66f4\u52a0\u6e05\u6670\u3002\u56e0\u6b64\uff0c\u81a8\u80c0\u64cd\u4f5c\u53ef\u7528\u4e8e\u6539\u5584\u56fe\u50cf\u4e2d\u7684\u7279\u5b9a\u7279\u5f81\uff0c\u4f7f\u5b83\u4eec\u66f4\u5bb9\u6613\u68c0\u6d4b\u548c\u5206\u6790\u3002 $$ A\u2295B={ z|(B)z \u2229A\u0338=\u2205 } $$</p>"},{"location":"DIP/lab2/lab2/#2_1","title":"\uff082\uff09\u8150\u8680","text":"<p>\u200b   \u5f62\u6001\u5b66\u7684\u8150\u8680\u64cd\u4f5c\u662f\u56fe\u50cf\u5904\u7406\u4e2d\u7684\u4e00\u79cd\u57fa\u672c\u64cd\u4f5c\uff0c\u901a\u5e38\u7528\u4e8e\u51cf\u5c0f\u56fe\u50cf\u4e2d\u7684\u7279\u5b9a\u76ee\u6807\u6216\u7ed3\u6784\uff0c\u4ece\u800c\u5f31\u5316\u6216\u6d88\u9664\u4e00\u4e9b\u7279\u5f81\u3002\u8150\u8680\u64cd\u4f5c\u7684\u4e3b\u8981\u601d\u60f3\u662f\u5229\u7528\u4e00\u4e2a\u79f0\u4e3a\u7ed3\u6784\u5143\u7d20\u7684\u5c0f\u7a97\u53e3\u6216\u6a21\u677f\uff0c\u6cbf\u7740\u56fe\u50cf\u7684\u5404\u4e2a\u65b9\u5411\u626b\u63cf\uff0c\u5e76\u6839\u636e\u7ed3\u6784\u5143\u7d20\u4e0e\u56fe\u50cf\u7684\u91cd\u53e0\u7a0b\u5ea6\u6765\u6539\u53d8\u56fe\u50cf\u7684\u50cf\u7d20\u503c\u3002</p> <p>\u200b   \u8150\u8680\u64cd\u4f5c\u7684\u7ed3\u679c\u901a\u5e38\u662f\u51cf\u5c0f\u4e86\u539f\u59cb\u56fe\u50cf\u4e2d\u7684\u76ee\u6807\u6216\u7279\u5b9a\u7ed3\u6784\u3002\u8fd9\u662f\u56e0\u4e3a\u5b83\u53ef\u4ee5\u53bb\u9664\u5c0f\u7684\u7279\u5f81\u3001\u7f29\u5c0f\u76ee\u6807\u533a\u57df\u6216\u6d88\u9664\u566a\u58f0\u3002\u8150\u8680\u64cd\u4f5c\u53ef\u7528\u4e8e\u5f31\u5316\u56fe\u50cf\u4e2d\u7684\u7279\u5b9a\u7279\u5f81\uff0c\u4f7f\u5176\u66f4\u5bb9\u6613\u68c0\u6d4b\u548c\u5206\u6790\u3002 $$ A\u2296B={(x,y)|(B)xy \u2286A} $$</p>"},{"location":"DIP/lab2/lab2/#3_1","title":"\uff083\uff09\u5f00\u64cd\u4f5c","text":"<p>\u200b   \u5f62\u6001\u5b66\u7684\u5f00\u64cd\u4f5c\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u56fe\u50cf\u5904\u7406\u64cd\u4f5c\uff0c\u5b83\u7ed3\u5408\u4e86\u8150\u8680\uff08erosion\uff09\u548c\u81a8\u80c0\uff08dilation\uff09\u64cd\u4f5c\uff0c\u901a\u5e38\u7528\u4e8e\u53bb\u566a\u548c\u5206\u5272\u56fe\u50cf\u4e2d\u7684\u76ee\u6807\u3002\u5f00\u64cd\u4f5c\u7684\u4e3b\u8981\u601d\u60f3\u662f\u9996\u5148\u5bf9\u56fe\u50cf\u6267\u884c\u8150\u8680\u64cd\u4f5c\uff0c\u7136\u540e\u518d\u5bf9\u5176\u6267\u884c\u81a8\u80c0\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u901a\u5e38\u4f7f\u7528\u4e00\u4e2a\u7279\u5b9a\u7684\u7ed3\u6784\u5143\u7d20\u8fdb\u884c\u3002</p> <p>\u200b   \u5f00\u64cd\u4f5c\u5728\u56fe\u50cf\u5904\u7406\u4e2d\u5e38\u7528\u4e8e\u53bb\u9664\u566a\u58f0\u3001\u5206\u5272\u76ee\u6807\u3001\u51cf\u5c0f\u76ee\u6807\u533a\u57df\u7684\u4e0d\u89c4\u5219\u6027\u4ee5\u53ca\u51cf\u5c0f\u76ee\u6807\u4e4b\u95f4\u7684\u5e72\u6270\u3002\u5b83\u4e5f\u6709\u52a9\u4e8e\u6539\u5584\u4e8c\u503c\u5316\u56fe\u50cf\u7684\u8d28\u91cf\uff0c\u4ee5\u4fbf\u540e\u7eed\u7684\u5206\u6790\u548c\u7279\u5f81\u63d0\u53d6\u3002 $$ A \u25e6 B = (A \u2296 B) \u2295 B $$</p>"},{"location":"DIP/lab2/lab2/#4_1","title":"\uff084\uff09\u95ed\u64cd\u4f5c","text":"<p>\u200b   \u5f62\u6001\u5b66\u7684\u5f00\u64cd\u4f5c\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u56fe\u50cf\u5904\u7406\u64cd\u4f5c\uff0c\u5b83\u7ed3\u5408\u4e86\u8150\u8680\uff08erosion\uff09\u548c\u81a8\u80c0\uff08dilation\uff09\u64cd\u4f5c\uff0c\u901a\u5e38\u7528\u4e8e\u53bb\u566a\u548c\u5206\u5272\u56fe\u50cf\u4e2d\u7684\u76ee\u6807\u3002\u5f00\u64cd\u4f5c\u7684\u4e3b\u8981\u601d\u60f3\u662f\u9996\u5148\u5bf9\u56fe\u50cf\u6267\u884c\u8150\u8680\u64cd\u4f5c\uff0c\u7136\u540e\u518d\u5bf9\u5176\u6267\u884c\u81a8\u80c0\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u901a\u5e38\u4f7f\u7528\u4e00\u4e2a\u7279\u5b9a\u7684\u7ed3\u6784\u5143\u7d20\u8fdb\u884c\u3002</p> <p>\u200b   \u95ed\u64cd\u4f5c\u5728\u56fe\u50cf\u5904\u7406\u4e2d\u5e38\u7528\u4e8e\u53bb\u9664\u5c0f\u5b54\u3001\u8fde\u63a5\u65ad\u5f00\u7684\u7ebf\u6761\u3001\u586b\u5145\u4e0d\u89c4\u5219\u76ee\u6807\u7684\u5185\u90e8\u7a7a\u6d1e\u3001\u589e\u5f3a\u56fe\u50cf\u4e2d\u7684\u8fde\u901a\u533a\u57df\u3002\u5b83\u4e5f\u6709\u52a9\u4e8e\u6539\u5584\u4e8c\u503c\u5316\u56fe\u50cf\u7684\u8d28\u91cf\uff0c\u4ee5\u4fbf\u540e\u7eed\u7684\u5206\u6790\u548c\u7279\u5f81\u63d0\u53d6\u3002 $$ A \u2022 B = (A \u2295 B) \u2296 B $$</p>"},{"location":"DIP/lab2/lab2/#_3","title":"\u4e09\u3001\u5fc3\u5f97\u4f53\u4f1a","text":"<p>\u200b   \u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u6211\u5b66\u4e60\u5e76\u638c\u63e1\u4e86\u56fe\u50cf\u4e8c\u503c\u5316\u548c\u5f62\u6001\u5b66\u7684\u57fa\u672c\u64cd\u4f5c\u3002\u5728\u8fc7\u7a0b\u4e2d\u9047\u5230\u4e86\u51e0\u4e2a\u95ee\u9898\uff1a\u4e00\u4e2a\u662f\u5728\u505a\u5f62\u6001\u5b66\u64cd\u4f5c\u548c\u6539\u8fdb\u5168\u5c40\u5927\u6d25\u7b97\u6cd5\u7684\u65f6\u5019\uff0c\u6700\u5f00\u59cb\u6211\u5fd8\u8bb0\u5efa\u7acb\u65b0\u7684\u7ed3\u6784\u4f53\u6765\u4fdd\u5b58\u539f\u5148\u7684bmp\u56fe\u50cf\uff0c\u800c\u662f\u76f4\u63a5\u5728\u539fbmp\u56fe\u50cf\u4e0a\u8fdb\u884c\u4fee\u6539\u548c\u4fdd\u5b58\uff0c\u5bfc\u81f4\u56fe\u50cf\u5904\u7406\u51fa\u9519\uff0c\u53d1\u73b0\u95ee\u9898\u540e\u6539\u6b63\u5f97\u4ee5\u6b63\u5e38\u8fdb\u884c\u3002\u7b2c\u4e8c\u662f\u5728\u8fdb\u884c\u5f62\u6001\u5b66\u64cd\u4f5c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6700\u5f00\u59cb\u5fd8\u8bb0\u5bf9\u8fb9\u754c\u70b9\u8ba8\u8bba\uff0c\u540c\u65f6\u5728\u5c06\u5904\u7406\u597d\u7684\u56fe\u50cf\u5b58\u50a8\u5230\u65b0\u7684\u7ed3\u6784\u4f53\u7684\u65f6\u5019\u5fd8\u8bb0\u5bf9\u201c\u6ca1\u6709\u8fdb\u884c\u5f62\u6001\u5b66\u64cd\u4f5c\u7684\u50cf\u7d20\u70b9\u201d\u505a\u539f\u6765\u7684\u8d4b\u503c\u5bfc\u81f4\u5904\u7406\u56fe\u50cf\u51fa\u9519\uff0c\u7ecf\u6539\u6b63\u540e\u80fd\u591f\u6b63\u5e38\u5b8c\u6210\u5bf9\u56fe\u50cf\u7684\u5904\u7406\u3002</p> <p>\u200b   \u5728\u5904\u7406\u56fe\u50cf\u548c\u6539\u8fdb\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u611f\u5230\u975e\u5e38\u6709\u6210\u5c31\u611f\uff0c\u5c24\u5176\u662f\u5728\u6210\u529f\u7528\u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u6d25\u7b97\u6cd5\u5904\u7406\u5f97\u5230\u6bd4\u8f83\u597d\u770b\u7684\u56fe\u7247\u7684\u65f6\u5019\uff0c\u611f\u5230\u975e\u5e38\u5f00\u5fc3\u4e14\u5b66\u6709\u6240\u5f97\uff0c\u671f\u5f85\u4e4b\u540e\u7684\u4f5c\u4e1a\u5185\u5bb9\u3002</p>"},{"location":"DIP/lab3/lab3/","title":"Lab3:\u5bf9\u6570\u589e\u5f3a\u53ef\u5b9e\u73b0\u4ee5\u53ca\u76f4\u65b9\u56fe\u5747\u8861","text":""},{"location":"DIP/lab3/lab3/#_1","title":"\u4e00\u3001\u5b9e\u9a8c\u76ee\u7684\u548c\u8981\u6c42","text":"<ul> <li> <p>\u901a\u8fc7\u56fe\u50cf\u5bf9\u6570\u8fd0\u7b97\uff0c\u63a2\u8ba8\u5982\u4f55\u589e\u5f3a\u56fe\u50cf\u7684\u53ef\u89c6\u6027\uff0c\u7279\u522b\u662f\u5728\u4f4e\u5bf9\u6bd4\u5ea6\u6216\u6697\u90e8\u7ec6\u8282\u4e0d\u6e05\u6670\u7684\u60c5\u51b5\u4e0b\u3002</p> </li> <li> <p>\u901a\u8fc7\u76f4\u65b9\u56fe\u5747\u8861\u5316\uff0c\u7814\u7a76\u5982\u4f55\u6539\u5584\u56fe\u50cf\u7684\u5bf9\u6bd4\u5ea6\u548c\u4eae\u5ea6\u5206\u5e03\uff0c\u4f7f\u56fe\u50cf\u66f4\u5bb9\u6613\u5206\u8fa8\u548c\u5206\u6790\u3002</p> </li> </ul>"},{"location":"DIP/lab3/lab3/#_2","title":"\u4e8c\u3001\u5b9e\u9a8c\u5185\u5bb9\u548c\u539f\u7406","text":""},{"location":"DIP/lab3/lab3/#1","title":"1.\u589e\u5f3a\u56fe\u50cf\u7684\u53ef\u89c6\u6027","text":"<p>\u4e3a\u4e86\u589e\u5f3a\u56fe\u50cf\u7684\u53ef\u89c6\u4fe1\u606f\uff0c\u5bf9\u56fe\u50cf\u4e2d\u7684\u50cf\u7d20\u8fdb\u884c\u57fa\u4e8e\u5bf9\u6570\u7684\u64cd\u4f5c $$ L_d =  \\frac{log{({L_{w}+1})}}{log{({L_{max}+1})}} $$ \u5176\u4e2d\uff0c\\(Ld \\(\u662f\u663e\u793a\u4eae\u5ea6\uff0c\\)Lw \\(\u662f\u771f\u5b9e\u4e16\u754c\u4eae\u5ea6\uff0c\\)Lmax\\)\u662f\u573a\u666f\u4e2d\u7684\u6700\u4eae\u503c\u3002</p> <ul> <li>\u8fd9\u4e2a\u6620\u5c04\u80fd\u591f\u786e\u4fdd\u4e0d\u7ba1\u573a\u666f\u7684\u52a8\u6001\u8303\u56f4\u662f\u600e\u4e48\u6837\u7684\uff0c\u5176\u6700\u5927\u503c\u90fd\u80fd\u6620\u5c04\u5230 1(\u767d)\uff0c\u5176\u4ed6\u7684\u503c\u80fd\u591f\u6bd4\u8f83\u5e73\u6ed1\u5730\u53d8\u5316\u3002</li> </ul>"},{"location":"DIP/lab3/lab3/#2","title":"2.\u76f4\u65b9\u56fe\u5747\u8861\u5316","text":""},{"location":"DIP/lab3/lab3/#1_1","title":"(1)\u76f4\u65b9\u56fe","text":""},{"location":"DIP/lab3/lab3/#a","title":"a.\u7070\u5ea6\u76f4\u65b9\u56fe","text":"<ul> <li>\u7070\u5ea6\u76f4\u65b9\u56fe\u662f\u4e00\u79cd\u7edf\u8ba1\u56fe\uff0c\u5b83\u8868\u793a\u7ed9\u5b9a\u56fe\u50cf\u4e2d\u4e0d\u540c\u7070\u5ea6\u7ea7\u7684\u50cf\u7d20\u6570\u5360\u603b\u50cf\u7d20\u6570\u7684\u6bd4\u4f8b\u3002</li> <li>\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a</li> </ul> \\[ p(rk)=\\frac{nk}{MN}\\\\ rk -- \u50cf\u7d20\u7684\u7070\u5ea6\u7ea7\\\\ nk -- \u5177\u6709\u7070\u5ea6rk\u7684\u50cf\u7d20\u7684\u4e2a\u6570\\\\ MN -- \u56fe\u50cf\u4e2d\u603b\u7684\u50cf\u7d20\u4e2a\u6570\\\\ \\sum_{k=0}^{MN-1}P(rk)=1 \\]"},{"location":"DIP/lab3/lab3/#b","title":"b.\u5f69\u8272\u76f4\u65b9\u56fe","text":"<ul> <li>\u5f69\u8272\u76f4\u65b9\u56fe\u8868\u793a\u7ed9\u5b9a\u56fe\u50cf\u4e2d\u4e0d\u540c R\u3001G\u3001B\u7b49\u7ea7\u7684\u50cf\u7d20\u6570\u5360\u603b\u50cf\u7d20\u6570\u7684\u6bd4\u4f8b,\u8ba1\u7b97\u65b9\u6cd5\u4e0e\u7070\u5ea6\u76f4\u65b9\u56fe\u7c7b\u4f3c</li> </ul>"},{"location":"DIP/lab3/lab3/#2_1","title":"\uff082\uff09\u76f4\u65b9\u56fe\u5747\u8861\u5316","text":"<p>\u76f4\u65b9\u56fe\u5747\u8861\u5316\uff08Histogram Equalization\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u589e\u5f3a\u6570\u5b57\u56fe\u50cf\u5bf9\u6bd4\u5ea6\u7684\u56fe\u50cf\u5904\u7406\u6280\u672f\u3002\u5b83\u901a\u8fc7\u91cd\u65b0\u5206\u5e03\u56fe\u50cf\u7684\u50cf\u7d20\u503c\uff0c\u4f7f\u76f4\u65b9\u56fe\u53d8\u5f97\u66f4\u5747\u5300\uff0c\u4ece\u800c\u6539\u5584\u56fe\u50cf\u7684\u89c6\u89c9\u8d28\u91cf\u3002\u76f4\u65b9\u56fe\u5747\u8861\u5316\u5e38\u88ab\u7528\u4e8e\u63d0\u9ad8\u56fe\u50cf\u7684\u53ef\u89c6\u6027\u3001\u5206\u6790\u6027\u80fd\u548c\u81ea\u52a8\u56fe\u50cf\u5904\u7406\u5e94\u7528\u4e2d\u3002\u4f8b\u5982\uff0c\u8fc7\u66dd\u5149\u56fe\u50cf\u7684\u7070\u5ea6\u7ea7\u96c6\u4e2d\u5728\u9ad8\u4eae\u5ea6\u8303\u56f4\u5185\uff0c\u800c\u66dd\u5149\u4e0d\u8db3\u5c06\u4f7f\u56fe\u50cf\u7070\u5ea6\u7ea7\u96c6\u4e2d\u5728\u4f4e\u4eae\u5ea6\u8303\u56f4\u5185\u3002\u91c7\u7528\u76f4\u65b9\u56fe\u5747\u8861\u5316\uff0c\u53ef\u4ee5\u628a\u539f\u59cb\u56fe\u50cf\u7684\u76f4\u65b9\u56fe\u53d8\u6362\u4e3a\u5747\u5300\u5206\u5e03(\u5747\u8861)\u7684\u5f62\u5f0f\uff0c\u8fd9\u6837\u5c31\u589e\u52a0\u4e86\u50cf\u7d20\u4e4b\u95f4\u7070\u5ea6\u503c\u5dee\u522b\u7684\u52a8\u6001\u8303\u56f4\uff0c\u4ece\u800c\u8fbe\u5230\u589e\u5f3a\u56fe\u50cf\u6574\u4f53\u5bf9\u6bd4\u5ea6\u7684\u6548\u679c\u3002</p> <p>\u6362\u8a00\u4e4b\uff0c\u76f4\u65b9\u56fe\u5747\u8861\u5316\u7684\u57fa\u672c\u539f\u7406\u662f:\u5bf9\u5728\u56fe\u50cf\u4e2d\u50cf\u7d20\u4e2a\u6570\u591a\u7684\u7070\u5ea6\u503c(\u5373\u5bf9\u753b\u9762\u8d77\u4e3b\u8981\u4f5c\u7528\u7684\u7070\u5ea6\u503c)\u8fdb\u884c\u5c55\u5bbd\uff0c\u800c\u5bf9\u50cf\u7d20\u4e2a\u6570\u5c11\u7684\u7070\u5ea6 \u503c(\u5373\u5bf9\u753b\u9762\u4e0d\u8d77\u4e3b\u8981\u4f5c\u7528\u7684\u7070\u5ea6\u503c)\u8fdb\u884c\u5f52\u5e76\uff0c\u4ece\u800c\u589e\u5927\u5bf9\u6bd4\u5ea6\uff0c\u4f7f\u56fe\u50cf\u6e05\u6670\uff0c\u8fbe\u5230\u589e\u5f3a\u7684\u76ee\u7684\u3002</p> <p>\u5c3d\u7ba1\u76f4\u65b9\u56fe\u5747\u8861\u5316\u5177\u6709\u663e\u8457\u7684\u4f18\u70b9\uff0c\u4f46\u5b83\u4e5f\u6709\u4e00\u4e9b\u9650\u5236\u3002\u5b83\u53ef\u80fd\u5bfc\u81f4\u56fe\u50cf\u51fa\u73b0\u566a\u70b9\u6216\u8fc7\u5ea6\u589e\u5f3a\u7ec6\u8282\uff0c\u7279\u522b\u662f\u5728\u566a\u97f3\u5b58\u5728\u7684\u60c5\u51b5\u4e0b\u3002\u6b64\u5916\uff0c\u5747\u8861\u5316\u53ef\u80fd\u6539\u53d8\u56fe\u50cf\u7684\u6574\u4f53\u4eae\u5ea6\uff0c\u8fd9\u53ef\u80fd\u4e0d\u9002\u7528\u4e8e\u6240\u6709\u56fe\u50cf\u3002</p> <ul> <li>\u8fde\u7eed\u60c5\u51b5\u7684\u8f6c\u6362\\(T\\):</li> </ul> <p></p> <ul> <li> <p>\u8bbe r \u4e3a\u8f6c\u6362\u524d\u7684\u7070\u5ea6\u7ea7\uff0c s \u4e3a\u53d8\u6362\u524d\u540e\u7684\u7070\u5ea6\u7ea7</p> </li> <li> <p>\\(0 \u2264 r,s \u2264 1\\) [\u5bf9\u5e94\\((0,255)\\)]</p> </li> <li> <p>P\u00ae \u548c P(s) \u662f\u5bf9\u5e94\u4e8e r \u548c s \u7684\u6982\u7387\u3002\u8f6c\u6362\u89c4\u5219\u4e3a:</p> <ul> <li> <p>T\u00ae\u662f\u5355\u8c03\u9012\u589e\u51fd\u6570\uff0c\\(0\u2264r\u22641\\)\u4e14\\(0\u2264T(r)\u22641\\)</p> </li> <li> <p>\u9006\u53d8\u6362 r = \\(T^{-1}(s)\\)\u4e5f\u662f\u4e00\u4e2a\u5355\u8c03\u9012\u589e\u51fd\u6570 \u8003\u8651\u5230\u7070\u5ea6\u53d8\u6362\u4e0d\u4f1a\u6539\u53d8\u4f4d\u7f6e\u548c\u50cf\u7d20\u6570\uff0c\u6211\u4eec\u6709   $$   \\int_0^rP\u00aedr = \\int_0^sP(s)ds=\\int_0^s 1*ds = s = T\u00ae\\   Thus: T\u00ae=\\int_0^rP\u00aedr   $$   </p> </li> </ul> </li> <li> <p>\u79bb\u6563\u60c5\u51b5\u7684\u8f6c\u6362 \\(T\\):</p> </li> </ul> <p>\u8bbe\u4e00\u5e45\u56fe\u50cf\u7684\u50cf\u7d20\u603b\u6570\u4e3an\uff0c\u5206L\u4e2a\u7070\u5ea6\u7ea7\uff0c\\(n_k\\)\u4e3a\u7b2ck\u4e2a\u7070\u5ea6\u7ea7\u51fa\u73b0\u7684\u50cf\u7d20\u6570\uff0c\u5219\u7b2c\\(k\\)\u4e2a\u7070\u5ea6\u7ea7\u51fa\u73b0\u7684\u6982\u7387\u4e3a\uff1a $$ P(r_k)= \\frac{n_k}{n}(0\u2264n_k \u22641,k=0,1,2,...,MN\u22121) $$</p> <ul> <li>\u79bb\u6563\u7070\u5ea6\u76f4\u65b9\u56fe\u5747\u8861\u5316\u7684\u8f6c\u6362\u516c\u5f0f\u4e3a   $$   s_k = T(r_k)=\\sum_{i=0}^kP(ri)=\\frac{1}{n}\\sum_{i=0}^{k}ni   $$</li> </ul>"},{"location":"DIP/lab3/lab3/#_3","title":"\u4e09\u3001\u5fc3\u5f97\u4f53\u4f1a","text":"<p>\u200b   \u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u5b66\u4e60\u4e86\u56fe\u50cf\u5904\u7406\u4e2d\u7684\u4e24\u4e2a\u91cd\u8981\u6982\u5ff5\uff1a\u7070\u5ea6\u76f4\u65b9\u56fe\u548c\u76f4\u65b9\u56fe\u5747\u8861\u5316\u3002\u9996\u5148\uff0c\u6211\u4eec\u8fdb\u884c\u4e86\u56fe\u50cf\u7684\u7070\u5ea6\u76f4\u65b9\u56fe\u5206\u6790\uff0c\u8fd9\u6709\u52a9\u4e8e\u6211\u4eec\u4e86\u89e3\u56fe\u50cf\u7684\u4eae\u5ea6\u5206\u5e03\u60c5\u51b5\uff0c\u8fdb\u800c\u4e3a\u56fe\u50cf\u589e\u5f3a\u63d0\u4f9b\u57fa\u7840\u3002\u63a5\u7740\uff0c\u6211\u4eec\u5b66\u4e60\u4e86\u76f4\u65b9\u56fe\u5747\u8861\u5316\u7684\u539f\u7406\u548c\u65b9\u6cd5\uff0c\u5b83\u662f\u4e00\u79cd\u7528\u4e8e\u589e\u5f3a\u56fe\u50cf\u5bf9\u6bd4\u5ea6\u7684\u6280\u672f\u3002</p> <p>\u200b   \u5728\u5b9e\u9a8c\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u7f16\u5199\u4e86\u4ee3\u7801\u6765\u8ba1\u7b97\u56fe\u50cf\u7684\u7070\u5ea6\u76f4\u65b9\u56fe\uff0c\u4e86\u89e3\u4e86\u4e0d\u540c\u7070\u5ea6\u7ea7\u522b\u5728\u56fe\u50cf\u4e2d\u7684\u5206\u5e03\u60c5\u51b5\u3002\u8fd9\u4e3a\u76f4\u65b9\u56fe\u5747\u8861\u5316\u63d0\u4f9b\u4e86\u5fc5\u8981\u7684\u4fe1\u606f\uff0c\u5e2e\u52a9\u6211\u4eec\u786e\u5b9a\u5982\u4f55\u8c03\u6574\u56fe\u50cf\u7684\u50cf\u7d20\u503c\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u53ef\u89c6\u6548\u679c\u3002\u63a5\u7740\uff0c\u6211\u4eec\u5b9e\u65bd\u4e86\u76f4\u65b9\u56fe\u5747\u8861\u5316\uff0c\u901a\u8fc7\u7d2f\u79ef\u5206\u5e03\u51fd\u6570\u7684\u8ba1\u7b97\u548c\u50cf\u7d20\u503c\u7684\u6620\u5c04\uff0c\u5c06\u56fe\u50cf\u7684\u4eae\u5ea6\u5206\u5e03\u5747\u5300\u5316\u3002\u8fd9\u4f7f\u5f97\u56fe\u50cf\u7684\u5bf9\u6bd4\u5ea6\u589e\u52a0\uff0c\u7ec6\u8282\u66f4\u52a0\u6e05\u6670\uff0c\u4ece\u800c\u63d0\u9ad8\u4e86\u56fe\u50cf\u7684\u53ef\u89c6\u6027\u3002</p> <p>\u200b   \u603b\u7684\u6765\u8bf4\uff0c\u672c\u6b21\u5b9e\u9a8c\u4f7f\u6211\u4eec\u6df1\u5165\u4e86\u89e3\u4e86\u56fe\u50cf\u5904\u7406\u4e2d\u7684\u4e00\u4e9b\u5173\u952e\u6982\u5ff5\u548c\u6280\u672f\u3002\u901a\u8fc7\u5b9e\u9645\u7f16\u5199\u548c\u8fd0\u884c\u56fe\u50cf\u5904\u7406\u4ee3\u7801\uff0c\u6211\u4eec\u4e0d\u4ec5\u7406\u8bba\u4e0a\u7406\u89e3\u4e86\u8fd9\u4e9b\u6982\u5ff5\uff0c\u8fd8\u83b7\u5f97\u4e86\u5b9e\u9645\u64cd\u4f5c\u7684\u7ecf\u9a8c\u3002\u8fd9\u4e9b\u6280\u80fd\u5bf9\u4e8e\u5904\u7406\u548c\u589e\u5f3a\u56fe\u50cf\u5728\u8bb8\u591a\u9886\u57df\uff0c\u5982\u8ba1\u7b97\u673a\u89c6\u89c9\u3001\u533b\u5b66\u5f71\u50cf\u548c\u6570\u5b57\u5a92\u4f53\u7b49\u65b9\u9762\u90fd\u975e\u5e38\u91cd\u8981\u3002\u901a\u8fc7\u8fd9\u6b21\u5b9e\u9a8c\uff0c\u6211\u66f4\u6df1\u523b\u5730\u7406\u89e3\u4e86\u56fe\u50cf\u5904\u7406\u7684\u91cd\u8981\u6027\u548c\u5e94\u7528\u4ef7\u503c\u3002</p>"},{"location":"assembly/%E4%B8%AD%E6%96%AD/","title":"\u4e2d\u65ad","text":""},{"location":"assembly/%E4%B8%AD%E6%96%AD/#int16","title":"int16","text":"<ul> <li>int 16h/ah=00h \u5c5e\u4e8ebios\u4e2d\u65ad <p>int 16h ax=\u6240\u6572\u952e\u7684\u7f16\u7801 <pre><code>again:  [\u5237\u65b0\u6e38\u620f\u7684\u753b\u9762]\nmov ah,1\nint 16h \u68c0\u67e5\u952e\u76d8\u7f13\u51b2\u533a\u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56dezf=1,\u5426\u5219\u8fd4\u56dezf=0  (ZF=1 jz\u8df3\u8f6c)\njz no_key\nhas_key:\n    mov ah,0\n    int 16h  \u4ece\u952e\u76d8\u7684\u7f13\u51b2\u533a\u8bfb\u53d6\u4e00\u4e2a\u952e\uff0c\u6839\u636e\u6240\u6572\u7684\u952e\u6267\u884c\u4e0d\u540c\u5206\u652f\nno_key:\n    jmp again\n</code></pre></p> </li> </ul> <p>\u4f8b\u5b50\uff1a <pre><code>data segment\nx dw 0\ny dw 0\ndata ends\ncode segment\nassume cs:code,ds:data\nmain:\n  mov ax,data\n  mov ds,ax\n  mov ah,0\n  mov al,3\n  mov ax,0B800h\n  mov es,ax\ndraw:\n  ;bx=(y*80+x)*2\n  mov ax,[y]\n  mov bp,80\n  mul bp \n;  dx(\u9ad816\u4f4d):ax\uff08\u4f4e16\u4f4d\uff09=ax*bp \n;  \u5176\u4e2ddx=0 mul\u7684\u4e58\u6570\u5bbd\u5ea616 \u5219\u88ab\u4e58\u6570\u4e3aax\n;  24x79\u603b\u4e4b\u4e0d\u8d85\u8fc716\u4f4d      \n  add ax,[x]\n  add ax,ax\n  mov bx,ax\n  mov es:[bx],1720h\n check_key:\n  mov ah,1\n  int 16h\n  jnz has_key\n  jmp check_key\n has_key:\n  mov ah,0\n  int 16h\n  cmp ax,4800h\n  je is_up\n  cmp ax,5000h\n  je is_down\n  cmp ax,4B00h\n  je is_left\n  cmp ax,4D00h\n  je is_right\n  jmp exit\nis_up:\n  cmp [y],0\n  je check_key\n  dec [y]\n  jmp draw\nis_down:\n  cmp [y],24\n  je check_key\n  inc [y]\n  jmp draw\nis_left:\n  cmp [x],0\n  je check_key\n  dec [x]\n  jmp draw\nis_right:\n  cmp [x],79\n  je check_key\n  inc [x]\n  jmp draw\nexit:\n  mov ah,4Ch\n  int 21h\ncode ends\nend main\n</code></pre></p>"},{"location":"assembly/%E4%B8%AD%E6%96%AD/#int-21h","title":"int 21h","text":"<ul> <li>int21h\u5bf9\u5e94\u7684\u51fd\u6570\u9996\u5730\u5740\u4fdd\u5b58\u57280:84h\u5904, \u8be5\u5730\u5740\u662f\u4e00\u4e2a\u8fdc\u6307\u9488\u3002 <pre><code>0:84 78h\n0:85 56h\n0:86 34h\n0:87 12h\nxor ax,ax\nmov es,ax\nmov bx,84h\nlds si,es:[bx]\n;ds=1234h si=5678h\n</code></pre></li> <li>dword ptr 0:[84h]\u79f0\u4e3aint 21h\u7684\u4e2d\u65ad\u5411\u91cf(\u5176\u5b9e\u662f\u5b83\u7684\u51fd\u6570\u9996\u5730\u5740) <ul> <li>int n\u5bf9\u5e94\u7684\u4e2d\u65ad\u5411\u91cf\u7684\u5b58\u50a8\u4f4d\u7f6e\u4e00\u5b9a\u662f0:n*4</li> <li>n\u7684\u53d6\u503c\u8303\u56f4\u662f[00, FF], \u6240\u4ee5256\u4e2a\u4e2d\u65ad\u5411\u91cf\u4f1a\u5360\u75280:0~0:3FF\u4e4b\u95f4\u5171400h\u4e2a\u5b57\u8282\u7684\u5185\u5b58\uff0c\u8fd9\u5757\u533a\u57df\u79f0\u4e3a \u4e2d\u65ad\u5411\u91cf\u8868\u3002</li> </ul> </li> </ul> <p><pre><code>\u663e\u7136, int 00h\u7684\u4e2d\u65ad\u5411\u91cf\u4fdd\u5b58\u5728dword ptr 0:[0];\nint 01h\u7684\u4e2d\u65ad\u5411\u91cf\u4fdd\u5b58\u5728dword ptr 0:[4];\nint 03h\u7684\u4e2d\u65ad\u5411\u91cf\u4fdd\u5b58\u5728dword ptr 0:[0Ch];\nint 08h\u7684\u4e2d\u65ad\u5411\u91cf\u4fdd\u5b58\u5728dword ptr 0:[20h];\nint 0FFh\u7684\u4e2d\u65ad\u5411\u91cf\u4fdd\u5b58\u5728dword ptr 0:[3FCh];\n</code></pre> * BIOS\u4f1a\u5b8c\u6210\u90e8\u5206\u4e2d\u65ad\u5411\u91cf\u7684\u586b\u5199, \u5982int 10h\u3001int 16h\u3001int 13h\u8fd9\u51e0\u4e2aBIOS\u4e2d\u65ad\u7684\u5411\u91cf\u5728DOS\u542f\u52a8\u524d\u5c31\u5df2\u7ecf\u586b\u597d\u4e86 * DOS\u542f\u52a8\u5b8c\u6210\u540e\uff0c\u4f1a\u586b\u5165int 21h\u7684\u4e2d\u65ad\u5411\u91cf\u3002</p> <p><pre><code>1000:2000 mov ah, 2\n1000:2002 mov dl, 'A'\n1000:2004 int 21h\n1000:2006 mov ah,4Ch\n</code></pre> * \u4e0a\u9762\u8fd9\u6761int 21h\u6307\u4ee4\u6267\u884c\u65f6, cpu\u505a\u4e86\u4ee5\u4e0b4\u4ef6\u4e8b: <pre><code>IF=0\nTF=0  -\u9632\u6b62\u4e2d\u65ad\u91cc\u518d\u6b21\u4ea7\u751f\u4e2d\u65ad\npushf\npush cs\u53731000h\npush \u4e0b\u6761\u6307\u4ee4\u7684\u504f\u79fb\u5730\u5740\u53732006h\njmp dword ptr 0:[84h]; jmp 1234h:5678h\n\n\u4e0a\u9762\u8fd9\u6761jmp\u4f1a\u8df3\u8f6c\u5230int 21h\u7684\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\u5185\u90e8:\n1234:5678  ...\n             ...\n1234:56FF  iret; \u4e2d\u65ad\u8fd4\u56de\niret\u5728\u6267\u884c\u65f6, cpu\u505a\u4e86\u4ee5\u4e0b3\u4ef6\u4e8b\u60c5:\npop ip\u5373ip=2006h\npop cs\u5373cs=1000h\npopf\n\n1000:2000 call 1234:5678; \u8fdc\u8c03\u7528\n;\u6b64\u65f6\u4f1apush 1000h \u518d push 2005h\n;\u6700\u540ejmp 1234:5678\n1000:2005 mov ah, 4Ch\n1000:2007 int 21h\n...\n1234:5678 ...\n            retf; \u6b64\u65f6\u6267\u884cpop ip\u518dpop cs\n</code></pre></p> <p>\u4e2d\u65ad\u7a0b\u5e8f\u4f8b\u5b50 <pre><code>code segment\nassume cs:code\nold_80h dw 0, 0\nmain:\n   xor ax, ax\n   mov es, ax\n   mov bx, 80h*4; mov bx, 200h\n   mov ax, es:[bx]\n   mov old_80h[0], ax\n   mov ax, es:[bx+2]\n   mov old_80h[2], ax\n\n   mov word ptr es:[bx], offset int_80h\n   mov es:[bx+2], cs\n\n   mov ah, 1\n   int 80h; AL=\u952e\u76d8\u8f93\u5165\u7684ASCII\u7801\nnext:\n   mov ah, 2\n   mov dl, al\n   int 80h\n\n   mov ax, old_80h[0]\n   mov es:[bx], ax\n   mov ax, old_80h[2]\n   mov es:[bx+2], ax\n\n   mov ah, 4Ch\n   int 21h\nint_80h: ; ISR(Interrupt Service Routine)\n         ; \u4e2d\u65ad\u670d\u52a1\u51fd\u6570\n   cmp ah, 1\n   je is_1\nis_2:\n   push es\n   push bx\n   push ax\n   mov bx, 0B800h\n   mov es, bx\n   mov byte ptr es:[160], dl\n   mov byte ptr es:[161], 17h\n   pop ax\n   pop bx\n   pop es\n   jmp done\nis_1:\n   int 21h\ndone:\n   iret\n   ;\u5982\u679c\u60f3\u63a5\u8fde\u6267\u884cold int80\uff1ajmp dword ptr cs:[old_80h]\n\ncode ends\nend main\n</code></pre></p>"},{"location":"assembly/%E5%87%BD%E6%95%B0/","title":"\u51fd\u6570","text":""},{"location":"assembly/%E5%87%BD%E6%95%B0/#_1","title":"\u6c47\u7f16\u8bed\u8a00\u4e2d\u7684\u4e09\u79cd\u53c2\u6570\u4f20\u9012\u65b9\u5f0f","text":""},{"location":"assembly/%E5%87%BD%E6%95%B0/#_2","title":"\u5bc4\u5b58\u5668\u4f20\u9012","text":"<pre><code>f:\n   add ax, ax; ax=2*ax\n   ret        ; \u8fd4\u56de\u65f6ax\u5c31\u662f\u51fd\u6570\u503c\nmain:\n   mov ax, 3; ax\u5c31\u662ff()\u7684\u53c2\u6570\n   call f\nnext:\n   mov ah, 4Ch\n   int 21h\n</code></pre>"},{"location":"assembly/%E5%87%BD%E6%95%B0/#_3","title":"\u53d8\u91cf\u4f20\u9012","text":"<p><pre><code>f:\n   mov ax, var\n   add ax, ax; ax\u5c31\u662f\u51fd\u6570\u503c\n   ret\nmain:\n   mov var, 3\n   ; var\u662f\u4e00\u4e2a16\u4f4d\u7684\u53d8\u91cf, \u7528\u4f5c\u53c2\u6570\uff0cvar\u5fc5\u987b\u662f\u5168\u5c40\u53d8\u91cf\n   call f\n</code></pre> * \u5728\u6c47\u7f16\u8bed\u8a00\u4e2d\uff0c\u7528\u00a0db\u3001dw\u7b49\u5173\u952e\u8bcd\u5b9a\u4e49\u7684\u53d8\u91cf\u5747\u4e3a\u5168\u5c40\u53d8\u91cf\u00a0\u3002\u5728\u5806\u6808\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u624d\u662f\u5c40\u90e8\u53d8\u91cf\u3002 * var\u4e0d\u80fd\u7528\u4e8e\u9012\u5f52\u51fd\u6570\u5185--\u6bcf\u4e00\u5c42\u53d8\u91cf\u5730\u5740\u5404\u4e0d\u76f8\u540c\uff0c\u5168\u5c40\u53d8\u91cf\u7684\u8bdd\u6c38\u8fdc\u662f\u540c\u4e00\u4e2a\u5730\u5740\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528\u6765\u4f20\u9012\u9012\u5f52\u51fd\u6570\u7684\u53c2\u6570</p>"},{"location":"assembly/%E5%87%BD%E6%95%B0/#_4","title":"\u5806\u6808\u4f20\u9012","text":"<p><pre><code>f:\n   push bp\n   mov bp, sp\n   mov ax, [bp+4]; \u4ece\u5806\u6808\u4e2d\u53d6\u5f97\u53c2\u6570\n   add ax, ax\n   pop bp\n   ret\nmain:\n   mov ax, 3\n   push ax; \u53c2\u6570\u538b\u5165\u5230\u5806\u6808\n   call f\n   add sp, 2\n</code></pre> * C\u8bed\u8a00\u51fd\u6570\u8c03\u7528y=f(2,3)\u6c42\u4e24\u6570\u4e4b\u548c\u8f6c\u5316\u6210\u6c47\u7f16\u8bed\u8a00 * \u8bbess=1000h sp=2000h <pre><code>f:\n   push bp;(4)\n   mov bp, sp\n   mov ax, [bp+4]\n   add ax, [bp+6]\n   pop bp; (5)\n   ret; (6)  pop ip\nmain:\n   mov ax, 3\n   push ax; (1)\n   mov ax, 2\n   push ax; (2)\n   call f; (3) \n   ;call\u4f1a\u628af\u6307\u4ee4\u7684\u4e0b\u4e00\u6761\u7684\u5730\u5740\uff08here\uff09\u538b\u5165\u5806\u6808 \u7136\u540e\u518djmpf\nhere:\n   add sp, 4;(7);\u5806\u6808\u6062\u590d\u5e73\u8861\n</code></pre> * \u4e0a\u8ff0\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u7684\u5806\u6808\u5e03\u5c40\u5982\u4e0b:stack frame <pre><code>ss:1FF8 old bp &lt;- bp (4)\nss:1FFA here &lt;- (3)(5)\nss:1FFC 02   &lt;- (2)(6)\nss:1FFE 03   &lt;- (1)\nss:2000 ??   &lt;- (7)\n</code></pre> * printf\u51fd\u6570\u539f\u578b <pre><code>#include &lt;stdio.h&gt;\ndouble f(char *s, ...)\n{  double y=0;\n   char *p = (char *)&amp;s; /* p = bp+4 */\n   p += sizeof(s); /* p = bp+6 */\n   while(*s != '\\0')\n   {\n      if(*s == 'i')\n      {\n         y += *(int *)p;\n         p += sizeof(int);\n      }\n      else if(*s == 'l')\n      {\n         y += *(long*)p;\n         p += sizeof(long);\n      }\n      else if(*s == 'd')\n      {\n         y += *(double *)p;\n         p += sizeof(double);\n      }\n      s++;\n   }\n   return y;\n}\nmain()\n{\n   double y;\n   y = f(\"ild\", 10, 20L, 3.14);\n   printf(\"y=%lf\\n\", y);\n}\n</code></pre> * call far ptr dest retf <pre><code>1000:2000 call 1234:5678  ;\u8de8\u6bb5\u8df3\u8fdc\ncpu\u4f1a\u505a\u4e00\u4e0b\u52a8\u4f5c\uff1a\n[1]push cs\n[2]push 2005h\n[3]jmp 1234:5678h\n;\u4e00\u5b9a\u5148\u538b\u5165\u6bb5\u5730\u5740\uff0c\u518d\u538b\u5165\u504f\u79fb\u5730\u5740  WHY?5.18\u6700\u540e\u4e00\u6bb5\n1000:2005 mov ah,4Ch\n1234:5678 ...\n1234:5688 retf\ncpu \u5728retf\u65f6\u4f1a\u505a\u4ee5\u4e0b\u52a8\u4f5c\n[1]pop ip;\n[2]pop cs;\n</code></pre></p>"},{"location":"assembly/%E5%87%BD%E6%95%B0/#3","title":"\u7528\u5806\u6808\u4f20\u9012\u53c2\u6570\u67093\u79cd\u65b9\u5f0f:","text":""},{"location":"assembly/%E5%87%BD%E6%95%B0/#__cdecl","title":"__cdecl","text":"<ul> <li>\u53c2\u6570\u4ece\u53f3\u5230\u5de6\u987a\u5e8f\u538b\u5165\u5806\u6808\uff0c\u7531\u8c03\u7528\u8005\u6e05\u7406\u5806\u6808\u662fC\u8bed\u8a00\u53c2\u6570\u4f20\u9012\u89c4\u8303\u3002 <p>__cdecl\u7684\u4f8b\u5b50: <pre><code>f:\npush bp; (4)\nmov bp, sp\nmov ax, [bp+4]; arg0\nadd ax, [bp+6]; arg1\npop bp; (5)\nret; (6)\nmain:\nmov ax, 20; arg1\npush ax; (1)\nmov ax, 10; arg0\npush ax; (2)\ncall f; (3)\nhere:\nadd sp, 4; (7)\n</code></pre></p> </li> <li>__cdecl\u5806\u6808\u5e03\u5c40: <pre><code>ss:1FF8 old bp -&gt; bp (4)\nss:1FFA here -&gt; (3)(5)\nss:1FFC 10 -&gt; (2)(6)\nss:1FFE 20 -&gt; (1)\nss:2000    -&gt; (7)\n</code></pre></li> </ul>"},{"location":"assembly/%E5%87%BD%E6%95%B0/#__pascal","title":"__pascal","text":"<ul> <li>\u53c2\u6570\u4ece\u5de6\u5230\u53f3\u987a\u5e8f\u538b\u5165\u5806\u6808\uff0c\u7531\u88ab\u8c03\u7528\u8005\u6e05\u7406\u5806\u6808\u662fPascal\u8bed\u8a00\u53c2\u6570\u4f20\u9012\u89c4\u8303\u3002 <p>__pascal\u7684\u4f8b\u5b50\uff1a <pre><code>f:\npush bp; (4)\nmov bp, sp\nmov ax, [bp+6]; arg0\nadd ax, [bp+4]; arg1\npop bp; (5)\nret 4; (6)\nmain: \nmov ax, 10\npush ax; (1) arg0\nmov ax, 20\npush ax; (2) arg1\ncall f; (3)\nhere: \n</code></pre></p> </li> <li>__pascal\u7684\u5806\u6808\u5e03\u5c40: <pre><code>ss:1FF8 old bp&lt;- bp (4)\nss:1FFA here &lt;- (3)(5)\nss:1FFC 20 &lt;- (2)\nss:1FFE 10 &lt;- (1)\nss:2000    &lt;-(6)\n</code></pre> <p>ret 4: [1]pop ip [2]sp=sp+4</p> </li> </ul>"},{"location":"assembly/%E5%87%BD%E6%95%B0/#__stdcall","title":"__stdcall","text":"<ul> <li>\u53c2\u6570\u4ece\u53f3\u5230\u5de6\u987a\u5e8f\u538b\u5165\u5806\u6808\uff0c\u7531\u88ab\u8c03\u7528\u8005\u6e05\u7406\u5806\u6808\u662fWindows API\u51fd\u6570\u7684\u53c2\u6570\u4f20\u9012\u89c4\u8303\u3002 <p>__stdcall\u7684\u4f8b\u5b50\uff1a <pre><code>f:\npush bp; (4)\nmov bp, sp\nmov ax, [bp+4]; arg0\nadd ax, [bp+6]; arg1\npop bp; (5)\nret 4; (6)\nmain:\nmov ax, 20\npush ax; (1) arg1\nmov ax, 10\npush ax; (2) arg0\ncall f; (3)\nhere: \n</code></pre></p> </li> </ul> <p>__stdcall\u7684\u5806\u6808\u5e03\u5c40: <pre><code>ss:1FF8 old bp&lt;- bp (4)\nss:1FFA here &lt;- (3)(5)\nss:1FFC 10 &lt;- (2)\nss:1FFE 20 &lt;- (1)\nss:2000    &lt;-(6)\n</code></pre> * 32\u4f4d__stdcall\u7684\u4f8b\u5b50: <pre><code>f:\npush ebp;(4)\nmov ebp, esp\nmov eax,[ebp+8];arg0\nadd eax,[ebp+0Ch];arg1\npop ebp;(5)\nret 8;(6)\nmain:\npush 20;(1) arg1\npush 10;(2) arg0\ncall f;(3)\nhere:\n</code></pre> * 32\u4f4d__stdcall\u7684\u5806\u6808\u5e03\u5c40: <pre><code>ss:1FF0 old ebp&lt;- ebp (4)\nss:1FF4 here &lt;- (3)(5)\nss:1FF8 10 &lt;- (2)\nss:1FFC 20 &lt;- (1)\nss:2000    &lt;-(6)\n</code></pre></p>"},{"location":"assembly/%E5%87%BD%E6%95%B0/#_5","title":"\u52a8\u6001\u53d8\u91cf","text":"<pre><code>int f(int a, int b)\n{\n   int c; /* c\u662f\u5c40\u90e8\u52a8\u6001\u53d8\u91cf */\n   c = a+b;\n   return c;\n}\n</code></pre> <p>\u4e0a\u8ff0C\u8bed\u8a00\u51fd\u6570\u53ef\u7ffb\u8bd1\u6210\u4ee5\u4e0b\u6c47\u7f16\u4ee3\u7801: <pre><code>f:\npush bp; (4)\nmov bp, sp\nsub sp, 2; (5) \u8fd9\u91cc\u6316\u7684\u5751\u5c31\u662f\u7ed9\u53d8\u91cfc\u7684\nmov ax, [bp+4]\nadd ax, [bp+6]\nmov [bp-2], ax\nmov ax, [bp-2]\nmov sp, bp; (6)\u6b64\u65f6\u53d8\u91cfc\u6b7b\u4ea1\npop bp; (7)\nret; (8)\nmain:\nmov ax, 20\npush ax; (1)\nmov ax, 10\npush ax; (2)\ncall f; (3)\nhere:\nadd sp, 4;(9)\u6b64\u65f6\u53c2\u6570a,b\u6b7b\u4ea1\n</code></pre> \u6267\u884c\u4e0a\u8ff0\u4ee3\u7801\u65f6, \u5806\u6808\u5e03\u5c40\u5982\u4e0b: <pre><code>ss:1FF6 [30] (5) \u53d8\u91cfc\nss:1FF8 old bp&lt;- bp(4)(6)\nss:1FFA here &lt;- (3)(7)\nss:1FFC 10 &lt;- (2)(8)\nss:1FFE 20 &lt;- (1)\nss:2000    &lt;-(9)\n</code></pre></p>"},{"location":"assembly/%E5%87%BD%E6%95%B0/#cbp-bx-si-di","title":"C\u8bed\u8a00\u51fd\u6570\u4e2d\u9700\u8981\u4fdd\u62a4bp, bx, si, di","text":"<ul> <li>C\u8bed\u8a00\u7684\u51fd\u6570\u91cc\u9762\u9664\u4e86\u4e0d\u80fd\u7834\u574fbp\u5916\uff0c\u8fd8\u8981\u4fdd\u62a4bx,si,di\u7684\u503c: <pre><code>f:\npush bp\nmov bp, sp\nsub sp, n; \u5176\u4e2dn\u4e00\u4e2a\u5e38\u6570,\u7528\u6765\u4e3a\u52a8\u6001\u53d8\u91cf\u5206\u914d\u7a7a\u95f4\n           \u5148\u6316\u5751\u518dpush\npush bx\npush si\npush di\n...\npop di\npop si\npop bx\nmov sp, bp\npop bp\nret\n</code></pre></li> <li>\u5982\u679c\u6ca1\u6709push bp --- \u591a\u5c42\u8c03\u7528\u4f1a\u51fa\u95ee\u9898\uff1amain\u8c03\u7528f f\u8c03\u7528g \u8fd9\u65f6g-&gt;f-&gt;main\u56de\u4e0d\u53bb</li> </ul>"},{"location":"assembly/%E5%87%BD%E6%95%B0/#_6","title":"\u9012\u5f52","text":"<pre><code>int f(int n)\n{\n   if(n==1)\n      return 1;\n   return n+f(n-1);\n}\n</code></pre> <p>\u4e0a\u8ff0C\u8bed\u8a00\u9012\u5f52\u51fd\u6570\u53ef\u7ffb\u8bd1\u6210\u4ee5\u4e0b\u6c47\u7f16\u4ee3\u7801: <pre><code>f:\n    push bp;(3)(6)(9)\n    mov bp, sp\n    mov ax, [bp+4]\n    cmp ax, 1\n    je done\n    dec ax\n    push ax;(4)(7)\n    call f;(5)(8)\nthere:\n    add sp, 2;(12)(15)\n    add ax, [bp+4]\ndone:\n    pop bp;(10)(13)(16)\n    ret;(11)(14)(17)\nmain:\n    mov ax, 3\n    push ax;(1)\n    call f;(2)\n    here:\n    add sp, 2;(18)\n</code></pre> \u6267\u884c\u4e0a\u8ff0\u4ee3\u7801\u65f6\u7684\u5806\u6808\u5e03\u5c40\u5982\u4e0b: <pre><code>ss:1FEE oldbp&lt;-bp(9)\nss:1FF0 there&lt;-(8)(10)\nss:1FF2 1&lt;-(7)(11)\nss:1FF4 oldbp&lt;-bp(6)12\nss:1FF6 there&lt;-(5)(13)\nss:1FF8 2&lt;-(4)(14)\nss:1FFA oldbp&lt;-bp(3)(15)\nss:1FFC here &lt;-(2)(16)\nss:1FFE 3 &lt;-(1)(17)\nss:2000   &lt;-(18)\n</code></pre></p>"},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/","title":"\u57fa\u7840\u6307\u4ee4","text":""},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#_1","title":"\u903b\u8f91\u8fd0\u7b97\u548c\u79fb\u4f4d\u6307\u4ee4","text":""},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#andorxornottest","title":"\u903b\u8f91\u8fd0\u7b97\u6307\u4ee4\uff1aAND\uff0cOR\uff0cXOR\uff0cNOT\uff0cTEST","text":"<ul> <li>not:\u5355\u76ee\u8fd0\u7b97\u7b26 not ax =~ax</li> <li>test:\u00a0\u4e22\u5f03\u8fd0\u7b97\u7ed3\u679c\u00a0\uff0c\u4fdd\u7559\u6807\u5fd7\u4f4d\u72b6\u6001\uff1b\u672c\u8d28\u4e0a\u662fand\u6307\u4ee4 <pre><code>mov ax, 9234h\ntest ax, 8000h; ZF=0, AX=9234h\njnz msb_is_one; most significant bit\u6700\u9ad8\u4f4d\n;test\u548cand\u7684\u5173\u7cfb\u76f8\u5f53\u4e8ecmp\u548csub\u7684\u5173\u7cfb\u3002\n</code></pre></li> <li>\u5224\u65ad\u67d0\u4e2a\u5bc4\u5b58\u5668\u662f\u5426\u4e3a0\u7684\u51e0\u79cd\u65b9\u6cd5: <pre><code>test cl, cl\nor cl, cl\nand cl, cl\nor cl, 0\ncmp cl, 0\n</code></pre></li> </ul>"},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#_2","title":"\u79fb\u4f4d\u6307\u4ee4","text":"<ul> <li>shl shr \u903b\u8f91\u5de6\u79fb\u3001\u903b\u8f91\u53f3\u79fb[\u9488\u5bf9\u975e\u7b26\u53f7\u6570]</li> <li>sal sar \u7b97\u672f\u5de6\u79fb\u3001\u7b97\u672f\u53f3\u79fb[\u9488\u5bf9\u7b26\u53f7\u6570]</li> <li>sal=shl \u5747\u53f3\u8fb9\u8865\u96f6</li> <li>shr\u53f3\u79fb\u65f6\u5de6\u8fb9\u6c38\u8fdc\u8865\u96f6\uff0c\u00a0sar\u53f3\u79fb\u65f6\u5de6\u8fb9\u8865\u4e0a\u5143\u7d20\u7684\u6700\u9ad8\u4f4d\u00a0 <pre><code>mov ah, 1011 0110B\nrol ah, 1;  AH=0110 1101, CF=1\n;sal: shift arithmetic left \u7b97\u672f\u5de6\u79fb\nmov ah,11111100B;AH=-4\nsar ah,2;AH=11111111 AH=-2\n</code></pre></li> <li>sar\u5bf9\u8d1f\u6570\u53f3\u79fb\u65f6\u5de6\u8fb9\u8981\u88651</li> <li>rcl: rotate through carry left \u5e26\u8fdb\u4f4d\u5faa\u73af\u5de6\u79fb</li> <li>rcr: rotate through carry right\u5e26\u8fdb\u4f4d\u5faa\u73af\u53f3\u79fb <pre><code>mov ah,0B6h\nclc       ;CF=0\nrcl ah,1  ;CF=\u539f\u6765\u6700\u9ad8\u4f4d\u7684\u503c ah\u6700\u5730\u4f4d\u4f1a\u53d8\u6210\u539fCF\u7684\u503c\n          ;ah=01101100 CF=1\n\nmov ah, 0B6h\nstc         ; CF=1\nrcl ah, 1   ; CF=1 AH=1011 0110 \u79fb\u4f4d\u524d\n            ; CF=1 AH=0110 1101 \u79fb\u4f4d\u540e\n\nmov ah, 0B6h\nstc         ; CF=1\nrcr ah, 1   ; AH=1011 0110  CF=1\u79fb\u4f4d\u524d\n            ; AH=1101 1011  CF=0\u79fb\u4f4d\u540e\n\nmov ah,0B6h\nstc\nrcl ah, 1;  CF=1 AH=0110 1101\n           ;dx   ax\n</code></pre></li> <li>shl, shr, rol, ror, rcl, rcr\u00a0\u6700\u540e\u79fb\u51fa\u53bb\u7684\u90a3\u4e00\u4f4d\u4e00\u5b9a\u5728CF\u4e2d\u3002\u00a0</li> </ul> <p>\u5047\u5b9a\u8981\u628aAX\u4e2d\u768416\u4f4d\u503c\u8f6c\u5316\u6210\u4e8c\u8fdb\u5236\u8f93\u51fa: * \u89e3\u6cd51: <pre><code>mov cx, 16\nnext:\n    shl ax, 1\n    jc is_1\n\nis_0:\n    mov dl, '0'\n    jmp output\n\nis_1:\n    mov dl, '1'\n\noutput:\npush ax\nmov ah, 2\nint 21h\npop ax\ndec cx\njnz next\n</code></pre> * \u89e3\u6cd52: <pre><code>mov cx, 16\nnext:\nshl ax, 1\nmov dl, '0'\nadc dl, 0\noutput:\npush ax\nmov ah, 2\nint 21h\npop ax\ndec cx\njnz next\n</code></pre></p>"},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#_3","title":"\u5b57\u7b26\u4e32\u64cd\u4f5c\u6307\u4ee4","text":""},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#movsbmovswmovsd","title":"\u5b57\u7b26\u4e32\u4f20\u9001\u6307\u4ee4\uff1aMOVSB\uff0cMOVSW\uff0cMOVSD","text":"<ul> <li> <p>rep movsb : \u5176\u4e2drep\u8868\u793arepeat\uff0cs\u8868\u793astring\uff0cb\u8868\u793abyte</p> </li> <li> <p>\u5728\u6267\u884c\u6b64\u6307\u4ee4\u524d\u8981\u505a\u4ee5\u4e0b\u51c6\u5907\u5de5\u4f5c\uff1a</p> </li> <li>\u2460ds:si-&gt;\u6e90\u5b57\u7b26\u4e32(si\u5c31\u662fsource index)</li> <li>\u2461es:di-&gt;\u76ee\u6807\u5b57\u7b26\u4e32(di\u5c31\u662fdestination index)</li> <li>\u2462cx=\u79fb\u52a8\u6b21\u6570</li> <li>\u2463DF=0\u5373\u65b9\u5411\u6807\u5fd7\u8bbe\u6210\u6b63\u65b9\u5411(\u7528\u6307\u4ee4cld)</li> <li> <p>rep movsb\u6240\u505a\u7684\u64cd\u4f5c\u5982\u4e0b: <pre><code>again:\nif(cx == 0)\n   goto done;\nbyte ptr es:[di] = byte ptr ds:[si]\nif(df==0)\n{si++; di++;}\nelse\n{si--; di--;}\ncx--\ngoto again\ndone:\n</code></pre></p> </li> <li> <p>\u4f8b\u5b50: \u8981\u628a\u4ee5\u4e0b\u5de6\u4fa74\u4e2a\u5b57\u8282\u590d\u5236\u5230\u53f3\u4fa7</p> </li> </ul> <p><pre><code>1000:0000 'A'        2000:0000  'A'\n1000:0001 'B'        2000:0001  'B'\n1000:0002 'C'        2000:0002  'C'\n1000:0003 00         2000:0003  00\n</code></pre> <pre><code>mov ax, 1000h\nmov ds, ax\nmov si, 0      ; mov si, 3\nmov ax, 2000h\nmov es, ax\nmov di, 0      ; mov di, 3\nmov cx, 4\ncld             ; std\nrep movsb\n</code></pre></p> <ul> <li>rep movsw\u7684\u64cd\u4f5c\u8fc7\u7a0b:[word] <pre><code>again:\nif(cx == 0)\n   goto done;\nword ptr es:[di] = word ptr ds:[si]\nif(df==0)\n{si+=2; di+=2;}\nelse\n{si-=2; di-=2;}\ncx--\ngoto again\ndone:\n</code></pre></li> <li> <p>rep movsd\u7684\u64cd\u4f5c\u8fc7\u7a0b:[dword] <pre><code>again:\nif(cx == 0)\n   goto done;\ndword ptr es:[di] = dword ptr ds:[si]\nif(df==0)\n{si+=4; di+=4;}\nelse\n{si-=4; di-=4;}\ncx--\ngoto again\ndone:\n</code></pre></p> </li> <li> <p>\u572832\u4f4d\u7cfb\u7edf\u4e0b, \u5047\u5b9a<code>ds:esi-&gt;\u6e90\u5185\u5b58\u5757</code>, <code>es:edi-&gt;\u76ee\u6807\u5757</code>, <code>DF=0</code>, \u5219\u5f53\u8981\u590d\u5236\u7684\u5b57\u8282\u6570ecx\u4e0d\u662f4\u7684\u500d\u6570\u65f6\uff0c\u53ef\u4ee5\u505a\u5982\u4e0b\u5904\u7406: <pre><code>push ecx\nshr ecx, 2\nrep movsd\npop ecx\nand ecx, 3; \u76f8\u5f53\u4e8eecx = ecx % 4\nrep movsb\n</code></pre></p> </li> </ul>"},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#cmpsbcmpswcmpsd","title":"\u5b57\u7b26\u4e32\u6bd4\u8f83\u6307\u4ee4\uff1aCMPSB\uff0cCMPSW\uff0cCMPSD","text":"<ul> <li> <p>cmpsb [jz je]</p> <ul> <li>\u6bd4\u8f83byte ptr ds:[si]\u4e0ebyte ptr es:[di]</li> <li>\u5f53DF=0\u65f6\uff0csi++\uff0cdi++</li> <li>\u5f53DF=1\u65f6\uff0csi--\uff0cdi--</li> <li>\u81ea\u52a8\u5bf9si di\u66f4\u65b0[\u4e3a\u4e0b\u4e00\u6b21\u79fb\u52a8\u51c6\u5907]</li> </ul> </li> <li> <p>repe cmpsb</p> </li> <li>\u82e5\u672c\u6b21\u6bd4\u8f83\u76f8\u7b49\u5219\u7ee7\u7eed\u6bd4\u8f83\u4e0b\u4e00\u4e2a(repeat if equal)</li> </ul> <p><pre><code>again:\nif(cx == 0) goto done;\ntemp=byte ptr ds:[si]-byte ptr es:[di]\nold_fl=FL\n\u5f53DF=0\u65f6\uff0csi++\uff0cdi++\n\u5f53DF=1\u65f6\uff0csi--\uff0cdi--\ncx--\nFL=old_fl\nif (ZF==1) goto again\ndone:\n</code></pre> * cx!=0 \u4e5f\u53ef\u80fd\u63d0\u524d\u7ed3\u675f\u5faa\u73af * repne cmpsb   * \u82e5\u672c\u6b21\u6bd4\u8f83\u4e0d\u7b49\u5219\u7ee7\u7eed\u6bd4\u8f83\u4e0b\u4e00\u4e2a(repeat if not equal) <pre><code>again:\nif(cx == 0) goto done;\ntemp=byte ptr ds:[si]-byte ptr es:[di]\nold_fl=FL\n\u5f53DF=0\u65f6\uff0csi++\uff0cdi++\n\u5f53DF=1\u65f6\uff0csi--\uff0cdi--\ncx--\nFL=old_fl\nif (ZF==0) goto again\ndone:\n</code></pre></p>"},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#scasbscasw-scasd","title":"\u5b57\u7b26\u4e32\u626b\u63cf\u6307\u4ee4\uff1ascasb\uff0cscasw, scasd","text":"<ul> <li>scasb: <pre><code>cmp al, es:[di]\ndi++; (\u5f53DF=1\u65f6\uff0c\u4e3adi--)\n</code></pre></li> <li> <p>repne scasb: <pre><code>next:\n  if(cx == 0) goto done;\n  cmp al, es:[di]\n      di++; \u5f53DF=1\u65f6\uff0c\u4e3adi--\n      cx--\n  je done\n  goto next\ndone:\n</code></pre></p> </li> <li> <p>\u4f8b\u5b50: \u5047\u5b9a\u4ece\u5730\u57401000:2000\u5f00\u59cb\u5b58\u653e\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u8ba1\u7b97\u8be5\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u5e76\u5b58\u653e\u5230CX\u4e2d\u3002\u5047\u5b9a\u5b57\u7b26\u4e32\u4ee5ASCII\u78010\u7ed3\u675f\uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u5305\u62ec0\u3002 <pre><code>mov ax, 1000h\nmov es, ax\nmov di, 2000h; ES:DI-&gt;\u76ee\u6807\u4e32\nmov cx, 0FFFFh; CX=\u6700\u591a\u627eFFFF\u6b21\nmov al, 0; AL=\u5f85\u627e\u7684\u5b57\u7b26\ncld       ; DF=0\uff0c\u8868\u793a\u6b63\u65b9\u5411\nrepne scasb; again:\nnot cx      ; \u76f8\u5f53\u4e8ecx=FFFF-cx\ndec cx\n;\u4e0a\u8ff0\u4e24\u6761\u6307\u4ee4\u4e5f\u53ef\u4ee5\u66ff\u6362\u6210\u4ee5\u4e0b\u4e24\u6761\u6307\u4ee4:\n;inc cx\n;not cx\n;not cx\u76f8\u5f53\u4e8ecx=FFFF-cx\u00a0\n</code></pre></p> </li> <li>repe scasb<ul> <li>\u5047\u5b9a\u4ece\u5730\u57401000:0000\u8d77\u5b58\u653e\u4ee5\u4e0b\u5b57\u7b26\u4e32\"###ABC\"\uff0c\u73b0\u8981\u6c42\u8df3\u8fc7\u524d\u9762\u7684#\uff0c\u628a\u540e\u9762\u5269\u4f59\u7684\u5168\u90e8\u5b57\u7b26\u590d\u5236\u52302000:0000\u4e2d</li> <li>\u5047\u5b9aes=1000h, di=0, cx=7, \u5219</li> </ul> </li> </ul> <pre><code>mov al, '#'\ncld\nrepe scasb\ndec di; ES:DI-&gt;\"ABC\"\ninc cx; CX=4\npush es\npop ds; DS=ES\npush di\npop si; SI=DI\nmov ax, 2000h\nmov es, ax\nmov di, 0\nrep movsb\n</code></pre>"},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#_4","title":"\u5b57\u7b26\u4e32\u64cd\u4f5c\u6307\u4ee4","text":"<ul> <li>stosb: <pre><code>es:[di] = AL\ndi++; DF=1\u65f6\u4e3adi--\n</code></pre></li> <li>rep stosb: \u5faa\u73afCX\u6b21stosb <pre><code>again:\nif(cx == 0) goto done;\nes:[di] = al\ndi++; \u5f53DF=1\u65f6, \u4e3aDI--\ncx--\ngoto again;\ndone:\n</code></pre></li> </ul> <pre><code>memset(void *t,int value,int n);\ndouble x[100];\nmemset(&amp;x,0,sizeof(x))\n</code></pre> <ul> <li>lodsb <pre><code>al=ds:[si]\nSI++;\u5f53DF=1\u65f6, \u4e3aSI--\n</code></pre></li> <li>Exercise:</li> <li>\u8bbeds:si-&gt; \"##AB#12#XY\"</li> <li>es:di\u6307\u5411\u4e00\u4e2a\u7a7a\u7684\u6570\u7ec4,</li> <li>CX=11</li> <li>\u901a\u8fc7\u7f16\u7a0b\u8fc7\u6ee4#\u6700\u540e\u4f7f\u5f97es:di -&gt;\"AB12XY\"</li> </ul> <pre><code>cld\nagain:\n   lodsb ; AL=DS:[SI], SI++\n         ; mov al, ds:[si]\n         ; inc si\n   cmp al, '#'\n   je   next\n   stosb ; ES:[DI]=AL, DI++\n         ; mov es:[di], al\n         ; inc di\nnext:\n   dec cx\n   jnz again\n</code></pre>"},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#c","title":"C\u8bed\u8a00\u5b57\u7b26\u4e32\u51fd\u6570\u8f6c\u6362","text":"<pre><code>strlen:\n    push bp\n    mov bp,sp\n    push di\n    push ds\n\n\n    mov di,[bp+4]\n    mov ax,data\n    mov ds,ax\n    mov es,ax\n    mov cx,0FFFFh\n    xor al,al\n    cld\n    repne scasb\n    inc cx\n    not cx\n    mov ax,cx\n\n    pop ds\n    pop di\n    mov sp,bp\n    pop bp\n    ret\n_memcpy:\n    push bp\n    mov bp,sp\n    push es\n    push ds\n    push si\n    push di\n    mov ax,data\n    mov es,ax\n    mov ds,ax\n    mov si,word ptr [bp+6]\n    mov di,word ptr [bp+4]\n    mov cx,word ptr [bp+8]\n    cld\n    rep movsb\n    pop di\n    pop si\n    pop ds\n    pop es\n    mov sp,bp\n    pop bp\n    ret\n_strncpy:\n    push bp\n    mov bp,sp\n    push es\n    push ds\n    push si\n    push di\n    mov si, word ptr [bp+6]\n    mov di,word ptr [bp+4]\n    push si\n    call _strlen\n    pop cx\n    cmp ax,[bp+8]\n    jl tricky_form\n    mov cx,word ptr [bp+8]\n    cld\n    rep movsb\n    tricky_form:\n    mov dx,[bp+8]\n    sub dx,ax\n    mov cx,ax\n    cld\n    rep movsb\n    mov cx,dx\n    mov ax,0\n    cld\n    rep stosb\n    pop di\n    pop si\n    pop ds\n    pop es\n    mov sp,bp\n    pop bp\n    ret\n_memset:\n    push bp\n    mov bp,sp\n    push es\n    push di\n    mov ax,data\n    mov es,ax\n    mov di,[bp+4]\n    mov ax,[bp+6]\n    mov cx,[bp+8]\n    cld\n    rep stosb\n    pop di\n    pop es\n    mov sp,bp\n    pop bp\n    ret\n\n_clrscr:\n    push es\n    push di\n    mov ax,0B800h\n    mov es,ax\n    mov di,0\n    mov ax,0000h\n    mov cx,2000\nagain:\n    mov es:[di],ax\n    add di,2\n    sub cx,1\n    jnz again\n    pop di\n    pop es\n    ret\n</code></pre>"},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#_5","title":"\u63a7\u5236\u8f6c\u79fb\u6307\u4ee4","text":"<ul> <li>jmp\u76843\u79cd\u7c7b\u578b \u2460jmp short target           ; \u77ed\u8df3 \u2461jmp near ptr target    ; \u8fd1\u8df3 \u2462jmp far ptr target     ; \u8fdc\u8df3</li> <li>\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5ea6\u91cf\u8df3\u8dc3\u7684\u8ddd\u79bb\uff0c\u56e0\u6b64\u6211\u4eec\u5728 \u5199\u6e90\u7a0b\u5e8f\u7684\u65f6\u5019\u4e0d\u9700\u8981\u52a0\u4e0ashort\u3001near ptr\u3001far ptr\u7b49\u7c7b\u578b\u4fee\u9970\u5373\u4e0a\u8ff0\u4e09\u79cd\u5199\u6cd5\u4e00\u5f8b\u53ef\u4ee5\u7b80\u5316\u4e3ajmp target\u3002</li> <li>\u77ed\u8df3\u6307\u4ee4[only one byte]</li> <li>\u683c\u5f0f jmp + \u504f\u79fb\u5730\u5740\u6216\u6807\u53f7</li> <li>\u4ee5\u4e0b\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\u4e5f\u90fd\u5c5e\u4e8e\u77ed\u8df3: <code>jc jnc jo jno js jns jz jnz ja jb jae jbe jg jge jl jle jp jnp</code> </li> <li>\u77ed\u8df3\u6307\u4ee4\u7684\u673a\u5668\u7801 <pre><code>     \u5730\u5740            \u673a\u5668\u7801   \u6c47\u7f16\u6307\u4ee4  \n    1D3E:0090     ...\n    1D3E:00F0\n    1D3E:0100     EB06     jmp  0108h\n    1D3E:0102     B402     mov  ah\uff0c2\n    1D3E:0104     B241     mov  dl, 41h\n    1D3E:0106     CD21     int  21h\n    1D3E:0108     B44C     mov  ah\uff0c4Ch\n    1D3E:010A     CD21     int  21h\n</code></pre></li> <li>\u77ed\u8df3\u592a\u8fdc\u8df3\u4e0d\u8fc7\u53bb\u7684\u89e3\u51b3\u529e\u6cd5 <pre><code>cmp ax, bx\n\uff08je  equal; jump out of range\uff09\njne not_equal\njmp equal; \u8fd1\u8df3\nnot_equal:\n...; \u5047\u5b9a\u8fd9\u91cc\u7701\u7565\u6307\u4ee4\u7684\u673a\u5668\u7801\u603b\u957f\u5ea6\u8d85\u8fc77Fh\u5b57\u8282\nequal:\n...\n</code></pre></li> <li>\u8fd1\u8df3\u6307\u4ee4[two bytes]</li> <li>\u8fd1\u8df3\u6307\u4ee4\u76843\u79cd\u683c\u5f0f <pre><code>jmp \u504f\u79fb\u5730\u5740\u6216\u6807\u53f7        ; \u5982jmp 1000h\njmp 16\u4f4d\u5bc4\u5b58\u5668      ; \u5982jmp bx\njmp 16\u4f4d\u53d8\u91cf       ; \u5982jmp word ptr [addr]\n</code></pre></li> <li>\u8fdc\u8df3\u6307\u4ee4[\u8de8\u6bb5\u8df3\u8dc3]</li> <li>\u8fdc\u8df3\u6307\u4ee4\u76842\u79cd\u683c\u5f0f<ul> <li>jmp \u6bb5\u5730\u5740:\u504f\u79fb\u5730\u5740</li> <li>jmp dword ptr 32\u4f4d\u53d8\u91cf</li> </ul> </li> <li>\u8fdc\u8df3\u6307\u4ee4\u7684\u673a\u5668\u7801<ul> <li><code>jmp 1234h:5678h</code>; \u673a\u5668\u7801\u4e3a<code>0EAh,78h,56h,34h,12h</code></li> </ul> </li> <li>\u8fdc\u8df3\u6ca1\u6709\u7528\u25b3\uff0c\u800c\u662f\u76f4\u63a5\u5730\u5740.\u8fdc\u8df3\u5230\u67d0\u4e2a\u5e38\u6570\u5730\u5740\u65f6,\u5728\u6e90\u7a0b\u5e8f\u4e2d\u4e0d\u80fd\u76f4\u63a5\u7528jmp\u6307\u4ee4\uff0c\u800c\u5e94\u8be5\u6539\u7528\u673a\u5668\u78010EAh\u5b9a\u4e49\uff0c\u5982: <pre><code>db 0EAh\ndw 5678h\ndw 1234h\ndb 0EAh\ndd 0FFFF0000h\n;\u6216 dw 0000h\n;dw 0FFFFh\n;\u4e0a\u8ff03\u884c\u5b9a\u4e49\u5408\u5728\u4e00\u8d77\u8868\u793ajmp 1234h:5678h\n</code></pre></li> <li>jmp dword ptr 32\u4f4d\u53d8\u91cf\u7684\u7528\u6cd5 <pre><code>mov word ptr ds:[bx],1234h\nmov word ptr ds:[bx+2],5678h\njmp dword ptr ds:[bx] ;jmp 5678h:1234h\n</code></pre> <pre><code>data segment\naddr dw 0000h, 0FFFFh \n;\u6216\u5199\u6210addr dd 0FFFF0000h\ndata ends\ncode segment\nassume cs:code, ds:data\nmain:\nmov ax, data\nmov ds, ax\njmp dword ptr [addr] \n;\u76f8\u5f53\u4e8ejmp FFFF:0000\ncode ends\nend main\n</code></pre></li> </ul>"},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#loop","title":"\u5faa\u73af\u6307\u4ee4\uff1aLOOP","text":"<ul> <li>loop  dest\u7684\u64cd\u4f5c\u8fc7\u7a0b: <pre><code>CX = CX - 1     ; \u5faa\u73af\u6b21\u6570\u51cf1\nif(CX != 0)     ; \u82e5CX\u4e0d\u7b49\u4e8e0\uff0c\u5219\n    goto  dest  ; \u8df3\u8f6c\u81f3dest\n</code></pre></li> <li>\u4f8b: \u6c421+2+3\u7684\u548c <pre><code>mov cx, 3\nnext:\nadd ax, cx; ax +3, +2, +1\nloop next; cx=2, 1, 0\n           ; dec cx\n           ; jnz next  \u5148-1\u518d\u5224\u65ad\n           ;--cx\u521d\u59cb\u503c=0\u65f6\u80fd\u8fbe\u5230\u6700\u5927\u5faa\u73af\u6b21\u6570 10000h\u6b21\n\nmov ax, 0\nmov cx, 0\njcxz done  \u8fd9\u6761\u6307\u4ee4\u53ef\u4ee5\u9632\u6b62cx\u4e3a0\u65f6\u8fdb\u5165\u5faa\u73af\nnext:\nadd ax, cx\nloop next; \u5faa\u73af10000h\u6b21\ndone:\n</code></pre></li> <li>jecxz \u8868\u793ajump if ecx is zero</li> </ul>"},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#call-ret","title":"call, ret\u6307\u4ee4","text":"<pre><code>\u8fd1\u8fd4\u56de\uff1aretn\uff0c\u5728\u591a\u6570\u60c5\u51b5\u4e0b\u53ef\u5199\u6210ret\n\u8fdc\u8c03\u7528\uff1acall far ptr dest\n\u8fdc\u8fd4\u56de\uff1aretf\n</code></pre>"},{"location":"assembly/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#movpushpopxchg","title":"\u901a\u7528\u6570\u636e\u4f20\u9001\u6307\u4ee4\uff1aMOV\uff0cPUSH\uff0cPOP\uff0cXCHG","text":"<ul> <li>mov byte ptr ds:[bx], byte ptr es:[di]</li> <li>\u9519\u8bef\u539f\u56e0:\u4e24\u4e2a\u64cd\u4f5c\u6570\u4e0d\u80fd\u540c\u65f6\u4e3a\u5185\u5b58\u53d8\u91cf\u4ee5\u4e0b\u4e3a\u6b63\u786e\u5199\u6cd5:</li> </ul> <pre><code>mov al, es:[di]\nmov ds:[bx], al\n</code></pre> <pre><code>eax=12345678h\nebx=89ABCDEFh\nss=1000h\nsp=2000h\n\u73b0\u6267\u884c\u4ee5\u4e0b\u6307\u4ee4:\npush eax;(1)\npush ebx;(2)\npop ebx;(3)\npop eax;(4)\n</code></pre> <ul> <li>exchange \u6307\u4ee4 <pre><code>mov ax,1\nmov bx,2\nxchg ax,bx\nxchg ax,ds:[bx] \u53ef\u4ee5\u4ea4\u6362\u5bc4\u5b58\u5668\u548c\u53d8\u91cf \u4e0d\u5141\u8bb8\u5bf9\u4e24\u4e2a\u53d8\u91cf\u8fdb\u884c\u4ea4\u6362\n</code></pre></li> </ul>"},{"location":"assembly/%E5%A0%86%E6%A0%88/","title":"\u5806\u6808","text":""},{"location":"assembly/%E5%A0%86%E6%A0%88/#_1","title":"\u5806\u6808\u6bb5\u7684\u5b9a\u4e49","text":"<p><pre><code>stk segment stack    \u5806\u6808\u53ea\u80fd\u5b9a\u4e49\u4e00\u4e2a\ns db 200h dup ('S');\u4e5f\u53ef\u4ee5\u4e0d\u5b9a\u4e49\u6570\u7ec4\u540d\ndb 200h dup('S')\nstk ends\n</code></pre> * assume cs:code,ds:data,ss:stk * \\(mov\\ ah,s[1]\\) \u7f16\u8bd1\u540e\u53d8\u6210 \\(mov\\ ah,stk:[s+1]\\)\u518d\u8f6c\u5316\u6210$mov ah,ss:[1] $ * \u5982\u679c\u5f15\u7528\u6570\u7ec4s\u5fc5\u987b\u52a0\u4e0aassume ss\uff1astk</p>"},{"location":"assembly/%E5%A0%86%E6%A0%88/#dos","title":"\u7a0b\u5e8f\u8f7d\u5165\u5185\u5b58\u540e\uff0c\u64cd\u4f5c\u7cfb\u7edfdos\u4f1a\u5bf9\u4e00\u4e0b\u5bc4\u5b58\u5668\u4f5c\u521d\u59cb\u5316\u8d4b\u503c\uff1a","text":"<ul> <li>cs=code \u5373\u4e0d\u7528\u624b\u5de5\u7ed9cs\u8d4b\u503c</li> <li>ip=offset main</li> <li>ss=stk</li> <li>sp=200h</li> <li>ds=es=psp\u6bb5\u5740\uff1bpsp\u7a0b\u5e8f\u6bb5\u524d\u7f00\uff08program segment prefix) <p>psp\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a100h\u5b57\u8282\u7684\u5185\u5b58\u5757\uff0c\u4f4d\u4e8e\u5f53\u524d\u7a0b\u5e8f\u9996\u6bb5\u7684\u524d\u9762 psp\u7531\u64cd\u4f5c\u7cfb\u7edf\u5206\u914d\u7ed9\u5f53\u524d\u7a0b\u5e8f\uff0c\u91cc\u9762\u5b58\u653e\u4e86\u4e0e\u8be5exe\u76f8\u5173\u7684\u4e00\u4e9b\u4fe1\u606f\u5982\u547d\u4ee4\u884c\u53c2\u6570\u5373main\uff08\uff09\u7684\u53c2\u6570 <pre><code>int main(int argc,char *argv[]){  }\nmain.exe  123  xyz\nargv[0]   [1]  [2] \n</code></pre></p> </li> </ul>"},{"location":"assembly/%E5%A0%86%E6%A0%88/#sssp","title":"\u5982\u679c\u672a\u5b9a\u4e49\u5806\u6808\uff0c\u90a3\u4e48ss\u548csp\uff1f","text":"<p>\u6e90\u7a0b\u5e8f\u4e2d\u6ca1\u6709\u5b9a\u4e49\u5806\u6808\u6bb5\u65f6 ss=\u9996\u6bb5\u7684\u6bb5\u5730\u5740=1000h sp=0 sp-2=FFFE\uff081000\uff1aFFFE\uff09\u2014\u2014\u8fbe\u5230\u6700\u5927\u5806\u6808  \u5c0f\u7aef \u5373push a[0] (1234h)\u5728\u5806\u6808\u91cc\u4ec0\u4e48\u6837\u5b50  34 12 * 9000\uff1aFFFF\u662f\u7528\u6237\u53ef\u7528\u7684last \u5982\u679cpush\u592a\u591a\u4e86 \u53ef\u80fd\u8fdb\u5165code\u6bb5\u672b\u5c3e\uff0c\u5806\u6808\u6ea2\u51fa</p>"},{"location":"assembly/%E5%AF%84%E5%AD%98%E5%99%A8/","title":"\u5bc4\u5b58\u5668","text":""},{"location":"assembly/%E5%AF%84%E5%AD%98%E5%99%A8/#_1","title":"\u5bc4\u5b58\u5668\u8be6\u89e3","text":"<ul> <li> <p>\u5982\u679c\u672a\u5b9a\u4e49\u5806\u6808\uff0c\u90a3\u4e48ss\u548csp\uff1f</p> <ul> <li>\u6e90\u7a0b\u5e8f\u4e2d\u6ca1\u6709\u5b9a\u4e49\u5806\u6808\u6bb5\u65f6</li> </ul> <pre><code>ss=\u9996\u6bb5\u7684\u6bb5\u5730\u5740=1000h \nsp=0 \nsp-2=FFFE\uff081000\uff1aFFFE\uff09\u2014\u2014\u8fbe\u5230\u6700\u5927\u5806\u6808 \n9000\uff1aFFFF\u662f\u7528\u6237\u53ef\u7528\u7684last \n\u5982\u679cpush\u592a\u591a\u4e86 \u53ef\u80fd\u8fdb\u5165code\u6bb5\u672b\u5c3e\uff0c\u5806\u6808\u6ea2\u51fa\n</code></pre> </li> </ul>"},{"location":"assembly/%E5%AF%84%E5%AD%98%E5%99%A8/#fl16-9963","title":"FL\u517116\u4f4d, \u4f46\u53ea\u7528\u5176\u4e2d9\u4f4d\uff0c\u8fd99\u4f4d\u5305\u62ec6\u4e2a\u72b6\u6001\u6807\u5fd7\u548c3\u4e2a\u63a7\u5236\u6807\u5fd7\uff0c\u5982\u4e0b\u6240\u793a\uff1a","text":"<p>11  10    9    8    7   6    4    2    0</p> <p>O   DF    IF  TF   SF  ZF   AF   PF   CF</p>"},{"location":"assembly/%E5%AF%84%E5%AD%98%E5%99%A8/#cf-zf-sf-of-af-pf","title":"CF ZF SF OF AF PF: \u72b6\u6001\u6807\u5fd7","text":"<ul> <li> <p>CF: \u8fdb\u4f4d\u6807\u5fd7(carry flag)</p> <pre><code>mov ah, 0FFh ;\nadd ah, 1; ah=0, CF=1\u4ea7\u751f\u4e86\u8fdb\u4f4d \nadd ah, 2; ah=2, CF=0 \nsub ah, 3; ah=0FFh, CF=1\u4ea7\u751f\u4e86\u8fdb\u4f4d \n</code></pre> <ul> <li>\u79fb\u4f4d\u6307\u4ee4\u4e5f\u4f1a\u5f71\u54cdcf\u503c\uff0c\u6700\u540e\u4e00\u51fa\u53bb\u7684\u90a3\u4e00\u4f4d\u4f1a\u4fdd\u5b58\u5728cf\u5f53\u4e2d</li> </ul> <pre><code>mov cl,2 shr ah,cl;\u53f3\u79fb\u4e24\u4f4d\uff0ccf=1 \n</code></pre> <ul> <li> <p>\u4e0eCF\u76f8\u5173\u7684\u8df3\u8f6c\u6307\u4ee4:</p> <ul> <li>jc\u2014\u2014\u6709\u8fdb\u4f4d\u5219\u8df3\u8f6c</li> <li>jnc\u2014\u2014\u65e0\u8fdb\u4f4d\u5219\u8df3\u8f6c</li> <li>adc\u2014\u2014\u5e26\u8fdb\u4f4d\u52a0</li> <li>clc : cf=0</li> <li>stc : cf=1</li> <li>adc ax,bx;ax=ax+bx+cf</li> </ul> <pre><code>data segment\nabc dw 32767\ndata ends\ncode segment\nassume cs:code,ds:data\nmain:\n    mov ax,data\n    mov ds,ax\n    mov ax,[abc]\n    mov cx,16\nagain:\n    shl ax,1\n    jc is_one\nis_zero:\n    mov dl,'0'\n    jmp out_put\nis_one:\n    mov dl,'1'\nout_put:\n    push ax\n    mov ah,2\n    int 21h\n    pop ax\n    sub cx,1\n    jnz again\nmov ah,4Ch\nint 21h\ncode ends\nend main\n</code></pre> </li> </ul> </li> <li> <p>ZF: \u96f6\u6807\u5fd7(zero flag)</p> <pre><code>sub ax, ax; AX=0, ZF=1 \nadd ax, 1; AX=1, ZF=0 \nadd ax, 0FFFFh; AX=0, ZF=1, CF=1\n</code></pre> <ul> <li>jz is_zero \u4f1a\u53d1\u751f\u8df3\u8f6c, \u56e0\u4e3a\u5f53\u524dZF==1</li> <li>jnz\u6839\u636eZF==0\u4f5c\u51fa\u8df3\u8f6c</li> <li>jz\u7b49\u4ef7je jnz\u7b49\u4ef7jne</li> <li>cmp ax,ax ;ax-ax \u5dee\u503c\u6ca1\u6709\u4fdd\u7559\uff0c\u800c\u662f\u4fdd\u7559\u4e86zf \u5373\u5224\u65ad\u662f\u5426\u60f3\u7b49\u5c31\u662f\u5224\u65ad\u662f\u5426zf=1</li> </ul> </li> <li> <p>SF: \u7b26\u53f7\u6807\u5fd7(sign flag)\u8fd0\u7b97\u7ed3\u679c\u7684\u6700\u9ad8\u4f4d</p> <pre><code>mov ah, 7Fh add ah, 1; AH=80h=1000 0000B, SF=1\u2014\u2014\u8fd0\u7b97\u7ed3\u679c\u8d1f\u6570 \nsub ah, 1; AH=7Fh=0111 1111B, SF=0\u2014\u2014\u8fd0\u7b97\u7ed3\u679c\u6b63\u6570\n</code></pre> <ul> <li>jns \u2014positive;\u4f1a\u53d1\u751f\u8df3\u8f6c, \u56e0\u4e3aSF==0</li> <li>js\u662f\u6839\u636eSF==1\u4f5c\u51fa\u8df3\u8f6c</li> </ul> </li> <li> <p>OF: \u6ea2\u51fa\u6807\u5fd7(overflow flag)</p> <pre><code>mov ah, 7Fh \nadd ah, 1 ;AH=80h, OF=1, ZF=0, CF=0, SF=1 \nmov ah, 80h add ah, 0FFh; AH=7Fh, OF=1, ZF=0, CF=1, SF=0 \nmov ah, 80h sub ah, 1; AH=7Fh, OF=1, ZF=0, CF=0, SF=0 \n</code></pre> <ul> <li>OF\u4e5f\u6709\u4e24\u6761\u76f8\u5173\u7684\u6307\u4ee4: jo, jno </li> </ul> <pre><code>mov ab,81h ;ah=10000001B \nshl ah,1 ah=00000010B;0F=1,CF=1 \nonly one-bit shift\u4f1a\u5f71\u54cdOF\n</code></pre> </li> <li> <p>PF(Parity Flag)\u5947\u5076\u6807\u5fd7</p> <pre><code>mov ah, 4 add ah, 1; AH=0000 0101B, PF=1\u8868\u793a\u6709\u5076\u6570\u4e2a1 \nmov ax, 0101h add ax, 0004h; AX=0105h=0000 0001 0000 0101B \n; PF=1\u53ea\u7edf\u8ba1\u4f4e8\u4f4d\u4e2d1\u7684\u4e2a\u6570 \u8981\u662f\u4f4e8\u4f4d\u4e2d1\u7684\u4e2a\u6570\u662f\u5947\u6570\u65f6\uff0cPF=0 \n</code></pre> <ul> <li>jp(\u5f53PF==1\u65f6\u5219\u8df3)</li> <li>jnp(\u5f53PF==0\u65f6\u5219\u8df3)</li> <li>jp\u4e5f\u53ef\u4ee5\u5199\u6210jpe(jump if parity even)</li> <li>jnp\u4e5f\u53ef\u4ee5\u5199\u6210jpo(jump if parity odd)</li> </ul> <p>\u5047\u5b9a\u8981\u53d1\u9001\u5b57\u7b26\u2019C\u2019=0100 0011B, \u73b0\u5047\u5b9a\u4f4e7\u4f4d\u4e3a\u6570\u636e\u4f4d \u6700\u9ad8\u4f4d\u4e3a\u6821\u9a8c\u4f4d\u3002\u90a3\u4e48\u6821\u9a8c\u4f4d\u7684\u8ba1\u7b97\u65b9\u6cd5\u67092\u79cd: </p> <p>(1) \u5947\u6821\u9a8c: \u6570\u636e\u4f4d+\u6821\u9a8c\u4f4d\u5408\u8d77\u6765\uff0c1\u7684\u4e2a\u6570\u5fc5\u987b\u662f\u5947\u6570 </p> <p>(2) \u5076\u6821\u9a8c: \u6570\u636e\u4f4d+\u6821\u9a8c\u4f4d\u5408\u8d77\u6765\uff0c1\u7684\u4e2a\u6570\u5fc5\u987b\u662f\u5076\u6570 </p> <p>\u73b0\u5728\u6211\u4eec\u91c7\u7528\u5076\u6821\u9a8c\u6765\u53d1\u9001\u2019C\u2019,\u90a3\u4e48\u6821\u9a8c\u4f4d\u5fc5\u987b\u7b49\u4e8e1,\u5373\u5b9e\u9645\u8981\u53d1\u9001\u76848\u4f4d\u4e8c\u8fdb\u5236\u503c\u4e3a1100 0011B \u5bf9\u65b9\u63a5\u6536\u8fd98\u4f4d\u503c\u5e76\u4fdd\u5b58\u5728\u5bc4\u5b58\u5668AL\u4e2d, \u63a5\u4e0b\u53bb\u53ef\u4ee5\u6267\u884c\u5982\u4e0b\u4ee3\u7801\u6765\u9a8c\u8bc1AL\u4e2d\u7684\u503c\u662f\u5426\u6709\u9519: </p> <pre><code>or al, al\njnp error; if(PF==0) goto error\n good:\n ...\n error:\n ...\n</code></pre> </li> <li> <p>AF(Auxiliary Flag) \u8f85\u52a9\u8fdb\u4f4d\u6807\u5fd7</p> <ul> <li> <p>\u4f4e4\u4f4d\u5411\u9ad84\u4f4d\u4ea7\u751f\u8fdb\u4f4d\u6216\u501f\u4f4d</p> <pre><code>mov ah, 1Fh ; 0001 1111\nadd ah, 1 ; ah=20h, AF=1\n</code></pre> </li> <li> <p>AF\u8ddfBCD(Binary Coded Decimal)\u7801\u6709\u5173</p> </li> </ul> </li> </ul>"},{"location":"assembly/%E5%AF%84%E5%AD%98%E5%99%A8/#df-tf-if","title":"DF TF IF: \u63a7\u5236\u6807\u5fd7","text":"<ul> <li> <p>DF:direction flag</p> </li> <li> <p>TF:trace/trap flag</p> </li> <li> <p>IF:interrupt flag</p> </li> <li> <p>DF(Direction Flag)\u65b9\u5411\u6807\u5fd7: \u63a7\u5236\u5b57\u7b26\u4e32\u7684\u64cd\u4f5c\u65b9\u5411</p> <ul> <li>\u5f53DF=0\u65f6\u4e3a\u6b63\u65b9\u5411(\u4f4e\u5730\u5740\u5230\u9ad8\u5730\u5740)\uff0c\u5f53DF=1\u662f\u53cd\u65b9\u5411\u3002</li> <li>\u82e5\u6e90\u6570\u636e\u9996\u5730\u5740&gt;\u76ee\u6807\u6570\u636e\u9996\u5730\u5740\uff0c\u5219\u590d\u5236\u65f6\u8981\u6309\u6b63\u65b9\u5411(\u4ece\u4f4e\u5730\u5740\u5230\u9ad8\u5730\u5740)\uff1b</li> <li>\u82e5\u6e90\u6570\u636e\u9996\u5730\u5740&lt;\u76ee\u6807\u6570\u636e\u9996\u5730\u5740\uff0c\u5219\u590d\u5236\u65f6\u8981\u6309\u53cd\u65b9\u5411(\u4ece\u9ad8\u5730\u5740\u5230\u4f4e\u5730\u5740)\uff1b</li> <li>strcpy(target, source); \u6c38\u8fdc\u6309\u6b63\u65b9\u5411\u590d\u5236</li> <li>memcpy(target, source, n);\u6c38\u8fdc\u6309\u6b63\u65b9\u5411\u590d\u5236</li> <li>memmove(target, source, n); \u80fd\u6b63\u786e\u5904\u7406\u90e8\u5206\u91cd\u53e0</li> <li>\u67092\u6761\u6307\u4ee4\u53ef\u4ee5\u8bbe\u7f6eDF\u7684\u503c: cld\u4f7fDF=0, \u5b57\u7b26\u4e32\u590d\u5236\u6309\u6b63\u65b9\u5411 std\u4f7fDF=1, \u5b57\u7b26\u4e32\u590d\u5236\u6309\u53cd\u65b9\u5411 <pre><code>data segment:\ns db \"ABC123xyz\",0\nt db 10 dup(0)\ndata ends\ncode segment:\nassume cs:code,ds:data\nmain:\n    mov ax,data\n    mov ds,ax\n    mov es,ax\n    mov si,offset s+9\n    mov di,offset t+9\n    mov cx,10\n    std\n    rep movsb ;memcpy(es:di,ds:si,cx)\ndone:\n    mov ah,4Ch\n    int 21h\ncode ends\nend main\n\n\u6ce8\uff1arep movsb\nagain:\n    cmp cx,0\n    je done\n    mov al,ds[si]\n    mov es:[di],al\n    inc si/dec si\n    inc di/dec di\n    dec cx\n    jmp again\n</code></pre></li> </ul> </li> <li> <p>IF\uff08Interrupt Flag\uff09\u4e2d\u65ad\u6807\u5fd7</p> <ul> <li>\u5f53IF=1\u65f6,\u5141\u8bb8\u4e2d\u65ad;\u5426\u5219\u7981\u6b62\u4e2d\u65ad</li> <li>cli\u6307\u4ee4\u4f7fIF=0\u8868\u793a\u5173/\u7981\u6b62\u786c\u4ef6\u4e2d\u65ad</li> <li>sti\u6307\u4ee4\u4f7fIF=1\u8868\u793a\u5f00/\u5141\u8bb8\u786c\u4ef6\u4e2d\u65ad</li> <li>int nh \u4fdd\u5b58\u57284xn</li> </ul> <pre><code>mov ax, 0 \nmov bx, 1 \nadd ax, bx \n</code></pre> <ul> <li>\u6b64\u65f6\u82e5\u7528\u6237\u6572\u952e,\u5219CPU\u4f1a\u5728\u6b64\u5904\u63d2\u5165\u4e00\u6761int 9h\u6307\u4ee4\u5e76\u6267\u884c\u5b83</li> <li>int 9h\u7684\u529f\u80fd\u662f\u8bfb\u952e\u76d8\u7f16\u7801\u5e76\u4fdd\u5b58\u5230\u952e\u76d8\u7f13\u51b2\u533a\u4e2d(\u9690\u85cf)\u786c\u4ef6\u4e2d\u65ad</li> <li>\u53d1\u8d77\u8005\u662f\u4e8b\u4ef6\uff0c\u533a\u522b\u4e8e\u7a0b\u5e8f\u5458\u4e3b\u52a8\u7684\u8f6f\u4ef6\u4e2d\u65ad</li> </ul> <p>\u65f6\u949f\u6bcf\u96941/18\u5999\u4f1a\u4ea7\u751f\u4e00\u4e2a\u4e2d\u65ad\u8bf7\u6c42 \u82e5\u7a0b\u5e8f\u5df2\u8fd0\u884c\u4e861/18\u79d2,\u5219cpu\u4f1a\u5728\u6b64\u5904\u63d2\u5165\u4e00\u6761int 8h\u6307\u4ee4\u5e76\u6267\u884c\uff08count++\uff09</p> <ul> <li>\u7528cli\u548csti\u628a\u4e00\u6bb5\u4ee3\u7801\u5305\u56f4\u8d77\u6765\u53ef\u4ee5\u8fbe\u5230\u8be5\u6bb5\u4ee3\u7801\u5728 \u6267\u884c\u8fc7\u7a0b\u4e2d\u4e0d\u4f1a\u88ab\u6253\u65ad\u7684\u6548\u679c:<ul> <li>cli clear interrupt\u7981\u6b62\u786c\u4ef6\u4e2d\u65ad</li> <li>\u91cd\u8981\u4ee3\u7801</li> <li>sti set interrupt\u5141\u8bb8\u786c\u4ef6\u4e2d\u65ad</li> </ul> </li> </ul> </li> <li> <p>TF\uff08Trace/Trap Flag\uff09\u8ddf\u8e2a/\u9677\u9631\u6807\u5fd7</p> <ul> <li>\u5f53TF=1\u65f6,CPU\u4f1a\u8fdb\u5165\u5355\u6b65\u6a21\u5f0f(single-step mode)\u3002</li> <li>\u5f53TF=1\u65f6,CPU\u5728\u6bcf\u6267\u884c\u5b8c\u4e00\u6761\u6307\u4ee4\u540e,\u4f1a\u81ea\u52a8\u5728\u8be5\u6761\u6307\u4ee4\u4e0e\u4e0b\u6761\u6307\u4ee4\u4e4b\u95f4\u63d2\u5165\u4e00\u6761int 1h\u6307\u4ee4\u5e76\u6267\u884c\u5b83\u3002</li> <li> <p>\u5229\u7528\u5355\u6b65\u6a21\u5f0f\u53ef\u4ee5\u5b9e\u73b0\u53cd\u8c03\u8bd5,\u6f14\u793a\u4ee3\u7801\u89c1\u4ee5\u4e0b\u94fe\u63a5: http://cc.zju.edu.cn/bhh/antidbg.zip</p> </li> <li> <p>bp\u7684\u9690\u542b\u6bb5\u5730\u5740\u662fss\u300c\u7528\u4ee5\u4ee3\u66ffsp\uff0c\u53ef\u83b7\u5f97\u5806\u6808\u4e2d\u7684\u5185\u5bb9\u300f</p> </li> <li>anti-debug \u4f8b\u5b50\uff1a</li> </ul> </li> </ul> <pre><code>code segment\nassume cs:code,ds:data\nmain:\n    jmp begin\nold1h dw 0,0\nprev_addr dw offset first,code  \n[\u6bb5\u5730\u5740+\u504f\u79fb\u5730\u5740\uff1a2x16\u4f4d]\n[\u5982\uff1aA0 00:00 01 \u662f\u4e00\u4e2a\u5730\u5740]\nbegin:\n    push cs\n    pop ds\n    xor ax,ax\n    mov es,ax  ;es=0\n    mov bx,4   ;bx=4 es:[bx]-&gt;int1h \u7684\u4e2d\u65ad\u5411\u91cf(\u8be5\u51fd\u6570\u7684\u9996\u5730\u5740) \u5176\u4e2d\u524d16\u4f4d\u5b58\u653e\u504f\u79fb\u5730\u57400:[4]\uff0c\u540e16\u4f4d\u5b58\u653e\u6bb5\u5730\u57400:[6]\n    push es:[bx]\n    pop old1h[0]\n    push es:[bx+2]\n    pop old1h[2]\n    mov word ptr es:[bx],offset int1h\n    mov word ptr es:[bx+2],cs\n    pushf   [save old FL \u628aflag\u538b\u5165\u5806\u6808]\n    pushf   [\u4e3a\u4e86\u4e4b\u540e\u518d\u628aTF\u6539\u62100][and ax,0FEFFh]\n    pop ax  [\u4e0d\u53ef\u7528mov ax,fl \u5373fl\u548cip\u552f\u4e8c\u4e0d\u80fd\u88ab\u5f15\u7528\u7684\u5bc4\u5b58\u5668]\n    or ax,100h [\u5c06TF\u6539\u62101]\uff01TF=1\n    push ax\n    popf    [FL=AX]\nfirst:\n    nop  \n    \u5f53\u67d0\u6307\u4ee4\u6267\u884c\u524dTF=1 \u5219\u8be5\u6307\u4ee4\u6267\u884c\u4e4b\u540e\u624d\u4f1a\u81ea\u52a8\u6267\u884cint01h\u5355\u6b65\u4e2d\u65ad\nsingle\u2014\u2014step_begin:\n\n[first int 1h] \nint1h\u53d1\u751f\u7684\u65f6\u5019 cpu\u4f1a\u505a\u4ee5\u4e0b\u7684\u52a8\u4f5c\uff1a\npushf      \u5c06flag\u538b\u5165\u5806\u6808\npush cs    \u5c06\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u6bb5\u5730\u5740\u538b\u5165\u5806\u6808\npush offset back \u5c06\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u504f\u79fb\u5730\u5740\u538b\u5165\u5806\u6808 &lt;- ss:sp\njmp dword ptr 0:[4]\u8fdb\u5165\u51fd\u6570int1h\n\nback:\n    xor ax,ax\n    mov cx,3\nnext\uff1a\n    add ax,cx  ;\u5df2\u89e3\u5bc6\n    nop\n    loop next\n    popf\n    nop\nsingle_step_end:\n    push old1h[0]\n    pop es:[bx]\n    push old1h[2]\n    pop es:[bx+2]\n    mov ah,4Ch\n    int 21h\nint1h:\n    push bp\n    mov bp,sp\n    push bx\n    push es\n    mov bx,cs:prev_addr[0]\n    mov es,cs:prev_addr[2]\n    inc byte ptr es:[bx]\n    mov bx,[bp+2]\n    mov es,[bp+4]\n    dec byte ptr es:[bx]\n    mov cs:prev_addr[0],bx\n    mov cs:prev_addr[2],es \n    pop es\n    pop bx\n    pop bp\n    iret[\u4e2d\u65ad\u8fd4\u56de cpu\u4f1a\u6267\u884cpop ip \uff0cpop cs\uff0cpopf]\ncode ends\nend main\n</code></pre>"},{"location":"assembly/%E6%98%BE%E5%8D%A1%E8%BE%93%E5%87%BA/","title":"\u663e\u5361\u8f93\u51fa","text":""},{"location":"assembly/%E6%98%BE%E5%8D%A1%E8%BE%93%E5%87%BA/#_1","title":"\u663e\u5361\u8f93\u51fa","text":"<ul> <li>7\u2014white 4-red</li> </ul> <pre><code>0000\u2014\u2014black\n0001-blue\n0010-green\n0100-red\n0011(BLue and green)\n</code></pre> <ul> <li>\u6700\u53f3\u8fb9\u4e00\u4f4d\u8868\u793a\u52a0\u5f3a\u8272</li> <li>(x,y)\u5750\u6807\u5bf9\u5e94\u7684\u663e\u5361\u504f\u79fb\u5730\u5740=\uff08y*80+x\uff09\u00d72 \uff0880\u00d725\u7684\u5c4f\u5e55\u5c3a\u5bf8\uff09</li> <li>\u6ce8\u660e\uff1a\u4e5f\u5c31\u662f\u8bf4\u663e\u5361\uff0c\u4e00\u884c160\u4e2a\u5b57\u8282\uff1a</li> <li>\u4e00\u822c\u4e00\u4e2a\u663e\u793a\u4f7f\u7528\u4e24\u4e2a\u5b57\u8282</li> <li>\u7b2c\u4e00\u4e2a\u50a8\u5b58\u8f93\u51fa\uff0c\u7b2c\u4e8c\u4e2a\u50a8\u5b58\u989c\u8272</li> </ul> <pre><code>code segment\nassume cs:code\nmain:\n  mov ax,0B800h\n  mov ds,ax\n  mov di,0\n  mov al,'A'\n  mov ah,17h\n  mov cx,2000\nagain:\n  mov ds:[di],ax\n  mov bx,800h\n\nwait_wait:\n  mov dx,0\nwait_a_while:\n  sub dx,1\n  jnz wait_a_while\n  sub bx,1\n  jnz wait_a_while;1000h\u4e58\u4ee5800h\n\n  mov word ptr ds:[di],0020h ;00\u9ed1\u8272\n  add di,2\n  sub cx,1\n  jnz again\n\n  mov ah,1\n  int 21h   (\u7528\u6237\u6572\u952e\u76d8\u518d\u7ed3\u675f)\n  mov ah ,4Ch\n  int 21h\n\ncode ends\nend main\n</code></pre>"},{"location":"assembly/%E6%98%BE%E5%8D%A1%E8%BE%93%E5%87%BA/#_2","title":"\u5185\u5b58\u6620\u5c04","text":"<ul> <li>B800:0000</li> <li>\u6587\u672c\u6a21\u5f0f\u4e0b\u7684\u663e\u5361\u5730\u5740 A000:0000\u662f\u56fe\u5f62\u6a21\u5f0f\u4e0b\u7684\u663e\u5361\u5730\u5740</li> <li> <p>dos\u53ca\u7528\u6237\u7a0b\u5e8f\u5360\u7528\u8fd9\u5757\u5185\u5b58\uff0c\u603b\u957f\u4e3a640KB <pre><code>1000:0000~1000:FFFF\n\u2026\u2026\n9000:0000~9000:FFFF\n</code></pre></p> </li> <li> <p>A000:0000~A000:FFFF</p> </li> <li>(x,y)\u5750\u6807\u5bf9\u5e94\u7684\u663e\u5361\u504f\u79fb\u5730\u5740=y*320+x</li> <li>B000:0000~B000:7FFF   <pre><code>mov ah,0  set video mode\nmov al,13h  13\u53f7 320*200\nint 10h\n</code></pre></li> <li>int10h \u5207\u6362\u5230320 * 200 * 256\u8272\u56fe\u5f62\u6a21\u5f0f\uff08\u4e5f\u53ef\u4ee5\u8f93\u51fa\u6587\u672c 40x25 \uff09\uff080\u884c0\u5217\uff09</li> <li> <p>al=12h \u5207\u6362\u5230640 * 480 16 \u8272\u56fe\u5f62\u6a21\u5f0f &gt; 640 480 \u8de8\u6bb5\uff0c\u8fd9\u4e2a\u65f6\u5019\u4e0d\u662f\u7528\u4e00\u4e2a\u5b57\u8282\u63a7\u5236\u4e00\u4e2a\u70b9\uff0c\u800c\u662f\u4e00\u4e2abit\u63a7\u5236\u4e00\u4e2a\u70b9 \uff0c\u7528\u56db\u4e2a\u5e73\u9762\u53e0\u8d77\u6765\uff0c\u63a7\u523616\u79cd\u989c\u8272</p> <pre><code>code segment\nassume cs:code\nmain:\n  jmp begin\ni dw 0\nbegin:\n  mov ah,00h\n  mov al,13h\n  int 10h\n  mov ax,0A000h\n  mov es,ax\n  mov di,(100-20)*320+(160-20)\n  mov [i],41  \u4e00\u517141\u884c\nnext_row:\n  ;push cx\n  push di\n  mov al,4 ;color=red\n  mov cx,41\nnext_dot:\n  mov es:[di],al\n  add di,1\n  sub cx,1\n  jnz next_dot\n  pop di\n  add di,320\n  sub [i],1\n  jnz next_row\n  mov ah,1\n  int 21h\n\n  mov ah,00h\n  mov al,03h;80*25\u7684\u6587\u672c\u6a21\u5f0f\n  int 10h\n  mov ah ,4Ch\n  int 21h\ncode ends\nend main\n</code></pre> </li> <li> <p>Applications   <pre><code>\u7a0b\u5e8f \u753b\u6c49\u5b57\n\ndata segment:\nhz db 04h,08h,0Eh,0A0h,78h,80h,08h,90h,\u2026\u202610h,0Ch\ndata ends\ncode segment:\nassume cs:code,ds:data\nmain:\n    mov ax,data\n    mov ds,ax\n    mov ax,0A000h\n    mov es,ax\n    mov di,0\n    mov ax,0013h\n    int 10h\n    mov dx,16\n    mov si,0\nnext_row:\n    mov ah,hz[si]\n    mov al,hz[si+1]\n    add si,2\n    mov cx,16\ncheck_next_dot:\n    shl ax,1\n    jnc no_dot\nis_dot:\n    mov byte ptr es:[di],0Ch\nno_dot:\n    add di,1\n    sub cx,1\n    jnz check_next_dot\n    sub di,16\n    add di,320\n    sub dx,1\n    jnz next_row\n    mov ah,1\n    int 21h\n    mov ax,0003h\n    int 10h;\u56de\u523080*25\u6587\u672c\u6a21\u5f0f\n    mov ah,4Ch\n    int 21h\ncode ends\nend main\n</code></pre></p> </li> </ul> <ul> <li>\u5185\u5b58\u6620\u5c04</li> <li>A000:0000-A000\uff1aFFFF B000:0000-B700:FFFF B800:0000~B800:7FFF \u6620\u5c04\u5230\u663e\u5361\u5185\u5b58</li> <li>C000:0000C000:FFFF \u2026\u2026 F000:0000F000:FFFF \u6620\u5c04\u5230ROM</li> <li>\u6620\u5c04\u65f6\u5728\u7535\u8111\u6267\u884cROM\u4e2dPOST\u4ee3\u7801\u8fc7\u7a0b\u4e2d\u5b8c\u6210\u7684;ROM\u4e2d\u8fd8\u5305\u62ecBIOS\u4ee3\u7801</li> <li>\u5982int10h\u4ee5\u53caint16h\u51fd\u6570\u96c6\u5c31\u5b9a\u4e49\u5728BIOS\u4e2d</li> </ul>"},{"location":"assembly/%E7%AB%AF%E5%8F%A3/","title":"\u7aef\u53e3","text":""},{"location":"assembly/%E7%AB%AF%E5%8F%A3/#_1","title":"\u7aef\u53e3","text":"<ul> <li> <p>CPU &lt;\u2014&gt; \u7aef\u53e3(port)  &lt;\u2014&gt; I/O\u8bbe\u5907</p> </li> <li> <p>\u7aef\u53e3\u7f16\u53f7\u5c31\u662f\u7aef\u53e3\u5730\u5740\u3002\u7aef\u53e3\u5730\u5740\u7684\u8303\u56f4\u662f\uff1a[0000h, 0FFFFh]\uff0c\u517165536\u4e2a\u7aef\u53e3</p> </li> <li> <p>\u5bf9\u7aef\u53e3\u64cd\u4f5c\u4f7f\u7528\u6307\u4ee4in\u4e0eout\u5b9e\u73b0\u3002</p> </li> </ul>"},{"location":"assembly/%E7%AB%AF%E5%8F%A3/#_2","title":"\u952e\u76d8\u901a\u4fe1","text":"<ul> <li>\u901a\u8fc760h\u53f7\u7aef\u53e3\uff0cCPU\u4e0e\u952e\u76d8\u4e4b\u95f4\u53ef\u4ee5\u5efa\u7acb\u901a\u8baf\u3002</li> <li><code>in al, 60h</code>\u4ece\u7aef\u53e360h\u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282\u5e76\u5b58\u653e\u5230AL\u4e2d</li> </ul>"},{"location":"assembly/%E7%AB%AF%E5%8F%A3/#_3","title":"\u65f6\u949f","text":"<ul> <li>70h\u53ca71h\u7aef\u53e3\u4e0ecmos\u5185\u90e8\u7684\u65f6\u949f\u6709\u5173\u3002</li> <li>70h\u00a0\u5730\u5740\u7aef\u53e3\u00a0 71h\u00a0\u6570\u636e\u7aef\u53e3</li> <li>\u5176\u4e2dcmos\u4e2d\u7684\u5730\u57404\u30012\u30010\u4e2d\u5206\u522b\u4fdd\u5b58\u4e86\u5f53\u524d\u7684\u65f6\u3001\u5206\u3001\u79d2\uff0c\u5e76\u4e14\u683c\u5f0f\u5747\u4e3aBCD\u7801\u3002</li> </ul> <pre><code>mov al,2\nout 70h,al \u544a\u8bc9cmos\u63a5\u4e0b\u6765\u8981\u53bb\u8bbf\u95ee\u5b83\u76842\u53f7\u5185\u5b58\u5355\u5143\nin al,71h  \u8bfb\u53d6cmos\u4e2d2\u53f7\u5355\u5143\u7684\u503c\uff08\u5206\u949f\uff09\nmov al, 4\nout 70h, al\nmov al, 23h\nout 71h, al; \u628acmos4\u53f7\u5355\u5143\u5373\u5c0f\u65f6\u7684\u503c\u6539\u621023\u70b9\n</code></pre>"},{"location":"note/list/","title":"List","text":""},{"location":"note/list/#linked-list","title":"linked list","text":"<p><pre><code>// Reverse a linked list\nq=h;\np=NUll;\nwhile(q){\n    t = q-&gt;next;\n    q-&gt;next = p;\n    p=q;\n    q=t;\n}\nh = p;\n\nLNode *reverse( LNode *head ){\n    LNode *p0,*head1;\n    head1=NULL;\n    for(p0=head-&gt;next;p0;){\n       LNode *temp=p0-&gt;next;//important!!!\n       p0-&gt;next =head1;\n       head1=p0;\n       p0=temp;\n    }\n    return head1;\n}\n</code></pre> * multilist * sparse matrix representation</p>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","title":"\u57fa\u7840\u6570\u636e\u7ed3\u6784","text":""},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#sparse-matrix","title":"SPARSE MATRIX","text":"<p>Representing a sparse matrix by a 2D array leads to wastage of lots of memory as zeroes in the matrix are of no use in most of the cases. So, instead of storing zeroes with non-zero elements, we only store non-zero elements. This means storing non-zero elements with triples- (Row, Column, value).</p> <ul> <li>Using Array</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    // Assume 4x5 sparse matrix\n    int sparseMatrix[4][5] =\n    {\n        {0 , 0 , 3 , 0 , 4 },\n        {0 , 0 , 5 , 7 , 0 },\n        {0 , 0 , 0 , 0 , 0 },\n        {0 , 2 , 6 , 0 , 0 }\n    };\n\n    int size = 0;\n    for (int i = 0; i &lt; 4; i++)\n        for (int j = 0; j &lt; 5; j++)\n            if (sparseMatrix[i][j] != 0)\n                size++;\n\n    // number of columns in compactMatrix (size) must be\n    // equal to number of non - zero elements in\n    // sparseMatrix\n    int compactMatrix[3][size];\n\n    // Making of new matrix\n    int k = 0;\n    for (int i = 0; i &lt; 4; i++)\n        for (int j = 0; j &lt; 5; j++)\n            if (sparseMatrix[i][j] != 0)\n            {\n                compactMatrix[0][k] = i;\n                compactMatrix[1][k] = j;\n                compactMatrix[2][k] = sparseMatrix[i][j];\n                k++;\n            } \n\n    for (int i=0; i&lt;3; i++)\n    {\n        for (int j=0; j&lt;size; j++)\n            cout &lt;&lt;\" \"&lt;&lt; compactMatrix[i][j];\n        cout &lt;&lt;\"\\n\";\n    }\n    return 0;\n}\n</code></pre> <ul> <li>Using Linked Lists</li> </ul> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n\n// Node to represent sparse matrix\nstruct Node\n{\n    int value;\n    int row_position;\n    int column_postion;\n    struct Node *next;\n};\n\n// Function to create new node\nvoid create_new_node(struct Node** start, int non_zero_element,int row_index, int column_index )\n{\n    struct Node *temp, *r;\n    temp = *start;\n    if (temp == NULL)\n    {\n        // Create new node dynamically\n        temp = (struct Node *) malloc (sizeof(struct Node));\n        temp-&gt;value = non_zero_element;\n        temp-&gt;row_position = row_index;\n        temp-&gt;column_postion = column_index;\n        temp-&gt;next = NULL;\n        *start = temp;\n    }\n    else\n    {\n        while (temp-&gt;next != NULL)\n            temp = temp-&gt;next;\n        // Create new node dynamically\n        r = (struct Node *) malloc (sizeof(struct Node));\n        r-&gt;value = non_zero_element;\n        r-&gt;row_position = row_index;\n        r-&gt;column_postion = column_index;\n        r-&gt;next = NULL;\n        temp-&gt;next = r;\n    }\n}\n// This function prints contents of linked list\n// starting from start\nvoid PrintList(struct Node* start)\n{\n    struct Node *temp, *r, *s;\n    temp = r = s = start;\n\n    printf(\"row_position: \");\n    while(temp != NULL){\n        printf(\"%d \", temp-&gt;row_position);\n        temp = temp-&gt;next;\n    }\n    printf(\"\\n\");\n    printf(\"column_postion: \");\n    while(r != NULL){\n        printf(\"%d \", r-&gt;column_postion);\n        r = r-&gt;next;\n    }\n    printf(\"\\n\");\n    printf(\"Value: \");\n    while(s != NULL){\n        printf(\"%d \", s-&gt;value);\n        s = s-&gt;next;\n    }\n    printf(\"\\n\");\n}\n// Driver of the program\nint main(){\n// Assume 4x5 sparse matrix\n    int sparseMatric[4][5] =\n    {\n        {0 , 0 , 3 , 0 , 4 },\n        {0 , 0 , 5 , 7 , 0 },\n        {0 , 0 , 0 , 0 , 0 },\n        {0 , 2 , 6 , 0 , 0 }\n    };\n    /* Start with the empty list */\n    struct Node* start = NULL;\n    for (int i = 0; i &lt; 4; i++)\n        for (int j = 0; j &lt; 5; j++)\n            // Pass only those values which are non - zero\n            if (sparseMatric[i][j] != 0)\n                create_new_node(&amp;start, sparseMatric[i][j], i, j);\n    PrintList(start);\n    return 0;\n}\n</code></pre>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#stack","title":"STACK","text":""},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#1adt","title":"1.ADT","text":""},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#2implementations","title":"2.Implementations","text":"<ul> <li>Linked List</li> <li>Array : The stack model must be well encapsulated.</li> </ul>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#3applications","title":"3.Applications","text":"<ul> <li>Balancing Symbols</li> <li>Pseudo Code</li> </ul> <pre><code>Algorithm  {\n    Make an empty stack S;\n    while (read in a character c) {\n        if (c is an opening symbol)\n            Push(c, S);\n        else if (c is a closing symbol) {\n            if (S is empty)  { ERROR; exit; }\n            else  {  /* stack is okay */\n                if  (Top(S) doesn\u2019t match c)  { ERROR, exit; }\n                else  Pop(S);\n            }  /* end else-stack is okay */\n        }  /* end else-if-closing symbol */\n    } /* end while-loop */ \n    if (S is not empty)  ERROR;\n}\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n#define STACKSIZE 30 \nchar stack[ STACKSIZE ]; // Global, but let's go with it\nint top = 0;\nvoid push( char x ) { \n    if( top == STACKSIZE )\n        puts( \"Stack Full\");\n    else\n        stack[ top++ ] = x;\n}\nbool popExpect( char c ) { // compare expected char on top with passed char\n    return top &amp;&amp; c == stack[ --top ];\n}\nbool chk( const char *str ) {\n    char *cp, pairs[] = \"(){}[]\"; // three important pairs\n    bool isGood = true; // optimism\n    for( int i = 0; isGood &amp;&amp; str[ i ]; i++ )\n        // is this char one of the \"special\" ones?\n        if( ( cp = strchr( pairs, str[ i ] ) ) != NULL ) {\n            int off = cp - pairs;\n            // because \"paired\" 0,2,4 are open, 1,3,5 are close\n            if( off%2 == 0 ) // opening\n                push( cp[1] ); // push the close that matches this open\n            else // special closing\n                isGood = popExpect( str[ i ] ); // does this close match?\n        }\n    return isGood &amp;&amp; top == 0;\n}\nint main() {\n    const char *s1 = \"(foobar)({}){bar}[[[(foo)]]]\"; // balanced\n    const char *s2 = \"(foobar)({}){ { bar}[[[(foo)]]]\"; // unbalanced open\n    const char *s3 = \"(foobar)({}){ ] bar}[[[(foo)]]]\"; // unbalanced close\n    puts( chk( s1 ) ? \"Balanced\" : \"Unbalanced\" );\n    puts( chk( s2 ) ? \"Balanced\" : \"Unbalanced\" );\n    puts( chk( s3 ) ? \"Balanced\" : \"Unbalanced\" );\n    return 0;\n}\n</code></pre> <ul> <li> <p>Calculation</p> </li> <li> <p>Prefix</p> </li> <li> <p>Infix\u300cConvert To Postfix\u300d</p> </li> <li> <p>Never pop a '(' from the stack except when processing a  ')' .</p> </li> <li>Observe that when ' (  ' is not in the stack, its precedence is the highest; but when it is in the stack, its precedence is the lowest.  Define in-stack precedence and incoming precedence for symbols, and each time use the corresponding precedence for comparison. </li> <li> <p>Note:  a \u2013 b \u2013 c will be converted to a b \u2013 c \u2013.  However, \\(2^{2^{3}}\\)must be converted to 2 2 3 ^ ^  ,  not 2 2 ^ 3 ^ since exponentiation associates right to left.</p> <ul> <li> <p>Observe that when ' (  ' is not in the stack, its precedence is the highest; but when it is in the stack, its precedence is the lowest.  Define in-stack precedence and incoming precedence for symbols, and each time use the corresponding precedence for comparison. </p> </li> <li> <p>Note:  a \u2013 b \u2013 c will be converted to a b \u2013 c \u2013.  However, \\(2^{2^{3}}\\)must be converted to 2 2 3 ^ ^  ,  not 2 2 ^ 3 ^ since exponentiation associates right to left.</p> </li> </ul> </li> <li> <p>Postfix \u300cEasier To Calculate\u300d</p> </li> </ul> <p>ps:Tail Recursion! -- compliler will remove the recursion.</p>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#the-queue-adt","title":"The Queue ADT","text":"<ul> <li> <p>A queue is a First-In-First-Out (FIFO) list, that is, an ordered list in which insertions take place at one end and deletions take place at the opposite end.</p> </li> <li> <p>Linked list implementation</p> </li> <li> <p>Array Implementation</p> </li> </ul> <pre><code>struct  QueueRecord {\n    int     Capacity ;   /* max size of queue */\n    int     Front;          /* the front pointer */\n    int     Rear;           /* the rear pointer */\n    int     Size;  /* Optional - the current size of queue */\n    ElementType  *Array;    /* array for queue elements */\n } ; \n</code></pre> <ul> <li>A circular Queue</li> <li>Rear[0] Font[1]</li> </ul>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#tree","title":"TREE","text":""},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#basic-properties","title":"Basic Properties","text":"<ul> <li>N nodes and N-1 edges</li> <li>node without any son is called  \\(leaf\\)</li> <li>\u4e00\u68f5\u6811\u7684\u5ea6\u662f\u8fd9\u68f5\u6811\u91cc\u6240\u6709\u8282\u70b9\u5ea6\u7684\u6700\u5927\u503c</li> <li>\u4ece\u8282\u70b9 \\(n1\\) \u5230 \\(nk\\) \u7684\u8def\u5f84\u662f\u552f\u4e00\u7684\uff0c\u5176\u957f\u5ea6\u662f\u8def\u5f84\u4e0a\u8fb9\u7684\u6570\u91cf.</li> <li>\u5bf9\u4e8e\u8282\u70b9 \\(ni\\)\uff0c\u5176\u6df1\u5ea6\u4e3a\u4ece\u6839\u5230 \\(ni\\) \u7684\u552f\u4e00\u8def\u5f84\u7684\u957f\u5ea6\\([Depth\\) \\(root = 0]\\)</li> <li>\u5bf9\u4e8e\u8282\u70b9 \\(ni\\)\uff0c\u5176\u9ad8\u5ea6\u4e3a\u4ece \\(ni\\) \u5230\u4e00\u4e2a\u53f6\u8282\u70b9\u7684\u6700\u957f\u957f\u5ea6\\([Height\\) \\(leaf = 0]\\)</li> <li>\u6839\u7684\u9ad8\u5ea6\u79f0\u4e3a\u8fd9\u68f5\u6811\u7684\u9ad8\u5ea6 / \u6df1\u5ea6</li> <li>\u4e00\u4e2a\u8282\u70b9\u7684\u7956\u5148\uff08ancestors\uff09\u662f\u4ece\u6839\u5230\u8fd9\u4e2a\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9</li> <li>\u4e00\u4e2a\u8282\u70b9\u7684\u540e\u88d4\uff08descendants\uff09\u662f\u8fd9\u4e2a\u8282\u70b9\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9</li> </ul>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#implementation","title":"Implementation","text":"<ul> <li> <p>FirstChild-NextSibling \u8868\u793a\u6cd5</p> </li> <li> <p>\u8bb0\u5f55\u7b2c\u4e00\u4e2a\u5b50\u8282\u70b9\u548c\u4e0b\u4e00\u4e2a\u5144\u5f1f\u8282\u70b9</p> </li> <li> <p>\u56e0\u4e3a\u4e00\u68f5\u6811\u7684\u513f\u5b50\u987a\u5e8f\u4e0d\u5b9a\uff0c\u6240\u4ee5\u4e00\u68f5\u6811\u7684\u8868\u793a\u65b9\u5f0f\u4e0d\u552f\u4e00</p> <pre><code>struct TreeNode {\n    ElementType Element;\n    PtrToNode FirstChild;\n    PtrToNode NextSibling;FirstChildFirfsads\n};\ntypedef struct TreeNode *PtrToNode;\n</code></pre> </li> </ul>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#binary-tree","title":"Binary Tree","text":""},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#basic-properties_1","title":"Basic Properties","text":"<ul> <li>\u7b2c i \u5c42\u7684\u8282\u70b9\u6570\u6700\u591a\u4e3a \\(2^{i-1}\\)</li> <li>\u6df1\u5ea6\u4e3a k \u7684\u4e8c\u53c9\u6811\u6700\u591a\u6709\\(2^{k}-1\\) \u4e2a\u8282\u70b9</li> <li>\\(n0\\) \u8868\u793a\u53f6\u8282\u70b9\u6570\uff0c\\(n2\\) \u8868\u793a\u5ea6\u4e3a 2 \u7684\u8282\u70b9\u6570\uff0c\u5219 \\(n0 = n2 +1\\)</li> <li>\u4e8c\u53c9\u6811\u53ef\u4ee5\u901a\u8fc7\u6570\u7ec4\u6765\u8868\u793a</li> <li>\u6839\u4e3a tree[1]</li> <li>\u8282\u70b9 tree[i] \u7684\u5de6\u513f\u5b50\u4e3a tree[2i]\uff0c\u53f3\u513f\u5b50\u4e3a tree[2i+1]</li> <li>\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u6570\u7ec4\u4e2d\u5143\u7d20\u5168\u90e8\u5206\u5e03\u5728 1 ~ n \u4e2d</li> <li>\u8868\u8fbe\u5f0f\u6811\uff08expression tree\uff09</li> </ul>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_1","title":"\u904d\u5386","text":"<ul> <li> <p>Preorder\uff1aroot-left-right</p> </li> <li> <p>Postorder\uff1aleft-right-root</p> </li> <li> <p>inorder:left-root-right</p> </li> <li> <p>level order:</p> </li> </ul> <pre><code>void levelorder(tree_ptr tree) {\n    enqueue(tree);\n    while (queue is not empty) {\n        visit(T = dequeue());\n        for (each child C of T) \n            enqueue(C);\n    }\n}\n</code></pre> <pre><code>//    \u4e8c\u53c9\u6811\u7684\u5b9e\u73b0\uff08C\u8bed\u8a00\uff09\n//    \u94fe\u8868\uff0c\u9012\u5f52\u5b9e\u73b0\ntypedef char Elementtype;    //    \u5b9a\u4e49\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u6839\u636e\u9700\u8981\u81ea\u884c\u5b9a\u5236\ntypedef struct TreeNode * Node;    //    Node\u76f8\u5f53\u4e8estruct treeNode *\n//    \u5b9a\u4e49\u6570\u8282\u70b9\u7ed3\u6784\ntypedef struct TreeNode {\n    Elementtype Element;\n    Node left;    //    \u6811\u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9\n    Node right;    //    \u6811\u8282\u70b9\u7684\u53f3\u5b50\u8282\u70b9\n}TREE,*PTREE;\n\nvoid CreatTree(PTREE *);    //    \u6811\u7684\u5148\u5e8f\u521b\u5efa\u51fd\u6570\nvoid PreOrderTree(PTREE );    //    \u6811\u7684\u524d\u5e8f\u904d\u5386\u51fd\u6570\nvoid InOrderTree(PTREE );    //    \u6811\u7684\u4e2d\u5e8f\u904d\u5386\nvoid PostOrderTree(PTREE );    //    \u6811\u7684\u540e\u5e8f\u904d\u5386\nvoid LeafOfTree(PTREE );    //    \u6253\u5370\u6811\u7684\u53f6\u5b50\u8282\u70b9\u51fd\u6570\nint  Get_Leaf_Num(PTREE );    //    \u83b7\u53d6\u6811\u53f6\u5b50\u8282\u70b9\u4e2a\u6570\nint Get_Height(PTREE );    //    \u83b7\u53d6\u6811\u7684\u9ad8\u5ea6\n\nint main() {\n    PTREE Root;    \n    printf(\"\u8bf7\u5148\u5e8f\u8f93\u5165\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u6570\u636e\uff1a \");\n    CreatTree(&amp;Root);    \n    printf(\"\\n\u524d\u5e8f\u904d\u5386\u7ed3\u679c\u4e3a\uff1a\");\n    PreOrderTree(Root);    \n    printf(\"\\n\u4e2d\u5e8f\u904d\u5386\u7ed3\u679c\u4e3a\uff1a\");\n    InOrderTree(Root);\n    printf(\"\\n\u540e\u5e8f\u904d\u5386\u7ed3\u679c\u4e3a\uff1a\");\n    PostOrderTree(Root);\n    printf(\"\\n\u6253\u5370\u53f6\u5b50\u8282\u70b9\u4e3a\uff1a\");\n    LeafOfTree(Root);\n    printf(\"\\n\u53f6\u5b50\u8282\u70b9\u4e2a\u6570\u4e3a\uff1a%d\", Get_Leaf_Num(Root));\n    printf(\"\\n\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u4e3a\uff1a%d\", Get_Height(Root));\n    printf(\"\\n\");\n    return 0;\n}\n//    \u5b9a\u4e49\u6811\u5148\u5e8f\u521b\u5efa\u51fd\u6570\nvoid CreatTree(PTREE *ROOT){\n  char val = 0;\n  val = getchar();\n  if(wal=='*'){*ROOT=NULL;}\n  else{\n    (*Root)=(PTREE)malloc(sizeof(TREE));\n        if ((*Root) == NULL) {\n            printf(\"\u521b\u5efa\u8282\u70b9\u5931\u8d25\uff0c\u65e0\u6cd5\u5206\u914d\u53ef\u7528\u5185\u5b58...\");\n            exit(-1);\n        }\n            else{\n          (*Root)-&gt;Element =val;\n          CreatTree(&amp;(*Root)-&gt;left);\n          CreatTree(&amp;(*Root)-&gt;right); \n        }\n  }\n\n}\n\n//    \u6811\u7684\u524d\u5e8f\u904d\u5386\u51fd\u6570\u5b9a\u4e49\nvoid PreOrderTree(PTREE Root) {\n    if (Root == NULL)\n        return;\n    else {\n        putchar(Root-&gt;Element);\n        PreOrderTree(Root-&gt;left);\n        PreOrderTree(Root-&gt;right);\n    }\n}\n\n//    \u6811\u7684\u4e2d\u5e8f\u904d\u5386\u51fd\u6570\u5b9a\u4e49\nvoid InOrderTree(PTREE Root) {\n    if (Root == NULL)\n        return;\n    else {\n        InOrderTree(Root-&gt;left);\n        putchar(Root-&gt;Element);\n        InOrderTree(Root-&gt;right);\n    }\n}\n//    \u6811\u7684\u540e\u5e8f\u904d\u5386\u51fd\u6570\u5b9a\u4e49\nvoid PostOrderTree(PTREE Root) {\n    if (Root==NULL) \n        return ;\n    else{\n        PostOrderTree(Root-&gt;left);\n        PostOrderTree(Root-&gt;right);\n        putchar( Root-&gt;Element);\n    }\n}\n//\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u5faa\u73af\u5f62\u5f0f\nIterative Program \nvoid iter_postorder\uff08tree_ptr_tree\uff09{\n  stack S = CreateStack(MAX_SIZE);\n  for(;;){\n\n  }\n}\n//    \u6253\u5370\u6811\u7684\u53f6\u5b50\u8282\u70b9\u51fd\u6570\u5b9a\u4e49\nvoid LeafOfTree(PTREE Tree) {\n    if (Tree == NULL)    \n        return ;\n    else {\n        if (Tree-&gt;left == NULL&amp;&amp;Tree-&gt;right == NULL)\n            putchar(Tree-&gt;Element);\n        else {\n            LeafOfTree(Tree-&gt;left);\n            LeafOfTree(Tree-&gt;right);\n        }\n    }  \n}\n//    \u83b7\u53d6\u6811\u7684\u53f6\u5b50\u8282\u70b9\u4e2a\u6570\u51fd\u6570\u5b9a\u4e49\nint Get_Leaf_Num(PTREE Tree) {\n    if (Tree == NULL)\n        return 0;\n    if (Tree-&gt;left == NULL&amp;&amp;Tree-&gt;right == NULL)\n        return 1;\n    //\u9012\u5f52\u6574\u4e2a\u6811\u7684\u53f6\u5b50\u8282\u70b9\u4e2a\u6570 = \u5de6\u5b50\u6811\u53f6\u5b50\u8282\u70b9\u7684\u4e2a\u6570 + \u53f3\u5b50\u6811\u53f6\u5b50\u8282\u70b9\u7684\u4e2a\u6570\n    return Get_Leaf_Num(Tree-&gt;left) + Get_Leaf_Num(Tree-&gt;right);\n}\n//    \u83b7\u53d6\u6811\u9ad8\u7684\u51fd\u6570\u5b9a\u4e49\nint Get_Height(PTREE Tree) {\n    int Height = 0;\n    if (Tree == NULL)\n        return 0;\n    //\u6811\u7684\u9ad8\u5ea6 = max(\u5de6\u5b50\u6811\u7684\u9ad8\u5ea6\uff0c\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6) + 1\n    else\n    {\n        int L_Height = Get_Height(Tree-&gt;left);\n        int R_Height = Get_Height(Tree-&gt;right);\n        Height = L_Height &gt;= R_Height ? L_Height + 1 : R_Height + 1;\n    }\n    return Height;\n}\n</code></pre> <ul> <li>inorder iterative</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;stdbool.h&gt;\n\n// \u5b9a\u4e49\u4e8c\u53c9\u6811\u7ed3\u70b9\nstruct TreeNode {\n    int val;\n    struct TreeNode* left;\n    struct TreeNode* right;\n};\n\n// \u521b\u5efa\u4e00\u4e2a\u4e8c\u53c9\u6811\u7ed3\u70b9\nstruct TreeNode* createNode(int val) {\n    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));\n    newNode-&gt;val = val;\n    newNode-&gt;left = NULL;\n    newNode-&gt;right = NULL;\n    return newNode;\n}\n// \u7ed3\u6784\u4f53\u6a21\u62df\u6808\nstruct TreeNodeStack {\n    struct TreeNode* data;\n    struct TreeNodeStack* next;\n};\n\nstruct TreeNodeStack* createStackNode(struct TreeNode* node) {\n    struct TreeNodeStack* stackNode = (struct TreeNodeStack*)malloc(sizeof(struct TreeNodeStack));\n    stackNode-&gt;data = node;\n    stackNode-&gt;next = NULL;\n    return stackNode;\n}\n\nvoid push(struct TreeNodeStack** stack, struct TreeNode* node) {\n    struct TreeNodeStack* stackNode = createStackNode(node);\n    stackNode-&gt;next = *stack;\n    *stack = stackNode;\n}\n\nstruct TreeNode* pop(struct TreeNodeStack** stack) {\n    if (*stack == NULL) {\n        return NULL;\n    }\n    struct TreeNodeStack* temp = *stack;\n    *stack = (*stack)-&gt;next;\n    struct TreeNode* node = temp-&gt;data;\n    free(temp);\n    return node;\n}\n\nbool isEmpty(struct TreeNodeStack* stack) {\n    return stack == NULL;\n}\n\n// \u4e2d\u5e8f\u904d\u5386\u4e8c\u53c9\u6811\u5e76\u8fd4\u56de\u7ed3\u679c\u4f5c\u4e3a\u6570\u7ec4\nint* inorderTraversal(struct TreeNode* root, int* returnSize) {\n    struct TreeNodeStack* stack = NULL;\n    int* result = (int*)malloc(sizeof(int));\n    int resultSize = 0;\n    struct TreeNode* current = root;\n    while (current != NULL || !isEmpty(stack)) {\n        while (current != NULL) {\n            push(&amp;stack, current);\n            current = current-&gt;left;\n        }\n        current = pop(&amp;stack);\n        result = (int*)realloc(result, (resultSize + 1) * sizeof(int));\n        result[resultSize] = current-&gt;val;\n        resultSize++;\n        current = current-&gt;right;\n    }\n\n    *returnSize = resultSize;\n    return result;\n}\n\n// \u4e3b\u51fd\u6570\nint main() {\n    struct TreeNode* root = createNode(1);\n    root-&gt;right = createNode(2);\n    root-&gt;right-&gt;left = createNode(3);\n\n    printf(\"Inorder Traversal: \");\n    int resultSize;\n    int* result = inorderTraversal(root, &amp;resultSize);\n    for (int i = 0; i &lt; resultSize; i++) {\n        printf(\"%d \", result[i]);\n    }\n    free(result);\n    return 0;\n}\n</code></pre>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#tree_1","title":"\u521b\u5efaTREE","text":"<ul> <li>1.Postorder &amp;  Inorder \u540e\u5e8f&amp;\u4e2d\u5e8f</li> </ul> <pre><code>BiTree* postInTree(int post[],int in[],int n)  {\n    if (n&lt;=0)   return nullptr;\n    int i=0;\n    while (post[n-1]!=in[i])    i++;    //i\u4e5f\u6b63\u597d\u662f\u5de6\u5b50\u6811\u8282\u70b9\u6570\n    BiTree* nw=new BiTree;\n    nw-&gt;data=in[i];\n    nw-&gt;lc=postInTree(post,in,i);       //\u5efa\u5de6\u5b50\u6811\n    nw-&gt;rc=postInTree(post+i,in+i+1,n-i-1);     //\u5efa\u53f3\u5b50\u6811\n    return nw;\n}\n</code></pre> <ul> <li>2.preorder &amp; inorder \u524d\u5e8f&amp;\u4e2d\u5e8f</li> </ul> <pre><code>BiTree* preInTree2(int pre[],int in[],int n)  { //\u8fd9\u662f\u7b14\u8bb0\u4e0a\u7684\u6211\u7684\u65b9\u6cd5,n\u662f\u5f53\u524d\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u6570\n    if (n&lt;=0)   return nullptr;\n    int i=0;\n    while (in[i]!=pre[0])   i++;        //\u6b64\u65f6i\u6b63\u597d\u662f\u5de6\u5b50\u6811\u8282\u70b9\u6570\u3002\u5148\u5e8f\u904d\u5386\u7684\u9996\u5143\u7d20\u4e00\u5b9a\u662f\u6839\u8282\u70b9\n    BiTree* nw=new BiTree;\n    nw-&gt;data=in[i];\n    nw-&gt;lc=preInTree2(pre+1,in,i);      //\u5efa\u5de6\u5b50\u6811\uff0c\u5de6\u5b50\u6811\u8282\u70b9i\u4e2a\n    nw-&gt;rc=preInTree2(pre+i+1,in+i+1,n-i-1);        //\u5efa\u53f3\u5b50\u6811\uff0c\u53f3\u5b50\u6811\u8282\u70b9n-i-1\u4e2a\n    return nw;\n}\n</code></pre>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#application","title":"Application","text":"<ul> <li>Linux dir\u300cTypical Preoder Traversal\u300d</li> </ul> <pre><code>static void  ListDir ( DirOrFile D, int Depth )\n{\n    if  ( D is a legitimate entry )   {\n        PrintName (D, Depth );\n        if ( D is a directory )\n            for (each child C of D )\n                ListDir ( C, Depth + 1 );\n    }\n}\n</code></pre> <ul> <li> <p>Calculating the size of the directory\u300cTypical Postorder Traversal\u300d</p> </li> <li> <p>\u7ebf\u7d22\u4e8c\u53c9\u6811 Threader Binary Tree</p> </li> </ul>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#binary-search-tree","title":"Binary Search Tree","text":"<ul> <li>Delete</li> </ul> <pre><code>SearchTree Delete(ElementType X, SearchTree T) {\n    Position TmpCell;\n    if (T == NULL) Error(\"not found\");\n    else if (X &lt; T-&gt;Element) T-&gt;Left = Delete(X, T-&gt;Left);\n    else if (x &gt; T-&gt;Element) T-&gt;Right = Delete(X, T-&gt;Right);\n    else {\n        if (T-&gt;Left &amp;&amp; T-&gt;Right) {\n            TmpCell = FindMin(T-&gt;Right);\n            T-&gt;Element = TmpCell-&gt;Element;\n            T-&gt;Right = Delete(T-&gt;Element, T-&gt;Right);\n        } else {\n            TmpCell = T;\n            if (T-&gt;Left == NULL) T = T-&gt;Right;\n            else if (T-&gt;Right == NULL) T = T-&gt;Left;\n            free(TmpCell);\n        }\n    }\n    return T;\n}\n</code></pre> <ul> <li>All binary trees: Equals n nodes pop sequence!!</li> </ul> <p>\\(C_{n}=\\sum_{i=1}^{n} C_{i}C{n-i-1}\\)</p>"},{"location":"note/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#complete-binary-tree","title":"\u5b8c\u5168\u4e8c\u53c9\u6811\uff08complete binary tree\uff09","text":"<ul> <li> <p>\u6240\u6709\u53f6\u8282\u70b9\u90fd\u5728\u76f8\u90bb\u7684\u4e24\u5c42\u4e0a\u7684\u4e8c\u53c9\u6811</p> </li> <li> <p>Basic Properties:</p> </li> <li> <p>\u9664\u4e86\u6700\u540e\u4e00\u5c42\uff0c\u6bcf\u4e00\u5c42\u90fd\u662f\u6ee1\u7684</p> </li> <li> <p>\u6700\u540e\u4e00\u5c42\u7684\u8282\u70b9\u90fd\u9760\u5de6\u6392\u5217</p> </li> <li> <p>\\(2^{h}\\) ~ \\(2^{h+1}-1\\) nodes\\((0,1,2,3- height = 3)\\)</p> </li> <li> <p>\\(h=O(log(n))\\)</p> </li> <li> <p>INSERT</p> </li> </ul> <pre><code>void Insert(ElementType X, MaxHeap H) {\n    if (IsFull(H)) {\n        Error(\"Full Heap\");\n        return;\n    }\n    int i = ++H-&gt;Size;\n    for (; H-&gt;Elements[i/2] &lt; X; i /= 2) {\n        H-&gt;Elements[i] = H-&gt;Elements[i/2];\n    }\n    H-&gt;Elements[i] = X;\n}\n</code></pre> <ul> <li>DELETE</li> </ul> <pre><code>ElementType DeleteMax(MaxHeap H) {\n    if (IsEmpty(H)) {\n        Error(\"Empty Heap\");\n        return H-&gt;Elements[0];\n    }\n    int i, Child;\n    ElementType MaxElement, LastElement;\n    MaxElement = H-&gt;Elements[1];\n    LastElement = H-&gt;Elements[H-&gt;Size--];\n    for (i = 1; i * 2 &lt;= H-&gt;size; i = Child) {\n        Child = i * 2;\n        if (Child != H-&gt;Size &amp;&amp; H-&gt;Elements[Child + 1] &gt; H-&gt;Elements[Child]) {\n            Child++;\n        }\n        if (LastElement &lt; H-&gt;Elements[Child]) {\n            H-&gt;Elements[i] = H-&gt;Elements[Child];\n        } else {\n            break;\n        }\n    }\n    H-&gt;Elements[i] = LastElement;\n    return MaxElement;\n}\n</code></pre> <p>Question: how to make it a natural stop without using \\(Child != H-&gt;size\\)</p>"},{"location":"note/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%88%97%E5%92%8C/","title":"Maximum Subsequence Sum Problem","text":"<ul> <li> <p>O(\\(N^3\\)) \u300c\u57fa\u672c\u601d\u8def\uff0c\u9010\u4e2a\u5217\u4e3e\uff0c\u7565\u300d</p> </li> <li> <p>O(\\(N^2\\))  \u300c\u4f18\u5316\u4e00\u4e0b\u5217\u4e3e\uff0c\u7565\u300d</p> </li> <li> <p>divide &amp; conquer O(N logN)</p> </li> </ul> <p><pre><code>static int\nMaxSubSum(const int A[],int left,int right){\n    int MaxLeftSum, MaxRightSum;\n    int MaxLeftBorderSum, MaxRightBorderSum; \n    int LeftBorderSum, RightBorderSum;\n    int Center, i;\n\n    if( left == right ){\n        if(A[left]&gt;0){\n            return A[left];\n        }\n        else{\n            return 0;\n        }\n    }\n    Center = ( Left +Right ) / 2;\n    MaxLeftSum = MaxSubSum( A, Left, Center ) \n    MaxRightSum = MaxSubSum( A, Center + 1, Right );\n\n    MaxLeftBorderSum = 0; LeftBorderSum = 0;\n\n    for(i=Center;i&gt;=left;i++){\n        LeftBorderSum += A[i];\n        if(leftBorderSum&gt;MaxleftBorderSum){\n            MaxleftBorderSum = LeftBorderSum;\n        }\n    }\n    MaxRightBorderSum = 0; \n    RightBorderSum = 0;\n    for(i=Center+1;i&lt;=Right;i++){\n        RightBorderSum += A[i];\n        if(RightBorderSum &gt; MaxRightBorderSum){\n            MaxRightBOrderSum = RightBorderSum\n        }\n    }\n    return Max(MaxLeftSum,MaxRightSum,MaxLeftBorderSum+MaxRightBorderSum);\n\n}\nint MaxsubsequenceSum( const int A[],intN) {\n    return MaxSubSum( A, 0, N - 1 );\n    }\n</code></pre> </p> <ul> <li>\u52a8\u6001\u89c4\u5212 O(N)</li> </ul> <pre><code>int MaxSubsequenceSum( const int  A[ ],  int  N ) \n{ \n    int  ThisSum, MaxSum, j; \n    ThisSum = MaxSum = 0; \n    for ( j = 0; j &lt; N; j++ ){ \n        ThisSum += A[ j ]; \n        if( ThisSum &gt; MaxSum ){\n            MaxSum = ThisSum; \n        }\n        else if( ThisSum &lt; 0 ){\n            ThisSum = 0;\n        }\n    } \n    return MaxSum; \n} \n</code></pre>"}]}